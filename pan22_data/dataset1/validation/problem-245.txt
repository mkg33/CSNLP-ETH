C++ is really a family of languages that are all in one compiler, so it's difficult to be truly a master of everything. There's a 'core' language which is a 'better C', there's an objected oriented langauge (i.e. classes, inheritance, virtuals, etc), the Standard Library (including but not limited to the STL), and a meta-programming template language. Add in the complexities of evolution from C++98 to C++11 to C++14 and it can be a bit daunting.
Personally, I'd suggest once you have the basics of C++ down, read the three Scott Meyer's books: Effective C++, More Effective C++, and Effective STL. Then read his blog for the notes on what he thinks is most important about C++11. I think his list is pretty good, but I wish he'd have mentioned std::unique_ptr which I've found to be extremely useful. You may also find the content in my article Dual-use Coding Techniques for Games useful even if you are not targeting Microsoft platforms in particular.
Being a really great coder in any language requires experience mostly learned 'on the job'. Looking at examples of code can also be a good way to learn it. You may want to dig into some existing code that has been well code reviewed by peers and generally judged to be 'good code' in terms of style. I've had lots of good feedback on DirectX Tool Kit, DirectXTex, and DirectXMesh which all make use of C++11 standards and have been though many peer reviews.
Of course, being an "expert in C++" doesn't mean much if you are not also proficient in whatever specific area of computer science or technology you are supposed to be addressing with your "expert C++" code. There's many well-known classic books in each field, so figure out which one is most relevant to your job search.
so the other day I was looking for jobs in the gaming industry (software engineer/game programmer/gameplay programmer, etc) just to get a look at what are some of the requirements. Most of these jobs require 5+ years of experience with C++, and to be an "expert" in this language. My question is, what does exactly an expert in C++ need to know, apart from pointers, STL, memory allocation, inheritance, polymorphism? Do you need to know the programming language from A to Z? Every bit of the language? Or what are some of the most important topics that you need to know in order to qualify as a "C++ expert"?