This really isn't a full answer, but apparently comments are frowned upon here. 
For the most part, the indentation, use of double quotes and whitespace around operators seem consistent. There is one place (see below) where you continue an expression on the next line. Someone glancing over the code can assume that randExtreme() is it's own call instead of part of the previous expression. I would recommend adding extra indentation when continueing an expression on the next line.
Never ever use eval. Eval allows for arbitrary code execution. Even though you create the elements yourself, you cannot protect yourself from elements that are created by something else elsewhere on the page. Always use an alternative. In your case you can precompute the result and store it in a data-attribute.
You are using classes for elements you expect to only have at most 1 of. Use id's instead for elements that should only ever appear once.
In incrementLevel(..) you abuse the switch-statement. The whole point of the switch statement is to use an appropriate case for the variable in the head of that construction. You should use an if-elseif-else construction instead. In that case you can remove several conditions too, considering that score < 10 is guaranteed to be false if score < 20 is evaluated. Why are you not using Math.floor(..) and division to calculate the level number?
Styling is the task of CSS. U can use HTMLElement.style to change the style of some things via javascript, but generally you should not do this. Consider using an Array of possible classes you can use for the blocks, and randomly select one to add. Then put the styling in your CSS. Put common CSS in it's own class and apply that regardless.
See @BarryCarter's answer for more information on that.
I notice that you are using jQuery in your project, but only in very specific situations. Why use $(".exp1").text(), but use scoreIndicator.innerHTML instead of $(scoreIndicator).html( .. )? Consider using more jQuery if you want to use jQuery, or transform the remaining bits to plain javascript.
You are loading hundreds of numbers into arrays for a series of functions that generate an integer between a continuous interval between a lower bound and an upper bound. You can replace this with a single function that takes a lower bound and an upper bound. To make it inclusive, you just need to increment max with 1.
From a usability aspect, white text on a yellow background is impossible to read. Similarly, it is harder to read moving text than it is to read static text. To signify how much time is left, consider using something like a progress bar instead.