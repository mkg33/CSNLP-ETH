Since your map is a grid of fixed size and all you want is "has been visited", for the first part you can use a bit-map.  For a 1024x1024 grid your storage size would be 128K and very fast to look up and small enough to keep in memory if you need super fast access (for fog of war rendering, or info overlays).
The quest info could be done two ways.  It would be pretty easy to store them in a database and run queries as needed, and probably the best solution overall, @Dan Grossman
The other method would be to generate a hash from the quest information then simply store a list of hashes that the player has completed.  Storage would grow dynamically, hash lookup at run time is very fast, and new quests could be added whenever you wanted.
A database is an excellent tool for something like this, storing it in any other way would force you to (partially) recreate what a database already solves for you. As was mentioned by Dan in comments, using a relational table that maps the players id to the cell id that has been visited is a good solution. Databases are built for just this sort of thing and querying it for if a cell has been visited is a fast operation.
If database storage is costly for you (which it might be on a hosted solution) you can consider compressing the number of fields somewhat. In the case of "has this cell been visited" you would normally be forced to travel through the areas sequentially, so to get from A1 to A3 you would have to pass through A2 (or go a path around A2 depending on terrain).
You can use this fact by storing strips into the database instead of each cell individually, for instance (player, row, firstHorizontal, lastHorizontal), this way you can find out if a player has been in a cell by:
The update method would be more complicated in this case however, you would have to look for a strip that is next to the current cell and if one is found, update either first or lastHorizontal field as appropriate, or if one isn't found you add a new strip where first and lastHorizontal is the current location.
Quests can be solved in a similar way, (playerID, questID, progress), progress can either be a foreign key to a "QuestSteps" table or you could go the oblivion/skyrim approach and store a number from 0 to 100 for every quest that maps to what you have done so far, for instance:
Again, if you wish to reduce the number of fields per player you can lump quests together by area, in many cases the player would probably finish all quests in a region before moving on to the next. In this case you can have a RegionCompleted (playerID, regionID), while a player is working on the quests in a region this is blank and you check the "QuestCompetions" (playerID, questID, progress) table for each individual quest, once all quest are completed however you add a row to the "RegionCompleted" table to mark this, and then remove the rows that correspond to that region from the "QuestCompletions".