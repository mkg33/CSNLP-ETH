Yes.  The CA in your case would have to be private.
If you think about it, I could also have a service called hello-world.production. As a public CA would be in the trust-anchor store of most/all clients, if a public CA issued a certificate to both you and I, clients connecting wouldn't know who they're connecting to.  A public CA can only issue certificates to entities which are globally unique. Commercial CAs generally rely on the global uniqueness of DNS or email addresses (depending on certificate usage) for this.
Your private CA, on the other hand, will only be in the trust-anchor store of your clients, and it'll only issue certificates to your instance of hello-world.production.  If your clients somehow try to connect to my instance, it will fail as I won't have a certificate issued by a private CA your clients trust.
There are many ways to distribute a certificate to a client's trust-anchor store:  
If you don't want the trouble of running a private CA, you could consider a managed private CA.  AWS, Digicert, Entrust and Sectigo provide this service at a cost.
I really love AWS Cloud Map (Service Discovery in AWS). It integrates with the AWS DNS to make service discovery very simple. Just register an instance of a service and you can discover the service via normal DNS resolution. For example curl http://hello-world.production would connect to a production instance of the hello-world service. Great.
My problem is that I want to secure my traffic between my microservices using HTTPS. However, how would I generate a certificate/key for something like hello-world.production? Is a private CA the only option? I know AWS has support for that but would I need to inject the root certificate for my private CA into all my micro-services? Ideally I would avoid running a private CA. If that's the best way, is there a way to ensure all my internal services have the CA's root cert?