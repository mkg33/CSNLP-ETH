The OOM killer only wreaks havoc if you have overloaded your system.  Give it enough swap, and don't run applications that suddenly decide to eat massive amounts of RAM, and you won't have a problem.
Basically, my experience is that turning off overcommit is a nice experiment that rarely works as well in practice as it sounds in theory.  This nicely corresponds with my experiences with other tunables in the kernel -- the Linux kernel developers are almost always smarter than you, and the defaults work the best for the vast, vast majority of cases.  Leave them alone, and instead go find what process has the leak and fix it.
The OOM killer on Linux wreaks havoc with various applications every so often, and it appears that not much is really done on the kernel development side to improve this.  Would it not be better, as a best practice when setting up a new server, to reverse the default on the memory overcommitting, that is, turn it off (vm.overcommit_memory=2) unless you know you want it on for your particular use?  And what would those use cases be where you know you want the overcommitting on?
As a bonus, since the behavior in case of vm.overcommit_memory=2 depends on vm.overcommit_ratio and swap space, what would be a good rule of thumb for sizing the latter two so that this whole setup keeps working reasonably?