Darn, at first glance this looked like a simple solution but you ruled out constructor injection.
The only suggestion I can come up with is to have a class that inherits from the same interface, DOES have the constructor injection is built up and added to the main object as a composite object fed in through a set only Property, maybe some kind of flagged function call like 
Then in your Complete function you could throw an exception if HasBeenInitialized is false. 
You would then have access to your composite different parameters in your complete method while keeping your abstraction, 
albeit with the caveat that your initialization is now a two stage process, that requires an initialization call;
*ps, no I do not propose that to be an actual argument name!
In my code I have a base type which is OnlinePaymentTransaction:
The problem I am having is that each class that inherits from this base class require different dependency's in the complete method. Currently I have just added the dependency's as extra parameters to the complete method which doesn't seem right. For example my base class is now like this. 
I cannot inject the dependency's in the constructor as the OnlinePaymentTransactions are retrieved from using nhibernate.
What would you recommend because I don't like using ServiceLocator as it hides the dependency and also makes it harder to test. An suggestions would be greatly appreciated.