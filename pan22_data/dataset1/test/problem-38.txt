Instead of having two separate if statement checks, this can be combined to check the NetworkState as well as call and check getStatus(), checking both conditions with an AND (&&) operator.
Be careful regarding white-space. Sometimes I see random newlines in your code. For the sake of readability -- it is beneficial to add newlines to separate parts of your code. But, use them sparingly, don't put newlines in random places where they don't belong, as that breaks the structural uniformity of your code.
Stick to one style for single line method bodies. In some places, you are doing this:
personally, I and majority of Java developers would recommend the first style. But whatever you decide on going with, sticking to one particular style is the most important thing.
When you are writing a larger codebase, it's immensely important to keep structure in your code. Otherwise, reading over parts of the code become more difficult.
Please let me know if you have any other questions, or would like more help understanding any part of my answer. Thank you & welcome to the CoderReview community!
Should only have the responsibility of a View to show the data or navigation to other screen by action received by viewmodel.
So any data storing or network related access shouldn't be here,
The following storing data task in LoginFragment can be done in UserRepository itself as this responsibility lies within that class. On success of the api call you can directly store that in SharedPreferences.
Rather than observing network state after doing login, just observe the ui state from the viewmodel in onViewCreated(). Why does view needs to bother about network state or other state? view just need to do the things which viewmodel asks it to. Doing navigation or showing error based on network or any logic is to be determined by the viewmodel.