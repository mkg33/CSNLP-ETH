The problem you are referring to has to do with the camera's view volume clipping through the water plane; typical "underwater effects" are done via full-screen post-process effects, and wouldn't look correct if the view is clipped like this (it would just be the opposite problem).
Even if you do bother to detect the clipping case (potentially difficult) and scissor or clip the otherwise full-screen underwater effect so it only applied to the underwater scene (which is a potential solution you could explore), you'd still have the problem of the actual water plane itself. The transition there would still be a jarring visual artifact. You could detect that plane and blur it heavily; this is probably the closest you can get to a real-world analogy of what the view may be through a partially-submerged camera lens.
Alternatively, prevent this from happening entirely: don't let the camera go below the water plane if the player is "above" the water or above the water plane when the player is "below" the water. This will only really work if you have discrete player operation modes for above/below water, and works best if there is a physical button or other clear and obvious action the player can take to transition between "swimming on the surface" and "swimming below the surface."
Instead of an explicit keystroke to dive, you could interpret forward motion while the camera is pitched down sufficiently to mean "dive." You can then use a graphical effect (splashes or whatever) to hide the camera's transition through the water plane, which it would normally not be able to cross.
I have two methods; One uses a shader, the other one could use a GUI. Both will start the same:
"Simplified" -  If, Object(Camera) is in 3d Space(Water bounding box/whatever you choose) trigger a shader/GUI.
Shader will give more realism, you can apply a distortion Like This one
Fog Like Com. Boy stated, can be applied through GUI. Create a photo, with a partial transparency and use it as GUI on the entire camera view. For the photo you supplied I would try a brown colour. 
This has been used in a horror game called Drea D Out. If the player approached a ghost, the screen would turn foggy. Although it wasn't used under water it gave a similar effect :)
You can always choose both methods, or make a shader that would change the colour.