There is just a little bit what I would change, namely the "default" rule of the Validator<T>.
If you ever would have the need to validate that a passed T obj is null you couldn't do it with the Validator<T> in its current state. 
Maybe having a "default" rule as a property would do the trick.
First, IsValid(obj) may return true on null, whereas Validate(obj) has a special check for null. I would rewrite IsValid this way:
Second, your regex replacement might produce odd results in certain cases. Consider:
The regex will match two occurrences of "e." in that lambda. You might want to beef up that regex. Alternatively, what I would do is reduce the cleverness, maybe display (Person e) => e.FirstName.Length instead.
Which reminds me, this is also a valid lambda expression:
Will your string manipulations handle that also? You might want to forego the string manipulations altogether, as there are probably more corner cases (method groups come to mind, but the C# compiler might handle those).