Was your interviewer perhaps botherer by the fact that you did not handle type conversion?  When mapping those values to an object, you make and implicit cast of the numeric value to a string, so if you are later asked to output the original values with tally for each, you might have needed to convert back to numeric.
In regards to the original question, I would point out that you are using a general for loop, yet there are other more succinct ways of building this logic.
Perhaps we could assume, that an interviewee that leverages more of the available language is more qualified for a development position.
As a developer on a large project, if I kept running into for loops all over the stack instead of MAP, REDUCE, FILTER, etc... I would voice that some training is needed;
Below is my answer to Joseph's comment to post an answer. I am posting two, one with MAP and one with REDUCE.
var array = [1, 3, 7, 9, 3, 1, 6, 3, 3, 2, 11, 2];
console.log(array.map(countDuplicatesMap, {}).pop());
// REDUCE -----------------------------------------|
console.log(array.reduce(countDuplicatesReduce, {}));
After comparing both approaches of MAP and REDUCE, I would go with REDUCE as shared by Joseph The Dreamer. Using MAP we get an array back that has a pointer to the collection object, but for each element of the original array, thus the POP(), whereas with REDUCE we are only left with a simple object.
NOTE: I reduced the ternary slightly by using the "prefix increment operator".