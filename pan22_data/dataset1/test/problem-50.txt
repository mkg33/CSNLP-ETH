Since the short_url is a keyword, maybe refactoring the query could be a game changer
Start with getting the top 10 keywords whose count > 50
The worse part is the KW subquery. If KW performs fast, the rest of the query will perform fast
I bear bad news. I've studied your tables and your query and looked at many variations on them, ran them against a synthetic data set approximately the same size as yours. And I'm sorry to report that I'm 98% sure that your query is nearly optimal and that you already have the right indexes in place.  I welcome anyone who can disprove this and come up with additional indexes + rewritten sql that can significantly improve performance.
You're doing OLAP. Your query seems to be doing aggregation over about 5 million rows.  Normally if I see a query doing a full table scan or a wide index range scan, I would suspect that indexes might not be optimal unless (big unless here) you're doing an aggregation (such as COUNT, SUM, AVG, etc), then there's no way around accessing all those rows since you need to compute on them.
I don't believe you are going to get significantly quicker results simply by adding indexes and rewriting the SQL alone.  You'll need to incorporate some other approaches:
Bigger picture, it looks like you're using a RDBMS (MySQL database) to do real-time keyword/click analysis. However, I don't believe an RDBMS is ideally suited for this task. Big data and stream processing are really becoming hot on this exact problem. The following search might get you in the right direction:  http://www.google.com/search?q=stream+computing+real-time+click+analysis 