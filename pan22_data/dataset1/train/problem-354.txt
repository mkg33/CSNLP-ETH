Depending on how you're running git, redirecting stdin or stdout so that they are not connected to terminals will stop git from prompting for details and just cause it to error.
This would also allow you to surface errors (or at least logs) to the webservice.
git clone -c core.askPass $echo url/or/path/to/git/repo
The configuration core.askPass works by passing the control of handling credentials to the aforementioned program. However since $echo cant do anything except output, the clone attempt promptly fails and respective bash redirection applies. This code is only invoked in the event that the git repository happens to be private, and will pipe error output stating that authentication failed for the particular repository. You can test this against the https://github.com/git/git public repository against a private repository you know about. 
To sweeten the deal, you wouldn't even need to reference a program like echo in the first place. Simply passing git configuration -c core.askPass with no following input would still cause failure in the event the repository happens to be private as the code will not know what program to offload credential handling to. While this is certainly an older and simpler method than the others mentioned here, I do not know if it will have the same effect in older versions of git.