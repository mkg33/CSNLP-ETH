I think that's fine - how else were you going to do it? Metz does exactly the same thing doesn't she? When successor is called a new bottle number - 1 is created - unless of course the bottle number is zero, in which case you start right back at 100.
I don't like this. Why? Because every time you need to instantiante a bottle you need to KNOW what goes in there and you also need to know the order in which the arguments go in. You could eliminate the need to know the argument order by passing in a hash. That's probably the only bit of criticism i can add.
for this particular problem, inheritance seems like a better fit. it just seems a lot cleaner than dealing with the messiness of passing in those parameters.
anyways those are just my thoughts and i hope you find them of some use.
I read 99 Bottles of OOP, and one of the offhand comments was that doing the 99 bottles problem with composition was another route that one could take (the book used inheritance).  Here is my attempt.  Here are the lyrics needed: Beer Song
1) Implementation of successor was tricky.  I could not simply pass in a successor object because then BottleNumber(99) needed to hold BottleNumber(98) which needed to hold... Instead I used successor_number and generated a successor when needed.  
2) Factory seemed messy - the arguments for the initialize method stacked up and up.  Named arguments only made things longer. Sometimes I had to implement a default_object and other times I could use default named parameters.  Should this be standardized throughout?  