You could eliminate some of the many dependencies:
The add_sleeps function could be written more compactly:
you used helper functions get_guard and event_type.
It would have been good to do the same for the time too.
The last_sleep attribute doesn't belong in GuardSleep.
It's an implementation detail of the parsing of the lines,
Instead of string concatenation like "foo " + str(bar),
The input would have allowed some simplifications.
For example, alphabetic sorting of the lines gives the same results as sorting by time.
And, it seems all the "falls asleep" and "wakes up" events happen in the 0th hour.
As such, you could just parse the minute instead of the entire time:
I'm using Advent of Code 2018 to learn Python better, interested in the new type support for Python 3.7, I decided to go with that.
Here is my solution to Advent of Code Day 4, both part 1 and 2. I'm returning the answers for both part 1 and 2 as a tuple.
The problem essentially boils down to: Given a timestamped unsorted list of events of guards beginning their shift, waking up and falling asleep, determine the following:
Part 1: Which guard is asleep the most and on which minute is that guard mostly asleep? Return guard id multiplied by the minute number.
Part 2: Which guard is most frequently asleep on the same minute? Again, return guard id multiplied by the minute number.
For full problem description, please see Advent of Code Day 4
I'm a big fan of Java 8 Stream API and C# Linq, I kind of expected Python to be more like that. I'm not sure if the nested function calls like sorted(list(...)) or len(list(...)) are "Pythonic". Likewise, it feels like I should be able to use some reducer-like function calls instead of imperatively looping through stuff to find the most common sleeper of some kind. Or is the way I have written this code the Python way to do it?