The easiest way to do this and find the literal "end" of a dead end is to count the walls. This is presuming that you cannot have loops and you define walls for your cells.
Iterate through your cells and just find all with 3 walls as those are the only cells which are a dead end, as the can only have one exit it must have only 3 walls.
There are multiple way you can write this. It just depends on your personal preference and if you are wanting visuals to the implementation of the algorithm. An example is you could have all squares in the grid in an array and have a variable move throughout the array in whatever fashion you find fit. If it finds a square labeled "e" it is at the exit, if it finds one labeled "d" it could be a dead end. In this example you would have to marl the starting position as well so you know not to include it as a dead end.
So essentially you'd just have to have the algorithm move throughout the array determining if the square that it is currently in is part of the maze, if not then move back. Continue that until it has made it through the grid. Just make sure you are only mov ok no from squares adjacent to one another which is easy enough. If it finds that it cannot go any direction but back from where it came then it can mark it as "d" for dead-end unless it has made it to the exit.