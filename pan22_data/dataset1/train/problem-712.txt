I think I'd start with creating some kind of basic set of rules every designer has to follow.
I'd do this with programmers and artists together so both can give you input and you try to find the best compromise between beautifull artwork and usable art.
This set would contain all the "rules" for creating optimized art which doesn't look crappy and is programmer friendly, but also doesn't look extremely well but loads to slow due to huge file size etc.
If your artists can follow this, there is no need to refactor the animations etc later on.
It can be very usefull to have a dedicated "art preparer" but it seems quite expensive.
I'd try to create more understanding on both "teams" and better define the possibilities and impossibilities to both sides.
The flash games I've been working on recently (isometric browser games where players get to build their Farm, Park, Zoo, Whatever) used a combination of animated SWFs, spritesheets, PNG's and procedural, bitmap-filled API rendering. 
Only the animated SWFs were authored in Flash by artist, the rest of the game, as far as Flash is concerned was created in Flex Builder by programmers. 
To get the assets into the project we set up an asset pipeline generating and compiling code that would make heavy use of the [Embed] tag but saved us the hassle of embedding assets manually. Here's some additional info if the idea interests you.
Performance issues related to assets are quick to resolve that way. You just tell the artist responsible for a problematic asset to redo it. We didn't care for how messy their FLA's were as long as the exported SWF would look good and be reasonable in size and performance.