Since cisc/1 is unused by your current code, you should either delete the definitions or check in prereq that the given course numbers are indeed CISC courses.
I wonder how long your code takes to find the prerequisites in the following pathological case, and whether it reports any duplicates.
This means that there are \$2^\text{levels}\$ possible paths in the graph. Visiting them all would take a considerable amount of time.
In my opinion, your code would benefit considerably from a better naming convention.
In Prolog, a good predicate name makes clear what each argument denotes.
then I have no idea what the arguments are. I see it is about prerequisites, but in which direction? Is 460 a prerequisite ofÂ 233, or is it the other way around? Also, why is this called "prereqs" although each clause only denotes a single prerequisite?
A much more descriptive name for this predicate would be (for example!):
because this makes clear what is the prerequisite of what. Another very good, descriptive name would be for example:
You will find that, if you use more descriptive names, then emitting output yourself will become unnecessary: The predicate name alone will make the situation perfectly clear. Let the toplevel do the printing for you!
could also be improved considerably by choosing more descriptive names or abbreviations, such as Req, Course etc. For transitive relations between courses, you can for example use:
Course0 &rightarrow; Course1 &rightarrow; ... &rightarrow; Course