You're overthinking the problem and conflating a couple of issues. But that's okay because, as you said, this is a very solved problem with lots of great answers out there.
The problem lies in your method of collision resolution. Your method goes as follows:
The problem with this, is that it can easily move the player in the wrong direction. You can see how this might happen in the image below:
Because the player is moving down to the right, and is above the ground, you would expect the player to land on top of the ground (by the green box). But instead, it gets pushed out of the ground to the left (represented by the red box). This can be a problem if the player is trying to jump from one platform to another, because the player may end up falling to his death due to bad collision code.
The solution to this problem is actually pretty simple. Instead of using the above method, you resolve collision like so:
Now I hope that you didn't throw your depth check code away, because you are still going to need it for steps 3 and 6.
To resolve collision between tiles on either of the two axes (after moving the player), you first get the depth of the collision. You then take the depth of the collision, and subtract that from the axes that you are currently checking for collision. Note that the depth should be negative if you are moving to the left, so that the player moves in the right direction.
Using this method, you will not only not have to worry about collision bugs like the one in the scenario in the above image, but this method also can handle collision with multiple tiles.