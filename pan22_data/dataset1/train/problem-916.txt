As Oracle is responsible for creating both, it's clear that it will ensure
that its clients will have good reasons for paying, and performance is the obvious
I believe that OpenJDK is interpreter-only JVM. This is easier to port
as it has no architecture specific assembly code but, unfortunately,
OracleJDK I think takes advantage of the platform's floating point ABI
It might also have some amount of platform-specific code to make it faster.
but I have no knowledge if it is included in OpenJDK.
does not mention JIT and I did find this old and troubling issue
If OracleJDK today includes a platform-specific JIT compiler,
but OpenJDK does not, that might well explain the difference in performance,
As for Java 11, the differences are basically the installer, crypto providers (signed vs. unsigned), and a few command-line options for advanced management and migration from earlier versions, as explained in this Oracle blog post: https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later
Earlier versions had a few additional differences: they had other 2D, font rendering, serviceability/management, and crypto libraries and that could cause performance differences, as explained here: https://www.thegeekdiary.com/openjdk-v-s-oracle-jdk-differences-between-openjdk-and-oracle-jdk/. Memory management and class data sharing could be the reason for different performance characteristics too.