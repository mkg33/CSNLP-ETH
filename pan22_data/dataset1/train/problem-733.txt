First, there is much easier way to setup Rpi as access point.
https://www.youtube.com/watch?v=RvOyafQeOoY&t=134s
I would prefer either wireshark or tcpdump tools on Rpi.
There is Network packet crafting and the sniffing tool called SCAPY.
It has a Python framework as well to use. Both command line tool and Python libraries are users friendly.
To exchange data between two (or more) devices you need a program on both sides. There are many possibilities to do it but it is to broad to explain them in detail here. But I will tell some general examples to give an idea. First of all: to connect to other devices on a network you do not use mac addresses but instead ip addresses. With ip neigh show (or deprecated sudo arp) you see in the first column the ip address. You must use this one.
The classic model to access remote data is the client/server model in contrast to a peer to peer connection or multicast (or others). You have do run a server program on the device acting as server. This program is mostly started once at bootup and then runs still in the background waiting for requests from clients. Examples are a internet server you connect to with your internet browser as client or a Secure SHell Daemon (sshd) you connect to with ssh or scp as client or a NFS server resp. Samba server that provide network shares you can connect to e.g. with the mount program as client and use as normal directories to read and write data.
To use this in python there are specific modules which support any aspects of this data access. You have to import them and use its functions and classes to manipulate remote data.