You are visiting every node to check their chain, but if they've already been visited by a previous chain they don't need to be checked again.
So you can have a single "visited" HashSet outside the main loop which can be used to check whether they have been visited in the outside loop and used to break the inside loop. 
Then in each of the outside loop iterations you can continue if you have previously visited.
Note also that you don't need to return and store the actual cycle, just the length.
You don't actually read this at any time.  So you can delete this line and 
This is difficult to read.  Because you put both statements at the same level of indentation, the natural reading is that you always return here.  But this is actually a conditional return.  
Then there's no confusion about whether the return is conditional or not.  
I would actually prefer to always use the block form.  
This way we expect that what starts with an if will end with a }.  Always the same behavior rather than an individual behavior for each.  
There are also certain kinds of editing errors that the block form makes less likely.  
Also, your indentation is all over the place.  Sometimes you indent four spaces.  Other times, you indent two or three spaces.  You should pick one and stick to it.  The Java standard is four spaces, but the most important thing is to be consistent in your program.  
The add method calls contains or its equivalent and immediately returns false if contains would return true.  
Set includes a size() which returns the same information as you track in count.  So you can just say 
Functionally it doesn't matter, but it's often easier to read a for loop than a while loop.  
Now we can easily see that we are iterating j until we encounter a node that we've already seen.  
I started the cycle at i rather than A[i] to simplify things.  
You are calculating the cycle length separately for each cycle.  This means that the worst case performance occurs for arrays of the form { 1, 2, 3, 0 }, where the cycle includes the entire set.  That gives a quadratic worst case time.  The best case is linear, e.g. for { 0, 1, 2 }, where each element points to itself.  
Given the problem space, you don't need a Set.  You could use an array instead.  This will work because the indexes and the values are from the same space and both unique.  So every index is present as exactly one value.  Each and every element is part of some cycle and only one cycle.  Of course, if you use an array then count is necessary again.  
This returns the same result, but it will run in linear time, even in the worst case.  The difference is that it only visits each element of the cycle twice.  This is because once the inner loop marks something as visited, the inner loop will no longer process that item.  
The original would visit each element of the cycle R times, where R is the number of elements in the cycle.  In the worst case, R equals N, the number of elements in the input.  
The name visited is clearer about what the variable holds than tempSet.  
By declaring visited outside the loop, it keeps us from forgetting what we have already learned.  