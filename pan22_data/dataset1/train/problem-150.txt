A zombie is already dead. Don't think of a process, think of it a process slot only.  There is nothing to kill, so kill -9 works as well as kill -1, meaning nothing.
They're waiting for the parent to reap them. If the parent doesn't for some reason, and the parent doesn't tell the kernel to not generate them, they're left as zombies. 
In traditional UNIX, pid 1 is init, which always reaps children. I think launchd is coded the same. If you have zombies with PPID as 1, you're pretty much out of options at that point, other than rebooting.
There is no way to do this, unfortunately.  The zombie processes are usually benign because their parent will reap them eventually and they don't consume resources... but they do contribute to the maximum process count your system will allow (I think this depends on the amount of RAM installed in the computer, but I can't find documentation for this in Lion).  The JVM instances were owned by launchd (PID 1 on the Mac) and there's no safe way to kill launchd and have it restart without also killing all of launchd's children.  Which would be everything minus the kernel.
This may apply to any runaway LaunchAgent; the processes would all be children of launchd, and that would bring the same issues I had in to play.  I don't believe that every JVM instance launched by every bit of Java code is spawned by launchd, but it juts so happened that CrashPlan uses Java and so I had those littering my system.
I guess the lesson to be learned here is: don't fork bomb, and keep a Terminal window handy.  A restart cleared up the zombies, so all's good.