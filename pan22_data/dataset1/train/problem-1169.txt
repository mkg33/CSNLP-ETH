You should look at using the strlen() function.  Use sizeof(str) so you don't have constants in two places.
For your loop:   Put everything in the loop iteration portion.
You initialize some variables inside and outside the loop, better if it's all in one place.
Outside of <iostream>, your code looks like C rather than C++. That isn't necessarily bad, since you're dealing with C style strings, but you could also consider alternatives.
The function seems to take an array as its first argument, but it's actually completely equivalent to:
So you don't need to use array indexing and may as well manipulate pointers directly, which is more traditional, concise and readable:
Since you use std::swap, you could as well use other small C++ language or library features (conventions included):
Since std::swap(*first++, *last) can be replaced by std::iter_swap(first++, last), you could have chosen the latter, which is arguably more readable. That substitution is possible because pointers are iterators in C++. Which also leads us to what an in place reversing function  would look like in C++:
This is rather interesting, because it can reverse a vector or a list as well, or anything that has a bidirectional iterator interface actually. It will soon be possible to constrain the argument type with a concept (voted for C++20):
If we are given a c_style string and its size, we can then call reverse this way:
Of course, it could be better to use a RAII container over a C string, but since it's part of the question...