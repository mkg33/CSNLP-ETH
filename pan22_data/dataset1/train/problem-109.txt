SDL + OpenGL is an excellent choice to start up a custom game engine.
I personally use a C-ish version of C++ because I found out that works the best for me.  By that I mean I don't use any exceptions.  There are two reasons for that: first and foremost exceptions require exception safe code all the way down which with OpenGL and SDL is not exactly easy to achieve.  More importantly however this way it's very easy to expose C++ objects over the C ABI which is incredible helpful if you try to bring a scripting language into the mix.
I'm in a similar boat than you are and I wrote down some of my adventures with SDL and OpenGL in a blog (immersedcode.org) in case someone else is interested.
For the general architecture I have two suggestions: if you want a 3D engine check out the book "Game Engine Architecture" by Jason Lander.  If all you want is 2D, keep the design as simple as possible and let yourself inspire by XNA or other projects.
Lastly: do not call OpenGL all over the place.  Do yourself a favor and isolate it into a couple of places so that you have the ability to switch between desktop OpenGL/OpenGL ES or even DirectX at a later point if you want to.
Don't use C unless an implementation detail holds you to it at gunpoint. Otherwise, use C++, because it's flat out a vastly more capable language, and you can always choose not to use those capabilities later. I personally have nothing for/against Python, I've never used it.
I wouldn't recommend OpenGL against DirectX because DX has a modern object-orientated approach, which is far cleaner and more understandable/less error prone. The interface offered by OpenGL is extremely poor in comparison.
The last thing I've got is that I've heard from many people I trust that GDB utterly, utterly sucks and the Visual Studio debugger is by far and away the best. This is not my personal experience so take it with a little salt.