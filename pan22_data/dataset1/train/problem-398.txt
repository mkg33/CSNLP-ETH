I'm not sure about the fact that Severity is public set. As a client of your code, who am I to say that ImplicitByRefParameterInspection has a severity of X when you, as the dev, who knows his stuff, said it had a severity of Warning.
I think your interface should expose only the getter on CodeInspectionSeverity Severity.
I'm not part of the project but I have a hard time to see a scenario where you would want to set the severity of an IInspection. Since it is an abstraction, you can't tell how severe it is.
(I think) You want to set the severity of an implementation of IInspection.
If I turn this into code, it would look like this : 
This way, I (as a client) can know the severity of an inspection, but I can't set it, and it is a good thing, since I have absolutely no clue what it should be.
will be optimized by the compiler to a call to string.Concat, exactly the same as above. It's also more readable, so you have nothing to lose. You can read more about it on Eric Lippert's blog.
The methods PassParameterByRef and PassParameterByVal are identical except for one variable, and could (unless you're planning on changing them) just call in to a common method.