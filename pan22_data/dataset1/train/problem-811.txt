When you write a program, you try to express your ideas in a way that the compiler underÂ­stands it and builds you an executable, that works as you intended. However, the compiler is a second-hand consumer. They will gladly take any code that is valid C++ and create a binary. The human, however, might not.
As humans, it comes naturally that we organize the material we work with. Clockmakers will have their screws and drivers sorted, plumbers their wrenches and helpers. Mechanics have their bolts, nuts and gears ready in bins and cans, just a handful away. 
And we programmers, coders, C++ magicians? We can do what they cannot do that easily: we order our work itself. We partition it with functions and methods, we bundle our variables into single structures, we split our code in files, each meaningful on its own. We model our ideas into the very code in such a way that their interesting, clear, and not too repeating.
Now, let us delve head-first into your fantasy world and see how we can improve it.
I don't know which compiler you use, but the compiler already tells you what might be wrong with your code:
You're writing C++, therefore, you should include the appropriate headers. Instead of time.h, include ctime, instead of stdio.h include cstdio, and instead of stdlib.h include cstdlib:
Your compiler should have told you that you never actually use warrior, mage, rogue or priest. But even then, you have all those values scattered around. Is HP always the player's HP? Is attack the amount of attacks the player has left?
There are several ways to structure your character, but should give you a first idea. That way, you can have your player defined right of the start:
You saw the example above already: player_creation. We can use functions to make the game easier to read and to extend. For example, all your prompts might not work at the moment. What happens if the user inputs a 6 at the start? Or even a letter?
Instead of handling that error at every occasion, let's write a function that covers that:
Also, if we have a fight, we can "hand over" the player to our function with reference semantics*:
We can even write a function to create the player at the start of our adventure:
* Please note that you would usually change Player into a class and use methods. I'm not sure whether you're ready for object oriented programming yet. This is basically the C-way of object orientation, which may or may not be easier for you as a first introduction.
srand should be used only once in your program, and before the first rand call. Just use it as first thing in your main.
This was a small intermission to get you ready for the next section, which is rather important.
There's usually no need for goto if you've followed my second-to-last advice and split your game into several functions. You should always avoid goto. goto makes it hard to reason about the program flow.
Your player has essentially one action. They have a choice, which either determines the next scene, or their action in the fight. A scene here can be thought just like a scene in a play.
You do already think in scenes. It's those bits and parts where you use switch and case and the dreaded goto labels, for example the tavern:, so you're already on a good way.
However, if you want to change those scenes without recompiling your program all the time, you probably want to move most of the text out of it. You could even specify the choices and the enemies in text files, but that's a little bit out of scope for this review.
You really need to structure your code into separate sections. Functions would provide a first way. However, when you start to do that, your code will probably get larger than it already is. Vertically that is. You have around 650 lines in a single file at the moment, and if you structure your code, you will probably have over 1000.
At that point, you want to split your file into several ones. Maybe you want to put the fighting logic into another file. Or the character generation. The scene-handling? It's up to you.
By the way, your lines are currently too long. But that will probably fix itself as soon as you use functions.
Right off the bat, I would suggest learning about Object Oriented Programming.  Each character type should be a separate class, each with its own set of attributes, probably inherited from a main character class.
All that code in main, should be pared down to a bunch of functions.  right now everything is so intricately dependant, that any changes you try to make will be nightmare