You have folderPath.insert(0, fname) in both the if and the else, at the end of each.  Remove duplicated code like this and place it after the if/else:
Your code does not follow PEP8 standards.  This is the recommended style guideline for Python, and most Python programmers follow it.
d is not a descriptive variable name (def makedirs(d):), not is f (with open(filename,'w') as f:).  You use good names in most other places, so please be consistent.
You do not need to compare a value to False or True: if said_it == False:.  Just use if not said_if:.  Again, you do this in other places in your code.
You're doing something wrong. Just calling raise with no additional useful info is not helpful. Preferably, you should do one of the following:
This will add quite a bit of clarity to the user of your program. Instead of the program just crashing, it will give them a useful message, telling them what went wrong.
And calling f.close, is not how this should be done. file.close doesn't properly close a file, and since opened files are unmanaged resources, you generally want to close files properly once you're done using them.
To do this, you need to use a context manager with the with statement, like this:
This eliminates the need to call file.close, and the file is properly closed. This means that resources are properly freed.
It's a horrible code smell, and it's completely unnecessary. If you separate your top-level code/functions/classes with two blank lines, you're fine.
Your variable naming is also very inconsistent as well.
You should also have whitespace between mathematical, binary, comparison, and assignment operators. This will add additional clarity, and readability to your code.
It's also best practice to avoid wildcard imports like this:
I'd recommend that you read PEP8, Python's official style guide.
You should also be using docstrings. This means that a comment above a function, like this:
Should become a docstring. A typical docstring usually has a structure like this:
Docstrings can also be used on classes, and at the top of a code file.