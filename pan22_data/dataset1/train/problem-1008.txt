The function of the backslash is to be a separator, so multiple consecutive
backslashes still only separate and cannot create new components.
Meaning that \\ cannot create a new empty component - no path component
Most operating systems allow the inclusion of multiple slashes between file name or directory components of a file path. This is true of both Windows and most *nix operating systems. The only exception is slashes used in conjunction with a UNC,
where only two backward slashes are allowed with the UNC (\\?\UNC\).
In most cases, they are simply being ignored during parsing. However, this depends entirely on the program/system doing the path parsing.
As given by @r-greenstreet, this StackOverflow question has a comments sections that points out at least one exception to this rule in Windows as dir c:\\. In that case, dir c: and dir c:\ work properly, whereas dir c:\\ does not (i.e. the second \ directory separator causes a parsing issue).
Regarding URLs (which are typically parsed by a web server and effectively have little relation to the underlying OS), there are similar exceptions as pointed out in another Stack Overflow question. Particularly, multiple / path separators can interfere with internal URL rewriting and relative paths.
I am fairly confident that (only) blank spaces cannot be valid directory names in Windows, so I would imagine most parses (for Windows at least) would take this into account. Note that the extra separators are not necessarily treated as "blank" names either â€” "C:\path\to\some\\folder" will likely work while "C:\path\to\some\ \folder" will likely not.