With the second option you will end up with the first one anyway but this is implicit and so not necessarily obvious to all potential consumers.
(SQL Server always adds the clustered index key to all non clustered indexes - if they are not declared as unique they will become part of the key)
There is almost no difference between the two options. Each would include both IDA and IDB, since both columns are part of the primary key. And SQL Server is smart enough to avoid including a column multiple times. To see this, create a table with both options, populate it with data, and compare the sizes of the resulting indexes:
If you compare the two nonclustered indexes in the final query, you'll see that each is three levels deep, and each uses the exact same number of pages, and the same percentage of each page is full. Also checkout this post, especially some of the comments and responses that address this same scenario.
Since the resulting indexes are identical, the only possible difference I can see would be from maintenance overhead (and I'm speculating a bit here; it's possible there is no difference at all). With the unique constraint, updates may be slightly more costly due to the requirement to ensure uniqueness. However, reads may be slightly more efficient since the optimizer knows ahead of time that the rows are unique. But it's also possible that the database engine is smart enough to recognize that the primary key already requires uniqueness, and that there really would be no difference.
So the only other consideration is readability and personal preference. Do you prefer to explicitly call out the fact that IDA is included in the nonclustered index, and that it is unique? Or do you prefer to keep the definition as minimal as possible, and let SQL Server do its thing on the backend?