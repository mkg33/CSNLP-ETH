First off, if it's mission critical, there should be multiple servers, with redundancy and backup built in. Every server needs to reboot sometime; can you guarantee the battery backup and diesel generators will always kick in during a power outage? What about a virus outbreak? Xp end of life next week? Configuration changes? 
I have "mission critical" servers at my work, but I started building in redundancy as I went along. 5 servers, all doing different combinations of the same thing. If box 1 goes down, I have its services running on box 2 and 4 already. Box 2 goes down, box 1 and 4 take over. You get where I'm going. 
If you can anticipate the shut down, schedule it during the time it's least used, usually after hours. Give as much notice as possible, usually by email, phone call or bulletin. It's the worst when there is no warning. 
You can also look into virtualization, but that is going to be too long to write about in one post. 
We have a business critical server that has not been re-booted in over 2 years. It is running Windows Server 2003, with SQL Server 2005 (SP3), Visual Studio 2005 and 2008R2, and has numerous versions of .Net from 2 through to 4.5.
Over time the machine has accumulated quite a lot of Windows updates and security patches that have yet to be installed.
We would like to plan a proper re-boot and install all the updates, at least to bring SQL Server up to SP4.
In due time we will need to upgrade to Windows Server 2012, sQL Server 2012, etc, but for now we have to live within our budget and infrastructure constraints (not-for-profit organisation).
Is there a "best practice" or any tips/hints on how to best go about re-booting the machine? Is there a tool that we could mirror the machine into a VM service for example, to mimic the current machine whilst we do the reboot, to not take any services off air?
The business is a 24 / 7 operation and so we need to continue running our existing services.