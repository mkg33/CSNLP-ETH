I understand why you have the Range.this.end and Range.this.start to avoid confusion about where those variables come from... If you need the Range.this as part of the teaching exercise, then sure. Otherwise, I would recommend three things....
Then, all the Range.this.start would be just rangeStart, etc.
Your iterator class is a non-static class, so it can reference the outer class's range start/end.
In this case, the nested class can be changed to a static class very easily. This has the potential of simplifying memory management because the iterator does not need a reference to the enclosing Range.
This static class removes the need for the back-references to Range.this entirely....
It is better to pre-validate state, than to fall-through to an error... This code:
although I imagine this is done as an education ploy.
Because of the int auto-bocxing I worry that Integer may not be the right choice for data type. You may want to consider a non-primitive as the data.
Autoboxing is the sort of thing that will confuse.
Otherwise, I don't see much in the way of problems.
I think some students would appreciate an example without inner classes: 
Range can implement the Iterator without an inner class. You just need to reset the cursor to the start value. Here I reset cursor in the Iterator method and in the next method, once it has finished iterating through the range. It works for the examples proposed. Of course, the Iterator is not keeping the states independently, and won't work for more complex examples, but I don't need to be passing constructor arguments to an inner class.