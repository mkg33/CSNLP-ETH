No. Assertions are not a way to make a test pass, they're a way to make it fail. Anyone can write a passing test, that's why TDD asks you to write a failing test first.
No assertions made is not an inconclusive test - it's a passing test, in this case for a test method that's essentially an empty code block, but a passing test nonetheless.
If all item items in the items collection are objects, this test has no reason to fail, and should succeed. With the EvaluateResult as currently written, this test is Inconclusive because no assertions were made. Nonsense.
Last, but not least. Be careful with circular references. Each TestMethod here has a reference to the Test1Class, but it has no way to dispose of the TestMethods. It doesn't even know about them (which shows a good separation of concerns actually). 
The problem is the way COM handles garbage collection. Objects don't get destroyed until the reference count for them reaches zero. Since  In this case, all of the methods will remain in memory until TestEngine exits it's scope. It might not cause an issue in this instance, but it would certainly be more memory efficient to get rid of them as you're finished with them. Set a breakpoint in TestMethod's Class_Terminate event and pay close attention to when (if ever) it's actually being raised. 
I'm having a hard time explaining this, so here is Microsoft's VB6 documentation on circular references. I find the most enlightening part of this document is this diagram.