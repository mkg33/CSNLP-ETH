Amazon does not support dynamic IP addresses for servers inside VPC. The one IP address that is assigned when a server is started is the only one you can send with and receive from the network. Just dynamically adding LXC container servers to an instance and assuming bridged networking can make it work is not going to happen. Amazon IP network is a special purpose network for routing between instances and it does not mimic a common ethernet subnet - most features you would expect from one do not work.
If you need such features, there is a possibility that you can configure a virtual networking subnet on top of the Amazon IP addresses - using some thing like GRE tunneling,  VDE (virtual distributed ethernet) or OpenVPN.
However, if you were to do it with Amazon networking purely, I will try to explain your options.
Elastic IP addresses work so that the private IP address stays the same, but there's a one-to-one NAT happening to the elastic IP address if (and only if) the address gets routed to the internet gateway.
There is also the possibility of removing the source and destination check from the network interface of the instance, which is usually done for routers. It is possible that using it would allow multiple servers to reside on one instance, but it seems doubtful as I don't believe Amazon would route the ARP requests to the server even in that case.
Currently Amazon VPC supports multiple interfaces per instance (up to 2) and multiple IP addresses per instance (up to 8). This is something you can use if you are willing to configure the instance each time you add a server. There addresses are simply additional addresses communication is allowed as on the virtual interface of the instance. There is no DHCP support for them, so you need to manually configure the IP addresses after you've added them to your server from the management console. The normal way to use them is to just use "ip addr add" to add multiple IP addresses to the same interface, but I see no apparent reason why using bridging and passing the addresses on to different interfaces wouldn't work as well.
I am trying to setup LXC containers on top of Amazon. I am very much new to Amazon and VPC especially. In fact created VPC for the first time to experiment lxc.
My Goal: My goal is to have lxc containers on Amazon instances and have them in the bridge type network. That means, I should be able to either assign public ips or private ips reachable to other amazon instances/lxc containers just as in physical LAN. For this I have been trying virsh(libvirt) with bridge networking. With this I never was able to achieve what I wanted. 
What I have done: I have created a VPC with single subnet(public). Launched a debian instance in it. Installed LXC and could successfully achieve nat mode and route mode. But this gave me 192.168.122.0(lxc's default) ip addresses. But I was able to get internet in the containers with some iptable rules. After trying with libvirt, manually by creating bridge using bridge-utils, got no luck in assigning an IP to the container. My assumption is the container should get a DHCP lease from the Amazon's DHCP service. Finally I associated another Elastic IP to the debian instance and memorized its nated private ip.
After that created a simple bridge and added eth0 to the bridge on the host. Then created a simple host-bridge network using libvirt. And in the lxc config hardcoded the nated ip i memorized. Then I started the lxc container. The container could get the nated ip on it. I could ssh to it from host. But I am not getting internet in that container.