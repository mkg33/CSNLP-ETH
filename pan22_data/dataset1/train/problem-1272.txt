I don't get what went through your mind at the time, but why not just people[i] = [i, 1] ?)
So, your main algorithm can be simplified to 1 nice loop instead of 3 (discounting the instantiation loop):
I'm totally hooked on CodeEval, and one of the problems on there caught my attention. Here it is, copied from here:
Flavius Josephus was a famous Jewish historian of the first century, at the time of the destruction of the Second Temple. According to legend, during the Jewish-Roman war he was trapped in a cave with a group of soldiers surrounded by Romans. Preferring death to capture, the Jews decided to form a circle and, proceeding around it, to kill every j'th person remaining until no one was left. Josephus found the safe spot in the circle and thus stayed alive.Write a program that returns a list of n people, numbered from 0 to n-1, in the order in which they are executed.
Your program should accept as its first argument a path to a filename. Each line in this file contains two comma separated positive integers n and m , where n is the number of people and every m'th person will be executed. e.g.
Print out the list of n people(space delimited) in the order in which they will be executed. e.g.
Here's my solution in JavaScript, which succeeded in all test cases:
All comments are welcome, but I'm especially interested in efficiency.