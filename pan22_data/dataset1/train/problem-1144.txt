Given a binary tree, return the next right node. This question is attributed to GeeksForGeeks. 
For example, consider the following Binary Tree. Output for 2 is 6, output for 4 is 5. Output for 10, 6 and 5 is NULL.
Looking for code-review, optimizations and best practices.
Just reviewing the findRight() method since many of the Node and other constructs have been reviewed in other questions of yours, and there's not much changed since then...
Your code takes an int argument, but returns an Integer. These things have been discussed before. Your actual nodes contain an int, so you need to find a better solution to the mixing of primitive and Object types.
There is a simpler way to do this using a single queue, and adding a null value to the queue to mark the end-of-line for the tree. This saves having to swap the queue and queueNext instances.
You throw an exception with a space as the first character, and it's not well formatted.... if (root == null) throw new IllegalStateException(" empty tree is not permitted");... additionally, it is a 1-liner statement without using {} braces. These are things that have been said before, but don't seem to be sinking in. You use 1-liner if-blocks for the left and right adds as well.
The 'Dude!' exception is cheesy, and not relevant.