This appears to be a "do my homework for me" type of question. There is no special algorithm or a clear answer. Still, it's a somewhat interesting piece of homework. :)
And since there is no special algorithm, I'd implement it using the equivalent of constraint relaxation in physics. All the things you have stated as requirements are rules, or constraints. Which basically means that you can insert any new item anywhere, and then adjust the positions of all items to fit the rules:
Just like in real life people have limited amount of time and interest to deal with their fridges, you can assign a cost to every action and use that to limit the number of actions to take.
The complexity of the simulation is very much up to you, though. I wouldn't go for packing algorithms for placement, at least not at first - moving things further apart or closer together is much easier to do on a straight line, followed by collision resolution of convex polygons. It's pretty much unnecessary for a tiled grid of the right size, so that's a good option as well.
The reason for me being against packing algorithms is that every one of them I've seen requires a complete repack of all items on any change, always tightly together, which I think you wanted to avoid. Since most packing algorithms tend to fill a side or two first, scaling the packed data to the full size for proper spacing probably won't work as well.
Imagine a fridge and a bunch of random foods. I want to take one food item, automatically put it somewhere in the fridge, and repeat. I can stop at any time.
Basically, the filled fridge should look like it has been gradually stocked over the course of a week or so (as opposed to deliberately organized at once) by a calm human being (as opposed to by someone who's just thrown things into it).
Formally, this procedure has to satisfy the following:
Ignoring any dividing racks that may be present in the fridge (say it's just one big container), how should this be done? What variables would I need to define with an Item, and/or what algorithms should I use to determine where to put the next item and how to find out which angle of rotation will give me the fit?