UK post codes do not determine city or address. In many cases UK post codes do not determine street names either. So it is not a violation of 3NF to have those attributes in the same table.
There is a British standard (BS7666) which defines metadata for postal addresses so I suggest you at least refer to that, especially if you want to use address cleansing/matching/enriching software. Many people actually prefer to use "unofficial" variations of their address however, and these are tolerated by the postal system, e.g. variations of county names and locality names.
As you note, these tables would not be in 3NF as the city and address (maybe, depending on granularity of UK postal codes) depend on the postal code rather than the key of the tables in question.
If you want to pursue 3NF, I believe the natural way to do this would be to have a table with the postal code as the primary key and address and city as the other attributes.  The staff, client and other "people" tables would then have postal code as a foreign key.
Whether pursuing 3NF to this extent is a good idea is debatable.  Adhering to 3NF is desirable but not always practical.  Keeping in mind the goals of normalization--eliminating redundant data and modification anomalies--it can easily be argued that 2NF is sufficient for your purposes.  First, you are unlikely to have a great deal of redundant data, unless you have many staff/clients living at the same addresses.  Secondly, modification anomalies are not really going to be important to you:  Sure, if you delete the only record for a person with a specific postal code, you will lose the facts that 1) such a postal code exists, and 2) exactly to which address that postal code refers; but neither of these facts is important to your system.   Since your domain is primarily  people and not physical locations/Royal Mail, the fact that you have attributes that are in some sense not dependent on the key is not as important.