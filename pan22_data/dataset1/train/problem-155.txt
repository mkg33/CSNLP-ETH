Depending on how and where you are (re-)using your class, you may consider abstracting the class into a hierarchy of interfaces and sub-classes. 
For example, it could make sense to define an interface just containing the hasWord method (and maybe the size method), then create an abstract base class, that contains the hasWord functionality, but doesn't load the data and then a concrete class that reads the data from an InputStream and finally a last class that provides that InputStream from a URL. This would include not hard-coding the URL into the class, but provide it as a parameter.
There are a number of suggestions I can think of. Hope these are helpful. Well done for asking for feedback.
Consider clarifying in your question exactly what kind of improvements you're asking for. Do you want the class to be "reliable", "maintainable", "optimised for performance", "written in as few lines as possible", etc. etc. otherwise you will get very general feedback.
Move the URL resource into at least a string constant or better still into your application configuration (perhaps a web.config file). You may want to consider passing in the URL as a  parameter. This would make your class more reusable and maybe even more easy to test. 
The fact that the class loads a dictionary of words from a URL is currently "hidden" away in your constructor. The name "MyDictionary" is not a meaningful class name as it doesn't describe what the class is for or what it does. Consider options like WordVector.
I'm confused about the way you're loading the file using 1024 byte increments. What goal are you hoping to accomplish by doing the load in this way? This is a low level detail which could be hidden away, perhaps even in a separate class - something like "LargeURLLoader" which the WordVector class could use to load its list. The advantage of pulling the load out into another class would allow you to load files in different ways, and also to focus on the details of the actual load, and would allow you to load such files from other classes instead of only within the dictionary.