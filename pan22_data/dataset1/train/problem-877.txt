As Linux and the BSDs (including OS X) diverge, the instructions for how to do this on a given Unix-like OS are also diverging. Here are some instructions for OS X.
I'm not aware of any widely deployed, "built-in" Unix command-line tools that let you forge custom ARP packets. That's why people install other commands like arpspoof and ettercap.
In OS X, you can transmit any arbitrary sequence of bytes that you like, by way of the Berkeley Packet Filter kernel facility. Just open(2) a /dev/bpfX device, use ioctl(2) to attach it to an interface like en0, and write bytes to it. Each individual write (that is, each buffer of bytes handed off in an individual call to write(2)) is transmitted as a packet. But that's a little beyond what you can easily do with a shell script. I think most Unix graybeards would whip up a little C tool to do that. But that's basically reimplementing key functionality of some other well-known ARP-spoofing tool, and in modern Unix environments, it's easier to tell your package manager to install arpspoof or ettercap or something.
I would like to know how to do a simple ARP poison attack with UNIX commands only (no ettercap or arpspoof or anything like that.) I don't care about forwarding packets to the actual router, I just want to drop them. I heard that it works by sending fake arp packets to machines that want to know what the router's MAC address is. How could this be done as simply as possible?