Strictly speaking, Keybase proofs aren't for linking your GitHub account to your PGP key anymore – they're for linking your GitHub account to your Keybase account. The difference is that the latter may now be represented using Keybase-specific "device keys" and "paper keys", in addition to the PGP key.
Every time you run keybase login or sign into the app, a new device key is generated and used for all operations, instead of the PGP key.
(If you click "2 devices" on your Keybase profile, you'll be able to see the full trust graph of your account – everything can be linked to your PGP key, but sometimes it takes two or three links.)
I don't know the advantages of this scheme, that's just how they implemented it.
It is still possible to make PGP-based signatures; e.g. when performing operations directly in the website you'll be prompted to run a gpg|curl command to generate the proof.
Thanks to the answer by @grawity I have learned that Keybase uses the Keybase device key for the device which was used to generate the proof.
You can generate the proof with your PGP key by using a browser to create the proof, choosing the Bash + GPG + cURL method when prompted. This will provide you with a command to sign a message and send it to keybase with the provided curl command. You can see my updated proof here.
Note that it appears you need to use bash for this, using curl in PowerShell was giving me issues.