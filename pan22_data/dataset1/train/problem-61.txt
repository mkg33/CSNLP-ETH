First of all, you have a grouping operation by process name, then you have the task of finding the maximum by version number per group.
Thus, instead of using nested loops and somehow mashing it all together, simply perform those operations.
As standard operations like grouping and finding a maximum are alreay presenet in the java stream api, all we need is a few helpers to extract the name and the version:
... which gives you a list of each task type in the value lists.
Now, we can disregard the grouping keys and extract the maximum per list:
Note: the stream.max returns an optional, which would be unset for an empty list. As we cannot generate empty lists here, it is save to simply map via Optional::get to retrieve the value.
All is left is to encode the result list back to json, e.g.
Note however, that you should better use a method which operates directly on the data structures, i.e. input and output are List<Map<String, Object>> and another outer wrapper method to do the decoding and encoding. Do one thing in a method.
Need to get latest among the number of SUBTASKS ie. filter the latest versions of SUBTASK with respected to name.
The above code gives accurate result expected and is time consuming.
But is it possible to optimize the code since real data json at process will be verry big almost 500 more subtasks