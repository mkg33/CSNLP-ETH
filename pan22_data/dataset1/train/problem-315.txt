I would pull out the generation of the next circle and the generation of all circles into their own functions. This allows you to test those parts without having to plot the result, allowing some speed comparisons:
You can then use this like this in your main function:
Note that I made (0, 0, 0, 0) global constant called BLACK and removed the whitespace around = for keywords (as recommended by Python's official style-guide, PEP8).
Now, we can test how long it takes to find a place for 1000 circles:
With this baseline, you can try to improve the performance.
I have a function which plots n randomly generated non-colliding circles. The circle is a Circle object, part of matplotlib.patches. We will generate each random circle by its center and r, for example : r = random.uniform(min_r, max_r).
To make circles with no collision, no two circles (with c1, r1 and c2, r2 as the center and radius) can have :
The implementation is done by the function below, how to make the script more compact and the implementation more efficient (faster)? Thanks.
Example result with n=4000 (took quite some time):  