I would go with a traditional set-based approach for this.  Create entity, list, entityList, and listItem tables to store your data.  Individual list and entity tables allow you to create lists without entities and vice versa.  Constraints on these tables such as unique constraints and foreign keys will help preserve the integrity of the data.
For the list, create a single stored procedure which is the single point for inserting lists and listItems.  This proc has logic to detect if a list already exists and serves as a gateway.  This is straightforward to do using set operators like EXCEPT.
Here's a simple demo which shows how something like this might work.  I'm using a table-valued parameter (TVP) to handle passing around lists and a scalar function to determine if a list already exists.  Scalar functions are evil when used in resultsets (eg SELECT, WHERE clauses, JOIN ) but are ok when used for what they are meant for, returning single values.  Spend some time working through it and see if it could work for you:
I'm a big proponent of XML but it is the wrong choice for this design.  XML can be appropriate for semi-structured, but your design is actually really structured.  The overhead of constantly shredding XML for comparison would be too much, plus you can't directly compare once piece of XML with another easily in SQL Server.  Where XML would be useful here, is visualising your lists, as I've done at the end of my demo.
You could probably use an XML datatype to store the lists. This way, you'd preserve the ordering as well. Haven't done any extensive performance testing, but with typed XML (a schema) and an XML index on the column, this might work for you.
As for insert performance, one advantage of this approach is that you only have to make an insert into a single table, which reduces the risks many deadlock and contention issues, particularly in transactions. 
... however, the order of any recordset isn't guaranteed unless you provide an ORDER BY clause, so here's how to add a ROW_NUMBER() to an XML result set: