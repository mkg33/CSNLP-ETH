In theory draw order only matters when using multiple draw calls. Since video cards have a parallel architecture for vertex and fragment processing, the rendering order inside of a given mesh is non-deterministic. Of course this means that your method may work on some or even all of your target devices, but trusting undocumented and somewhat random features is usually a bad idea.
So you basically have to make a choice between multiple draw calls or some overdraw.
However you may not have to worry about it - even mobile graphics cards can render way more than you would expect nowadays. Some mobile architectures like PowerVR even have special handling for this exact case to reduce the overhead.
You can also try only rendering part of the mesh via occlusion culling or some other method, while having Unity's static batching enabled. But usually heavy premature optimization is a bad idea.
Generally there are two factors which you can reduce by Z-ordering your geometry:
So should you do it or not? First of all, you can do it, it shouldn´t hurt and if you can do it without spending much time on it, why not? If it will cost alot of time though you might be better of if you don´t do it at first. Later when you test your game and you run into performance problems you should figure out what causes those problems and eliminate them by optimising those sections. That´s the point where you might figure out that the Fragment shading of your procedural geometry is too expensive or your fillrate is too high and that´s when it becomes nececesary to do that kind of optimisation. 