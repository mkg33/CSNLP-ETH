Probably the easiest way to cache Debian packages is to install the vagrant-cachier plugin.
If you want to use a caching proxy, you can easily configure other Vagrant guests to use it with the vagrant-proxyconf plugin. If you add the configuration globally to $HOME/.vagrant.d/Vagrantfile you don't need to pollute individual Vagrant projects.
I've got a project with a Vagrantfile which takes a while downloading all its Debian packages.  I figured an easy way to speed up initial provisioning would be to make another Vagrant-based project with just squid-deb-proxy.
I made a Vagrantfile, and a simple bootstrap.sh that installs that package (and avahi-utils).  I've mapped guest port 8000 to host port 8000.  I've confirmed that I can telnet to it from my host machine, and also from other VMs (as 10.0.2.2:8000, the host address).  I've confirmed (with avahi-browse -a on the squid-deb-proxy VM) that it's broadcasting its presence.
The only piece remaining is to get other VMs to see its zeroconf service broadcasts.  Zeroconf seems to use port 5353, but I can't map guest 5353 to host 5353 (the host is already using that), and if I map guest 5353 to host something else, the broadcast isn't seen.
I've connected multiple Vagrant projects using "private networking" before, but I don't want to do that here, since it would require all my other projects to know about my squid-deb-proxy VM.