Remove the dependency on boost. Not everybody uses it. Although the way you are using the mutex, its subtype scoped_try_lock and scoped_lock are very boost-like, any kind of mutex and lock should be allowed, as not everybody can or want to use boost.
Herb suggested another way for associating mutexes with data in c++11 more recently than the linked article in this video.  The whole video is worth watching in my opinion, but he explains a wrapper pattern around minute 38 and shows how it applies to associating a mutex in minute 40.  His implementation looks like this:
You then use the wrapped object it by passing a callable object that takes by reference the object being synchronized.  Here is a brief example:
I think it is a pretty slick way of forcing synchronization which makes the synchronization a little more visually explicit than returning a proxy.  He gave a minimal implementation for his slide.  My take on it, hopefully, made it a bit more useful.  It...
Anyway I just wanted to throw a c++11 way of doing this out there. 