I remapped my NumLock key using AutoHotKey so that it would open the calculator instead, using the following script:
This ran great up through Windows 7 (albeit with a different "run" line due to app name changes).  The IfWinExist line checks to see if Calculator is already running.  If it is, it activates it; if not, it launches it.  This works to keep you from getting multiple copies of Calculator running in case you don't close it between uses.  
With Windows 10 I have noticed that it only works intermittently.  The first time I launch it following a reboot, everything works as normal.  However, sometimes when closing the Calculator app, it saves it in the Background Processes, rather than truly exiting out.  
When I activate the script, the IfWinExist will find it as running and (apparently) activates it but with no visible effect since it's a background process.  If I open Task Manager and kill the process, normal function returns (for a while).  
Is there any way to either prevent Windows from leaving the Calculator as a Background Process, or to make AutoHotKey distinguish between Apps and Background Processes?
I don't use Windows 10 most of the time.  It looks like you either need a way to detect that it's a background process and then either activate it (so it is no longer a background process) or just kill it and launch a new copy.  
Short of actually figuring out how to activate the 'proper' way, one thing you could do would be to do a WinActivate followed by a WinWaitActive with a timeout.  If ErrorLevel is set then it didn't activate properly (i.e., background process) and you could kill/re-launch.
You could also look at your current setting for A_DetectHiddenWindows and see if that's on--I'm guessing it's not on and is off by default.  You could see if forcing DetectHiddenWindows, On causes any change in behavior (guessing not).
You could also try a WinShow after the IfWinExist returns true, i.e., before activating with WinActivate.  I'm not sure what Windows 10 is doing behind the scenes but it may just be a hidden window that's present in the background, in which case you can show it.  You can also find a utility called Spy++ or Spyxx that will show you all windows by thread, process or window with a tree view, which would show you if it has a hidden window present when it's running as a background process.