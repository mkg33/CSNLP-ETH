From Robert C. Martins book Clean Code, Chapter 10, Cohesion
How Robert C. Martin describes the Single Responsibility Principle 
If you think about this youâ€™ll realize that this is just another way to define cohesion and coupling. We want to increase the cohesion between things that change for the same reasons, and we want to decrease the coupling between those things that change for different reasons.
We can find no method with this property. Let's observe why:
All these instance variables gets used together in the methods keyPressed and keyReleased. This means the belong some how together.
These instance variables have the same property and gets used in the methods mousePressed and mouseReleased.
These two instance variable groups do not interact together this means they have a low cohesion - this is a logical cohesion. You can read on Wikipedia about Logical Cohesion:
I think it's pretty good, though it looks a bit more like C code than java.  You can compare it to my version of key tracking.  Instead of the keys and keysLast arrays, I use an array of KeyState objects.
This is more object oriented, though I use the more unusual convention of making member variables public, but with the understanding that they should only be read and not modified outside of the containing class.  The more standard practice would be to make them private (or protected) and have getter functions.