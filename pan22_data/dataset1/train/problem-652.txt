I see nothing wrong with the code itself, but you're in dire need of docstrings. Arcane functional one-liners like the one in intersperse are impenetrable unless they're well-documented. You'd also benefit from splitting that one into multiple lines.
consider rewriting your format call as an f-string; i.e.
@Reinderien's answer makes a very good point about docstrings and using those to describe your code: it would be much easier to understand if I knew what the various components are generally intended to do. There's a PEP about docstring formatting: PEP 257. The comments in the REPL.it link are pretty good except normal comments should come the line before the thing they're commenting, not at the right side of the line.
You could use a more descriptive name than temp_dict: at first I was very confused because you iterated over a dict, continually reassigning it for no reason, but then I realized you were recursively building a tree. I would suggest child_dict.
Similarly, a is not a very descriptive variable name. Even though it's only used once, you should still name it something slightly more descriptive, even if it's only 1 word, like path.
This is a relatively minor DRY infraction, but you use the conditional structure:
The second form is preferred both because it's (trivially) more efficient, but more importantly, it makes the dichotomy between the two paths clear for future modification and maintenance. If you pay close attention to your control flow in general, you will often find simplifications like this.
You imported pprint but never used it. You should remove unused imports. Code linters like PyLint help you avoid things like this.
You should add an if __name__ == '__main__' guard to the bottom of your program, so that people can import your program without running the example. This is a general good practice you should almost always follow.
2 spaces is not my preferred indentation, and PEP 8, the widely-used style guide for Python, happens to agree: "Use 4 spaces per indentation level". It doesn't really make that much difference, but it is slightly easier to read if you're used to it, and it's the style I see other Python programmers use. I do recommend checking out PEP 8 and starting to learn its suggestions if you haven't already, because it helps create more standard looking code.