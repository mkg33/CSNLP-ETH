Did you find out which part of your game loop is it slowing down on android? Is rendering or logic, or both? You should profile exactly which part is slowing down and narrow it down. 
Assuming you profiled every damned part of your code and you can't find what's making it slow. Then, on andorid, one possibility is garbage collector is taking a chunk of time per frame.  GC slow downs can be fairly sporadic and hard to catch through only profiling time. If you're generating out tons of garbage every frame then GC might be slowing it down. GC is slow in general on Android (especially on older devices). So trace your code to see if all the Vector2 copies you made are tossed away(not referenced anymore) as fast as they are generated. You can check out how often and how long it took GC to collect garbage through DDMS view (google it up, I forgot specifics). 
My question is, am I abusing Vector2's?  They make for easy math, but I'm wondering if there's some more primitive (but faster) way I should be doing things.  I've heard about transformation matrices, but don't know much about them yet (been reading).  Does Libgdx expose some quicker way to be doing this math for updating/rendering that I should be using instead?
One of the problems that could be impacting performance is the fact that you're copying your position vector whenever you want a world position.  It would be better for you to just have a field for the world position as well, and then you just alter both when you call setPosition.
You can see that I'm calling a metric buttload of getWorldPos() methods on the particles, all so I can have information for updating/rendering the particle.  Each of these calls involves multiple Vector2.cpy() calls and some vector math.
I'm simulating hair in a game.  Currently I have a HairField object, which has a position defined by a Vector2.  Each HairField has multiple Hair objects in a list, each with a position defined by a Vector2.  Each hair has multiple HairParticle objects in a list, each with a Vector2 position.  Like so:
It's not wrong to use Vector2, they're very helpful objects, but if you don't need all the added functionality, it might just be better to have a float x, y instead of a Vector2 object.
Further assuming that GC is your problem, then one way I know is to use an object pool. See https://code.google.com/p/libgdx/wiki/MemoryManagment