In particular, you're going to want to learn about such things as navmeshes, which are pretty fundamental to that genre.
But having a runnable that keeps re-drawing the canvas seems like a waste of memory to me, especially when it comes to larger images like the background.
I'm pretty new to game development and canvas animations and I was wondering if anyone could point me in the right direction? What would be good training for an adventure type game?
My generic advice would be not to worry too much about performance when you're starting out.  As mentioned in the other answers, it's possible to redraw only those portions that have changed, but you're already getting into a level of performance optimization that's premature when you're learning to create the basic architecture of your game.  When you're ready to do optimization, it's worth analyzing the problem in terms of what are the ACTUAL bottlenecks of your game, not what seem like they ought to be.
I would like to make an adventure type game functioning similarly to machinarium or broken sword. The only way I can think of doing this is to draw an image as a background on a canvas and use some animated sprites that moves around and responds to touches on the screen.
Where, in step 3, you're drawing the entire scene, even those parts that don't necessarily need to be redrawn.  As far as a useful starting point, I recommend this blog post:
One of the most commonly used methods to render images involves double buffering. All of the data to be drawn to the screen is drawn to the "Back Buffer", and at the end of the draw routine, it swaps positions with the "Front Buffer" which is located on the screen. Your 2D screen has no understanding of the concept of layering, so if you don't redraw the background each frame (or use an algorithm to only redraw the exposed pixels) then you wont have a background. This is just one (though the main) approach to rendering to the screen, but there is no way to get around having to draw what you want to see on the screen.