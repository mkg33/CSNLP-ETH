Relevant to this question because it affects 32-bit machines that use a standard machine sized variable for storing the unix epoch. It will be solved by the upgrade to 64-bit.
One thing mentioned is that the bus width is doubled, and therefore can read/write data faster. The performance boost is slight vs. 32 bit for home use perhaps, but certainly well worth it for a server. 
This is not ASP.NET-related, but I'll add for the sake of completeness. Some Microsoft Server products, like Exchange Server 2007, run only on 64-bit Windows platforms. I think you could call that a benefit.
I think the question you should be really asking is why not go x64? If your hardware is supported and your apps work, what's the reason to stick with 32 bit? There is little to no cost difference and its the way all future software is going to move, Exchange 2007 for example is 64bit only and I'm sure many new pieces of software will go that way.
There are lots of "reasons" but the first and foremost is that all of Microsoft's products are going x64. It 'future-proofs' the design a bit, and gives your ASP.NET apps more room to fail (from an OOM error, for example).
There are about 10 great answers to this question in this recent RunAs Radio podcast on 64-bit computing. 
There is an obscure (but real) bug similar to Y2K that affects most 32-bit machines. It is due to the unix epoch, used in some windows programs also, having a maximum value of sometime in the year 2038. At which point it will wraparround to 1901!