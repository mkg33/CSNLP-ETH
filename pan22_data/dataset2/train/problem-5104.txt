But... I couldn't imagine that I'm the only person in the world that would need something like this. So does someone know an opensource project that does such a thing?
So I was thinking of writing some scripts that synchronise /etc/passwd and /etc/shadow and checks if homedirectories exists. Including the posibility to exclude some users at some of the servers.
That being said, there is a solution that does almost exactly what you describe but with the advantage of being centrally managed: NIS.  It distributes passwd, hosts, group, etc. via a a client-server protocol but is, as I understand it, fully capable of continuing to function if the server goes away.  It's a little complex but is supported by every *nix-like OS that I can think of.
I have not seen an open source solution, but we have rolled our own before. It is relatively simple to have root run rsync and synchronise /etc/passwd, /etc/shadow and home directories containing authorized SSH keys.
although it's not a nice one, you can replicate the ldap database (or a part of it) on the ldap clients (actually, the servers)
This is why Active Directory requires (well, nearly anyway) multiple servers. So that when one of them dies, you're not screwed. 
Another note: it is best to do this as early in deployment/set up as possible, as you may end up dealing with UID collision when creating the "master". If you implement this on systems that are already running, you will need to figure out which user has which UID, and change directory/file permissions on each system accordingly.
One thing to keep in mind though - the "master" copy of /etc/passwd and /etc/shadow need to have the details of all users on all systems. This means if you have 1 machine with MySQL and another with Apache, the passwd/shadow file will need to contain both the mysql user and the www-data user. This leads to there being more entries in passwd/shadow on some machines than there needs to be.
If you've got a user base of any size, you do not want to rely on de-centralized management, even if it is through something like puppet. Moves Adds and Changes (MACs) will be no fun. At all. Plus, without centralized authentication, you'll need to manage local accounts, samba accounts, htaccess accounts...where as you /could/ centrally authenticate everyone at once. 
I still say LDAP is the easiest / best choice.  Insanely reliable, very easy to maintain.  I've been running master/slave LDAP pairs in production for several years now without a fault.  At my previous job they provided authentication for 20 - 30 servers and hundreds of workstations.  To the best of my knowledge, they never failed over as a result of a fault.  When I would deliberately fail over (reboot / upgrade / etc) no one noticed.
I need some usermanagement for a serverfarm of +/- 30 linux servers. Normally I would think of something like LDAP, but we don't want to rely on a global server to which we need to authenticate, in case of downtime or broken connections. 
the weakness of this is that the database gets corrupted as the ldap clients gets corrupted, the advantage is that you will have plenty of replicas, making your data incredibly safe and if connection drops between the master and slave databases, you can continue using the replica instead