Following on Michael's answer, it would be very, very hard to prevent a user from sending signals (which is what kill does) to a process running in that user's protection domain (i.e. running under that user's id).  Likely, you would not really want to, since it would also prevent the user from terminating a runaway program, for example.  Also, it could well break some chunk of your existing system.
Whatever you use, the kill command, or the shell builtin, it is going to use the kill or related system call. To read about this, see man 2 kill.
Kill isn't just use to kill a process, but it is used to send a signal.  Sending signals is a fundamental function of the Unix operating systems, so you don't want to disable it.
So, if you really really want to have users not be able to send signals to process that they start, I think you would have to setuid root the program, and have it change both the real and effective user id right after it starts to a less privileged user, as only root can change the real user id.  An example program that does this is the login command.  You have to be extremely careful programing these programs though, or you will create a big security hole.
The answer is that short of compiling your own version of bash, you can't. Furthermore, even if you succeeded, if your users can compile programs or move binaries onto the system, they can always bring in a kill binary of their own, and be able to issue kills anyway.
If you want to limit and lock down the things people can do with bash, then change them to the rbash (restricted bash) shell. more info
As Michael said, you probably are trying to prevent a user from sending a signal to one or more specific processes, and the way to do that is to put those processes into a different protection domain, in other words run them under a different user id.
The correct way to do what ever you are trying to do is probably to manage your privileges correctly.  Signals are only allowed under the following conditions:
Now, the question is: What do you really want to do? Because disabling the kill command isn't, I suspect, your actual goal. You're trying to prevent the users from doing something (presumably kill something they shouldn't), and there's probably a better way to do what you want.