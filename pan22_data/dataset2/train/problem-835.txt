The OP's concern for "the snapshot takes up little actual space" isn't really satisfied by traditional LVM since space must be pre-allocated in a monolithic fashion for each snapshot. But Thin LVs are allocated like sparse files, and actually do take up little space.
Now, my understanding of LVM snapshots is that the snapshot stores an inverse delta of the changes made to the original blocks so that the snapshot takes up little actual space and the original blocks can be read out even after the original volume has been written to.  LVM2 adds read-write snapshots, which opens up this interesting possibility.
Thin LV performance is good, and they function like separate volumes so once a snapshot is made you don't have to worry about the care and integrity of the original (it can be damaged, deleted, etc. without affecting the snapshot).
As people who likely have more virtualization experience than I, is there anything that makes want to run screaming from such a setup?
The trade-off for thin provisioning is that the available space in the thinpool must be monitored just like a filesystem to avoid filling it up. Linux distros typically have daemons to monitor this and send warnings or take action when a thinpool reaches a near-full state.
So, I've got a pretty awesome KVM setup running now, CentOS5.5 on the host and guest domains, libvirt managing all the configuration, etc.  The guest domain filesystems are stored in LVM on top of a hardware RAID5 volume, so I have flexibility for backups and low-level data redundancy.
I tested out virt-clone today, and it worked amazingly well, except that it took about 30 minutes to replicate 24G of data from the suspended domain's LVM disks to the new LVM volumes for the new virtual machine.
This seems like a really powerful tool, and I'm wondering if anyone has tried it in their production virtualization environment, can think of any vendors (Citrix, VMWare) that take this approach, or can think of any serious problems with this idea.  I can think of the following potential problems:
One other thing Hubert is right about, is that you have to think about the sizing of your snapshots. You will want to make sure the snapshot volumes are able to keep writing. A full snapshot volume will break stuff badly. A failsafe way to prevent this, is to make the snapshot volume the same size (or bigger) than the source volume. You loose the benefit of using less diskspace this way, though. 
It's perfectly fine to do this. What you do not want is to have the parent of the snapshot (the original, or the source, or whatever you want to call it) to be in use at the same time, because it will cause IO multiplication (Hubert was right about this, it is just easy to prevent by not using the source volume all the time).
I would go so far as to say that ZFS could be worth a shot, its possible to setup a Nexenta based system backed by some kind of disk, either fiber, iscsi, etc, fairly easily, and has pretty good performance. I would recommend this approach over local storage if performance is not absolutely critical any day since this would give you a simple recovery scenario if your virtualization server went down.
If you have one master OS install on an LVM, and you snapshot that four times, you will not have much of an IO penalty, since you are only writing to the individual snapshot volumes. Of course, it is not free, but neither are other forms of snapshotting on other filesystems or virtual disks. There is always a cost somewhere. 