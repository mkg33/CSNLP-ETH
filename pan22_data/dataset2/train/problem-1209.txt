There is a simple solution that works well though.  In Mac-Land, look for an app called SMC Fan Control (you can find it on macupdate.com).  Install it and before you boot into Windows using BootCamp, go to Mac Preferences, find SMC, and default your fans to spin at something like 4500 rpm.  It will make a bit more noise but will still be reasonably quiet.  Now, do not shutdown OS-X, do a Restart, hit the BootCamp key at the right time and go into Windows.  By performing a Restart the fan controller on the motherboard will still think it needs to spin the fans at the new setting and it will continue to do so until you shutdown the MBP completely or reboot to OS-X and change the setting down to a slower speed (I run about 1300 normally).  This makes development from the couch in BootCamp much more enjoyable as you won't find your clothes being ironed while you develop.
While I cannot speak to running Windows or Visual Studio in a VM on a Mac in Fusion, I can speak to the part about iPhone development (which requires Xcode and Mac OS X) in a Parallels VM.
I haven't personally tried to run Visual Studio in a VM but people who have done so have told me that, as long as the source code you are compiling is stored on the virtual hard disk, build times are good, although they are slightly slower than native performance.
Generally this works very well. The biggest plus having all my work-related stuff in one single environment. Specifically, Apple stores security keys in the Keychain. Trying to extract that from a real Mac and re-install on another is a mystery and a pain. With a VM, I make occasional manual backups locally and/or to an external drive. Getting a new Mac, or switching to another Mac just means one big file copy, then I'm up and running.
Why was Lion and Mountain Lion so performant visually while the later Mac OSes are slow? From what I learned in a brief tech note and email from Parallels company, Apple provided a shim with Lion/Mountain Lion. They had some library that helped to substitute for the lack of graphics hardware acceleration. This library is no longer available with the place-named OS X versions, only with the feline-named OS X versions.
I have used Vista 64 + Visual Studio 2008 in both BootCamp and VMWare Fusion modes and both perform well.  If I was "playing around" with some code and not coding intently I could do it in Fusion without any significant performance hit.  If I was focusing on my code and needed to get something done, I would reboot into BootCamp mode.  This not only ensured that all my resources were dedicated to Vista/Visual Studio, it also helps ensure that nothing in Mac-Land would distract me from working.
I do iOS development with Xcode running in a Parallels (9, 10, and 11) virtual machine on a MacBook Pro Retina with terabyte flash drive. 
Mainly the authentication of Win7 needs to be done over the silly MS phone system. Otherwise authentication is only valid on one side (native boot or VMWare). 
With Mountain Lion running as the Guest OS in the virtual machine worked so well that I found myself getting confused about when I was in the real Mac and when I was in the virtual Mac. In the VM, I had to switch my Dock to the right-side of the screen to differentiate from the real Mac’s left-side Dock.
So everything graphical runs slower. Menus drop down slower, and as you drag your mouse pointer through the menus items, they highlight and draw more slowly. Moving windows is not quite immediate. Animations can be herky-jerky. Scrolling is kind of hyper-active, a series of small visual updates rather than smooth. All-in-all, it is not a show-stopper for me, at least not yet. (I've only recently updated the VM from Mountain Lion.)
I am sure there is some performance penalty when running in the VM, but it went unnoticeable to me. I imagine the speedy flash drive saves so much time that it more than makes up for any overhead of running the VM. Overall, this is the fastest development environment I have ever used. With Mountain Lion, that is… read on.
If I'm doing something quick I run Windows from my BootCamp partition using VMWare Fusion 2.0.6.  If I'm going to be doing some serious debugging or fixing I reboot using BootCamp.  BootCamp is much faster, but if most of my time is going to be spent rebooting twice I'll opt for Fusion.
I even use the Notes app and Reminders app within that VM for my development work. I do not activate iCloud within that VM, so it just stays local to the VM.
On the down side, Fusion doesn't see all of the cores my Mac Pro (I can only assign up to 2 cores to it when I'd happily assign 4-6 processors.) so using BootCamp definitely maximizes the resources XP has access to.
The biggest tip I can give you though is if your MBP has dual video cards, and you boot into Windows using BootCamp, Windows will use the more powerful video card.  This creates additional heat and your MBP will start to warm up.  Normally in Mac-Land the fans will speed up to compensate but in Windows-BootCamp there is nothing to tell the fans to speed up and your MBP will start getting VERY warm.
I've used a Win7 virtual machine on VMware Fusion 3.0, on both a Mac Pro and a MacBook Pro. I haven't had any performance problems, the virtual machine performance on both systems was very good. I had the best results with Win7 when I configured the virtual machine to have 1 GB of RAM. (Full disclosure: I work on VMware Fusion.)
I have heard that storing the code on a "network" drive (either an HGFS share or an NFS/CIFS share on the host, accessed via a virtual ethernet device) is a bad idea. Apparently the build performance is pretty bad in this configuration.
CAVEAT: Mavericks, Yosemite, and El Capitan run noticeably slower as a guest VM. I have confirmed that in the latest and prior versions of both Parallels and Fusion, neither product makes graphics hardware acceleration available to Mac OS X as a guest OS. They do for Windows as a Guest OS, but not for Mac OS X (ironically). 
Have min.4GB of physical memory - works with 2GB but is dead slow. My current VM setup is 1420MB and 2 cores for VM. That ends up using around 2GB of memory for VMWare altogether (leaving another 2GB for my OS X host).