One way to do this would be to have a semaphore file that both users can write to.  Have the cron job check on the existence of this file and the date of the file - if it's today's date than the job has already been run - so no need to run - the 2nd attempt to run the file would exit.  The problem with this approach though is that the earlier run would always win.
You could create a hard or soft link from the first user's crontab file(/var/spool/cron/DBA_1) to the second user's crontab file(/var/spool/cron/DBA_2). The downside to this method is that both users share the same crontab, and neither gets an individual file.
Use a role account rather than tie things to a regular user account. Then allow both users to run this command. 
Here, the trick required will be to script the merge of new_command.txt into buffer.txt so that replication is eliminated. The human user would normally do that correctly when using crontab -e.
and, edits the file. In which case the earlier edits are present at the time of making changes. This keep the crontab (of one user login) consistent.
The above mentioned locations are correct for RHEL/CentOS; they may be different in another distribution.