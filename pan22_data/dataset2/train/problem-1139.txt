This means that when we find a factor we also add its cofactor and therefore only need to search for factors less than or equal to sqrt(n). 
Specifically with regards to efficiency, and without really working too hard on understanding factorisation techniques, it is simple enough to get a huge performance gain by noting that factors come in pairs. 
A ternary instead of if may make the loop in isPerfect faster but I made no benchmark and may be considered premature optimization.
My program is complete and working, but I would like second opinions on it. The program prompts the user for a positive value that will serve as the maximum for the range that will be checked for perfect numbers. Although this is one of those do-what-you-want-with-it problems, I have to keep the two prototypes. Are there any extra adjustments I should make in the program or is it already efficient the way it is?  
Divisors come in pairs. If you know one divisor of a pair, it's trivial to find the other divisor of that pair. In a pair of divisors, one divisor is less than or equal to the square root, and the other is greater than or equal to the square root.