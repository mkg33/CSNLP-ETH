H1 would like to communicate with H2, but since this is a brand new network and no communication has never taken place before, how does H1 even know that H2 exits?
I understand that initially, the two hosts would not be aware of each other's IP addresses. I also understand that after a host becomes aware of another host's IP address and determines that it is on the same LAN, it can simply ARP to discover another host's MAC address. I'm just struggling to grasp how one host initially discovers the existence of other locally connected devices. 
Let's say you have a brand new 192.168.1.0/24 network that consists of a router, switch and two hosts (H1 and H2). 
The answer to the question Found Here talks about the role of DNS, but I still don't understand how H1 would know the name of H2 to even ask the DNS server about what IP address belongs to a given name. Is there some sort of protocol/service that enables hosts existing on the same LAN/VLAN to know about all other hosts connected to that same LAN/VLAN?
Oversimplified: The service discovery section (mDNS-SD) of Zeroconf Networking specifies rules how to define more-or-less-widely-known service names, and how to represent and query them in a DNS-like way. These service names (and Computer Names, too) can be resolved by multicast DNS (mDNS) by interested hosts.  
The same multicast DNS (mDNS) resolution can be applied to find the IP address of othercomputer.local, or myinternalwebserver.local, so a user can direct his browser to http://myinternalwebserver.local 
In smaller networks that don't utilize a local DNS server, is this accomplished by NetBIOS? I'd be interested to also understand how this 'discovery' process works in this type of environment as well.
One possible way (by far not the only one) is mDNS based Service Discovery as per Zeroconf Networking, based on link-local multicast (see Zac67's statement) and the DNS domain .local.  For a good overview of Zeroconf, see Wikipedia on Zeroconf Networking, which also refers to RFC 6763.
Example: Let's pick _ipp._tcp.local for an IPP capable printer. A host on the subnet interested in findig an IPP capable printer can multicast a DNS query for the name _ipp._tcp.local to the link-local multicast address 224.0.0.251. 
As Zac67 pointed out - there is no single universal way to do service or computer discovery on a network. HP uses someting similar to find their printers (using routeable multicast address 224.0.1.60), Apple calls their Zeroconf implementation Bonjour or Rendevous, one of the Linux implementations is called Avahi, and there's other ones, too, see the Wikipedia Page.
Eventually, the challenge remains the same: a host (or: software running on a host) interested in finding services on the local network must know what kind of services it is looking for, and send out an appropriate query.
Any host (in this case: a printer) which is turned on, has an IPP service running and by configuration feels inclined to respond (because mDNS-SD support is activated) may send a DNS response. From the answers coming in, the querying host may then populate its own list of IPP capable printers, and present it to the user.