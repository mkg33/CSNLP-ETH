So why care?   The implementation detail actually matters.  Fragmentation can hurt performance in the network not a big issue anymore but one to be aware of.  If a huge datagram size it used then should any fragment be lost the whole datagrams will need to be resent.  Equally at high volumes and today these are perfectly achievable volumes then mis-association of frames at reassembly is possible. There can also be problems getting fragmented UDP packets to traverse enterprise firewall configurations where load balancers spread the packets out, if one fragment is on one firewall and the other on a different one then the traffic will get dropped as incomplete.
It is due to an offloading feature called UFO.(UDP Fragmentation Offload). Please refer to this link.
However jumbo frames have to be supported by all the equipment the frame will pass over and this a problem.  For practical purposes Ethernet frames are the most common tranport size, the MTU for these is circa 1500 bytes, I will say 1500 going forward, but it isn't always.   When you create a UDP datagram larger than the underlying MTU (which as indicated is most often be ethernet) then it will be quietly be broken up into a number of 1500 byte frames.   If you tcpdump this traffic you will see a number of packets broken at MTU boundary which will have  the more fragments flag set along with a fragment number.  The first packet will have a fragment number of 0 and the more fragments set and the last one will have a non-zero fragment number and more fragments not set. 
To answer your question, "If the frame's payload size itself is maximum of 1472 bytes (as per my textbook), how can the packet size of IP be greater than that which here is 65535?"
The IP layer will fragment your packet on the sending end, and then reassemble it back on the receiving end, before passing it up to UDP. From the UDP layer, you can't really tell that the packet has been fragmented. If you use a packet capture tool like Wireshark, you should be able to see that your computer is receiving IP packets limited to the MTU.
So don't create UDP datagrams bigger than the MTU size fragmentation unless you have to and if you have to specify that the infrastructure being communicated between is close (same subnet close) at which point jumbo frames would likely be a good option.
Turns out that allowing the TCP/IP stack to fragment packets as needed is a lot lower overhead than sending individual packets.
If you're monitoring outgoing frames, it's possible that your network adaptor supports segmentation offloading, and it is enabled. With segmentation offloading enabled, the network card itself handles segmenting the packet/frame into the appropriate size, rather than the network stack. This frees the CPU in the computer to perform other tasks, improving performance. On linux, "ethtool -k [device]" will show the offload flags. 
You can verify and toggle  offloading features via ethtool -k ethX and ethtool -K ethX   respectively.
UDP datagrams have little to do with the MTU size you can make them as big as you like up to the 64K is maximum mentioned above.  You can even send one of them in an entire packet as long as you are using jumbo frames with a size larger the large datagram.