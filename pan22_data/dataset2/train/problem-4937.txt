I have a use case that is the inverse of most: I'd like to implement very weak SSL ciphers in the name of performance, with the option to fall back to stronger ciphers if the client requests it.
Depending on your urgency you could wait for adoption of "Salsa20" and "ChaCha" in particular that is intended to be direct replacement for RC4 in terms of performance. However, right now only google Chrome and latest releases of Android OS support it on the client side and it is not in OpenSSL yet, so no servers support yet. Otherwise I agree with others on AES-IN.
Because of this, it makes sense to me to present the weakest possible cipher to clients while maintaining full compatibility with browsers. I'd also like to offer the option to increase security to full ECDHE if requested, merely to satisfy more security-conscious clients, but definitely as a secondary option.
The absolute fastest would be eNull. To include eNull in ssl_ciphers, try "aNULL:eNULL:MD5:LOW:HIGH" for you cipher string. Typically, however you are going to negotiate the highest supported cipher. You therefore may want to cap it by setting using !HIGH, but be sure to thoroughly test this. You will at least need to keep in LOW as I believe most browsers would refuse to use the null and md5 ciphers at all.  
The data in question does NOT need to be secure; the reason for using HTTPS at all is because the traffic originates from a JavaScript tag on a given website, and if said site is using HTTPS, then our supplementary traffic must use HTTPS as well to prevent warning about mixing secure and insecure content. Again, the security of the data in this connection is not important at all, even if the "parent" site is SSL secured for whatever reason.
Backstory: I have a public-facing web server that receives a giant quantity of POST traffic from thousands of remote clients, with each POST being rather small. A client will a payload once and disconnect. The server takes on thousands of these connections per minute, so the overhead of SSL negotiation adds up.
A few years ago, some variant of RC4 would have fit the bill, but since that is universally panned as insecure today, I'm concerned that browser compatibility may become an issue. In the wake of that - what ciphers would offer me the features I'm looking for above, with the greatest speed?