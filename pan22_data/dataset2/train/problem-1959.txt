In the case of just a simple bouncing ball, coming up with closed form solutions is easy.  However, the more complex systems tend to require solving an Ordinary Differential Equation (ODE).  Numerical solvers are required to handle all but the simplest cases.
Implicit solvers have the advantage of being able to use much larger time steps.  For your bouncing ball algorithm, your timestep can be at least as large as the duration until the next collision (which would change your function).  This can make your program run much faster.  However, in general, we can't always find good implicit solutions to the ODEs we are interested in.  When we can't, we fall back on explicit integration.
There are indeed two classes of numeric ODE solvers: explicit and implicit.  Explicit solvers provide a closed form approximation for your next state, while implicit solvers require solving an equation to do so.  What you describe for your bouncing ball is actually an implicit ODE solver, whether you knew it or not!
The big advantage I see with explicit integration is that the gotchas are well known.  You can open up any textbook from the '60s and read all you need to know about the little quirks that arise with particular integration techniques.  Thus, a developer learns these skills once, and they never have to learn them again.  If you're doing implicit integration, each use case is slightly different, with slightly different gotchas.  It's a bit harder to apply what you learned from one task to the next one.