The standard way for managing this would be through application updates. Each time a new puzzle or bunch of puzzles appear, create a new update for the app that the user can download. 
Unless, of course, this is run as HTML5 with an external web site/app supplying your puzzles, which would be option #2.
Make the main app like a service or OS with a enough API to support "puzzle stuff" and a script interface.
This does mean that you have to adopt a data driven style for the main program, menus and options created on the fly from discovered puzzle modules the user has, etc...
I'm planing to develop a puzzle like mobile game (android/ios) with a different logic for each puzzle. Say, for example one puzzle could be a Rubik's cube and another one a ball maze. Many more new puzzles will appear during the life of the game, and I want the users to be able to play those new puzzles.
However, I would like to do it in a more transparent way. When a new puzzle appears, the basic info of the puzzle would be displayed in the app menu, and the user would be able to play it by just clicking it.
Then script all the puzzles.  This way you can embed the universal scripts into the download without having to worry about building binaries for each platform.
I may be wrong, but I'm fairly sure that mobile platforms frown on applications randomly and secretly downloading executable binaries and even your new puzzles will have to become something the user requests.
Is that even possible? Are there any restrictions from the OS? Is there a better way for solving it? 
What comes to my mind is that the app would automatically download a .dll or .jar and inject it in the application at runtime.