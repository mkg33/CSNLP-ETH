Here is some basics from FlatRedBall and its wiki (source is closed though); consider having a base class that is positioned, ie that has x, y (possibly z), rotation, scale, velocity, acceleration and whatever positioned objects will need. Have the sprite class and other relevant classes inherit this. Then have another class for actual game characters (entities) that are also positioned, but can either contain or some way be grouped (IAttachable) with sprites. Game characters generally need state as well as a lot of other things like collision bounds.
Well, a sprite is just a texture with a scale and coordinate in space, there'll be hundreds or thousands of them if you're going to use animated sprites. You'll need something to handle sprite flipping ie another class that groups sprites for animation purposes and can flip between them accordingly?
Speaking as somebody who has actually had a need to implement a sprite class for XNA, here's how I did it: First I took a look at SpriteBatch's draw function (the one with all argument specified):
You're thinking ahead of yourself, trying to implement everything before you actually use it. You don't even know what your Sprite class needs to do! Why are you writing it then? Classes are meant to serve a purpose. You don't write them ahead of time; you write them as you need them.
Start by actually starting on your game. You'll reach a point where you need to use a Sprite class. So then make it (or use it as it currently is). When you run into something which needs to be in the Sprite class, add it. But stop what you're doing, don't try and write a do-everything Sprite class because you'll just end up with a bunch of unused features that waste your time and probably aren't tested or implemented right.
Note how as much information as possible about drawing the object is simply "hard coded". You should always have a preference for doing this, and make it data-driven only when absolutely necessary.
I have found the concepts and examples in Johnathan Harbor's book VB Game Programming with Direct X to be very useful when writing XNA and older MDX code. The book is OLD, and  its in Visual Basic 6, but his examples do use encapsulation (since vb6 didn't support inheritance) but they best illustrate the concept of building a basic 'system' through classes - I'd recommend browsing through it in the bookstore or library just to get some of the ideas: http://search.barnesandnoble.com/Visual-Basic-Game-Programming-with-DIRECTX/Jonathan-S-Harbour/e/9781931841252 -- Thats not to say there are not any of these concepts well demonstrated on line or by other authors, but I know and can vouche for the ones in this book.
For example, right now. That entire class is unimplemented. There's no point to it until there is something using it, and once you start using it, it will be clear exactly what you need and don't need.
However I have a rather unusual reason for needing such a class. You probably don't really want one!
What you are doing in your code is storing information about the image you are drawing as data inside an object. But what would be far better is to express as much information as possible directly in the code. In other words, say you have a bouncing ball with a position and a velocity. Here's what your class might look like: