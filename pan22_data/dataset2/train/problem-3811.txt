Asset conditioning for such a game is also simple, because there aren't any 3D models. It's just 2D flatcards running around. Physics is non-existent.
Now, if you're making something more graphically complex like an FPS as a one-man team, then yes, I would suggest using some form of library or engine to make things easier.
There are many levels between those two points. For example, you could build an engine with Ogre3D, Bullet Physics, and Lua, with some entity glue to put them all together. You still get an asset conditioning pipeline (courtesy of Ogre3D), and Bullet has most of your physics needs covered. Yes, you have to write the entity system and the various Lua hooks. But you have everything you need.
The same goes for many kinds of GUI-style games. Bejeweled, etc. Indeed, using an engine like Unity would make these kinds of games harder to make, not easier.
For example, take a game like SpaceChem. You would get more or less nothing out of using a pre-packaged engine to make SpaceChem. It's basically a GUI-based game. Coding directly to OpenGL is simple and effective.
If you want to make a game, you should let questions like "what language do I use" influence you as little as possible. Yes, you will be avoiding languages that you don't know, but you should be focusing on languages that you know. You should do whatever it takes to follow the shortest path that allows you to get to the actual game making part of making a game.
Then you need to make a decision: do you want to make a game, or do you want to program something in Go?
That being said, I think you do not understand that there are levels between "Unity" and "Use OpenGL". Unity is a full-fledged game engine, which means it has features like physics, scripting, entity support, etc. OpenGL is just a rendering system.