If the code of the thread is and can only be used locally, I would leave it in there regardless of the LOC. Using a lambda has the advantage that you don't 'pollute' your class with an extra private method which is only called from one location. This provides for better encapsulation, which is a core principle of OO which makes it shine.
So there is utility in using lambdas to wrap contexts around chunks of code without having to break them into a separate method.   But as long as its not an excuse for badly factored code and it seems to make sense given the context of what you are doing.
Also as a sidenote; I realize you probably just named your code as to get the idea across, but I'd make sure the name of Method would indicate it only starts a certain action, but doesn't finish it. E.g. StartSomeMethod.
ignoring the splitting things into smaller methods debate...  the code is already in a method.  The part to do with threading is a tiny amount of the method.  The lambda is just a construct to make the code multithreaded.   If that was the intention of the method.  Then thats ok.  
I think that a method this long really deserve a name. Even if it is only used once, a name would be a good way to describe what is this lambda doing and it would be way more significant than a comment or something like this.
If the code of the thread were to be reuseable, I would rather think about splitting the behavior in a separate class than in a separate method, unless the code only makes sense in the original class.
In my opinion no preferable answer can be given without seeing the exact code. I don't like splitting code into smaller methods just for the sake of making methods smaller, as opposed to Brian Reichle's answer (and many other people that follow this approach).
(for the sake of this question, I'm ignoring if this is a good approach to threading...  another example could be that this is a transaction context.... or some other wrapping context ).
Keeping it local is good. However for clarity you may want to assign the lambda expression to a Func or Action variable, and then do your threading code. This would help in making the threading code easier to understand on sight without mixing in the details of the actual code that is being threaded. In other languages it is not uncommon to declare the method to be threaded inside of the method that is calling it (javascript, ada, f#, etc.).
It comes down to purity vs utility.   Its easy to see this from the perspective of 'lambdas' and have a rule that lambdas should be short and to the point.   But in this case its more using the utility of lambdas to wrap threading around a chunk of code.  