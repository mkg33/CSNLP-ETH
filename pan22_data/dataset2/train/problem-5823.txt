Assuming you would like to keep a full backup of the data on each backup device you may want to consider LBackup, which features an extendable pre / post scripting sub system which allows you to handle bakcups to disk images and even removable media such as an external hard drives / memory sticks.
Finally, if you are using 3.5" hard disks you could reduce the cost of removable drive enclosures by using something like the RTX110-3Q and protective drive cases from WiebeTech. With that kind of system in place you could just rotate the bare drives which could save you some cash on enclosures (you mentioned you wanted to keep the price down).
edit: You could implement a recovery front end by exporting the rsnapshot datastore over NFS or Samba (or a webserver/anything else) and let users pick up old copies of their files themselves.
Using the scripting sub system you could add additional checks such as file system integrity checks prior to backup, media integrity checks and even checksums for the snap shots.
Essentially, this setup will allow you to have a number of removable drives which may be rotated and which will automatically be unmounted from the system once the backup finishes. You could even add a post action script to notify you (via email, txt, call, beep, speak etc.) that the backup has completed successfully and that the disk is ready to be taken off site.
For GUI-based tools, consider looking into CrashPlan at http://www.crashplan.com.  There are several cost levels (Home, Pro, etc.), one of which may suit your needs.  I believe it's Java-based but IIRC it came with its own JRE.  I use it for home backups, and I briefly tested the Pro (server-based) version but other things distracted me from giving it a full evaluation.  But it looked promising.
This page from the LBackup developer section provides a means to detect an attached disk and then mount that disk. By modifying the fstab you may prevent devices from mounting automatically.
Finally, with regards encryption, WiebeTech offers drive enclosures which support hardware encryption.
I use rsnapshot to handle approximately the same data volumes you're talking about and it works quite nicely.  As has already been pointed out it doesn't have a fancy front-end but it does a great job at snapshot retention and minimizing file storage space.
Try rsnapshot (rsnapshot.org). It does exactly what you're after: it's in the RPMForge yum repos (so is packaged for CentOS), operates over rsync via SSH, and keeps a configurable number of incremental backups.
Just some thoughts which may be helpful. I initially, wrote the script (listed above) for detecting drives connected via USB. This was because I arranged a backup a friends system which had no internet connection. The backup was performed to a set of rotated USB flash drives. The data was then encrypted using software encryption to the USB sticks should they be lost in transit. 
Would just buying a bunch of cheapo =>1TB USB hard disks and treating them like tapes, but with the ability to rsync to/from them, do what you need?
One thing to watch out for regardless of which solution you use is handling (or ignoring) of resource fork data.  Your OSX server deals with resource forks transparently, but you may lose the resource forks if you are using applications and/or filesystems that are not aware of them and thus would discard them.  Maybe it doesn't matter in your environment, but it's worth pointing out that the data can get dropped pretty easily and without warning.