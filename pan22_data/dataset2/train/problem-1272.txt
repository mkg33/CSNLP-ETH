you could try to go further and attempt to normalize the values of product_options.description to a separate table, but that might be more complicated than it's worth.
So you end up with a "Foo" product that has 2 colours (red and green), two sizes (small and large), two models (standard and special) and a sublabel (Bar).
Note that in product_options, you'll need a unique constraint on (product_id, product_option_type_id, description).
I wonder if there is a more logical way to this Database-wise. The problem is that in the future it might be possible that a product will get another property (let's say Sublabel). How could I make this method ever-extendable?
This structure quickly grows; like 3 Color-variants of 6 Sizes and 2 Models already convert into 36 different products.
I read about EAV, but that's really too much info to go on for now. Before I dive in the deep, I wonder if there are other approaches on this matter.
The logic on filling the database now fully relies on the website-scripts; meaning when I make a new Product in my back-office I am filling and relating the Colors, Sizes and Models to the product and make sure they have a combination of themselves.