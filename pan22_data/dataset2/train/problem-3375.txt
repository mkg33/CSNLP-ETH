Pi system software is constantly being updated - so by the time you get your 'custom' code debugged and running chances are the OS version you are using will be 3 or 4 versions out of date.
do you think it can handle this job and able to work 24/7 or it used only in labs for small projects ?
The Pi Foundation has a habit of replacing Pi's very quickly .. as those who 'designed in' the Pi A, B, B+, B2 v1.1 etc. have found to their cost.
Finally, Pi's have a habit fo 'falling over' after a few days 'up time' .. although you can 'get around' this by rebooting at midnight every day.
The Pi has a lot of processing power, and lets you easily do complicated logic in your programming environment of choice... but interfacing with 24 V digital I/O, or even serial devices, will require external circuits or adapters for level shifting. I would also expect (just my opinion here) the GPIO pins to be more fragile, and less tolerant of voltage spikes, than digital inputs on a PLC.
As for protocols supported, generally the answer is 'yes' but you have to go search the various Open Soure repositories yourself (and it's quite possible the implementation available doesn't support some 'propriatory' functions due to Licence issues)
Conversely, a PLC makes interfacing with external I/O easy, but has much less processing power and is less flexible to program (ladder language and I don't get along very well).
And in response to the protocols question... as long as you have the appropriate converters to get from the Pi to whatever physical layer you're using (be that RS-232, RS-485, Ethernet, ....) it's definitely possible to write a program that bridges between two connections using different protocols. Just a question of how much time you want to spend, and how much use you want to make of available libraries versus starting from the protocol document and rolling your own code.
I use both, for different industrial automation tasks, and don't see one as a replacement for the other.