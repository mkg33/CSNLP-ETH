Doesn't work to back up to different location over the network (not that this is a good idea anyway) with a UNC path.  It's easier anyway to make backups locally and store them encrypted.  
There's really no reason NOT to use SQL Server's native backup functionality. It's great, understands transaction logs, and gives you most of the functionality you need. (Third party SQL Server Backup solutions are great because they work with the APIs that Microsoft has exposed, and usually provide encryption and compression support - and compression not only saves disk space, but typically reduces backup and restore times.)
As far as 3rd party products like LiteSpeed and Red Gate's SQL Backup, they used to be faster than native backup. That's because they use an API that SQL Server didn't. This was true in SQL Server 2000, but I'm not sure if it is still the case. However, they do encryption and compression and so may be well worth consideration given the size of your DBs.
Do you mean you currently back up the database MDF and LDF files to tape? I think this can be OK, as long as the database is offline while you do it (i.e. database detached or SQL Service shut down), but if you try and do that while the database is in use you will probably end up with backups that dont work because the files will have changed while being copied. 
As you've seen by the answers, most folks do backup to disk first, then to tape. What I've often seen (and recommended) is to backup immediately to disk that is on the server itself (this could be SAN attached storage, the key is the backup isn't written across the network). Once this immediate backup is done, it is then copied to a central backup server. You keep an immediate copy of what you need to restore locally. On that backup server you keep several days worth of backups. That way if you do have to rollback to a previous day or two, you're not requesting a tape. And of course, you back up that central backup server to tape. So that covers your ability to recover.
And make sure to do REGULAR transaction log backups. (I'd recommend doing them every 15 minutes or less - regular log file backups help keep your log file lean/mean 1 and for some reason end-users are always grumpy when the server crashes and they have to redo all of their work over the last x hours since the last logfile or full/differential backup.) Then, for redundancy purposes, use robocopy, syncback, file system replication or something to move copies of those backups to another location to protect against hardware/disk crashes or fires in the data center and so on. 
With respect to the types of backup you should be doing, if you want to recover all transactions and be able to do what we call point in time recovery, you need to make sure the databases have their recovery model set to full recovery and you're going to want to do Full backups along with transaction log backups. You may want to intersperse differential backups to reduce the amount of files you are restoring. All of this is covered in books on-line and it'll give a better description than any of us can in a forum post.
Hard disk is cheap, and increasingly reliable.  We got rid of our tapes a while back and have never looked back.
Also, to answer your second question, SQL Server does support Transaction Log backups. The MSDN documentation on the Full Recovery Model would be a good place to start reading up.