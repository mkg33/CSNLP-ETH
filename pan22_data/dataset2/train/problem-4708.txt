I, too, was going to form part of my answer around the article Aurora shared on the development of Scratch.
Students use the colors for more than just interpreting the purpose of the block.  In my introductory classes, the color assists early-learners with locating the blocks within an extensive collection of choices.
The Snap! Manual, while probably more information than you want or need, does also discuss the logic behind its color and shape choices. In particular, Section I and Section X provide explanation and justification of the design of the Snap! environment. I would think that in any original or modified design of a block-based language, using the development of Scratch and Snap! to inform your own is as research-based as you can get.
The colour of a block is a 'way in' for students, helping them to figure out what type of block they have. Ultimately, the important thing here is that there are logical categories of blocks—the colours just provide a way of visually showing what category a block is in, without an information overload of too much text.
Scratch even actively removes blocks to ensure that the number of blocks and categories doesn't get too large—if students can't find a block, it may as well not exist at all. This links well to the issue of colour: too many categories will mean that you begin to reach an unreasonable amount of colours. I suspect anything more than about 10 or 15 colours would be excessive (Scratch 2.0 has 10 categories).
When give a chunk of pre-existing code to recreate, a block's color helps communicate where in the collection to look for it.
Snap! makes its debt to Scratch explicit. In the "About" section, the its creators discuss their design choices for that which is an extension from Scratch: