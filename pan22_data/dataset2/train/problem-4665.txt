You have recognized that this function is actually doing two things.  Compartmentalizing the functionality, therefore, is a good idea.  However, that's not the best way to go about it.
When you do fields.update(), you're actually modifying request_as_dict.  That is unexpected behaviour from the caller's point of view, especially since you didn't warn about it in a docstring.
My second minor observation is that the docstring doesn't really describe what detect_flood() does.  It seems like it should be more of a comment.
I would consider save_entry() to be the real work for log_request().  The flood detection code has very little to do with it.  In fact, detect_flood() doesn't even use any of the parameters label, target, and request_as_dict.  Therefore, the flood detection functionality would be better written as a @rate_limited decorator instead.
By the single responsibility principle, and to achieve functional cohesion, a function should do one thing. As the responsibility of this function takes two logical steps, it makes sense to move those steps to their own functions. And since these functions are only used once, and so they would not be useful not desirable in the global namespace, it makes sense to hide them as inner functions.
My first observation is that you call save_entry() before detect_flood(), whereas the inner functions are defined in the other order.  That's misleading.