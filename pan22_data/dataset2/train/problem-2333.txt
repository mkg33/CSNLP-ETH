The tests itself would have no transaction control - as this allows to create more testing scenarios where selected tests are performed in a separate section with it's own transaction.
You could setup an DB SnapShot if some of your sections modifies too much data. And get that Developer Edition, the time you save is more than worth the price of it. ;-)
If you're willing to work it into the framework of your testing, encapsulating each individual test in a rollback block might work out, as that would undo every change made to the environment after every test. This would make it more difficult to combine automated tests that rely on each other though.
I'd recommend looking into DB Snapshots. They are (in theory) the fastest way to undo changes unless you're wrapping each change in its own transaction with a rollback at the end (after you've written the results of the test to a database).
I'd divide the tests in "themed" sections and each section would get their own transaction, which is rolled back to allow the next section of tests runs on the controlled data.