Accounting is a generic repository that connects to my account indata, Get is a method implementing IQueryable and handling all loads.
Two mistakes here. First, who cares about the user id? Account transfers are account to account, and account numebers better are unique REGARDLESS OF USER.
Repository classes should create domain objects. The domain objects may or may not look the same as the DB entities. 
You could also break out the ExecuteReader parts into two methods (one to fetch one item and one to fetch collections) to reuse the code more.
Use the term WCF service and not manager. Yes. I consider WCF services to be an UI layer since it's the interface to the calling user/client.
How coms you need an AccountDAL while I have not had a DAL for a specific entity for the last 15 years, awlw
No need for a userId in the WCF interfaces or the DTOs unless you want to let everyone be able to look at everybody elses accounts. Use the userid provided during authentication.
If you mean that you write your DAL by yourself (and not using a ORM): Stop with that. It's a waste of time. 
Please read up on RM's and all the technology that is avaialble in .NET ever since .NET 4.0 - querying is a generic interface (naturally you need a little more code below but only once or you use one of the plenthora of prepackaged open source DAL's).