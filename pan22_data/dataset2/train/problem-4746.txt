Neither do I see the point of speeding up this part of the software chain.  It will be swamped in time by the bit manipulations needed to map the used GPIO to a binary value.  E.g. if an ADC returns the reading on 6 GPIO they will need to shifted and separatley extracted (unless contiguous GPIO are used).
I don't see the point in using memcpy.  This is a read of a 32-bit word which could be achieved by a simple assignment.
This, on a raspberry pi zero for example, enables sampling at 12MHz, whatever the speed of the clock itself. This is a practical bottleneck.
Would there be any way to accelerate this software memcpy, so to in practice boost the speed of gpio reading? 
It appears that the ADC can be driven by Raspberry on-board clock at 40MHz+, but the software side is a bottleneck, limited by a memcopy. Namely, the bottleneck operation in the driver / module code is this step:
Following an impressive write-up in MagPi 32,there has been other write-ups for better parallel ADC control from a Raspberry Pi.