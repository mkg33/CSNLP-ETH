Thanks Nathan and r2d2rigo, the alphatest did the trick. And for the googlers the code that worked is:
It looks to me like depth write is enabled when you draw the trees.  The problem is that whichever quad draws first lays down depth as if the whole quad was opaque, when it's not, due to the alpha-blended texture.  When the second quad draws, parts of it are culled away that should be visible.
What you are looking for is Alpha Testing, a GPU mode that performs the same operations as Depth Testing, but based on the pixel's transparency, not depth. By the syntax of your code, I assume you are using Riemer's tutorials, and he has written one about alpha blended billboards. That tutorial was made for XNA 3.1, and since RenderState.AlphaBlendEnable was removed in 4.0, you must use your own alpha testing shader or use the default one.
Your problem lies in the Z-Buffer. When you draw transparent polygons, depth writing must be disabled to achieve correct transparency, or the polygons must be ordered back-to-front so they correctly overlap. But, since you are drawing a concave object (one plane intersects the other) and it has transparent and opaque sections, both of these methods can't be used.