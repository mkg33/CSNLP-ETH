Lastly, if you're calling Map.GetPoint(int id) a lot, it might be better to store Points as a Dictionary<int,Point> where the key is the point's id. You can generate this easily by calling points.ToDictionary<int, Point>(x=>x.Id) or by adding the points as key-value pairs in AddPoint. The reason this is better is because a dictionary lookup is an O(1) operation, which means it will take the same time (barring hash collisions) to find a point in a dictionary with 10,000,000 items as it will a dictionary with 1 item. A List cannot promise that efficiency.
Now whenever a new Point instance is created, it has its own unique identifier, without anything passed into a constructor, etc.
Lastly, there may be a simpler way of doing ids, instead of passing them in as parameters. Consider this code:
I would however prefer to use var in local variable assignments when the right-hand side of the assignment makes the type obvious.
Secondly, I don't like the single-letter variable names (with the exception of loop indices). They hide the intended purpose behind a cognitive leap. For your points, I'd recommend an array or collection of some kind, and for your connections, it may actually be more readable to omit them entirely and put the constructors into your AddPossibleConnection call.
The reason I would prefer this, is that if I were to change the type of a I then only have to change it once.