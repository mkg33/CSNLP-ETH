Your example of playing 5 bad cards and winning with the 6th one just depends on how far the AI digs into the tree. If your AI plans 5 moves or less, you just won't be able to get that combo because the moves before that will be considered bad. If it plans 6 or more moves ahead, it'll arrive at the solution using normal decision and pruning tactics.
It is a single-player game of perfect information. A good analogy would be a single-player game of Magic the gathering with an oponnenet that plays no card but automaticaly deals you some damage per turn. 
I suppose it's just the usual trade off. You'll have to decide, based on desired effectiveness of the selected strategy and performance in terms of how long your tree search takes, what you want. You have to decide how many moves into the future you want to take into account, and then you prune on the resulting tree as usual.
I got an evaluation function I can use on nodes if necessary. I'm trying to plan ahead and find good combo's of cards to play.
You'll have to figure out if looking 6 moves into the future takes too long or not (I don't know the branching factor of your tree).
I'm finding hard to prune any branch at all since even a branch with bad-scoring node can potentially lead to a good combo that will completely change the game (you know, like : play 5 shitty cards and be almost dead but the 6th card will grant you a win).
Also, you could use this as difficulty settings. For example, an easy AI would only consider the next move, a hard one considers the next 5 moves, an expert one considers 10 moves and so on.