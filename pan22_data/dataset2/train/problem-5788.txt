In addition to the other answers, you can also just run multiple appservers. Most appservers can just be installed into a directory and run from there; I regularly do that with Tomcat when testing servers.
If they're not really that simple, or if there are security concerns, then separate them. If there are strong security concerns, even separate them into multiple virtual machines.
All apps can of course consume vast amounts of resources and bring down the whole JVM. What I usually do is to throw all the well-behaved ones in one JVM, and give the nasty ones an JVM each. This especially applies to apps which assume that they own the whole JVM, calling System.exit() etc. You can also throw in some security constraints to prevent that, but this gives you very little IMO, you usually want the app to exit on error. 
A really neat piece of software for managing all the JVMs is Upstart. It lets you set up respawn rules and define actions on crashes. If you don't have Upstart, you can always use inittab, although syntax errors in inittab can have grave consequences :)
That solution is a middle ground between running all apps in one server, and having a full virtualized OS for each app. If the apps run in different installations, they can only affect each other if the exhaust system-wide resources (CPU, RAM, disk space, network bandwidth). This can be prevented by applying appropriate limits on the OS or server level, just like you would need to do for full virtualization.
If they're fairly simple, it's probably not too likely that they will bring the entire server down, so you can run all of them on one or a few instance(s).
If they're paying clients, give them their own sandboxes, one per client. If they bring it down it only affects themselves. Seems fair to everyone. Different JVMs is probably the best way to do this.
Regarding performance when having multiple JVMs is to set min heap size fairly high, limit max mem usage and play around with the GC algos a bit to tune each app. JBoss start up scripts have good examples there.
First of all, you can use a much lighter Servlet container if you have simple apps with lower BW. winstone is very basic, jetty is a good alternative for medium to large sized apps if you ask me.