Stable releases that receive a minimal set of critical and/or low-risk updates over a defined lifetime offering stability for that lifetime. At some point a new stable release replaces the old. There may well be breakage during the upgrade from one stable release to the next but that is something that can be planned-for and scheduled.
Point 2 can be the trickiest to deal with. Sufficiantly bad hardware will ruin aspirations for overall system stability, but many hardware issues once discovered and pinned-down can be mitigated by software changes.
Linux is often described as "stable". I have some inkling of what it might mean, but today I felt the need to understand it completely. 
The Debian project (and possibly other Linux distributions) uses the term "stable" and "unstable" to describe releases in the manner @evotopid states.
Point 3 is mitigated by designing isolation into the system. So that when a peice of software does go haywire it's effects are hopefully contained to that one peice of software rather than the system as a whole.
For me, "Stable" means it doesn't change very much. So a "Stable" version of a distribution, might have security updates but few other changes; certainly none which are likely to make a working application stop working.
Well fundamentally a stable system is one that doesn't suffer from instability. Once it is set-up to do a job it keeps on doing that job. No system is perfectly stable but some systems are much more unstable than others.
An "Unstable" means that it is liable to change its interfaces, e.g. APIs, command structure, filesystem layout, or other things which can cause a working system to become a non-working one.
I've been using Linux for more than 2 years now, and I'm a satisfied user. I started with Ubuntu, then switched to Fedora and now I'm fond of Linux Mint.
'Stable' means that a version has already been tested and used, so it will often times have fewer bugs than the 'unstable' version, which is less well-tested. , it is less prone to errors
Point 1 is mitigated through software maturity. With lots of users using the software for a long time and reporting bugs, hopefully most of the serious ones will be pinned down and fixed.
Point 4 is why we have "stable releases" of software projects (including but not limited to operating system distributions). Instability caused by changes in software can be significant, but not changing the software at all is not really an option either because user needs and outside influences change. 