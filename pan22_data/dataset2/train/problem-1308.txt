I change the value of JAVA_HOME. Back to the same command line window, PATH again, same value... as expected (by experience!).
I tried with Windows XP Pro SP3 (32bit). I do have a path with several occurrences of %JAVA_HOME% (and %JAVAFX_HOME%, etc.). I go to command line, type PATH, I see the variables expanded. Good.
This hypothesis conforms with my other observation - adding %ProgramFiles%\Something to the users PATH will always result in expected expansion of %ProgramFiles%, given it has been defined in machine environment at the time of variable change notification (due loading order - MACHINE and then USER). But when you modify machine environment correct variable expansion only happens at the boot time (right now I have no idea how
There appears to be a quirk in the O/S depending on how you were connected to the machine when you attempted to change the environment variable.
Make sure there are no spaces in the PATH when you are defining your own user environment variables. eg: C:\GNAT\bin; C:\GNAT\include wont work, because of the space between the ";" and "C:\GNAT\include".
Not sure what is the exact mechanism there, but it seems that any running program, including cmd.exe, capture the values of environment variables at starting time, and doesn't look back... (although I believe a good behaved program can listen for env changes, not too sure though).
It might be seen as a feature or a bug or annoyance, but that's the way it works. Hey, at least, unlike Win9X times, we don't have to reboot the computer! And unlike NT times (IIRC), you don't have to log out and back.
I do believe what Windows fails to expand a variable in PATH because it thinks what it not defined yet. Consider:
Your path is the concatenation of the system path followed by the user path.  Additionally, system environment variables may not contain references to user environment variables, and any such references will not be expanded.  To get the desired result, insert the reference to %JAVA_HOME% in the user environment variable PATH, or create such a variable if it doesn't already exist.