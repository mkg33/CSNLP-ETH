Neither of these will give you a high-speed full-screen Linux workstation, but for certain situations they make interesting solutions.
There doesn't seem to be any issue so far since Linux uses the special swap area to store hibernation image while Windows uses the system partition.
Windows licensing might be a caveat here. (Back then, I was on Windows 2000, where all of this was easier.) As far as Windows is concerned, you are running it on two different hardware configurations (processor, disk, network adapter). While I am not sure about the legal implications, but the product activation procedure might require you to get two licenses. (If you can get Windows to run off a raw partition in a VM, it will probably detect a hardware change and require re-activation each time you switch between host and guest configuration.) 
Some kind of virtualisation is probably your only recourse if you insist on using a single computer. I don't use a Mac but from what I have seen, Parallels is pretty seamless - you can "switch" between operating systems with a hotkey then. I have used VMWare on both Windows and Linux and have been surprised by the performance of the hosted (guest) operating system, it is very near native (though granted I haven't tested graphically intense workloads). VirtualBox is open-source and free, it works okay, but VMWare works a lot better. I think there is a limited free version.
Since Linux (at least the various flavors of Ubuntu) easily adapts to changing hardware (to the point that I could rip the disk out of my old laptop, install it in the new one and only had the network adapters to reconfigure), you could also have the Linux VM boot the system from a raw partition. That way, changes made to the Linux host would also be reflected in the VM and vice versa, the only exceptions being settings tied to a particular hardware device.
You will need to maintain each OS setup twice (the host installation and the VM one)—technically you have four computers, unless you use the shortcut described below.
Technically you can enable hibernation on both systems and resume a system from hibernation after you put another system to hibernation. This will be faster and more convenient than actual rebooting. I'm doing it on my current machine.
but what this does is share the kernel between Chrome OS and another distro, nominally Ubuntu. Since Windows and Linux use different kernels, this approach wouldn't be possible. They wouldn't play nicely together.
This still means you will have the virtualization overhead for one of the two OSes. But you can decide on boot which one gets to be the host and which is the guest.
Along those same lines, you can duct-tape a raspberry pi to the back of your laptop, plug it into your USB port and have both computers run at the same time.  Again you have to use your windows machine to access your Linux machine, but with this solution you can still run headless for X/ssh access but you could also remote desktop (RDP) into the PI and use it's X implementation which should get you a better linux desktop experience (Last time I checked, free X servers for windows were slow, difficult to set up and error-prone)
It basically runs as an app on your host then but is actually a computer in the cloud. You just can switch over to the app seamlessly, just like you would focus any other app. 
If you insist on having native performance for both operating systems, then dual-booting is the only way to accomplish that. If you have a fast SSD (say a Samsung 960 or similar) then rebooting needn't take that long.
If you run headless, Linus runs almost anywhere and is amazingly light-weight.  I've run it as a windows service before and been able to connect to it from an ssh client or X server running in windows (So all the Linux GUIs just display).
Use a GNU/Linux system of your choice on your host and then a PaaS solution. One which is feasible for you would be "Shadow".
In addition to the other solutions proposed here, there is also a “cross-virtualization” approach which I once tried:
To boot the operating system, the kernel needs to have low-level access to the hardware, and running two different kernels (Windows and Linux) side-by-side would not be very easy to accomplish at all, if not impossible.