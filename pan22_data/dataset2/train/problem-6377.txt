So at the moment i have my camera set 10 units away from the origin facing that direction. I can see my geometry fine, it renders perfectly. When i use my rotation function...
Now normally in my previous opengl applications i'd just setup the yaw and pitch angles and have a sin and cos to change the direction vector using (gluLookAt) but i'd like to be able to do this using GLM and matrices. 
The correct way to do this would be to apply the rotation matrix to the object first, then simply ADD the translation vector, rather than multiplying it in. This will then translate the object on the world axes rather than the objects transformed local axes. This means that the final rotation matrix will rotate irrespective of the translation vector applied afterwards, thus pivoting around its local origin, rather than orbiting around the world origin as you have described.
I'm setting up my ViewMatrix using the glm::lookAt function which takes an eye position, target and up vector
What i want is for me to look to the right and left (like i would with manipulating the lookAt vector with gluLookAt) but what's happening is 
and if i've not explained it well, basically i'm trying to get a first person camera working with matrix multiplication and rotating my view matrix is just rotating the model around the origin. 
My camera class has standard rotate and translate functions which call glm::rotate and glm::translate respectively
It just rotates the model i'm looking at around the origin, like im just doing a full circle around it. Because i've translated my view matrix, shouldn't i need to translate it to the centre, do the rotation then translate back away for it to be rotating around the origin? Also, i've tried using the rotate function around the x axis to get pitch working, but as soon as i rotate the model about 90 degrees, it starts to roll instead of pitch (gimbal lock?).
I've just switched from deprecated opengl functions to using shaders and GLM math library and i'm having a few problems setting up my camera rotations (first person camera). I'll show what i've got setup so far.
It seems to be a case of your translation matrix and rotation matrix being combined together and in the wrong order.