If a GPIO is unused and unset, what is its default state? Quite likely just floating (most are tri-state so good luck)..
I've seen some pins like microcontroller's GPIO pins on the desktop computer motherboards for a couple of times, I wanted to know, first, are they really GPIOs? if yes, is it possible to read from or write to them?
I think the question if motherboards have GPIO is very specific to the model and make. Some may, some don't.
Most importantly, if your application needs to last for several years, the motherboard model should as well. If not, tying to very specific motherboard hardware is not a good idea.
E.g. on my Asus desktop board it contains a Nuvoton NCT6775 for fan control and temperature read out. This is accessible from the (vendors custom) BIOS and Windows desktop utilities. I need to run Asus' software in order for the fan control to work, which means the PWM fan control is done by software. On a Linux installation I need to set up it manually via this kernel module and pwmconfig. 
In short, you have to get lucky that an unused GPIO has been set in a manner that you can use it; much like arduino (but without real defaults), think "INPUT/OUTPUT/TRI". It has to have a usable trace on the motherboard that hopefully has a pin or pad to solder to. Then if you know the address location of the GPIO you can use a standard user space driver easily.
Having programmed BIOS code, I can say that every motherboard has GPIO's and they are completely available in the user address space and the port address is usually very close to the parallel port. I've made custom drivers for custom motherboards using standard parallel port drivers, all I had to do was modify the address number, but I knew that number in advance.
Can you use them? Well that depends on the person that programmed the BIOS. The state of all GPIO's has to be set pre-compile, all unused GPIO's could be easily set to be disabled.
If you look at the Nuvoton NCT677xF datasheet you will find generic hardware for controlling PWM, reading temperature & voltages and also GPIO via SMBus. Equipped with both gives you a decent start to make it work. In theory you could use this chipset for GPIO functions.
PCs generally have i2c interfaces, and you can find IO expander chips for i2c like the TI TCA9535DBR.
So indirectly you could do this depending on your speed requirements. If you're on a PC then exact timing requirements are tricky anyway.
However I wouldn't touch it. You don't know what hardware is connected to it, unless you want to dive into a very specific model of motherboard and reverse engineer it (e.g. layout, pin allocations etc.). It is not broken out to a connector neither.