Rather than trying to get transport security right (which you should do none the less) you should encrypt the data itself (e. g. with PGP or GnuPG), transfer that encrypted file and finally decrypt it on the target system.
If you use Windows (like I do) , this being the case, instead of a FTPS server (such as FileZilla), you probably just want a SFTP capable, non-TLS, server (which is based on SSH) such as NULL FTP Server or what I use: WinSSHD with Tunnelier client.
But if I understood you correctly you want to use some kind of web-based SFTP client. That means that you also have to secure the connection between your client and the web-site you're using to transfer the file.
While SSL and TLS differ in ways that make them inoperable with each other, they are generally considered equal in terms of security. The main difference is that, while SSL connections begin with security and proceed directly to secured communications, TLS connections first begin with an insecure “hello” to the server and only switch to secured communications after the handshake between the client and the server is successful. If the TLS handshake fails for any reason, the connection is never created.
Suppose I have a text file with confidential information. I want to transfer from American facility to the france facility via sftp set up in a website.
In day-to-day work, I'd be comfortable transferring unencrypted data via SFTP.  The transport protects it.
With FTP, regardless of whether the data is encrypted or not, you just shouldn't use it.  FTP doesn't encrypt the authentication details.   The username and password is transmitted in plaintext, and you end up compromising your account info.