If you are on the web and you like to let your users to generate a lot of content, you may try to use couchdb as database backend. 
In this case you can validate the client version at login and redirect the user to the map sources if major changes to maps where happened since the last login.
Now if you are talking about dynamic and persistent data about what is going on in the maps (eg. where other players are) then that data should go in a database. Similarly, if the maps are user generated then that's a whole different enchilada, because players will generate a lot of content; again, massive data that needs to be sorted goes in a database.
It would be better if you knew what kind of change will be involved. If your world is quasi-static you would like to distribute the basic map to all your clients and to comunicate the changes only to player that visit an area: this allow you setup map distribution services that don't use the same bandwith of your game server.
I've written a few games myself, not an RPG but wargames and this is how I do it (not necessarily the best way but it works).
The first one let you to add data in a way that client can process only if they know how to, backward compatibility or ligth/full compatibility for example; the latter let you build a system that can grow from a couple of user to thousands.
In both cases you have to split the world in chunks: you probably do not load the whole world in memory when you render it. Don't do the mistake to size the map chunks tailored to the client needs, changes to client should not affect the server: add a level of indirection, the client probably have to load a few of chunks to work smoothly.
Then you get the characters location and do some database query in a loop, you'll actually need a nested loop (loop for x and y).
As you state, store map data using x and y coordinates, so you might have the x and y and then terrain type, ie swamp, forest, castle etc.
This comes at the price of system design, the changes need time to propagate and collisions may occour so you have to think about this kind of advanced problems in the earlier stages of design: is the game worth the candle?
It depends what exactly you mean by "maps". If you are just talking about the tile layout to display, then that's probably not necessary to put in a database. A database is meant for a massive quantity of data that needs to be sorted, like all the users of a website; for the relative handful of maps that a typical game has you can just store those as flat files and have the game use a plain old URL to retrieve them. In other words, what you're already doing (a text file stored on the server) is fine.
Intermediate cases exists, here you can try to mix the two strategies up so if immutable or near-immutable content exists, you should separate it from the rest of the contents and distribute them in an appropriate manner, while using from semi-structured to structured data provider for the contents more subject to changes.
Using Couchdb you get a rest json based api, filtrable change notifications and using indexes you may look up the data fast.