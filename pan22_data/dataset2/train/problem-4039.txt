The functions do too much, they should ideally do only one thing. I'll show you how you can turn test_for_win into a pure function which doesn't modify the game state. It can just take the grid as an argument, check who has won and return this player (e.g. 1, 2 or 0 if no one has won yet). In the main loop you can check what the function has returned and change the game state. Pure functions are usually easier to test.
It looks to me like you can simplify your sprite class as well. In my example below I just use a  mouse_hover method in which I check if its rect collides with the mouse, so you can probably remove the mouse_click method. Then use this method in both the hover and the click loop. Also, you should give it the initial image in the __init__ method instead of assigning it later.
Regarding the images, it seems you're loading them again and again when you switch them, but that's slow and consumes extra memory (that's not problematic for a game like tic-tac-toe). Load all images when you start the program and also convert them with the .convert() or .convert_alpha() methods to improve the blit performance. Then just reuse these image variables in the rest of your program instead of reloading them, and the board tiles can share the same images.
It's also inefficient to create new font objects the whole time in the print_to_screen function. Define them once as global constants and then reuse them.
I'd also remove the Quit function and put the event loop back into the main function, because you can also check if event.type == pygame.MOUSEBUTTONDOWN: there and remove the mouse.get_pressed check and the clicked variable. 
Replace the wait function with pygame.time.wait(2000) or a use timer variable. CLOCK.tick(FPS)  returns the time since the last tick which you can use to increase or decrease a timer.