Off the top of my head, the closest command is M-z " which deletes everything from point to the next occurance of the " character.
Similarly to Justin's suggestion C-M-SPACE gives you "mark-sexp" which will select to the balancing paren, quote, etc. and then you can C-w or whatever to make it go away.  In case you want to SEE what you're about to delete before you delete it... 
I'm afraid I don't know about VIM's ci feature, but have you looked at Emacs regexp replace?  I can't speak to the exact semantics or how easy it is to use in comparison, but it's what I would use for what I think you want.
I tried the solutions here, but found each of them wanting in some way, so I came up with this.  It accepts either a beginning or ending delimiter, and uses built-in Emacs functions to avoid needing a translation table for delimiters.
Here's my version which will delete everything within (or including) a matching pair of characters. The character pairs are defined in a list so that the matching start/end character are known. I've mapped it to "C-c i" for change in and "C-c a" for change all of.
There is also C-M-k, aka "kill balanced expression", which will delete a full parenthesized statement or double quoted string etc. based on the current modes definition of "balanced expression" and the character currently under point (ie. it only works if the cursor is on the opening '"' or '(' etc.). 