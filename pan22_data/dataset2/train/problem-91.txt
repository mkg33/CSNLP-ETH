Your pow(double, long) function is \$O(n)\$ on the exponent.  This means that given a very large exponent, your program will never finish.  You should use an exponentiation by squaring algorithm instead.  That would make your function take \$O(\log n)\$ time instead.
String is way slower than numeric primitives, each time you create a String you create a full object that should also eventually be garbage collected.
Make MathUtils final and give it a private constructor. It should be neither extended nor constructed.
( Never use temp as a variable name, you mostly have good names, so this was probably just a slip. )
Both your pow(double, long) and your pow(double, double) functions do not correctly handle a negative exponent.  You could simply test for a negative exponent, flip it to a positive exponent, and then compute \$x^{-n} = 1/x^n\$.
Your javadoc needs improvement. You do a reasonable job of explaining what methods do when everything is on the happy path, but you don't discuss error conditions or corner cases at all. For instance, compare your ceil() javadoc to the javadoc for Math#ceil(). Double.MAX_VALUE is significantly larger than Long.MAX_VALUE. The best way to fix it is think of every corner case you can, add unit tests for all of them, and then document what happens. If you don't like what happens, adjust your test to the behaviour you want, document that, and then fix the code to return it. Repeat that for every method you have. Then find a buddy and ask them to read the docs only and tell you what corner cases you didn't mention.