You have to make sure that your code deals with that input correctly.  The way to do this is to change your test loop slightly - instead of
Besides spelling errors, you shouldn't have the \n at the end of that line, because you are using a println. Personally, I always put my \ns at the beginning of each continuation line, but that isn't completely nessisary.
Again, extra \n. Personally I would suggest using hyphens (-) or equals signs (=) instead, because those are more common for creating horizontal rules. Underscores suggest a blank that the user is supposed to type into.
Whut us thish shpaghetti?? Please, learn to use System.out.format and ternary operations (condition?valueIfTrue:valueIfFalse).
In some situations, the best guess is one that is "illegal" - that is, you ask for a combination that is inconsistent with the information you have so far. It can even include a doubled-up digit - e.g.
Less focused on functionality and more on nomenclature: I wouldn't call your new Random() the name randy. While the name is pretty clear in what it does, the word randy also has a more immature meaning. You never know who will see your source code, so if any of your customers ever sees code with somewhat immature variable names or comments, they could think your immaturity extends to functionality, even if it doesn't.
At this point, I can no longer bear to read your code any more. Please, just write a new program, and write it with configurability and reusability in mind this time.
which leaves you with 1440 possible combinations (any of the 4 numbers could be the one with the white peg, but it would be in the wrong position. That leaves you with 4 possible numbers in each of three positions, times 6x5x4 for the other three open positions (which must be filled by one of the numbers not yet used).
If you are trying to solve the game with a computer, you typically want to find the guess that minimizes the maximum number of valid combinations that remain. It turns out that if you start with the guess
The correct answer would be "one black, two white". But your code would give "one black, three white" since the repeated three in the guess gets counted twice. By switching around the test, each value in the random number only gets looked at once - and that makes all the difference.
References: http://fourdigits.sourceforge.net, http://www.cs.nccu.edu.tw/~chaolin/papers/science3203.pdf
If you want to be generating digits 0 through 9 inclusive (that is 10 different digits) you need to do:
The game should be run as separate instances. The main method should not contain any logic having to do with the actual game. All it should do is (1) instintantiate Game, (2) set configurable options, and (3) call an instance method of Game (called something like play) to run the game.
So yes, only four guesses is pretty hard. Five guesses gives you a less than even chance, six is better than even.
You can actually make a list of all possible combinations, and "cross off" the ones that don't fit in every turn; combining this with "if I guess abcd, and the response is [x white, y black], how many combinations are there left?" and again picking the guess that minimizes that number. Quite easy to do in a computer.
However, when you increase the number of possibilities to 10, and reduce the guesses to 5, you can no longer do this, and the chances of never guessing a correct number increase dramatically, e.g.:
You should combine the declarations for maxTry, indexMatch, and match into one statement, for conciseness.
Therefore, I think you need to either increase the number of guesses to 10 (at the least), or chose a smaller set of things to guess, like A-F, 1-6, or something GUI based like Mastermind.
In general, avoid using immature words, the names of coworkers, companies or products or words in foreign languages, except if the word you want to use is relevant to what the variable is intended for. EPAComplianceCheck() is acceptable. ScrewYouGinaMcCarthy() less so.
However, with your game (to borrow the nomenclature), there are 10 possible pegs, and as they're unique the combinations are:
I will not comment on the random number generation, variable naming, or general code structure - you have enough good information in the above.
I think it is. Similarly to your game, in classic Mastermind, the player has to guess a combination of 4 non-unique coloured pegs, and each time is given a mark for the number of correct position and colour combinations.
Which is an increase of 288.8%, furthermore you're only giving the user 5 attempts to guess, as opposed to Mastermind's 6, 8 or 12. The reason Mastermind plays with a minimum of six, is that you get to test every combination, e.g:
Really? What game is this? Is this like, tetris or something? Make it something like CodeGuessGame, and add a javadoc comment to the class explaining exactly what it is, and what it does.