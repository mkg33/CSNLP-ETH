Below is a minimalist code representing the real case. Note the global variable out - this is what I came up with to be able to handle communication between 2 sub threads. I don't particularly like having this global variable, but it did solve the problem and looks simple. Any suggestions here would be welcome.
I'm handling this using contextlib.redirect_stdout. However, the data fetching happens in a sub-thread and must update widgets in the main thread, so I must use signals. Also, to be able to capture multiple progress messages in one single function call of the data fetching function in the command line module, I need to have a listener for stdout, which I put in a second sub-thread. 
So, I have this module which is meant to be run as a command line application. When called with some arguments, it takes time to run, giving progress to stdout and in the end returning some data.
I would like to know opinions about the design I came up with to handle stdout capture to show progress in a PyQt5 application.
In my PyQt5 application, I'm able to load that module, run it, and get its data. However, since it takes time to run, I'd like to give progress feedback.