Once you do this enough times, you start to develop a sort of gut sense for what sorts of obstacles you might end up.
At some point, you'll run into an obstacle you didn't anticipate and realize you need to pivot and adjust or even entirely re-write your code to accommodate. (Having to rewrite code can seem painful at first, but it's basically something everybody needs to get used to. It's helpful to have a sort of zen mindset, where you let go of your attachment to your code).
Notice that if we had kept drilling down, we'd end up learning about the fork and exec thing here as well.
For example, take your shell example. If I had absolutely no idea what I was doing but just moved forward instead, I would probably...
Ok, how do we do all three of these things? Well, if we drill down, we might end up coming up with something like this:
Another strategy you can try is to try planning ahead: specifically, figure out what precisely you want to do, then decompose that plan into smaller and smaller subproblems. The nice thing about this approach is that it forces you to think about potential obstacles you might run into and can help make it easier for you to form precise google queries.
To a certain degree, it comes down to experience. But if you don't have experience, I feel you can get a lot of mileage of just trying to do the simplest thing possible to see what'll happen and googling your questions as you go. 
For example, we want to write a shell. Well, what exactly does this shell need to be able to do? Let's say as a minimum prototype, I want to be able to: