So you can see it negotiated a protocol, and then started offering authentication types.  When it hit publickey authentication, it found a key, sent a key and then the key was accepted by the server, which then authentication succeeded, and didn't proceed with any more auth mechanisms.  If it had failed to handle the key, I would have gotten the password prompt, because that would have been the only method left to try.
The great thing about internet protocols is that most of them have detailed engineering documents you can go to. In this case, RFC 4251, which references a number of other SSH related RFCs. The one you're after is RFC 4252, The Secure Shell (SSH) Authentication Protocol. From the Framework section:
At that point your client (PuTTY) will check to see if it has any keys to use (via Pageant). If it finds a private key applicable to that host, it uses it. If it finds an encrypted private key Pageant will ask for a password and cache things for you. Then putty tells the server "publickey" and the process goes by RFC 4252 Section 7. The SSH server MAY fall back to password authentication if configured to do so (typically via PAM).
My favorite explainer of how keypairs work is Simon Tatham: Public key authentication - an introduction 
The interesting property is that even if you know a public key, it's astronomically hard to figure the corresponding private key.  At the same time, any message encrypted with one key can only be decrypted with the other one.
The server-side is configured for the authentication types it allows.  And then the client reacts accordingly.  From my linux box, I ran an ssh session to one of my hosts with debug output to show what it does:
In short, there's a pair of keys, a private one that is totally secret, never send to anybody; and the public key, that you can send to the winds, or post to the web, whatever.
Is SSH running as a service on a particular port or does it simply pass your private-key and then the login service sees that and tries to connect using it?
Basically, the SSH handshake compares the methods the client and server support for authentication, data encryption, etc. until they find ones they can agree on, or give up.  The standard port is tcp/22, but some folks change it to reduce nuisance hack attempts.