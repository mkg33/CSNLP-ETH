I have a class which parses a .csv file and converts it into successful rows and errors. Currently I have 12 different kind of errors (mail is not valid, missing column x, row is duplicate etc.).
This way the getMsg method is short. Also adding a new error only requires to add one method instead of two (and no modification of the getMsg function).
Each error has a custom message. I also need to know in other classes what kind of error a row was, so a simple string is not enough. So far I am using this error class:
I thought about creating 12 separate classes, each class named by the error name. Something like that:
There are 12 constants, each representing the id of a specific error. There is one method getMessage() which uses a switch with 12 cases. Then I have 12 messages of the kind getErrorMessageX and another 12 methods isThisErrorNameX. 
I feel that this is kind of messy and redundant. Also their might be me more error cases in the future, which will bloat up the class even more.
However, I think creating 12 different classes, where each consists only of 12 lines, is a bit too much. Is there a better solution then those two extremes? 
Its better to use factory pattern for creating custom errors. I'm working on Java and following Java code might be helpful:
So instead of if($error->isDuplicateUserError()) I would write if($error instanceof UserExistsAlreadyError) .