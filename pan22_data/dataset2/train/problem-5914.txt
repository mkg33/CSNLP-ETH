The auto-generated files here would be specific to development. If, for example, you chose to use a zip container or such you could possibly use the id as the filename within the zip (e.g. '1.bin') and switch the IResourceManager implementation.
You could also use resource IDs to decouple your resources from paths. On your development environment you would have a file such as:
That absolutely makes sense. You should not have any constant path in the string you pass to your Get function, or else it ties you down later. For example, if you decide to package your assets into some sort of compressed/encrypted archive, you would then be locked down to create an useless Media folder in the archive and then put all the assets inside it, when really the archive itself is something of a Media folder.
Rather than a resource manager though, you can just have an indirection step that resolves a relative path into an immediately usable path. So:
You don't really need a full on resource manager in this case. But yes, it's pretty common to have your assets to be arranged in a particular structure under some root, but for the code to  all be written in ignorance of what that root is.
Your resource manager should know where to go to find the resources, whether it's the file system, an abstraction (archive), perhaps a distributed file system, or even the network or internet.
I personally also think Get("Sounds/boom.ogg") might be redundant; doesn't the "ogg" extension establish it as a sound? Again, if this is the case, you could just use Get("boom.ogg") and the resource manager could look at the extension and know to go into the Sounds folder. But it's totally up to you.