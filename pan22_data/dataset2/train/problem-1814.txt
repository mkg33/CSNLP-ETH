What I would likely do is convert the rectangle to a Pixmap, then, assuming the rectangle has a solid single color border (with a different color than the rest of the rectangle), I would simply iterate through the pixels in the Pixmap looking for the border color and save all the positions to an array. Then all you would have to do is periodically set the circle's position to the next point in the array, looping (ideally the points would be relative to the center of the rectangle so the circle would stay with the rectangle even if it moved).
there are probably better ways to do it, but this is what comes to mind for me. you could reuse the code to generate paths of any shape by drawing them in paint.
if the image is moving (animated) apply the offset to the array points just before you display so you dont have to reload the array each time.
To keep the circle moving in one direction around the rectangle instead of jumping you would have to create a search algorithm that moves, for example, first left along the top of the rectangle (assuming the border is the top pixel) then down (scanning to half the rectangles width so as to get the full rounded corner), then right (along the bottom pixel), and finally back up. Now this scanning technique might not fit your exact needs, but take it as a starting point.
i would iterate through the pixels in the image, and identify the ones on the edge (adjacent to a transparent pixel) (or load an identical black and white hollow rectangle image showing only the edge points for easier identification) log those Points into an array by starting at one point remove it and then move to an adjacent edge point. get the position the image is displayed at offset the list co-ords by the image position. you then have a list of points for your circle to move through.
You can do something similar for the y coordinate; essentially, you're creating a wrapper object and setting coordinates manually to some offset (so the circle is always positioned correctly relative to the rectangle).