If you run Resource Monitor (resmon), and go to the Network tab, you will notice the different processes using the network bandwidth.
Dropbox might be faster when you send larger quantity of files. FTP is as fast as you can get when we talk speed but it takes too much "talk" between server and client computer for each file, so the ftp seems to be slower. If you are uploading some open source application with thousands of files, it is more convenient to compress all files, upload it via FTP and decompress it on server.
FTP can do none of these things (it is a simple protocol to send and receive streams of data without reference to any other data that is available on the remote end). Tools like rsync and Unison can ‘skip chunks that the other side already has’, but are usually limited to comparing chunks inside files at an identical path in the synchronized hierarchy. Dropbox appears to extend this idea to collections of files (so if you ‘upload’ two nearly identical files, presumably it could arrange to only send one plus enough of a ‘diff’ to re-create the other).
Whenever you drop a file inside local "dropbox", dropbox-client computes hash of that file and must be sending some extra data like filesize, filename to the dropbox-server.
Although Dropbox is using other services, they have historically been using Amazon AWS (Amazon Web Services). It sounds like your transfer from the source to destination has a very big transfer pipe. In my experience, Dropbox is using a destination that can accept large amounts of data at once. Dropbox also distributes the upload to different IP addresses. The site you are FTPing to likely has a much smaller transfer pipe and does not have the ability to distribute uploads as efficiently.
I am not sure which hashing algorithm dropbox uses, but I am 100% sure their working principle is similar to one I outlined above.
For me, when I am uploading a file to Dropbox, it is using 4 connections to send 4 different IP addresses.
This way you end up "uploading" file logically only. As there is no real file-content transfer, this has to be faster than anything else.
As others have mentioned, Dropbox can skip parts of files that have not changed. But also, Dropbox will skip uploading files if it already has a copy on the server side (one that you or anyone else has already uploaded).
If dropbox-server finds similar files (they must be maintaining index of hashes and file-data on their server) it will simply inform client that file has been "uploaded" successfully. ;-)
So, if you are trying to upload a file that is identical to a file that Dropbox already has, the upload is skipped (and the other linked machines can start downloading it from the Dropbox servers). If you are uploading a file that is nearly identical to another, already uploaded file (it is not clear whether the already uploaded file has to be ‘yours’ or could have come from any user), then it will just send enough parts of the file to recreate it on the server when combined with the file that was already uploaded.