It is relatively easy (once you become practised with it) and allows you to help the student as well as encourage them to think for themselves and become more self-driven over time. (Yes, there are always exceptions.) Essentially, as the term suggests, it involves asking the student to provide answers by asking useful questions, thereby teaching them how to work it out for themself.
If you want them to take another approach, you may find it worth your time to invest some actual classroom time in teaching how to debug.  One way is to get "stuck" while coding in front of the class, and then go through the process of debugging it.  Very carefully model the behaviors, then stop, and ask the students to reflect.  
And you've covered more than they asked and (hopefully) they feel they've learnt something and not made fun of.
A third approach, which is more forceful, is to use a page (like this or this) with multiple timers.  Students who have a question for you don't necessarily get you.  Instead, you simply set a timer.  (Having a second monitor display to a projector would help with this approach.)  Only if the timer reaches 5 minutes and the problem still isn't solved can they ask you for help.
It takes practice, and can work well. With this I've had student feedback that ranged from, "I really like the way he teaches us how to figure stuff out", to, "He never answers any questions." So YMMV. But by being positive and helpful you both get more out of it than by deflecting or just telling them the answer.
(You didn't say what ages your students are, so this answer is necessarily a little nonspecific.  There is also an article here that you may find helpful.)
If this happens semi-regularly, and you continually emphasize fix-up strategies, you may make some meaningful headway.
How you apply it (in your own style, that is) is something you need to discover, but it can be from the simple:
This allows you to provide help (for issues where you really are the expert "oracle") while also giving random intermittent reinforcement (the best kind) for them figuring out the problem themselves.  (Note: this works for co-workers as well as students.)
For example, "How do I sort a list?" Of course, there are many possible solutions, but pick one consistent with their level of understanding and with the class. Then, walk them through it. "What if the list just had two elements?" "What if we repeatedly broke the long list into smaller lists?" Or something along those lines, depending on the way you approach the solution.
Randomly be "too busy with something" for a few minutes, but say you'll get back to them.  Then set a timer, and then check with them some number of minutes later.  Reward them (somehow, depending on age group, etc.), publicly if possible, if they figured out all or part of the solution themselves.
The best thing they can learn from you is not a memorized answer - it's the process by which you solve problems. Instead of giving them the answer, instead of telling them to go find the answer themselves, walk them through the process of solving the problem, step-by-step. It takes more of your time initially, but they'll be stronger coders over time. 
First and foremost: don't expect total victory in this regard.  Your students ask you because it is frustrating to be stuck, and it is perfectly natural to try to find the quickest path out of frustration.  
It sounds like you don't want to deflect them when they need help but would like them to become more self-directed and learn to solve the "easy" stuff themselves.  One teaching technique that I have found useful for this, no matter the subject, is questioning. 