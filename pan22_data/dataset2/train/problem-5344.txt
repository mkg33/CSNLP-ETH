By lazy unmounting it, the folder dissapear from my hierarchy, and is hidden. And when the background process end, it is successfully unmounted.
Paraphrasing the manpage, it means that if the volume has open files when it is lazy unmounted, in reality it remains mounted but just not accessible through the filesystem and is only truly unmounted when the last open file is closed.
Ideally, since you didn't need to turn off the software, no requests were lost and essentially no log entries were lost either, since they were still being written to the old mount until the files were reopened (how well the software handles reopening the files is up to the software).
Say you really need to change the volume on which a software is writing a log, e.g. a web server, but it has a lot of traffic and can't be turned off for the operation nor can the logging path be changed.
When the disk is mounted, nautilus build up previews (I think, I am not sure), and lock the files. When I want to unmount it, it says that it is locked by another process.
I use lazy umount in cases where it was obviously stuck for various reasons (such as nfs server down), also when I need to see the original content of the directory that was mounted over by the mount. In both cases the mount is busy. I think there are other edge cases but these 2 are the most common reasons I used the option.
You're using rsync to perform your backups and walk away. You can umount -l the drive and once it's finished copying and synched, it unmounts, so that when you come back after a break (that you know will take longer than the backup) you can just unplug the drive instead of having to fiddle with the keyboard again.
If you have a daemon on your system that constantly interrogates /proc (I'm looking at you ksysguardd), then you will be unable umount /mnt/proc.  Lazy will let you umount in this case.
With lazy unmount, you can safely unmount the volume while the software is still running, mount another volume on to that same mountpoint and command the software to reopen files.