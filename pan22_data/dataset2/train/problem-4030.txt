I think that having both properties is actually somewhat harmful. If there is just single property, then it's clear what it means: settings can be either online or not.
The benefits of including it would be to improve readability (ever so slightly) as suggested by ChrisWue's answer. Other than that it poses no advantages that would outweigh the confusion it could cause as suggested by svick (a real consideration to make if it's going to be a headache for future developers).
But when you have two properties (and don't know their implementation), then you start to wonder: is there some third case? Can both properties be true, or both false? Are the two properties actually related, or is it just confusing naming?
Then, any class that implements the ISettings interface will be able to invert the logic of "IsOnline" without personally having to implement it.
What if a few years down the road someone decides that they need a third state: "going online is triggered but not yet confirmed" and instead of properly reengineering the code just decides to tweak it such that IsOffline==IsOnline==false for a short time?
That being said: It adds additional code which needs to be maintained and unit tested (instead of two states you now have to test four states to make sure it behaves as expected) so don't go blindly around adding a negated version of very boolean property to your models. I'd do it when testing for both the negated and non-negated version is common.
Good documentation would answer all those questions, but it's always better if something is clear from the start and doesn't have to be explained.
If you implement both fields you pretty much have to guarantee for the rest of your life that they will always be consistent, i.e. that IsOnline==!IsOffline is always valid, at any point in time, forever.
The whole idea of a Boolean is that it be either true or false (it already caters for both scenarios). You're undermining the purpose of a Boolean merely by creating a negated version of one.
What if your code is used in a multithreaded environment? If one thread sets IsOnline to some value and another thread concurrently reads IsOffline? Can you guarantee atomicity, hence thread-safety forever?
You could sort of do it with the MixIn pattern. It will be a method instead of a property, but hopefully that isn't the end of the world for you. Add this static class somewhere in the same namespace as your ISettings interface: