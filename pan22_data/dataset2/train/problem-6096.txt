Points are locations in space. Once you have a coordinate system, you can describe those points as a distance and a direction from the origin (a vector). So it is perfectly reasonable to use vectors to describe the start and end points of a line.
Just use the Vector object. Even if you feel this is/has been used incorrectly in the past, it's what people expect. Plus, it's not necessarily incorrect to use a vector as a point. And would difficult to do outside of discussion since both data structures require the same primitive types. The only differences will be the member functions, and it's easy enough to put those in the same class, since there's not much in the way of conflicting methods between the two.
Yes, it's ok to use a single Vector class to define both points and vectors, as long as you ensure that the w component of the vector is 0.
What I would do, though, is treat them equivalently in your code; if you do use vector and point interchangeably, then there's no reason that your declaration for the Line() function should be talking about 'startingVector' and 'endingVector'.  I would strongly encourage going back to
Since you're learning, it's good to learn that doing what people expect is often the best way to do things (for trivial choices like the one being presented). 
The key difference between a point and a vector is that a point represents a physical location in space, offset from the origin, whereas a vector represents a direction.  A point can be translated, a vector can not.  The w component of a 2- or 3-dimensional Vector class is what allows the translation component of a transformation matrix to take effect.  If w is 1, then translation and rotation will be applied; if it is 0, then only rotation will be applied.
Think of the wind, you can talk about it's direction and it's strength, but you can't talk about its position or location. This is how you should think of vectors when they are NOT being used to describe points in space.
Just be aware that all points can be represented as a vector, but vectors are not points. Most vectors, e.g velocity, normal etc, don't have any sense of location.
Not having the w component of a vector set 0 can come back to bite you; it leads to bugs that are rather difficult to track down.  To be safe, you can make a Point class that inherits from the Vector class and explicitly sets w to 1, where the Vector class defaults w to 0.
It's unlikely there would be any problems with conflating the definitions and treating points as vectors â€” but be a little careful, because some APIs have a 'Point' class that you might need to use (for representing, e.g., vertices of polygons) and if you define your own class you'll want to be able to port them back and forth.
It depends on the implementation. If you have to have methods on the Vector2d instead of its prototype, then there's a cost for that, given the amount of points you'd need in a game, a major one. It's just how JavaScript works. In that situation it's better to create a Point2d class that doesn't have all the unnecessary functions.