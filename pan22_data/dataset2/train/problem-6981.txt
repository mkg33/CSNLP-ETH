However, this doesnt allow me to find out which doors the given room has. I need to be able to figure that out so that I can place the doors in the correct places so that they can be used to adjoin rooms. Is this sort of "smart map" possible with my current algorithm, or should I start over? What steps can I take to get this working?
The idea being that when you're making room (0,0) you ask rooms (-1,0) (0,-1) (1,0) and (0,1) where the adjoining doors are.  If you need screen coords, it should be easy enough to add a GetScreenCoords method or a transform matrix if you're into those.
I'm sure there will be a lot more work for you to code a full solution.  I hope this will help you get started.
I think that this question is quite open-ended, since there are a few pieces of code you'll need before you can link the rooms properly and how you code that up depends a lot on how things make sense to you.
Next you'll want to be able to query the list of rooms.  Going through all of the rooms in your list (up to 5000!) just to find the neighbouring rooms will get costly.  For a quick way to get things up and running, I'd recommend using a HashMap<coord, Room> rooms instead.  This way when you're making room (0,0) you ask for existing neighbouring rooms you simply ask for rooms.get((1,0)) etc. and to add your newly generated room at (0,0) you'd do rooms.put((0,0), newroom)  If this becomes too slow, it might be worth looking at sorted lists.  Perhaps a sorted list(x) of sorted lists(y).
Use a modified form of Prim's Algorithm to create a basic maze of 20 rooms or so. Choose two rooms to be start and end rooms, ensuring the end is always reachable. Block off random doors with different door types and randomly add doors where two adjacent rooms are not connected (with low probability)
Finally you'll need to add some way to get the door position from the neighbouring rooms.  A new method like int GetSouthDoor() should do the trick.
Im trying to randomly generate a map of rooms connected by doors, and I've succeeded in generating one using this code:
First of all, if the room sizes are constant I'd recommend making a higher level coordinate system for the rooms.  Something that would look like this: