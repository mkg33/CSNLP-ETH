Without failover users will experience a delay until their browser fails over to the next IP address.  
Using Restful services rather than stateful sessions should do away clustering issues on the front-end.  Clustering issues on the storage side would still apply. 
Even with load balancers in front of the servers, you will likely have round-robin DNS in front of them.  This will ensure all your load balancers get utilized.  They will add another layer to you design, with additional complexity and another point of failure.  However, they can provide some security features.  
You would basically configure a single 'shared' IP address that traffic would be directed to.  Then apache, and any other necessary services, can be defined as well, and only run on the active server.  Shared disk would be used for all your web content, any uploaded files, and your apache configuration directories.  (with httpd.conf, etc)
Implementing image servers to serve up content like images, CSS files, and other static content can ease the load on the application servers.  
Failover can be handled by configuring server to take over the IP address of a failed server.  This will minimize the downtime if a server fails.  Without clustering software, stateful sessions will be lost if a server fails.
All of these cluster solutions are included in the respective OS licenses, so you're probably cool on cost.  They do require some manner of shared storage -- either an NFS mount, or physical disk accessed by both nodes with a clustered file system. An example of the latter would be SAN disks with multiple host access allowed, formatted with OCFS2 or GFS.  I believe you can use VMWare shared disks for this.
My vote is for Linux Virtual Server as the load balancer.  This makes the LVS director a single point of failure as well as a bottleneck, but 
Optimal load balancing can be very expensive and complicated.  Basic load balancing should just ensure that each server is servicing roughly the same number of hits at anytime.  
Cost can be kept down by having the first director be on the same machine as the first LVS node, and the second director on the same machine as the second LVS node.  Third and subsequent nodes are pure nodes, with no LVS or HA implications.
To handle stateful requirements, you can use redirects.  Give each web server an alternate address such as www1, www2, www3, etc.  Redirect the initial www connection to the host's alternate address.  You may end up with bookmark issues this way, but they should be evenly dispersed across the servers. 
This also leaves you free to run any web server software you like, as the redirection's taking place below the application layer.
Possibly also use ucarp or heartbeat to ensure haproxy always answers.  Stunnel would sit in front of haproxy if you need SSL too
I also know you asked about apache, but those days we have specific tools better suited to the job (like nginx and varnish). Leave apache to run the applications on the backend and serve it using other tools (not that apache can't do good load balancing or reverse proxying, it's just a question of offloading different parts of the job to more services so each part can do well it's share).
In your case, having physically separated VPSs is a good idea, but makes the ip sharing more difficult. The objective is having a fault resistant, redundant system, and some configurations for load balancing/HA end messing it up adding a single point of failure (like a single load balancer to receive all traffic).
The simplest load-balancing method is to provide multiple A records in DNS.  By default the IP address will be configured in a round robin method.  This will result in users being relatively evenly distributed across the servers.  This works well for stateless sites.  A little more complex method is required when you have a stateful site.  
You may want to consider using proper clustering software.  RedHat's (or CentOS)  Cluster Suite, or Oracle's ClusterWare.  These can be used to setup active-passive clusters, and can be used to restart services, and fail between nodes when there are serious issues.  This is essentially what you're looking for.
Alternately, using a different path to indicate which server is handling the stateful session would allow proxying sessions which have switched host to the original server.  This may be a problem when the session for a failed server arrives at server that has taken over from the failed server.  However, barring clustering software the state will be missing anyway.  Due to browser caching, you may not experience a lot of sessions changing servers. 
The cluster software is used to define 'services' that run on nodes all the time, or only when that node is 'active'.  The nodes communicate via heartbeats, and also monitor those services.  They can restart them if they notice failures, and reboot if they can't be fixed.