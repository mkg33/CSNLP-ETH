This is a great program. Overall, I would say that it is written as a "script" that reads from top to bottom. There is nothing wrong with this, per se, but if you wanted to up your game I would consider how to use functions (and eventually classes/objects) to make the code more modular. In that way, perhaps, you could separate the control flow of the input gathering and "if" statements, from the math calculations. 
Lastly, it is a no-no in Python to just put a function call like main() in the global scope. If your file was "import"ed, it would get executed. The way to avoid this is to always check to see if your program is being executed or imported with the following:
For example, if you had a "round_edged_shape()" handler and a "square_edged_shape()" handler it would reduce the main() loop dramatically so that a reader could better tell what was happening at a glance. It would also encapsulate the "round" logic and the "square" logic nicely. Eventually, these feel like classes/objects you could build, but that is probably later in the course.
I'm not clear why you have sleep statements at all, I think it would make the interface infuriating. However, but whenever I see a repetitive pattern of statements, I tend to want to write a function. Since you seem to tend to sleep after most prints, consider making that a function:
I also prefer string formatting versus the '+' operator because I think it is cleaner and more understandable (maybe because I'm an old "C" programmer, but I think it is also considered good style in Python circles.) Combining that with the above function, your circle printing would look something like: