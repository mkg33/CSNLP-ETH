Replace 10 with any value you want, this shows how far away the object will move from the camera. This will successfully place an object in front of the player, wherever they are looking at.
I'm just starting with threejs, and I'm building a basic first person shooter. I use pointer lock controls.
Any help would be much appreciated. I've found similar questions online, but they're usually about changing the camera view based on an object, but that's not what I want since the camera view is determined by the mouse of the user.
When you create a new object, move it to the camera's position, and copy the camera's rotation, this way the new object will "look" towards the same place as the camera.
I've tried things like h = tan(fov/2)*dist trying to get the height, but the problem is I don't have the distance between the object and the camera, since the object still needs to be created...
Well, you need to first randomly choose a dist value then. There's N^3 more space as you go N times further away, so picking something like dist = pow(1 - rand()/RANDMAX, 3) * max_dist should result in a believable distribution.
I'm not familiar with three.js, but from my experience with 3D graphics, there's a simple trick you can try.
When creating the object, I want to position the object randomly, but always inside the current field of view of the user. So the object must be visible in the current view of the user when it's created.
When the user clicks ("shoots") an object, I remove it and place it at another random position in the 3D world.
Now translate the object on the +Z axis (or -Z, depending what three.js considers forward), and it will move forward inside the field of view. All 3D engines I've used have a translate function that does the math for you.
Why not simulate another click? since you already have mouse-click ray-casting (I assume), apply some random length to the ray. Any click will be in view, so your problem is already solved.