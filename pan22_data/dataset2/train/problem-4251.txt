Allowing NOPASSWORD for general commands, allows anyone who gets access to your userid to run any commands.  This could result from a compromise of your credentials, but could be as simple as someone sitting at your desk when you step away for a second.  
I find I don't have to enter my password that often.  Once you enter your password, you can run several commands if you don't wait too long between them.   The timeout is configurable.
I generally restrict use of NOPASSWORD to commands that are run by an automated process.  It is preferable to have a service account for these commands, and restrict the use of sudo to the required commands. 
The other answers here are great, and touch on most of the important points.  One thing which I haven't seen mentioned is the fact that any sort of authentication you do when logged in yourself can be captured by a remote attacker who has already established a foothold in your account.  They can modify your shell login files or PATH to install a keylogger so that everything you type, including your sudo password, is sent to them.  They could add a hacked sudo binary to your PATH to collect your password.  They can hijack the ssh agent connection back to your connecting machine to defeat pam_ssh_agent_auth and become root themselves as soon as you connect.  So in terms of absolute security, I don't see a difference between using a password for sudo and not. It does, of course, make it a more complicated attackj, and they only get root once you have used sudo once, rather than immediately.
While not strictly answering your question, another option may be to set a longer  timestamp_timeout so you don't need to type in your password so often. This will prevent just anyone gaining admin privileges, but reducing your annoyance.
In summary, I believe the only way to absolutely prevent a compromised user account from becoming root if you have sudo access is to remove sudo access from yourself, or never use it.  If you disagree, let me know, as I would love to be wrong!