But widening out the question a bit, although the XNA frameworks are really intended for clientside 2d and 3d game development, there might be cause to use parts of them on the server-side of a 2d or 3d game. It is common to re-use parts of the graphics engine on the server because the server has a need to do things like visibility and collision testing just as much as the client does. In that scenario, if your engine has used the math library from XNA, you'll need to link that in your server code too.
You can go the XNA route and just use the particular elements you desire (audio, networking, etc.); but, it's increasing the complexity of your project and decreasing your "immediate understanding" of the codebase.
Would it be easier to just recreate these types of aspects myself, attempt to bend the XNA framework to what I need, or is there a better framework for this type of work?
So, as stated above, it would be far more beneficial for you to use C# and the appropriate non-XNA libraries.
I'm looking to create a text based MUD, so a lot of the elements of the XNA framework seem appropriate to what I need.  Especially things like the general game loop, networking, etc.  It looks like XNA is tightly coupled to an interactive environment with UI and audio, so I'm not sure if it's the right way to go.
If you're doing this for your own edification, you might as well roll your own where you're interested in the area -- you'll learn more this way.
I lean towards saying "create from scratch", but that's just a gut feeling based on having worked with C# and MUD code separately.  You'll have more control and learn more from rolling your own versions of whatever you might be able to use from XNA, anyway.
Basically, as you add more middleware, your knowledge of the way your code is actually operating diminishes -- unless you delve into the middleware's implementation. As you distance yourself, you lose efficiency, ability, and understanding.
If you are using C#, you should just consider using WCF to abstract away the networking layer.  A MUD wouldn't have a whole lot of network traffic, relatively speaking, so going this route could make things a lot easier for you.  I've been using WCF for a turn-based strategy game, and it's worked out pretty well for me.
I don't think the XNA framework would offer you much of use for the server side of a text based game, no. You should look at the standard .NET framework class libraries for that use case.