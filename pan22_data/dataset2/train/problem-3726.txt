I see someone has already recommended VLC. I use it to play a sound in Windows without anything visible using parameters:
PowerShell can be used to load the System.Media.SoundPlayer .NET class, which can be used to play a wave file.
A very lightweight solution is cmndPlayWAV.jar which also works on Linux and OS/X.  It has a built in sound if no parameter is specified or you can give the full path to a .wav file.  Incidentally one could always make an audio message .wav to use with Windows Recorder.
` is PowerShell's escape character, which modifies the meaning of the character after it. An escaped a indicates BEL. The advantage of this approach is it is easier and more visible when typed into a script.
The main addition to the previous comment is --qt-start-minimized  The paths and quote characters are just to illustrate a typical use. I've used this unchanged in XP, 7, 10; I expect Vista and 8.x to work too.
You can do this natively with PowerShell. PowerShell is included with Windows Vista and later, and can be downloaded from Microsoft for older versions.
An alternative method in PowerShell is to use the escape sequence for BEL, rather than inserting a literal BEL character with Ctrl + G:
"c:\Program Files (x86)\videolan\vlc\vlc.exe" --qt-start-minimized --play-and-exit "c:\Program Files (x86)\videolan\vlc\Windows Exclamation.wav"
If a plain beep is alright, echo the character with the value 7, the so-called bell character. Note, however, that beeps can be turned off.
(note that PlaySync is used in the second example since the standard asynchronous play would be interrupted by the PowerShell process closing when launched like this)
Yes, it's the same as the cmd one. echo in PowerShell is an alias (i.e. means the same thing) to Write-Host, which displays something to the screen (or triggers the Windows notification sound in the case of BEL).
A beep can be easily accomplished in the normal command line with echo ^G (where ^G represents BEL, ASCII character 7, inserted with Ctrl + G), as described in other answers. In the interest of completeness, here's the PowerShell method: