So sorry again if this question is stupid/obvious, but I'm still learning and did spend a lot of time looking/searching for an answer.
I just started OpenGL (PyopenGl) & Pyglet 3 weeks ago, and decided to read the Red Book. So sorry if my question shows my lack of comprehension... 
What I want to do is use text.Label().draw to generate a texture and use that texture when I need it. But so far I haven't been able to do it. (lack of comprehension/experience?) I know that text in OpenGl is usually done by Bitmap Fonts, Outline Fonts or Texture Mapped Text, but I was wondering if the method I am thinking of could be a sortcut.
With the code you can create a valid Pyglet texture which you can use as a render target. Set the render target to None when you want to draw to the screen again.
You can render piglet.text.label into a frame buffer object, but you will need to manage the FBO and rendering the label into it yourself. Pyglet does not provide primitives for manipulating and rendering to FBOs.
It is possible with Pyglet (even without PyOpenGL), I've successfully done it with the following code (slightly modified). However, my Pyglet version is a little behind.
However, assuming that you are considering this for performance reasons, I would generally advise that you use batching instead. Pyglet includes robust batching support, and piglet.text.Label can be initialized with a Batch object, which will provide significantly improved performance when rendering the same text for multiple frames.