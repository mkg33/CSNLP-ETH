You know point 2 is to the right (with respect to your turret) and point 1 is to the left.  You simply will scan from the left angle, clock wise, to the right angle via subtracting some constant angle value to sweep, no need for any complicated logic, and no chance to accidentally go the wrong direction. 
Every frame, pick a random point on the target, and check for visibility. If it is visible, you can aim for it and shoot. If it is not visible, then next frame you may be more lucky in the choice of random spot on target.
If your turret is already aiming at the center of the object, no complicated angle math is necessary at all.
I was origionally going to post Brams answer, however I forgot that you are already pointing at the center, and we can use the knowledge of point 1 and point 2 to our benefit. 
That said, your original problem of hitting partly obscured objects can also be handled in a simpler and more elegant way:
I'm currently working on turret aiming code. If I can't hit the center of the object (due to an obstacle), I want to see if I can hit any of the object. To do this i'll get it's bounds, and check in between that range instead of doing a full 360 sweep. I can calculate 1 and 2 (sort points by angle to turret/blue dot), but how do I ensure I get sweep A and not B?