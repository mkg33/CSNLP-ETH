If the resources are considered as read-only after deployment, I would recommend the second approach. If on the other hand the player is allowed to modify or add resources to the game, the first approach works better.
Add the res folder to your classpath. You can then load the resources using ClassLoader.getResourceAsStream("images/filename.png"). Note the missing res folder from the path. When deploying, add the content of res folder to your .jar file.
It's also possible to put local resources next to the source files even deep in the package hierarchy. These resources can be loaded with Class.getResourceAsStream("relativepath"), where path to the resource is relative to the package of the class calling this method. I would not recommend this approach for game assets.
In the code you can load the resources from file system with relative path "res/images/filename.png". While developing, use Project root as the working directory. When deploying the project, just copy the res folder to the same folder where the executables are located. You can also omit the res folder if you want to or call it something else.