Do some benchmarking tests for your branch-and-bound solver.  See how it does for varying values of $n$ and $m$.  Then improve your solver to make it faster.  See how far you can get without reading about other work.  When you run out of ideas, do some of the reading suggested in the other answers.
First build the simplest solver you can and make sure it works.  This will probably be a brute force algorithm whose running time depends more or less only on the $n$, the number of variables, and $m$, the number of clauses.  Then implement something a little bit smarter like branch-and-bound.  Write (or find) a generator that will give you random instances for given values of $n$ and $m$.
If you're overwhelmed by all of the work that's out there, why don't you start out pretending that nobody's worked on the problem before?  If your goal is to eventually build a competitive SAT solver, it's going to be a fairly long journey.  By starting out just playing around without 'checking the solutions', so to speak, you have more to gain than to lose. 