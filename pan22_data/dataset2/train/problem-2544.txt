Let's Encrypt are providing free SSL certificates. Are there any downsides compared to other, paid certificates e.g. AWS Certificate Manager?
The other perceived problem is the one about certificate lifetime. But it is actually an advantage, not a disadvantage. Shorter validity means that certificates have to be updated more often, both server-side, and client-side, alright.
As for server-side, this happens with a cron job, so it's actually less hassle and more reliable than usual. No way you can forget, no way to be late, no way to accidentially do something wrong, no need to log in with an administrative account (... more than once).  On the client-side, so what. Browsers update certificates all the time, it's no biggie. The user doesn't even know it happens. There's very slightly more traffic to be had when updating every 3 months instead of every 2 years, but seriously... that is not an issue.
If Let's Encrypt policy refuses you, the only "court of appeal" is to ask in its public forums and hope one of their staff is able to offer a way forward. This may happen if, for example, your site has a DNS name their systems decide is "confusingly similar" to certain famous properties like big banks or Google. For sensible reasons the exact policies of each public CA in this regard are not open to public scrutiny so you may only realise you can't have a Let's Encrypt cert when you request it and get a "Policy forbids..." response.
If ignoring these customers/visitors is a valid possibility, no problem. If you cannot afford that business-wise, you will have to spend money. No other option.
The single biggest downside is, for the time being, that your site will show as somewhat inferior, maybe dangerous because it doesn't have the nice green badge that some other sites have. What does that badge mean? Nothing, really. But it does suggest that your site is "secure" (some browsers even use that exact word). Alas, users are people, and people are stupid. One or the other will take your site as not trustworthy (without understanding any of the implications) just because the browser doesn't say it's secure.
Let's Encrypt requires that the exact name, or the (sub-)domain if you're requesting a wildcard, exists in the public Internet DNS. Even if you prove control over example.com, Let's Encrypt won't issue you certificates for some.other.name.in.example.com without seeing that in public DNS. The machines named needn't have public address records, they can be firewalled off, or even physically disconnected, but the public DNS name needs to exist.
Let's Encrypt only issues certificates for the Web PKI - servers with Internet names which use the SSL/TLS protocol. So that's the Web obviously, and your IMAP, SMTP, some types of VPN server, dozens of things, but not everything. In particular Let's Encrypt doesn't offer certificates at all for S/MIME (a way to encrypt email at rest, rather than just when it's in transit) nor for code signing or document signing. If you want a "one stop shop" for certificates, this may be enough reason not to use Let's Encrypt.
The Let's Encrypt proof of control automation may not suit your organisation's rules. For example if you have employees who're allowed to reconfigure Apache but shouldn't get SSL certs for company domain names then Let's Encrypt is a poor fit. Note that in this case just not using them is the Wrong Thing(TM) you should use CAA to explicitly disable Let's Encrypt for your domains.
Unless you need a certificate for something other than web, there are no real downsides, but surely perceived ones. Although the problems are only perceived, as the owner of a website you may have no other choice but to address them (if business interest forbids showing the middle finger).
Let's Encrypt certificate lifetimes of 90 days mean you need to automate because ain't nobody got time for that. This is in fact the intent of the service - to herd people towards automating this essential work rather than perversely doing it manually while they automate away many harder tasks. But if you can't automate for any reason it's a negative - if you have tools, appliances or whatever that block automation consider any commercial SSL cert costs as part of the ongoing cost of those tools/ appliances/ whatever in cost planning. Contrariwise offset savings from not needing to buy commercial certs in pricing of new tools / appliances / etcetera that automate this (with Let's Encrypt or not)
Let's Encrypt certificates are trusted by major web browsers today via ISRG (the charity providing the Let's Encrypt service) but older systems trust Let's Encrypt via IdenTrust, a relatively obscure Certificate Authority which controls  "DST Root CA X3". This gets the job done for most people, but it isn't the most broadly trusted root in the world. For example the abandoned Nintendo WiiU console had a web browser, obviously Nintendo won't be shipping updates for WiiU and so that browser is abandoned, it doesn't trust Let's Encrypt.
Nevertheless, for almost everyone, almost always, Let's Encrypt is a good first choice for putting certificates on your TLS servers in a fire-and-forget way. Starting with the assumption that you'll use Let's Encrypt is a sensible way to approach this decision.
Let's Encrypt automation means you're constrained exactly by what the automation allows even if there is no other reasons why you can't have something. New types of public key, new X.509 extensions and other additions have to be explicitly enabled by Let's Encrypt on their own timeline, and of course you can't just offer to pay extra to get the features you want although donations are welcome.
Even in the Web PKI, Let's Encrypt offers only "DV" certificates, meaning any details about yourself or your organisation other than FQDNs aren't mentioned in the certificate. Even if you write them into a CSR they're just discarded. This may be a blocker for some specialist applications.