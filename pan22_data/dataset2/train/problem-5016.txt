The Game class has a little more overhead with it using Screens. However, this overhead is designed to make it easier to implement different stages/levels in your game. It is important to note that this overhead is minimal.
As @user3068350 said, both Game and ApplicationAdapter implement ApplicationListener. It's useful to extend Game if you plan on using the Screen interface in your game, however some developers may wish to take a different approach and handle screen management their own way. If this is the case, these will extend ApplicationAdapter.
TL;DR: No real difference between them. ApplicationAdapter gives you a little more control & Game is a little less work.
The ApplicationAdapter has no additional overhead (it is a straight implementation of an ApplicationListener). This gives you more control as you have to do everything yourself. Personally, I prefer to use ApplicationAdapters.
As the ApplicationAdapter and the Game class implement the ApplicationListener interface they can both be used almost interchangeably when creating your game. If you are set on using Screen, there is nothing stopping you from implementing them with both options.
The Game class implements the ApplicationListener interface and is just a class that is designed to make it easy to switch between different screens. When a method in the ApplicationListener is called, the Game class takes care of delegating it to the currently set screen. 
So I have to change the ApplicationAdapter to Game if I want to call setScreen method in order to switch between Screens. So what is the use of ApplicationAdapter ? When shall I use it ? 
Personally, I like my classes to implement a custom Updatable and/or Drawable interface, as I separate my render method into update and draw. In this case, using Screen would defeat the purpose as the interface contains a render method.