Keep the Car and the Field as different classes. The Field can have zero or more instances of a Car. Either use an Array of cars, or a map of cars, where the carId is the key. It is totally up to you.
I would still use x, and y coordinates to defined your map, in a traditional 2D-way, no isometric thinking here, you can just transform all the points to fit the isometric grid in rendering. If you think about it, an isometric grid is just a 2D-grid. Here is an article I stumbled upon while looking around on the internet, that might be useful: https://gamedevelopment.tutsplus.com/tutorials/creating-isometric-worlds-a-primer-for-game-developers--gamedev-6511. Here is a picture from the same article
I am not going to write the pseudo code for you, but I can tell you what I would have done creating the game.
If the texture of the car is field dependent, you can simply have a method in your Car-object, e.g setTexture(), and the Field can call that method on all the cars in its array (or map). The car itself can change the texture based on a direction-property. If the car is moving up, left, right or down, set the direction, and render the correct texture.