Observe a human! How can a player lose at pong? Well, if we watch two pong players it's quite obvious. Usually, the loss is because the ball is simply too fast and the players reaction time  was delayed. That's two parameters, one of which is adjustable. The other is the players ability to press the right direction. So you have an error frequency and a reaction frequency - both can be tuned depending on difficulty.
Then on each hit by the opponent, the AI can pick a value within those ranges and make its decisions (and movements) based on that.  For easier AI opponents, you can make those ranges all rather poor, but also have wide ranges to give the AI some "lucky shots".  For more difficult opponents, you can tighten those ranges and put them all in the "good" range.
This can be applied to nearly any game - even one such as tic tac toe or even more complex models. This approach breaks down in more complicated scenarios but it is plenty sufficient where games in which the numbers of parameters and scope is narrow. 
An easy AI would have higher input lag and more tendency to make random mistakes - where as a more difficult AI would be tuned to have these parameters geared to be difficult.
The point is, REACTION TIME.  Research what a typical human reaction time is, and add 10ms onto it.  Use that as a starting point.  As the levels get harder, remove time from the reaction time...which can be a simple Thread.sleep(time); for the AI.  Wait that amount of time before the AI starts moving.
When I created an oh-so-awesome almost-pacman clone on my TI83? calculator, the biggest problem I ran into was that the "ghosts" were far too fast.   I had to slow them down somehow.  So, I put in a big old sin(cos(tan(x-coordinate))) in there.  Easier levels would do that calculation a few times, and harder levels would do only one of the operations.
I'm going to suggest a more general solution that isn't specific to just pong. I believe this could be applied to any game - not just pong. You want human like behavior, right? So that a human can feel like they're playing a human... and therefore by extension hope to win. So, what do you do?
You can also control how fast the paddle moves, or, if you REALLY wanted to get complicated, determine where the ball will be based upon varying degrees of information...say only 2 pixels rather than a vector.  Add angle modifiers to the walls to add a degree of randomness, forcing the AI to recalculate.
One factor to consider is randomness - human players always have some degree of variation in their play, so if you want your AI to seem human-like then you'll also want to have some variation in their play.