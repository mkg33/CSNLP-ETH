Note, that for more complex terrain, you could expand this into other polygonal shapes. However, consider also, that with some thought, you can model the shape of your 2D terrain using procedurally generated rectangles. But that would be a bit of a different discussion to have.
But, we can still use the idea behind this, if we're clever about it. The trick is: model the terrain as a larger rectangle. Then, when that rectangle collides with a source of damage, segment it into four smaller rectangles. And apply this recursively until you reach a necessary level of precision (i.e. 1 pixel, 2 pixels, 4 pixels, etc.)  When you reach that level, remove all of the rectangles that are still in contact with your source of damage.
Okay, the naive approach is this: construct your terrain up of rectangles that are 1 pixel by 1 pixel (or, in the case of one of the 3D worms, of cubes). If you have a bullet, or an explosion, or any other source of destruction, then what you want to do is as simple as applying collision detection, and removing all of the rectangles/cubes that collide with the source of damage. The problem is, this is slow.