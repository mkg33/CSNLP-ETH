(Note, I only have access to FreeBSD right now, so the output of linux's "file" command may differ, thus changing what you need to do.)
Note: all the -print0 and -0 switches are needed to make sure that spaces in the filenames are handled correctly. This is also the reason why perl is used instead of awk, which cannot really swallow null characters in the input. The -- switches are meant to protect against filenames starting a dash.
Before I recursively tar a directory i want to be able to delete all of the executables. In windows I would have simply deleted all of the files with .exe extensions. And I cannot simply delete all files with the executable mode since that would delete shell scripts as well. So is there any way to delete only non-shell script script files in a directory automatically?
You probably have to write a shell script to do this. Off the top of my head, run file first, get the executables and exclude all the scripts. Then you can operate on the remainder which should be what you are looking for.
If you replace "echo" with "rm" in the above example, those files will be deleted.  The "grep" command should prevent libraries from being deleted (you can test on /lib).
This should give you an easy template for how to do it.  You'll just need to be sure to know what to look for in the output given by "file" and grep accordingly.
You need find to iterate over the files in a tree, the file command-line utility to determine their file type, followed by perl to filter the executables:
IMHO the short answer is that there is no 100% foolproof way to do this.  Depending on permissions alone may miss or include things you don't want. Depending on filenames won't work.  Even depending on the output of the file command probably isn't a good idea, I have seen it miss-identify things on several occasions.
I assume you mean binaries?  If the number of executables is very large, this command may fail due to the command line for "file" and "echo" being too long.  A quick example: