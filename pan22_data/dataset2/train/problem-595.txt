Finally, you may want to think about how one might add additional operators and multi-digit numbers.  Both of these changes would require some changes to how the code currently operates.  More fundamentally, consider changing the code to be able to handle expressions without parentheses, and to account for operator precedence.  As two examples that are not handled by the code right now, consider:
The answer from @Nobody covers most of the important things, but there are a few others that may be useful to you.  First, I'd absolutely agree that the global variables must go.  There are two obvious ways to do so.  One would be to create an object which would both contain the variables that are now global and have the associated behavior.  The other way to do it would be to pass in the needed variables.  That approach might look like this:
Note a few other changes.  First, there are now two convert routines.  One which is the recursive version takes four arguments.  The other is the "top level" version that takes a single argument, which is the string to be converted.  The top-level convert also returns a string which contains the converted result.  
This code also uses ops.back() to refer to the last element of ops rather than using ops[ops.size()-1] which is a little less obvious.  It increments i within each call to convert to make the consistency easier to see, and uses a std::string out for the output rather than printing directly to std::cout.  
But if i > len, ch will just have accessed beyond the end of the string.  That's not good and easily avoided by simply checking the range first and then using it.