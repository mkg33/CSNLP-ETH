Until then, you could probably just symlink all the core files, basically everything except the config files or user content directories.
Why not use WordPress-mu, isn't that what it's designed for? FYI Wordpress 3, due for release in about three months, will have -mu integrated. 
Just in case someone stumbled upon this question: theoretically, it's doable using Wordpress MU Domain Mapping plugin: http://wordpress.org/extend/plugins/wordpress-mu-domain-mapping/
I run several instances of WordPress on a server for managing blogs across multiple domains (also hosted on the same server). Some domains are even utilizing multiple WordPress instances just as subdirectories.
What is the best way of implementing those instances so they can all be kept up-to-date easily? Right now, about a week or two after a release of WP, I login and manually update every instance from the newly-downloaded tar.gz.
I have not tested, but thought that unionfs, might be a tool that could be helpful for something like this.  Unionfs is a tool frequently on livecds to have a portion of the filesystem come from the read-only CD, and some of it go to a RAM-Disk.  I have never done or tested this, but I thought you could do something like this
The only thing I have shared between all instances are the content items (themese, etc). I handle that via symbolically linking to the 'main' content directory form each instance's install path.
So basically when it is time to upgrade, you unmount all the union instance folders, update word-press in the base folder, and then remount your unions.
Is there a way of doing something similar with the actual code portions of WordPress? I believe the only instance-specific configurations are for what database to connect-to. 
This is an old question, but it is worth noting that Wordpress's 3.0 release merged Wordpress-MU into Wordpress. So now, the default Wordpress 3.0 installation allows easy multi-site setup, maintenance and upgrades.