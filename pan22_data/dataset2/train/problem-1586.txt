P.S. I suggest you to read the following article: Designing the Framework of a Parallel Game Engine, esp. section #2. And this one: Multithreading the Rendering Pipeline for 3D Model Animation - as you can see, they choose to duplicate the modified data across threads.
"Who owns the skin mesh animation, the game logic thread or the render thread" - what do you mean? Threads are just execution contexts.
If you want to, with caution you can share data across threads, since all threads share the same address space ( -need to ensure no race conditions i.e. harder to design and debug; +saves RAM).
"stored indirectly and the render thread does the computation" - you can design however you want. The correct answer depends heavily on the CPU and RAM usage. If the computation is really cheap, but produces huge data set - you'll probably want to compute it on the main thread to save RAM. If however the computation is expensive but produce small dataset - you'll probably want to compute that on some other thread, store the result somewhere in RAM, and have the renderer thread get that result and update your scene graph with the new data.