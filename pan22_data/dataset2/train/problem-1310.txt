The code above will plot the outline. For my own purposes, I didn't just need the outline, I essentially needed a fill. To that end, I modified the code to give me an array holding the length of each row (the index for the array being the height) for a quarter section of the circle. Also, as a matter of personal preference, I converted the do loop into a while loop:
The midpoint circle algorithm calculates a raster path by selecting pixels which are as close as possible to solutions of \$x^2 + y^2 = r^2\$. At each step, the path is extended by choosing the adjacent pixel which satisfies \$x^2 + y^2 \leq r^2\$, but maximizes \$x^2 + y^2\$. 
The d variable is basically responsible for accumulating the drift between the ideal perfect circle & the raster location. When it accumulates enough, the code takes a step in the y direction. The block of plotting code is responsible for mirroring the x,y locations across all octants of the circle.
Starting at 90°, note that as we follow the curve to the right, we need to decide when to take a step in the y direction. The algorithm essentially does this by tracking the accumulated error (similar to how Bresenham's line algorithm works). Also note that the image show calculations going from the middle of the center pixel to the middle of the edge pixels.
The algorithm takes advantage of the fact that a circle is symmetric. That is to say, if you can correctly draw any 45° section of the circle, all the remaining sections can be found by mirroring the pixels that you've already solved for. Thus, it draws all eight octants simultaneously, starting from each cardinal direction (0°, 90°, 180°, 270°) and extends both ways to reach the nearest multiple of 45°. This means it can stop when x == y, as that indicates it has traveled 45°.
If you think of the circle as a cone passing through the screen, with the point being in the center of the circle, you can reformulate it in a way that's pretty easy to code. The distance from the center will be between 0 and radius. But you want it to be 0 at the radius. So if you reverse it, you get something like this: