Good, this way when the user sees 0x001 in the screen he/she e-mails you asking what the error is and then you either tell them how to edit the file or read it for them.
There's no need to return None from roll_dice, and no need to print the return value (which is None).
Good. But this should be production code, removing debugging code (not just by commenting out). Any serious development (you called this a program) should be done under VCS, in such environments you just delete code, don't comment it out.
Someone above suggested classes. Don't go that way. Python classes are slow and fat and you just want to roll a dice, it is not really necessary to have classes here.
I think that if you are up to coming to CR you won't badmouth PEP-8. If you do not know what it is, read it.
You should handle your files with a with statement, not manual closing. Unfortunately you're using Python 2, so you'll need contextlib.closing. open_file doesn't really do anything, so remove and inline it.
In roll_dice, you don't need total_rolls since it's just num_rolls. You shouldn't give a default to roll_result; it just hides bugs. You don't need a 0 argument to range. In fact, I would write it as
Last but not least, try to name functions with verbs or verbal phrases. It makes more sense to kill_foo_bar() than foo_bar_death().
You are using global variables. Don't. A simple solution is just to pass these around as arguments. Note that as I made this change it became apparent that initialize_variables wasn't needed since it mostly initializes global constants.
game has duplicated logic in the ifs. Move it outside of the ifs. This is also duplicated in menu, so extract it into a function.
It seems like you're using options_file as an ad-hoc data store. You should look into structured approaches like JSON or databases. The easiest in this case, perhaps, would be shelve. This allows sweeping simplifications to the code.
You are using haphazard recursion to generate loops. Instead, define suitable functions to guide your loops and make functions self-contained where possible. For example, instead of using # Restart the game by calling it again, have an outer loop that calls promtp_change after the game has ended to allow it to restart. This should remove the need to call sys.exit from the functions (you shouldn't be doing that). Because the game seems a bit underspecified, I wasn't able to bring all behaviours across: what exactly is promtp_change meant to do? It seems to do nothing.
However, this hasn't separated logic from UI (output), which is another important aspect of code quality. It also doesn't deal with invalid input (such as non-integers being passed to int).
You do screen constrol mostly by just running clear at opportune moments. This would be improved if you used a library built for this. Normally one would mention something terribly complicated like ncurses but I shall mention blessings, easily the nicest way to mess with the screen.