Besides, you may refer to my article on the common database wrapper mistakes, as your code suffer from most of them, namely:
Here is the similar review I made a while ago. Please check it out, it explains a lot of pitfalls in your code.
Do you really want to make that neat and universal SQL split into array with gibberish keys? WTF is "data"? Okay, I am working on a project with you. Why should I puzzle myself with such questions? Why can't I use the familiar SQL that reads as plain English?
Okay, for the DML queries it makes sense - it always makes a cool feeling when you automate a routine task using a template. So, for the insert query it asks for the method insert(). But select?
'data' is an array with the keys as field names and values as the values that need to be updated in the database fields
really really? No kidding? But why? Do you think it looks cool? Or make it you write less code? Or make another programmer to understand it better?
This is used to delete a row. If you only want to remove a single field from a row, use the update statement instead and set the value of that field to '' (empty string)
This is not currently used in production. I'm still learning the art of PHP and I wrote the piece of code as a learning experience. As of now the code works as intended. However, what I would like to know is, if the code can be used in production environment?
You'll either need to define the required configs in the class file or include the config.php file along with this code in order to make a successful db connection as shown below:
In a nutshell, a good mysqli wrapper should be just a handful of lines (taken from the linked above answer):
I don't know the reason, but many people are constantly trying to write something like this. And I don't understand why.
I've created a minimal PHP-MySQLi database wrapper class that can be used to run insert, select, update and delete queries via prepared methods with ease.
This is actually the main problem. You are writing a code to handle some imaginary queries. That's the worst idea a developer could have. One should start from writing raw API calls with raw SQL, get the idea what queries are going to be used, and only then start to think about automation. 
Besides, such a class should be ten times shorter. In the recent years PHP has been improved a lot, making most of tricks you are using obsoleted. Not to mention such rather silly code blocks like 
Come on, you've gone too far. I understand the logic that led you here but it's time to turn back. Leave SELECT queries alone and let them be written as plain SQL with parameters. 