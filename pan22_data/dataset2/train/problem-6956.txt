OTRS and RT both have a long track record, are written in Perl and quite easy to customise. They both are butt-ugly but it took me only a couple hours to fix OTRS and make it look decent, but then I'm quite good at CSS.
I've been the main driver of changes, because I like ticket managers -- I have the memory of a sieve, and with a good ticketing system I don't have to remember.  The system does.  But due to problems with the various systems, my co-workers have been more reluctant to use them.
It has to be trivial to open a new ticket.  Not click-click-type-type-click-click-select-drag-click-click-type-type-type-type-click.  Systems that let customers open tickets by email win for me, especially when emails can be parsed to pre-populate some of the stuff management like categories or queues.
We've gone through a couple of helpdesk ticketing offerings, including one which was pretty much customized for us.
The issue gets down to what's important to your organization: In the previous organization I developed one of these for, the three big things were request lifecycle (SOX-ish), interdepartmental request tracking (for managerial fisticuffs), and time tracking (because different departments billed each other for time.) Our only solution was to roll our own, and it took less than a month to do. 
The software was written in 2001 when I was a college student intern, and it's still running today ... with a lot of modifications and hacking that made it even MORE exclusive to the oraganization. 
There are plenty of solutions out there. One solution that I'm familiar with is from Kayako. Granted it's not free, but it seems to offer what you're asking for. 
You should be more specific as for the purpose of this ticketing system. There are at least two types:
Second, It has to be simple.  Management likes to have stages and phases and approvals and categorizations and metrics and integrations with asset histories and all that (sorry) crap.  But all that stuff gets in the way.
First, Management MUST use the tool and ENFORCE its use in ALL cases.  These things are driven from the top down.  Any kind of task management will get in the way of getting things done, and if techs are under pressure to make customers happy, they'll take practically any shortcut available to them.
Generally, the only perfect solution is to roll your own. Under the hood, they're pretty easy ... in fact, I think the PHP-Symfony project is trying to build a generic one that's a plugin you can just modify from there. 
At the moment, I use JIRA for software developers, and we use RT for helpdesk because we had too many incidents with JIRA not being explicit enough about who it emailed due to the insanely complex privileges/rights/roles system.
OTRS is very well supported, the commercial support packages are quite affordable, the company behind it appears quite responsive. They have also integrated all kind of standard buzzword bingo-compatible features such as ITIL and whatnot. 
The bottom line: it has to make it trivial to do the right thing, or there will be resistance against it.
It has to be trivial to close a ticket, but techs should be encouraged to write up how it was closed in the interests of building a knowledge base.
It has to be trivial to update a ticket.  Here email-based tools fall down, because most users seem to like the top-post-and-quote-the-whole-[bad-word-deleted]-thing.  This makes histories hard to read.