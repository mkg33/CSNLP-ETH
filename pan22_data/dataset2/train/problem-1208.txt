TCP port forwarder, each side bound to another local IP address (bind). This example handles an almost arbitrary number of parallel or consecutive connections by fork'ing a new process after each accept() . It provides a little security by su'ing to user nobody after forking; it only permits connections from the private 10 network (range); due to reuseaddr, it allows immediate restart after master process's termination, even if some child sockets are not completely shut down. With -lmlocal2, socat logs to stderr until successfully reaching the accept loop. Further logging is directed to syslog with facility local2.
If you don't mind having your XMPP sessions encrypted (and why would you?!) you should be able to use stunnel to proxy between the two ports.
Currently the firewall is handling this port translation, however, this doesn't work for internal users as DNS is pointed to a local address and not the firewall. 
I would look first at the configuration file for Openfire, which is pretty flexible. It's been a while since I have worked with it, but the port it listens on should be a configuration option in the XML-based config file, and some Google searches and/or a review of the documentation should turn up some more details if the config file isn't self-documenting. No use making the solution more complex if you can solve it in your application, and it may (I'm not sure) be capable of listening on both ports at once even.
There are Windows binaries available, although I don't know if it can run as a service "out of the box".
You could try socat under cygwin, it is a "swiss army knife" like netcat, but works for bidrectional connections:
Is anyone familiar with a port mirroring or port translation tool for Windows (2k8 if it makes a difference)? I have an installation of Openfire that needs to run over 443, however, it doesn't support client connections on that port (currently is on port 5222). 