I would start, if you are the author of the program, by updating your solution to point to the correct version of ucrtbase.dll, and then install the Universal C Runtime on the system.  If you are not the author, then I would install the Windows 10 SDK (26624), in order to resolve the faulting module.
I had this problem too: I was mixing platform toolset for different projects (exe/lib/dll) having different toolsets; I solved by using the same toolset for all.
When you do install the correct version of the SDK, be sure you install the Universal C Runtime, since that is actually what installs ucrtbase.dll
ucrtbase.dll has nothing to do with any version of the Visual C++ Redistributable.  The file that is faulting is from the Windows 10 SDK (26624).
Visual Studio 2017 will install the Windows SDK if you select components that require it.  If you don't select to install any components that require the Windows SDK, the Windows SDK, will not be installed by Visual Studio 2017.
Visual Studio 2017 depending on the components you selected to install would have installed the correct version of the Windows SDK.