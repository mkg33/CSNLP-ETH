From everything I've read, the re-assembly of TCP segments is handled on the IP Layer.  I am running Windows Server 2012 and my application is utilizing Winsock.  Is there a way to configure the OS to re-assemble these packets as they are received on the port on this layer?  
I have an application that is reading in TCP data from a socket.  The sending device is sending out a full 1400 bytes of data to the server's socket on the other end.  Somewhere along the way, the packet is getting segmented/fragmented into a 1024 byte segment and a 376 byte segment.  In order to receive the data correctly on my application side, I'm having to read the socket twice and assemble the packet at the application level, which can have issues with a lot of traffic.  
Thus the application should never rely on implicit message boundaries due to how the sending application has written the data but instead explicit (application level) message boundaries have to be used.
TCP is a streaming protocol and not a message protocol. The TCP stack in the OS ensures that data gets forwarded to the application in the correct order and that no data loss and no data duplication is done. It does not care about keeping any packet boundaries since as I said TCP is a stream protocol. Also, the sender is free to split a single write into multiple packets or combine multiple writes to a single packet. It will do splitting to adapt the packet size to the MTU/PMTU in order to avoid packet fragmentation during delivery and it does combining to reduce the overhead of delivery.