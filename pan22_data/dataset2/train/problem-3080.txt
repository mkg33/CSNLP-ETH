According to the LibGDX Box2D Wiki it is recommended to use a fixed time step with a step time of 1/45 or 1/300; i.e. your Example #2 but with STEP_TIME as 1/45 or 1/300.
If you find that you still have lag on slow devices you could try to play with the 0.25 value of this line: accumulator += Math.min(delta, 0.25f). I found that a lower value generates better performance but sacrifices more accuracy in the simulation.
You should also change your if (accumulator >= STEP_TIME) to while (accumulator >= STEP_TIME) so it can properly step multiple times per frame if needed.
Example #2 uses a cooldown pattern- this is the right way to do it. Like @Charanor said, you'll want to use a while loop instead of an if statement (it'll be slightly more accurate), but otherwise it is correct. If it is too slow for your phone, you might consider changing the step from 1/60f to 1/45f.
Example #3 has you calling the engine every frame, which means that your results will be very accurate, but it also means that you'll be calling the engine way more often than you need to (you don't need to update the position of your objects faster than you can display the changes).
Example #1 tells the physics engine that 1/60th of a second has passed every time you call it. If your game loop is being called more than 60 times a second it will go fast; less than 60 times a second and it'll be slow. The number of times it gets called per second will depend on the speed of the underlying hardware, so this method will end up in different behavior on different devices.