I'm not clear on why this check should need a class for itself. I would expect either to have a Permutation class which could have an instance isCyclic method, or to have a PermutationUtils class with a static isCyclic method.
No method-level javadoc? At the very least, I would like to see something telling me that the class considers that the empty array is not a valid permutation, because I think it is.
A good unit test compares the observed value / behaviour against the expected value / behaviour. This test requires you to either remember the expected output or figure it out from first principles when you come back to maintain the code.
I would like to hear comments regarding exception throwing and naming conventions, yet feel free to tell me anything that comes to mind.
A an integer permutation array[] is said to be cyclic if and only if we can choose an arbitrary element at position i, move it to the array[i]'s position, move the array[i]'s element to array[array[i]]'s position, and finally end up to the ith position. For example, \$\langle 1, 2, 0 \rangle\$ is cyclic, whereas \$\langle 1, 0, 2 \rangle\$ is not since if we start from 2, we sill end up in an infinite loop. My attempt is as follows:
array is not a useful name. I would go with perm; others would prefer to avoid the abbreviation and call it permutation. I can also see an argument for pi as that is the symbol most commonly used to represent a permutation.
I see this as really two checks: checkNotNullOrEmpty and checkIsPermutation. Of course, if you use a Permutation class then these would be handled by the constructor and at most you'd have to check that the array is not empty.
Coming back to my earlier comment about PermutationUtils: I find it hard to envisage a library which has a need for isCyclic but not for finding the cycle decomposition of a permutation, so I'm surprised that the implementation isn't return cycleDecomposition(array).length == 1;