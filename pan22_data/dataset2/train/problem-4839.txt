You can either keep fighting the limits on your shared hosting account, or you could switch to a different type of hosting that dedicates resources to you:
Process control daemons like PM2, forever, and Supervisor are good at keeping their child processes alive by restarting them, but there's nothing protecting them if they themselves are killed.
In shared hosting, user processes are expected to consume resources when a visitor is accessing the user's website and then release the resources after the page is finished being generated.  PHP under Apache normally does this, but Node.js applications are their own servers that reserve their own resources indefinitely.
If you choose to keep creating workarounds, they'll just get more complex, and your uptime will continue to suffer.  Your shared hosting provider may even suspend you for trying to bypass their limits.
The red flag for me upon reading your post is shared hosting.  The symptoms you are experiencing are typical signs of shared hosting limitations:
Shared hosting providers like to kill long-running processes because it means they are dedicating memory and CPU time to you, and that is not in their interest of overselling.  They can easily do thisâ€•see the RLIMIT_CPU resource limit in setrlimit(2):
You found a workaround by restarting the process with cron, which resets the process limit accounting.  This seems to have worked for you until your account hit some other limit or a server administrator disabled your Node interpreter.  Perhaps your hosting provider noticed that the processes they were trying to kill were respawning, so they may have just prevented node from executing either by deleting it (rm node) or by turning off the execute bit (chmod -x node).