As for the performance question, it would be stupid to try using a database for such a job, for a ballpark figure I'd say an average database is 1000 times slower than memory. Just keep everything in application memory, I don't think you'll run out of memory before you hit some other bottleneck.
Raw access, direct from the client with SQL commands?  Bad idea.  Have the server receive requests, which you then internally create the SQL commands from.
What do you mean by "Raw access"? If it means what I think it means you have got a gaping security hole.
Typically, simulation state is kept in memory and the server will send it out to the clients while longer term info like active games and who is connected would be kept in a database that all the services like the lobby can pull info from.
Is SQL fast enough to handle this kind of data traffic?  Or would it be better to store it all in memory?  Or is there some alternative (such as paging) I haven't considered?
Currently I use mySQL to handle logins (Raw access: no middleman for accessing the database) which seems to be extremely quick.
Now, the game has been designed in such a way to minimize server calculations, while still providing zero trust to clients.  Is it possible to use SQL in a way to store and manipulate all game data, for each game? ie: