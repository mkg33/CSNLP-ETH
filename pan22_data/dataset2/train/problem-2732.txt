Then when you ssh in, the problematic bashrc will be moved out the way, before your login shell is started - you can then obviously fix the bak.bashrc and move it back into place
Interrupt grub boot loader by pressing e ... again press e to enter grub loading lines, again press e to edit the kernel line,
My suggestion is to use simple FTP and then delete or rename file bad file on the FTP command line after logging in.  I'm assumming that your system will allow you FTP access.
If I recall some bad experiences I have had like this, the ssh, scp, sftp do seem to run the initialization files. 
I managed to mess up my .bashrc file too on a new cluster I've been given trial access to. Not wanting to seem like a noob, the last thing I wanted to do was ask for help from the admins, and I couldn't get a well-timed ^+C to work. 
I couldn't get a 'mv' command to work (tried before without -t), so I think the -t option must have done it, but you can test that if you want. I've now recovered from the .bashrc~ file (made by vim) everything but the dodgy line in question and everything is right in the world! =D
I've had the same problem, and somehow was able to solve it.  I used ssh to access the system, and pressed and held Ctrl+c as soon as I logged into the system.  Then, ~/.bashrc was not read, and I was able to modify it.