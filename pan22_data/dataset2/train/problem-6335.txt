My NFS Client (which doesn't have the ID Mapper running) sends my NFS commands as my user (1000:1000) and because that UID and GID don't exist on the NAS, it translates my UID and GID to 1024:100 so I am treated as the Admin user who has full permission.
This is a terribly unprofessional and insecure use of NFS for a business environment, but just for me to access my files at home it is an abuse of NFS behaviour which is acceptable to me.
I had the same problem trying to find out the models this was on. Turns out Kerberos is part of the Active Directory Server package, and the package description includes the Synology models it’s available on. (I got the 1515, not the 1515+, so I’m out of luck as well.)
This way your NFS Client sends its ID credentials as roger@example.com in the NFS commands on the wire, and your NFS Server idmapper maps that to a user called roger on the NFS Server. The UID and GID don't matter, they are mapped on each system by the idmapper.
I've been really struggling with the exact same problem.  I went through the huge pain of setting up a Kerberos server with Docker on the Synology, set up the ID mapping, and I still didn't like the behavior.  Kerberos is way too over-engineered and difficult to keep working on reboots and automounting.  Plus, the default umask of newly created files was 0000, and every new file was created mode 777, no matter what my local umask was.
This results in anonuid=1024,anongid=100 (the admin user and users group) being added to the export in /etc/exports on the NAS.
For NFSv4 ID mapping to work properly, both client and server must be running the idmapd ID Mapper daemon and have the same Domain configured in /etc/idmapd.conf.
Another option is to make roger's UID and GID the same on the NFS Client and NAS, then you can use NFSv4 without ID Mapping, or you could then use NFSv3 which relies only on UID and GID.