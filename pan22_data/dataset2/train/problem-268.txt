Have you actually traced where your problem lies? Is it in the database query? Is it processing the query on the server side? Content rendering? Transmission of the rendered content? There's many area's that can bottleneck performance on a multi-tier web application, and to do any meaningful performance improvement, you need to analyze what's slowing things down.
Have you evaluated your actual queries against your DB?  Your performance should be better than what you're seeing.
At summary, if for you size SSD costs like 2-3 man-days I would recommend to use it but not expect great improvements.
Buy more RAM.  Lots more RAM.  If you have 4GB, go to 16GB or 32GB.  Even 32GB or RAM will likely be cheaper than GOOD SSD.  Most SSD drives are no better than hard-drives, with the expensive Intel drives being the notable exception (there are other SSDs that are even faster, but those are far more expensive).
2nd project. 10-20% improvement on total page load. difference is almost minimal. However, I got feeling that in this case system is more ready to handle stress and random reads.
One is older, and it has very normalized table structure. It means that to render information about one business entity I read probably from 5-6 related tables.
If your database is only 1GB, SQL Server will cache almost the entire thing in memory if you add enough memory.  The only exception is if your process is writing a lot of data.  If you have 1,000 INSERT transactions that need to happen for each user action a lot of memory won't help much, and then an SSD drive MIGHT be useful ... but I suspect that is not the case.  In any read operation memory will always improve performance much more than hard drives.
I would add my comment to an earlier answer, but I don't have enough reputation ... so here goes ...