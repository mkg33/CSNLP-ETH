Lower-level transport protocol - based on your requirements, I'd choose between Microsoft's NET.TCP binary XML (if you're ready to run your server on Windows which is not free) and Google's protocol buffer (GPB) atop of either TCP (if you need callbacks from server) or HTTP (of you don't need callbacks). IMO, GPB is a bit easier to code on client, harder on server.
SQL vs NoSQL vs plain file storage - the answer mostly depends on your data access patterns. Client needs complex queries, especially with joins? Use an RDBMS for sure. Only need to download/upload blobs? Use NoSQL or just file system. Expect complex concurrency problems with multiple users competing to update a single record? Only consider RDBMS or carefully chosen NoSQL that is OK with that (e.g. ESENT if your server is on Windows).
Higher-level protocol - design around your functional requirements. Think about what data the client will need to have, to show the user what he's expecting to. If your tababase is small, and your user is able to set up different filters to query the data - then "retrieve the whole database, and then filter it" will work OK. If however your DB is large and/or user only [typically] need a small subset of your DB - then client is better to ask your server for the filtered dataset.