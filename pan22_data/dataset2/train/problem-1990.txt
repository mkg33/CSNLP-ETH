The class bejavior can be overridden in derived classes because of the virtual methods and the separated reponsibilities.
The KeyValuePair is not the best to hold two indexes togatcher becouse it stands for a complete different stuff in the framework as it's name is telling us.
As has already been pointed out, a Dictionary is not the best match for this situation. Instead we can just enumerate the substrings that we want
To avoid using a dictionary just split the array on ',' and iterate over that array. The following code differs from your functionality in that given a mask like "1-3-4" your algorithm will result in the range of 1-4 and mine will ignore it entirely. In your description you indicated that the user input is assumed correct so I will assume this is acceptable behavior :).
With object oriented view we can build a class to solve this problem what kind of problems we have to deal with:
If usage of the foreach is an issue, you could replace it with the IEnumerable<T>.Aggregate method call:
I have splitted the parse and the apply operations into different method and i have elminated the double split (separator '-') and removed the foreach loop and changed it to a Linq call with string.Concat(IEnumerable).
You can put additional error checks into the method i have only added the null check in the input methods (constructor).
More inefficient is building a string in a loop using +=. Use a StringBuilder when concatenating strings in a loop.
And there is no reason to use the Dictionary<int, int>. It could be easily replaced with the List<Tuple<int, int>> or with the IEnumerable<Tuple<int, int>> (but in the last case there is no ForEach extension method):
Using a dictionary is effective and provides you with the desired result. A Dictionary does, however provide a little overhead.