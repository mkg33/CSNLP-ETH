at the top of the script works like a charm.  You'll still (potentially) read an input buffer's-worth of bytes before the script gets called, but that's generally not a problem.
The other alternative, since you're using Apache, is to block things at a higher level; add a new GET string to your updated clients, and then add a config like:
Would it be possible to change your DNS  to point to a server (or load-balanced server farm) which can handle the load, and/or a server with better net connectivity, so you're not bottlenecked at the 3 T-1's? 
Not sure what your network capabilities are, but you could also consider whether you can deploy ACLs upstream from you to block client traffic (assuming transmitting this log data is the only thing they're reaching you for).  You could also use something like NBAR to discard traffic directed to the upload URL.  These methods could preserve the limited bandwidth on your T lines, but unclear whether you have this level of network access.
Potentially you could this with a reverse proxy (squid setup described here), using iptables or with one of the many throttling modules for Apache (search here for bandwidth and your webserver version).
If the clients are connecting to an IP address, not a DNS name, have you talked to your upstream provider(s) about changing your routing, so that the IP address in question is routed to server space onsite at your provider or nearby at a colo facility?
I'm a bit surprised about your comment that the clients upload several times a day but you're still getting flooded after you immediately exit / return 200 due to the ~30 seconds of transmission.
I'd agree with the others that throttling the bandwidth is the answer (NOT QoS routing - becuase the service is always HTTP - you just want some clients to go slower).
Along the lines of another suggestion, is there a specific DNS name that's being resolved for the data upload?  You could try simply yanking the A record if it's not used for anything else.
shorten your conn. timeouts in apache configuration to save memory & dead/zombie apache childs. then use cutter to kill unnecessary uploads.
Sending a HTTP response is all well and good, but what you really need to do is to close the connection.  I don't know mod_wsgi intimately, but in mod_php, for example, a simple:
You can probably do the iptables thing without any reboots / hardware / software changes, but the apache module will give you very fine grained control over which clinets / URLs to apply the throttling to - although I'm not sure how many of them actually work with uploads.