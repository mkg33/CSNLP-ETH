Every frame, the CPU sends commands to the GPU like "use mesh number 4 with texture number 7 and draw it". It also sends some data like the projection matrix and mesh positions. However we don't want to send more than needed every frame since the PCIe connection the the GPU is relatively slow.
So... the engine first creates what is called a "Swap Buffer". It is basically a contiguous block of memory (holds two frames) that our final image will be rendered into. When the frame is finished, the game engine will swap it with the old frame.
When the game renders, it's usually done in multiple passes. These passes will be basically screenshots that the engine will use. So in a way, yes you are creating RGBA pixels, and then you edit them.
When the GPU performs the rendering, the screen image is just treated like a texture of the size of the window internally. In fact, many engines draw to multiple textures in order to create more advanced graphics effects. Then, it is just another command that tells the GPU which image to send to the monitor. 
When a 3D engine renders a frame, it typically does so in stages. Sort of like photoshop really. And this can happen either on the CPU or the GPU. For most game engines, it's now the GPU that handles this.
All the projection and rendering is done on the GPU. When loading a level, the CPU reads meshes and textures from disk and uploads it to video memory of the GPU. In return, it gets integer numbers to later address those resources.
Each of these passes will be seperate pieces of the same scene. So... Albedo, lighting, shadows, depth, ect.