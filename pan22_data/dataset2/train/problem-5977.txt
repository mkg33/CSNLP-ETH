Maybe you need all requests for a single session to go to the same servers, but you want requests to be spread across different, regional server clusters? Round robin is not appropriate, for that: you need to do something that ensures any given client accesses the same physical server cluster each time (except when 'exceptions' occur, such as server failure). Either they receive a consistent IP address from a DNS query, or get routed to the same physical server cluster. Solutions for that include various commercial and non-commercial DNS "load balancers", or (if you have more control of your network) BGP network advertisements. You could simply arrange for your own domain's nameservers to give entirely different responses (but, as DNS requests can get sent all over the place, you won't achieve any location affinity with that approach.)
(Even if there is some info that Anycast is bad with TCP there is several big companies using it like CacheFly)
The right way to achieve instant fail-over is to use BGP4 routing such that both sites use the same IP addresses.  Using this the internet's core routing technologies are used to route the requests to the right data center, instead of using the internet's core addressing technology.
One spanner in the works is that a number of ISPs have badly configured resolvers that cache records for a set interval and completely ignore TTL settings.  It shouldn't be so and there is no excuse for it, but sadly from my experience with migrating numerous websites and services it does happen.
In the simplest configuration this only provides fail-over.  It can also be used to provide Anycast, with the caveat that TCP based protocols will fail at the moment of switch-over if there is any instability in the routing.
Clearly it is a false claim - you have only to look at Google, Akamai, Yahoo, to see that they're not using round-robin[*] responses as their sole solution (some may use it in part, along with other approaches.)
Very nice observation vmiazzo  +1 for you !!  I'm stuck exactly where you are .. baffled with how these CDN do their magic.
There are many possible options, but it really depends upon what other constraints you have, with your service/application as to which you pick.
It is possible to use round-robin techniques on a simple, co-located server approach, and not have to worry about server failure, if you also arrange for the 'fail-over' of the IP address. (But most opt for load-balancing techniques, a single IP address, and fail-over between load-balancers.)