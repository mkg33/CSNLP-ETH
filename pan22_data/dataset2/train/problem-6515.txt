Instead of trying to put together your own solution, you can use an existing PXE/DHCP automation tool. Because if you roll your own solution, you won't be able to take advantage of new features that open source tools offer.
If you really want to automate the install, so you can pick a menu item and then just let it take over from there, you need to use "preseeding" (Debian-based) or kickstart (Fedora-based) where you can tell the installer exactly what to do, including formatting discs (DANGER :-), packages, configurations, etc...
With everything in place, installing servers becomes a really simple task with Cobbler or Foreman. They have APIs so you can script the little remaining manual tasks.
After you've got it set up for basic use, it's also got a pretty cool cobbler import command that slurps a distro right off of a CD/DVD and gets it ready for use.
Then you need to set up a TFTP or HTTP server (gPXE/iPXE will support HTTP, stock PXE tends to only support TFTP).  That server hands out the files needed for the boot and installation.  I like to get all fancy and chain "pxelinux.o" with a menu file.  Linux Journal seems to have a good article on PXE menus, page 2 is talking about the menus.  I have menus set up for each distro class (Fedora, CentOS, Ubuntu) plus some utilities (memtest), then those menus have choices for the versions (Hardy, Lucid, 32-bit, 64-bit), then those menus have choices for "install" and "rescue" or maybe "server" versus "desktop".
It may take time to get all this setup, but once you do that, you are free to concentrate on your main tasks. 
It has a different approach to the same problems, and also has deep integration with Puppet(usage of Puppet with Foreman is not mandatory, but helps.) You need the Foreman-Proxy component to take care of DHCP/TFTP for you. Here is a screen cast of Foreman provisioning a VM, but the same applies to a physical host. Another installation guide.
Like Cobbler that takes care of managing several manual tasks like DHCP record addition, TFTP configuration, kickstart templates etc.
PXE, as you mention, is what I've had very good luck with for doing what you're talking about.  The wrench you throw into the works is that you don't want to change your DHCP server...  That means that the stock PXE on systems isn't going to work, because it is going to expect the DHCP server to give it a "next server" and "filename" attributes (which the PXE client uses to get bootstrapped).
The enter link description hereBoot.FedoraProject.org server can be useful, you can point your iPXE at it initially, or use it's instructions, to get a flavor for it, then pull down what you need and add the other distros.
PXE is actually not that hard, and it makes many of these sorts of things just so easy.  I've run a PXE server for close to 10 years now, and I rarely burn media.  Plus the network pulling from a big network server is WAY faster than a CD or DVD to install from.  It's not unusual for CentOS installs to take 3 minutes.
Why not use a Virtual Machine instead? It will be more convenient than DHCP servers and re-imaging servers. Even if you take the pxe route it will require a lot more effort compared to Virtualization. I would suggest you evaluate your requirement and consider the VM approach if feasible.
Its goal is to automate installs as much as possible, with tight pxeboot integration, and doing some of the heavy lifting for configuring TFTP, DHCP, etc. for PXE use.
So, what you'd need to do is grab gPXE or iPXE (gPXE's replacement), and customize it to include the "next server" and "filename" attributes, then burn it to USB or CD and boot from that.  That would allow you to give those attributes without having to have the DHCP server hand them out.  This is documented at the iPXE web page on embedded scripts.