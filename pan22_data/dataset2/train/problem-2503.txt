I also disagree with your premise that "there is a need to find ways to teach necessary concepts before diving into programming the robot itself." As someone on a small FIRST Tech Challenge team, I was the first person who actually learned to code the robot. The way I learned was first by copy pasting things from the various templates provided and using Android Studios suggestions. From there, I found out about how to do various other concepts from the google.
Another route you could try (since the context is FIRST) is teaching myMotor.setPower first, then carrying on by explaining all the template code which surrounds it. The FIRST repo has a template of the code you can use, and explaining to students how it works could be a useful teaching tool.
For example, if the motor is represented by the DcMotor myMotor, I'd first go with the simple myMotor.setPower(1), just to get them to have a moment where they actually made it do something. From there, I'd add things like looping and I'd teach it the same way I'd teach it to other students, but here the thing being done might be checking the controller for changes in input to change the power for the motor.
What I like to do is to first teach them the code that will actually make the robot move/do whatever it's supposed to do, then from that point I'd teach them the structures that can be used to make it more interesting.