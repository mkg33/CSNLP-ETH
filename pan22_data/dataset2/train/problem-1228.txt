This makes really easy to implement collisions and all that. Also adding gravity or dampening is simple as pie.
I've done something similar by using 2 standard 2D vector classes (by standard 2D vector classes, I mean classes which represent an x and a y coordinate). The first vector, v1, represented the position of the ball at that moment in time, while the second, v2, represented the velocity vector. That vector represented the distance and direction traveled between two timesteps in the game, giving the following calculation for a new position (ignoring collisions, etc):
To explicitly answer your question: vectors can be used to translate objects the same way as you're currently doing it. They just wrap things up nicely, and let you write less code. 
In short (and as has been mentioned by others), 2D Vectors are functionally just wrappers around a pair of values representing position, motion, or whatever in 2D space.  
I strongly recommend that you read a book about the topic. I recommend "3D Math Primer for Graphics and Game Development, Second Edition." by Fletcher Dunn and Ian Parberry. You can also checkout the book's webpage http://gamemath.com/ which includes powerpoint presentations of all the chapters (under Download).
For instance, what you're likely asking for is a way to dynamically move an object based on a facing vector, as opposed to a rotation.
It sounds like you're just looking for resources to better understand them.  It's hard to know what your expertise level is, so here's a link dump based on things that, from a quick glance or my past experience, I'm guessing may be useful for you:
I'd recommend that you read a book or extensive article on vectors. Also, this code is JavaScript, as my Java is  unreliable and rusty.
If v1 is vec2(1, 1), v2 is vec2(1, 0), and moveSpeed is 2, then after that line of code v1 will be vec2(3, 1). You'll notice that the facing vector is a unit vector: the sum of its components add to one. This means that you'll be able to use it, and your object will only ever translate moveSpeed units in total. 
There are plenty of other cool things you can do with vectors, especially once you have collision code that returns you the vector where the collision happened. In breakout, this would allow you to set a facing vector equal to the normal of the collision vector, providing an easy way to bounce off of any surface, regardless of its rotation.