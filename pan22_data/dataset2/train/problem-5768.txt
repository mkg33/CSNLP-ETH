1>c:\users\pacmaninbw\modeler\modeler.cpp(157): warning C4244: 'initializing':   conversion from 'double' to 'float', possible loss of data
For performance reasons it would be better to use "\n" over std::endl especially in loops as shown above. "\n" just inserts a new line, std::endl flushes the output after the new line which means it is making a system call and that really does slow things down.
1>c:\users\pacmaninbw\modeler\modeler.cpp(821): warning C4244: 'argument': conversion from 'double' to 'float', possible loss of data
There are compiler settings that can help you improve your code, these can be specific the the c++ compiler you are using or they can be common. A common c++ compiler switch is -Wall which indicates a errors and warnings should be reported. When I compiled this program there was an error reported as well as many warnings.
Using inline in function declarations is generally obsolete. The inline declaration was created as an optimization in the early years of C++. Most modern C++ compilers will properly inline functions as necessary when compiling with -O3. There are times when inlining is not optimal due to cache restrictions and other reasons.
The variable res is not initialized prior to being used. The variable res is being used because the += operator says add the following to this variable. There are 2 ways to correct this, either change the += to = or assign zero in the declaration of res.
The numbers 0, 1, 2 and 3 aren't clear, it may be better to create symbolic constants with names that indicate what the actual condition is.
It is generally a good idea to remove debugging code before posting on Code Review, rather than just commenting it out. When you do comment out debugging code it might be better to comment out the for loops as well as the cout statements. This will improve the performance of the program. What might be even better is to move the debugging code that prints an entire matrix into a function where it can be called from multiple functions.
As you seem to be aware of with the isNearlyEqual() function due to the binary nature of computer data floating point numbers can't be completely represented on computers, there can always be some very small error. The error can be increased by switching back and forth between types, int to double, double to int, float to double, and double to float. This is why most financial institutions will use separate integers to represent dollars and cents.
Here are two references on floating point numbers and related errors, the first is why floating point numbers can be problems and the second is on floating point error mitigation.
1>c:\users\pacmaninbw\modeler\modeler.cpp(822): warning C4244: 'argument': conversion from 'double' to 'float', possible loss of data
This might also improve performance by removing one comparison if the compiler hasn't already optimized it out.
In the for loops where an integer value is being compared to container.size() there is a type mismatch, container.size() is declared as size_t which is currently defined as unsigned int. It might be better to define loop control variables as size_t when they will be compared with container.size().
Names spaces were invented to prevent collisions of class and function names from different libraries and modules. This code already introduces a struct/type that could conflict with the std names space (struct Vector). It would be better to get into the habit of prefixing objects from different namespaces with the namespace so that others can maintain the code if necessary. You might also want to make your Vector struct a class and create a namespace for it. A better discussion of this can be found on stackoverflow.com.
In C++ none of the variables on the stack (local variables in functions and methods) are initialized by the compiler. A good practice is to initialize the variable in the declaration.
In the else clause of the major if statement all of the subsidarary if statements could be made simpler by creating and outer if statement:
It might be better to choose one of the two types for everything, either stick with double or stick with float. I generally use just double because it provides greater precision. The only time that a float variable might be a good choice is if it is a member of a class or struct and space is an issue.
1>c:\users\pacmaninbw\modeler\modeler.cpp(178): error C4700: uninitialized local variable 'res' used
1>c:\users\pacmaninbw\modeler\modeler.cpp(151): warning C4244: 'initializing':   conversion from 'double' to 'float', possible loss of data
When you do convert from one to the other use a static_cast to do the conversion, that will remove the warning messages and possibly improve accuracy.
The code above is representative of all the code, a standard practice is to indent the inner loop of all nested loops. Indentation can be an indication of code complexity and can help a code author figure out where they need additional functions. Indentation also helps reviewers and maintainers of the code to read the code.
Note: For maintainability it might be better to always put braces {} after if (condition) and else so that maintainers can expand code as necessary without introducing new bugs.
1>c:\users\pacmaninbw\modeler\modeler.cpp(145): warning C4244: 'initializing':   conversion from 'double' to 'float', possible loss of data