Of course this also works for other users, not only "pi". Usually I ssh first using the default password. Then I add a new user on the Pi with a safe password. Last, I disable the "pi" user. Ctrl-D brings me back to the Mac. Then I do the above "ssh-copy-id" with the new user (not "pi"), and then I am done.
I met the exact same challenge a few days ago: coaxing a Mac into logging directly into an RPi without requiring password authentication. I followed the steps in the tutorial too, but not entirely cleanly, so some problems arose. In the end, the following worked (MacOX Sierra; latest Jessie Raspbian). On the Mac:
By the way: I quite often do delete the known_hosts file on the Mac, because I can't be bothered editing the file if I re-use a Raspberry Pi with a new SD card.
No, there is no reason to. known_hosts is used by ssh to track all computers you have ever logged in to, that way if the key of the remote server changes, ssh will complain that someone is trying to intercept your communication.
It would also be necessary after a clean reinstall of the  raspberry pi/remote server (sshd generates new keys during system install)
I use this all the time with newly flashed Raspberry Pi devices, and never had any problem. Apart from enabling SSH there is nothing to do on the Raspberry Pi for this to work. The command essentially copies the public key to the Raspberry Pi. You have to enter the password for the "pi" user before the key is accepted. Afterwards, "ssh pi@raspberrypi.local" will log in without asking for a password.
There is at least one circumstance where it may be necessary, often on LAN you get a dynamic IP that changes day to day, if you have two pis 192.168.1.100 and 192.168.1.101 and then tomorrow they switch places, your laptop will complain that the key for 192.168.1.100 has changed, even though it has simply moved. In this case you may simply delete the offending line in known_hosts.