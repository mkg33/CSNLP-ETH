ARM, the ISA family used by the Broadcom processors on all current Raspberry Pi models, is based on RISC, for which RISC OS is written.  RISC OS I think predominated on ARM devices for their first decade, as the same UK based tech company (Acorn) originally designed both ARM and RISC OS.  In fact, ARM initially stood for "Acorn RISC machine", and part of the reason the Raspberry Pi is called what it is is because of a tradition in the UK of naming computer systems after fruits or nuts.
Although the original project only supports Raspberry Pi 1, I have succesfully compiled this fork on a Raspberry Pi 2, and it says to support 3 also.
Another advantage of RISC OS in RTOS applications, is you can only use the modules you require, something that makes no sense in traditional GUI applications, and had been used by eg STD/AdvantageSix[1] although they use the term "embedded systems" instead of "RTOS". The advantages this brings are simplified design, lower power requirements, lower memory usage, and faster boot times (some I/O device interfaces require mini booting themselves, and the OS has to participate in this, although the timescales are usually too short to notice).
The only way reasonable way of making sense of this is to split the RTOS definition into three levels:
I hope that both fills in some gaps in the info above, and makes clear the gaps in my own knowledge.
That's pretty close to real time functionality, depending on how "real time" you need to get.  Further, there is some confirmation that RISC OS runs on the Pi 3.
RISC OS is not a true real-time operating system, however, it does use cooperative multi-tasking, meaning you can run a process that can voluntarily refuse to surrender itself to another process.  What consequences this may have I don't know, but I would assume that:
Since the definition of an RTOS varies on the application, usually a computer pretending to be something much simpler, RISC OS is an RTOS for the medium-complex applications, and isn't necessarily for high-complex ones, although a highly-complex RTOS sounds like a contradiction in terms. The example by Mahmoud Almostafa RABBAH refers to no OS, and running a single-tasking program straight from the boot-loader, which isn't an RTOS either.