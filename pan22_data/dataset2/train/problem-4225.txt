At any moment, the number of possible board states is 3^9 or 729. Each of nine cells has one of three marks in it (blank, X, O). Less, since many combinations can't happen in a game.
It is possible. Probably the best way to program an AI for tic-tac-toe that could do this is to use a minmax algorithm.
Well... There's only 9! or 362880 possible games. Less, since you stop playing after someone wins. And less, conceptually, once you reach a state where neither player can win. Times 2 if you want to treat X and O starting as different cases.
At any rate, these are very small and tractable numbers. One could, in a pleasant afternoon's coding, perhaps in node.js or python, iterate over all those games, and produce a table showing for each of the 729 board states, which move to make next. 
Normally, you would give a winning move a very high score so that the AI would make that move. In your case however, you would want to give a winning move a very low score and instead favor moves that prevent the opponent from winning. This means that moves that either let the player win or the AI win would be very low scoring moves and every other move would be high scoring.
not be as easily solvable as tic-tac-toe.  Your game is "player1 wins by a tic-tac-toe draw, player 2 wins by either a tic-tac-toe win or loss." (Or the converse).
Print it out as one long line of javascript. It could be to initialize an array, or print out a giant switch statement or mess of if-statements. Doesn't matter, computers don't mind. Paste that into your function nextMove(){}, and, done!
Now, this still doesn't guarantee a draw 100% of the time. If the player puts the AI into a position where no matter what move it makes it will win, the AI will of course win. However, this should help the AI force a draw the majority of the time.
I have done a project similar to this about a year ago. I researched strategies on how to always win/tie the game, and simply coded the strategies - though it does take some time - into my game (NOTE: make sure to plan out an efficient way for the computer to analyse the "board" and then make its next move, or else you will end up with a giant mess of if statements). I would recommend reading this article on wiki how. It clearly explains what to do to win/tie a game regardless of what your opponent does.