Imagine you've written a game that supports PC, iOS and Android.  Now you want to put out a major update to the game.  Having all 3 platforms share a common scripting language could be the difference between copy/paste and serious programming effort.
If you're good enough at programming to write a system that actually works well, then you're a good enough programmer to actually write the code itself or (more likely) more comfortable with just writing the code directly.
That being said, there are engines and tools that abstract out a lot of that stuff for you.  Specifically, look at using the Unity engine with the Playmaker addon:  http://www.hutonggames.com/showcase.html
Generally speaking you should write games, not engines. Writing engines takes longer, and the engine won't be good enough unless you have enough experience to make it correctly, and you won't know what needs to go into it until you have made a full game with it. For that reason, new engines should usually be created based on finished games, not the other way around.
It can't possibly save time on a single project because whatever you need for the game will need to be in the engine, plus anything the game doesn't need but the engine does.
One reason you would want to write a game scripting engine is if you wanted your engine to run on multiple platforms.  You could then separate programming concerns into the low-level platform details and the high-level game.
Any graphical programming language is really geared towards people who are not programmers.    It all deals with abstractions at some level.  You'll eventually find some edge case you didn't prepare for, then have to implement that case in your system before you use it. 
No.  What scripting are you even going to support?   Write Games, Not Engines.  It sounds like you're just trying to make tech for tech's sake, not solve an actual problem.  Make a real game and see what comes of that.  If you end up with s useful generic game tool, fine.  Set out to make an actual, specific game, though.