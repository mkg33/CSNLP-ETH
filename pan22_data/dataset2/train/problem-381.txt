If you are using mongodump to export all data for a backup (rather than following the sharded cluster backup procedure), mongorestore will not recreate collections with sharding options. However, you can set up sharding first and mongorestore into existing sharded collections. For example, if you wanted to restore a single sharded collection you could create an empty collection with the desired shard key and then pre-split chunks before importing your data.
The MongoDB manual has tutorials to Back Up a Sharded Cluster with Database Dumps and Restore a Sharded Cluster with Database Dumps. Following the documented approach you do not have to re-shard when restoring from backup, however there are multiple steps to coordinate a consistent backup & restore of each of your shards and the cluster metadata.
You could use a solution like Mongo Connector to replicate data from your sharded cluster to a backup MongoDB deployment. This will ensure you have another deployment on standby, but does not provide for usual backup requirements like being able to recover to a previous snapshot or point-in-time.
For more information I suggest reading MongoDB's white paper on Backup and its Role in Disaster Recovery.
Backing up a sharded cluster with mongodump generally isn't the best option in terms of production impact, ease of use, or efficiency. With this approach you are effectively exporting collection data and index definitions with mongodump and then rebuilding databases in another environment with mongorestore. Dumping data may have a significant effect on performance / working set as all data has be read through the MongoDB server; restoring may also take longer as indexes will need to be rebuilt.
Disaster planning should consider fault tolerance and backup/restore times for both data and infrastructure:
You should consider aspects like backup automation, backup isolation, recovery objectives (eg. snapshots vs point-in-time), recovery time goals, and production impact in order to create the most appropriate disaster recovery plan for your deployment.
Alternative (and less impactful) approaches would be backing up with file system snapshots or a commercial service such as MongoDB Cloud Manager. A full backup solution should provide continuous backup with regular snapshots and retention policies. For example, see Cloud Manager's Backup Preparations guide.
If you need a temporary solution I would strongly consider using a commercial backup service for your production data until you have more time to evaluate alternatives.