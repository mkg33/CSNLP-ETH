Not sure what I'm doing wrong. This seems to be something that should be a very simple process so I'm obviously doing something wrong or used the wrong SSH parameters.
I need to be able to copy files from SRV to NAS securely, without having to enter a password. SRV runs Ubuntu 14.04, so I can run ssh-keygen. NAS runs some other flavour of Linux (I can't figure out what. cat /etc/*-release and lsb-release -a both don't work). NAS has ssh-keygen but not ssh-copy-id and I don't want to install any additional software on NAS as others have had problems doing so.
If this file is newly created (or anyway) make sure that its permissions are restricted to the owner only:
known_hosts file then generate new ssh key and add it to authorized_keys. This should solve your problem. 
I've logged into NAS with the user I wish to SSH as. I've run ssh-keygen and copied the id_rsa.pub file to ~/.ssh/authorized_keys on SRV. Then I tried to SSH from SRV to NAS but it asked for a password. Then I tried to SSH from SRV to NAS specifying the identity file using ssh user@NAS -i ~/.ssh/authorized_keys/id_rsa.pub but it still asked for a password.
So the ssh-keygen should be run on SRV and the id_rsa.pub file created should be copied to ~/.ssh/authorized_keys on the NAS in the home directory of the user you are logging in as.
Here is the confusion. I run ssh-keygen and 2 files are generated on the machine. I'm not exactly sure what the files are and which one I should be distributing. The other thing is, which machine do I actually run ssh-keygen on? Logic suggests if I want to log into NAS from SRV, I should run the command on SRV, but what reading I've done suggests it might actually be the other way around?
When you do an ssh-keygen you are generating a public and private keypair.  The private key should never leave the device it is created on, and the public key should be distributed to any server that you want to log into using keys.