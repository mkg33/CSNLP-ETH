This is a bit of a simplification as some systems use multiple messages for create.  (IE: Block out a model here, details will be coming, or here's the model and textures but no RPG mechanics are sent yet.)
Rereading what you asked, one thing to note is that commonly a cell can be subdivided per client.  IE: The cell may be the entire portion of the world that the process owns, but for cheat-prevention and bandwidth issues the cell may only consider objects that are within 20-40 meters to be relevant to the player.  The real tricky part is what happens when the player is within 20-40 meters of a cell boundary?  At that point they are seeing objects from multiple cells that are relevant to them and those other cells need to proxy their data through the cell the player is in.
The phrase that you're looking for is relevancy sets.  Each player has their own list of objects that they care about (That are relevant to them.)  As objects are removed from this list, a message is sent down to remove it from the client.  As objects get added to this list, a creation message is sent down to the object.  During the course of game play as an object state changes, messages are created to update that state on all clients that consider it relevant to them.
I probably linked it a few times before, but a paper that discusses this is Distributed Object Views and was used on an MMO I worked on awhile ago.