As others already pointed out, your solution is over-engineered, and that's done in an inconsistent way.
You have created a Magnitude, but it's unclear what you mean with this. Magnitude is about relative size. That's good. Roman numerals are a relative system. But your enum is a mess and extending it with getByExponent only makes it worse.
Now you've tackled the problem, consider looking at how other people have solved this problem. Their approaches and the answers provided can teach you alternative methods to familiarize yourself with.
I'm going to be harsh here, but if you'd present this in an interview, you would not get the job. That's ok, you simply weren't familiar with the in-built constructs of the language. But those exist for a reason and you should show at an interview you grasp their basics. That's one of the things an interview-question asks of you: to show you know how to get something simple small done using the tools the language already provides for you. Don't re-invent the wheel unless specifically asked to.
Way too much code indeed. Java is verbose, but it doesn't have to be this verbose. There are also too many magic numbers. Code should be self-documenting and yours isn't. The variable naming is iffy at best and the case switch should've been a map, or at least an array, of sorts.
You're asserted that your input is in the range [1,3999], so you should be able to do this in a single function, with not much in the way of looping.
The other stuff can mean, that you're very inexperienced, never worked with other people on a project, or never did a code review. And you do not know the basics of the SDK.
Not writing a test case is a huge part. Because, as a software developer, I say, that test code is as valuable and as important as production code.
You should follow the Java naming guidelines, specifically public final char ONE_UNIT_SYMBOL; should be public final char oneUnitSymbol;. And you shouldn't make these fields public.
Using assert is a nice idea, but not really helpful, as in production code the feature is often switched off. You'd better throw an IllegalArgumentException for invalid integers.
E.g. your idea of a Magnitude class isn't bad, but then it should include the relevant operations instead of just being a structure offering public fields to the outside world. And there's no need for the symTenUnits and the case 10, as a digit can only range from 0 to 9.
I don't like your RomanNumeral enum. It doesn't serve a real purpose, as the Magnitude enum already defines the existing cases. Passing the characters to the Magnitude constructor is sufficient.
Instead of being overly general, try coding specific conversions for the various digits, using a lookup for the actual digit values.
Basically that means, you're very inexperienced in java itself and you can't provide an easy and well written solution for a rather easy problem.
I don't like your solution for the missing 5000 roman numeral. Just using a NUL character will go completely unnoticed in case that something goes wrong.  Having the Magnitude class throw an exception when trying to use the non-existent 5000 numeral (or at least using a visible character like a question mark) would be better.