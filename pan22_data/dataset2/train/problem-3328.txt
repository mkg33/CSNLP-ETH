But IMO, I'd rebase the feature branch on top of master when the hotfix was available. This is the same as pulling in any changes from master (inc other feature branches merged recently). Thus you're not worried about your branch being out of date. Depends on what your team likes to handle-- removing merged hotfixes, or rebasing often.
This can work if your fix introduces no conflicts. git clone https://gist.github.com/jbenet/7959265, see the history and read the reflog I pasted there.
If you resolve conflict upon cherry-picking, you could remove the commit manually when rebasing on top of master, right before merging PR in (you can tag it/write a reminder in the commit message resolving the conflict). 
If you really need the bug fix in your feature branch, merge the bug fix branch in. The talk about bisect/rollback/whatever was FUD--bisect, in my experience, handles complicated merge histories just fine. The model proposed in that post creates artificial problems (such as the one you are asking questions about) and quite literally its only benefit is a cleaner looking history. We used this model for a couple years before realizing the benefit of not rebasing. I rebase when I need to clean up my own history (squash commits, change commit messages, etc) but only it does not effect anyone else downstream (like if I'm working on the branch solo).