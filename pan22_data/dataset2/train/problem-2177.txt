I have a few thoughts for you. Some directly answer your question, some are other things to consider.
Caching anonymous content can reduce your CPU usage by a huge amount, depending on the application. If 99% of your users are anonymous you can serve all of them with a page generated once. To reduce load and cost further you can use a CDN such as CloudFront or CloudFlare to serve this static content. If you use a CDN you need to properly set your caching headers.
You can have more than one autoscaling group associated with a load balancer. You could for example add spot instances at a low CPU threshold, earlier than you would scale up on-demand instances, but then have another group add on-demand instances. This is covered in this question.
Choose your EC2 instance types carefully. T2 instances have variable CPU, once you run out of credits that instance will immediately slow down. The load balancer algorithm "least connections" should cater for this, but you might consider general purpose M instances if T2 give you problems.
I also wonder if you could have a T2 instance in your ELB, but then scale up with M instances if load increases. I think you probably could, using multiple autoscaling groups similar to the technique above. It might not be worth the bother though.
There are general guides on scaling. This guide suggests scale up at 80% and down at 20%, whereas this Amazon guide suggests scaling up at 80% and down at 40%.
First up, PHP is typically CPU intensive. Scaling based on CPU use is probably sensible. You'll have to work out the thresholds based on your experience, load testing, or trial and error. You should probably be conservative to start with, watch it for a while, then adjust to get a good balance of utilization vs cost.