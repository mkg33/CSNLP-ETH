Consider taking a step back and thinking more abstractly about the domain of your game.  Your game must:
A couple things to look for when critiquing class hierarchies are: (1) where am I duplicating code? and (2) what design avenues am I cutting off?
For example: both player and enemy extend creature; that's good. Both player and enemy have nearly identical level-up methods that have nothing to do with each other; why is that?  At the same time, apparently only players can drink potions; why is that?  
As I noted in a comment, I caution you to use OO extremely carefully in this domain.  It is very easy to try to encode the rules of your game into the rules of a type system that has nothing to do with your game domain.
This is a great early project for learning programming. If you are interested in the current state of the art in text based adventure programming, consider reading up on Inform7. It is an astonishing programming language and environment.
My point is that right now you are concentrating on encoding too much specificity into your system. Think hard about what the real "is a kind of" and "can do" relationships are in your game domain, and design your inheritance and interface hierarchies appropriately.