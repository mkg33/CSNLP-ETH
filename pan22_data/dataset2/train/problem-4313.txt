The second is the type solved by any spatial partitioning scheme, and if you try to retrofit that on a design that's not built around it, you'll likely make a huge mess and risk ending up even slower.
The choice of scene graphs or spatial partitioning or both is a matter of optimisation.  And until you have a functioning game, you have nothing to optimise.  So obsessing over this sort of detail now is counter-productive to the creation of your game.
My advice:  make the game, then measure which bits of it are slow, and finally fix the slow bits.  If you start by trying to guess what's going to be slow and obsessing over doing everything in the "right" or the "best" or the "fastest" way before actually having made the game, then you'll never finish.
I tend to disagree with Trevor Powell's answer as there are clearly two different kinds of optimization here.  One is optimization after the fact and to make the slow parts go fast, which is what he has touched on, but the other is designing your data structures and flow control to be at least reasonably efficient and sensible in the first place.
Premature optimization may be the root of all evil (but don't forget the crucial 3% that Knuth also mentioned) but not optimizing at all is the root of Neverwinter Nights 2.