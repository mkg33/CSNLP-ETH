1°) Display as it comes : immediately after addReference, display the entity. It's what I'm using for my Roguelike, because I do not need more.
The lesser your entites know, the best. Do not assume your game "is simple". You may want to modify, improve, update it and then a not-too-bad design will help. 
3°) Store the references received, and check if there was any change (you might want to add an entity identity number for this), so you'll only display what changes.
Then, the main loop will pass a reference to a Bus implementation to every entities. So your entites will need to know the interface (you can do it with an event system too, but it's not that different), but not the implementation, that's not too much a price to pay. 
2°) Wait for the full references (so you'll need to create a special object to store only display references - the logic being close to a reference system) and have rules for the display stored in the bus class.
You can have the bus do the rendering, or just be a pipeline for another class. Note that you'll have to implement a camera logic somewhere. 