Don't replace people with a separate table for each person.  You may want child tables for types that carry type specific data.  These will have the same primary key as the people table, but only exist if required. 
A lawyer may have a law office address which is specific to being a lawyer which would be stored in the lawyer subtype table. Follow this pattern for other subtypes. 
Your case looks like an instance of class/subclass (or, if you prefer, type/subtype).  You can find many answers like this one in SO or here in DBA.
It sounds like you may want to consider one of the higher normalizstion forms and use views to get at your data. However, you need to think about how you use the data in your database so that you can dwsign a schema. Are you doing data watwhousing? If so, normalization can work well. If your doing a lot of reads accross different schemass and tables all the time you might consider a document store.
Consider whether a person can be of multiple sub-types and how to handle that case.  Some of the sub-types appear as if they may result as a relationship to a different entity such as case.  Consider if the subtype fields are really relationship fields.  Join tables can contain additional fields. 