Enforce all prerequisites: In general, if any part of your code ever makes any assumption about the arguments, you should already be enforcing those assumptions with assertions, which will safely terminate your program if they are not met. Whenever you receive any network messages, you are guaranteed very little about their contents, so at that point you should ensure that the network message meets all of the assertions in all of the code in which it will be used (which is probably your entire code base).
Another interesting question where I can cite that awesome quote I've found on the internet a few years ago regarding the creation of multiplayer games:
Make sure that the calls to your server/receiving client APIs make sense: You should first make sure that a message received from a packet corresponds to a client API call at all (and thus have a data format that allows you to verify this), then make sure that the arguments provided make sense and that it makes sense for the client to make this call at this time. For instance, a player who doesn't have a shotgun should not be sending calls to fire one. (NOTE: Many higher level netcode APIs in consumer game engines like Unity and Unreal will check if incoming messages match one of your expected message types, but will not check the contents for you.)
Ok, I can tell you that I had access to the opensource wow server code, and the worst thing for me was fixing the loop holes which gave some not "noon programmers" the ability to manipulate packets, the unofficial opensource servers have thousands backloops and they do not check the packets. On contrary I am sure that you wont do any harm to anyone, because an advanced skill in programming to do such stuff. And in the question you haven't mentioned networking which is all about handling packets. That is how wall hacks work, speed hacks if the server allows something and it will not have a bottlecap of some sort, there is no reason why the hacked client shouldn't send 10x more packets that are responsible for player forward movement. So in this case the player would be able to move 10x faster. 
Neverwinter Nights 2 offers a perfect example for this. It had horrible net code. I helped running a roleplay server a few years ago and it was really, really hard to do so right after the first expansion has been released. What happened?
Let's assume upon login, the server sends the client some data package "permissions". This will tell the client what the player is allowed to see, for example spawn points or transitions usually not visible to the player. Using traffic manipulation, you could use a program to modify that package so the client thinks you're actually allowed to see that stuff (for example), yet this won't change how you appear to other players or the server (because that data should be verified by the server before being accepted and/or passed on).
Make sure that the API you provide to clients is exactly and only what they need: For instance, do not provide a call on the data server that updates a character's stats directly. Instead, provide simple, normal game actions to the client, and allow the server to calculate when stat changes should happen.
Keep the network out of it: As much as possible, encrypt all of your network communications using SSL certificates and individual symmetric keys for each client. That way, when you receive messages from a client, you can at least know that they are unequivocally that client and that their messages have not been compromised by the network. (You still can't usually trust the client, though, but it is easier if they can trust you.)
Account creation in Neverwinter Nights 2 has been (not sure it's been changed) the perfect example of how not to do it. Just to note, the game offers two different modes of multiplayer gameplay: Either characters saved on the local player's machine or characters saved on the server. The first approach allows easy cheating, so we didn't use it. However, the second approach hasn't been a lot better:
Keep in mind, that tinkering with somebody's server will get you into trouble. In the civilised world you are not allowed to do harm or manipulate data without the owners permission. (Applies to DDOS attacks too). All the incomming packet data, that exceeds the norm is logged in 95% of sittuations. And the player who does that gets a permanent ip-ban.
As you specifically asked to magically gain 100 points of some attribute or anything like that: If done right, there's nothing you can do without having access to the actual server. If all calculations (like damage) happen on the server, you simply can't influence or modify them.
There are a few attack vectors to consider here, not just those with the intended effect (some malicious player wants to boost their stats) but also other effects as well.
As the other answers have eloquently put, never unquestioningly trust the client. Because there is no way to tell on the Internet what has happened to your client (if there is a bug in the client or the network, if the client has been modded, or even if it is your client at all), a server must always sanitize a client's inputs, making sure they are plausible and correct, before using them. There are several aspects to this:
If all else fails, keep good backups and logs and allow user reporting: If you cannot prevent a rogue action, a good backup will allow you to roll it back with little to no collateral damage. Also allow players to report the condition, and you can read the server's logs to investigate what happened, find the cheater, and act accordingly. (Be sure to keep your reporting system secure, too!)
At account creation, the game created the character and uploaded it to the server. That doesn't sound  very secure and it isn't. In fact, this caused quite some unintentional issues. If an expansion player created some character with expansion features and logged into a non-expansion server, the server couldn't handle that suddenly "invalid" character data and simply crashed.
Secure your server in other ways, too: Keep in mind that there are other ways to access your game server for administrative purposes - for instance, you might use SSH or Remote Desktop to log into it and fix things, or it may contact a data service. Be sure that those channels are secure, too, because an attacker may attempt to compromise your server by going through one of these backdoors.
Beware of DoS attacks: If a rogue client can't get their way, they can just take the server down with them and ruin it for everybody else by simply overwhelming the server with faulty packets. You can never perfectly safeguard against this, but you can increase your tolerance for it by simply refusing to honor requests that are sent from the same client too frequently.
What should have been done instead is something a bit different: The client should tell the server what to create. But in the end the server determines how/what he creates and whether it accepts the parameters given. This is how pretty much any modern MMORPG handles its character creation process and other mechanics. If you still happen to pass some invalid value, you'll just receive an error message rather than see your character being created with invalid stats.
Something like the injection you mentioned can have some - but at most minimal - effect based on how the game is written:
Still, if somebody wants to go work as an "anti hacking programmer" this is the perfect way to learn about it. And never do it on somebody's server because I can tell you that it is extremely hard to avoid getting your actions logged. If you do it on somebody's server you will most likely be banned from the server and you might even get a real life "ban"...