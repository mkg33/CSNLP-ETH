In each of the cases (as is generically the case as well), the Entity Name (Proper Noun / Noun) is associated in close proximity to a Verb. Hence, if you first parse the sentence to determine verbs and then apply NER to surrounding (+/- 1 or 2) words, you may have a relatively decent way to resolve the problem.
You should use Named Entity Recognition, for example from NLTK, http://www.nltk.org/book/ch07.html <- you can find a usage example there. It would work for your described case quite well.
while the word Edwin is certainly propping up, imagine a situation where the name is Edward Philip Martel. NER detects each word as a separate entities (hence 3 different entities) - thus, you will anyways have to string them together based on some logic. Further, in the case of multiple names being present, it can get harder to disambiguate (e.g. John & Ramsey dined at Winterfell).
This solution would depend primarily on the syntax rules you create to identify NERs as well as the window around the verbs.
In order to perform such tasks with high accuracy, I suggest you to build a LSTM model with word embeddings with the help of word2vec. LSTMs can help to retrieve information from sentence as well as predict the next character or word given a set of words is already present in the sentence. 
This is where the analysis of the sentence syntax would also help (assuming that the end user enters a relatively coherent and proper sentence - if slang and short forms of text are used, even the Stanford NLP  can help upto a certain extent only). 