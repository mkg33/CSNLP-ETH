Depending on if your trying to benchmark it or not.  Also the sleep function will need tweaking to get the right balance between preserving cpu usage and having stable fps.  And there's a whole art to doing this right if your really wanting to.
Could be missing something but am pretty sure a 4th of a second is way bigger than a 60th of a second.  Might be weird quirks about that not sure.  I'd personally just do something like.
calculates the FPS from the frame time and displays it in the window title. However, with just this and glClear() above, the FPS displayed in the title is very unstable (with each FPS update, it changes from 46 FPS to 87 FPS and back), even though back in the initialization step, I enabled VSync, and my display's frequency is 60 Hz. Furthermore, using Fraps, I found out that the program actually runs at a stable 60 FPS. So, what's the problem with my FPS calculation code (more specifically, why is glfwGetTime() producing inaccurate results - my code, being way too simple, just can't be wrong, it's a very simple calculation that cannot give errors of any kind)?
The issue is that you calculate the FPS according to a single measurement, which means that any slight variation will cause a significant shift in results. Since the actual loop time varies due to system considerations, you'll get stabler results by averaging more calculations.