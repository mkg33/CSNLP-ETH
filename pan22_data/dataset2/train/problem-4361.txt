In PHP, I point fastcgi_pass to the php-fpm Unix socket. If any request experiences a PHP fatal error, the upcoming requests will still be served. However, if my Go code calls panic() the program will be terminated and the service will stop responding. What is the best way to handle that in Go?
Ideally, I want nginx to serve all existing (static) files and proxy everything that doesn't exist to Go:
I've seen some benchmarks that show that nginx can serve a lot more requests per second when it comes to static files. Another useful feature of nginx is that it can gzip responses transparently and even serve pre-compressed files with the gzip_static module.
Problem with  "proxy_pass" seems to be because of trailing /, try to remove it, as it does nothing any way. If you need to alter URI before passing it to proxy, try to use rewrite, i.e to remove some part of URI try something like:
I would also have to change the Go code to use net/http/fcgi instead of net/http, the problem with this is that I don't know how to specify the paths (/json or /socket) with fcgi.Serve().
Additionally, FastCGI seems to be 4 times slower than HTTP: https://gist.github.com/hgfischer/7965620.