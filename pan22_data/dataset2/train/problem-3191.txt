if you just need to output the left-hand-side pdfs all in one document, and the right-hand-side pdfs all in one document, then the following script based on Kurt Pfeifle's answer will do the trick (works for any height and width):
And we're done! Feel free to delete the input_file folder, cover.pdf, input_temp.pdf, right_sections.pdf and left_sections.pdf. ;-)
You only need to alter the first few parameters in this command to specify the HEIGHT and WIDTH and ORIG_FILE_PATH.  The remainder of the command calculates the various sizes and calls gs twice, then pdftk.  It will even count the pages in your scan and then produce the correct sort specification (for the scenario I gave).
There is a tool pdfposter which can be used to create PDFs with several pages for one input page (tiling or chopping the pages). It is similar to the tool poster, which does the same for PostScript files.
Next, to get the page imposition you need for a printed booklet, you just "print" ordered.pdf on a custom page size of exactly the size you need (in my example, 5.5 x 8.5), sending it to a "booklet making" tool (in my case, I used Christoph Vogelbusch's Create Booklet for Mac from http://download.cnet.com/Create-Booklet/3000-2088_4-86349.html).  
I needed to be able to print this on a duplex copier; i.e. turn it BACK into an "imposed" PDF, ready for printing.  So using Kurt's solution, I made this (ahem) "one-liner" to convert it back into half-pages, in the correct page order again.  It will work for any HEIGHT and WIDTH, and also for any number of pages.  In my case, I had a 40-page booklet (20 scanned pages in the PDF.)
So, after a lot more searching (it seems that "PDF cut pages" is a far better search), I found a little script called unpnup which uses poster, PDF/PS conversion, and pdftk to do exactly what I need.  It's a bit of a long way around, but it's far superior to the other methods I found (such as using imagemagick) because it doesn't rasterise the pages before spitting them out.
Just in case mobileread goes away for some reason, the core of the script (licenced under the GPLv2 or later by Harald Hackenberg <hackenberggmx.at>) is as follows:
gswin32c -o right-sections.pdf -sDEVICE=pdfwrite -dFirstPage=2 -g6120x7920 -c "<</PageOffset [-612 0]>> setpagedevice" -f input.pdf
gswin32c -o cover.pdf -sDEVICE=pdfwrite -dLastPage=1 -g6120x7920 -c "<</PageOffset [0 0]>> setpagedevice" -f input.pdf
I found the answer by Kurt Pfeifle to be very helpful for my similar situation.  I thought I might share my modification of the solution with others...
The resulting PDF will now be back to the original page size of 11 x 8.5 with 2 pages per sheet, but the ordering will be such that you can print it double-sided, short-edge binding, and voil√†! you will have a printout you can photocopy and fold and saddle-stitch, reproducing the original booklet without ever disassembling (or even necessarily seeing) the original.
gswin32c -o left-sections.pdf -sDEVICE=pdfwrite -dFirstPage=2 -g6120x7920 -c "<</PageOffset [0 0]>> setpagedevice" -f input.pdf
Next, since I didn't want to merge with pdftk using manual page input, I split the left and right sections into separate PDFs in a new directory.
I too had a scanned PDF that had 2 pages on each sheet.  It was an 11 x 8.5 (inch) scan of a saddle-stitched booklet that was left stapled when originally scanned, so: PDF page 1 = back and front cover; PDF page 2 = pages 2 and 3, etc.  This reads fine onscreen but you can't print it and then staple it to make more copies of the booklet. 
Then I join the PDFs in that directory, alphabetically (and luckily that means they're sorted in the right order!) and I also run the result through ghostscript again to fix "Warning: Generation number out of 0..65535 range, assuming 0." errors produced by pdftk which ghostscript called "itext-paulo-155 (itextpdf.sf.net-lawagie.com)" -- it also happened to cut file size in half in my usage. With a 4.5MB original, pdftk's result was 6.7MB and gswin32c's reprocessing reduced that to 3.2 MB.
On windows, for splitting letter-size PDFs with a single cover image at start, the following worked great for me (note the use of [-612 0] in the second step, a positive value created blank pages because it pushed the wrong way.)