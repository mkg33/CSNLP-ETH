For drawing use pointsprites and give each vert only a single attrib for character id, while the vertex shader tracks the spacing and scaling, you could easily adapt it to render multiple lines. Afaik this is the best way to maximally take advantage of gpu for rendering text.
I have an implementation currently that stores each letter as it's own separate texture, usually only a couple pixels in width and height. So this has some problems as i am unable to do a batch render, i can only batch render the same characters. I am stuck with this format, all i can do is try and process it into something better at runtime. I was thinking of creating a single larger texture from all the little ones instead.
typically one UV coord will point to a character on its corresponding texture, and all the others will point at a blank area, or one UV coord can be used if you pass some additional info in the vertex data for each character quad specifying which texture to use
in fact, we use both way to render texts, 1st method, for those text that change frequently(item description, chat log, ...). 2nd method, for those text that fixed during game running(game name, player name, ...).
For my font renderer I store all characters in a texture_array, which eliminates the need for atlas mapping and worrying about uv float precision.
For scaled rendering, you normally want to create the font atlas at the largest scale you plan to use the font at to prevent artifacts at full size. 
In either case with modern hardware, having large textures isn't all that much of a problem, however, the app is designed to split the font into multiple textures if needed, though you will need to create a shader that takes a set of UV coords for each texture and and blends the resulting pixel from each texture 
How big can this texture get without losing pixel precision with single floating point precision UV mapping (texture width/height normalization into percent 0.0 to 1.0)?
For pixel perfect rendering you want your texture needs to be sized to fit all the characters needed from the font at the exact correct resolution
texture size vs pixel preciscion has a lot of answers depending on if you are attempting pixel perfect rendering on a display of known resolution, or if you are going to be using a single font atlas with scaling to get different font sizes. 