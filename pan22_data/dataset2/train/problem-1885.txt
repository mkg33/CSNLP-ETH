We've used it with students as young as 8. On the whole we've concluded that age 10-11 is a sweet spot for starting with this kind of thing (as against something like Scratch). Some 8-year-olds can definitely get to grips with Processing, but most get a little frustrated after the first 5-10 lessons at how slow progress can be. In particular the reliance on coordinates can be a very high bar for younger students to cross. 
Although, I never got a chance to use C professionally (like when I work on software projects for enterprises and small companies and startups), I ended up teaching that so many times. From a software developer perspective, C is just not right for todays environment, but for some reason, I feel that it is the simplest language to learn, and that is what I advise to students who are young, and brand new to programming. 
In contrast, that's what Racket does. The languages that come bundled with the main IDE, DrRacket, are tied to the text How to Design Programs. Other textbook authors have provided their own languages too, and it's easy for instructors to create their own to match whatever they are teaching.
A variant of the Racket programming language with the DrRacket IDE is used in the course "How to Code" by Gregor Kiczales.
As an alternative, I also would recommend Javascript but I think it is already in one of the other answers. 
The Racket team has argued that no language that is suitable for writing any real software is great for beginners: they contain too many warts, legacy features, complex corners, etc. And that includes Racket itself. We have therefore created a series of student languages that are carefully designed subsets of the full language ideal for student use.
Processing probably ticks a lot of your boxes. It's essentially a framework built on top of Java and shipped with its own IDE (also free and open source). A lot of the boiler plate code that normally exists in Java (package and include statements and so on) is hidden by default, so it's very clean for newbies (you can import extra packages later if you need to in the normal way). As straightforward as you'd want it to be to put together simple versions of classic games, like Pong below, which I think of as a good barometer for a teaching language.
I am not sure if this is really what you are looking for, but there is also Blocky from Google which is kind of similar to Scratch, and lets you see the source code produced by the block in different programming languages (JavScript, Python, PHP, Dart, Lua). Blocky is used in several projects like code.org.
Think of it this way. Open an introductory programming textbook that uses some language L. Start at the beginning. Does it use all of L on page 1? Or page 10? Or even page 100? No! It begins with a very small subset of L, then grows that subset chapter by chapter, and even by the end may have exposed you to only a small part of L (if L is a language in industrial use). This is not only sensible, it's what we implicitly expect.