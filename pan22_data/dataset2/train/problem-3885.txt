If you want custom behaviour, that sounds like you'll need a scripting language. There's no magical tool (that I know of) which could translate a normal design document, even a well-written one, into usable game code that works in the language and engine of your choice. But a scripting language at least allows you to execute external files as if they were code. That allows people, maybe designers, to write behaviour in the scripting language without needing to edit the main game engine. Arguably your designers are becoming programmers at that stage, but hopefully the scripting language is easier to use than C++, and less bug-prone, but a lot of that depends on your choice of language and how you implement it.
There are no standard tools or processes here - every game is different and every team is different, so meeting their needs will vary from one to the next. All you can do is look at what options are available and pick the ones that suit you most.
Scripting languages can also function as data documents too, so designers can combine the behaviour and data in one file. However it is often more effective for data to be handled in a separate tool that you make yourself, or via a standard tool such as Excel. What is best for you will depend on the nature and amount of your data.