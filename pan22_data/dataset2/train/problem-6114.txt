Recently, as SHA1 is no longer state-of-the-art (or anywhere near), the combinations of RSA with SHA256 and SHA512 were specified and the ssh-agent protocol was extended with a flags field to request a different hash type than usual.
For this connection, your client and server have negotiated that a SHA512-based signature should be used instead. However, when the client asked ssh-agent to create the signature, ssh-agent ignored the new extension and just returned a SHA1-based signature instead. Usually this happens when the agent simply does not support the updated protocol.
Traditionally there was only one hash algorithm defined for each SSH key type, and ssh-rsa keys always used the SHA1 algorithm when making signatures. (Note that this is for signing data – authentication challenges – not keys themselves.)
The SHA256: prefix has nothing whatsoever to do with the signatures being made. It indicates the method that the key's fingerprint was generated (the fingerprint is a direct hash of the public key; not a signature). Old clients used to use MD5 for this purpose.
The solution is to upgrade the SSH agent. Latest versions of OpenSSH and PuTTY both have agents compatible with the new protocol; GnuPG's gpg-agent should also support this as of v2.2.6.
The fingerprint is shown for your information only (to indicate which key is being used) and its appearance doesn't affect the actual SSH connection.