DNS round robin means you get different IP addresses each time you query a DNS server for the site's name; this helps distributing requests across multiple servers, and it also avoids the single point of failure you pointed out. This is the DNS answer for www.google.com (when asked to one of the authoritative name servers for the "google.com" domain):
As I understand it, when I open a website such as Google, the hostname is looked up and my browser uses the resulting IP address to connect to the server and retrieve the page.
Another common solution, which could also be used at the same time (and very likely is in this case), is IP load balancing; i.e. those IP addresses aren't actually assigned to servers, but instead to load balancing devices (or reverse proxies, or any other similar solution), which then forward the requests to one of several back-end servers; should one of those servers fail, another one would be used.
High availability sites uses many technologies as like as DNS roots servers in the way to be reached at any time.
However, how do high availability websites make sure that this single IP address can always be reached? isn't that a single point of failure?
Google is very special in that the servers pretty much are read only. They get a copy of the index, and serve that until they are reimaged with a new updated copy. No updates are ever done to an answering cluster. This is unusual for an applicaiton - but not because google is smart or so, just because their requirements are unusual.
An IP address isn't necessarily a SPOF as it certainly can be re-affected dynamically (a.k.a. fail-over) to a healthy server should the previous one holding it goes wrong.
There are two common solutions to high availability for web sites: DNS round robin and IP load balancing.