And a variation of it is that such students get confused about these SCM concepts (they understand them as the other way around).
This can become an issue if the library has digital copies, and I checkout a document, someone else also checks out a document, we both make changes, there will be a conflict (merge conflict) that might be difficult to resolve.  When then the initial "fix" for this is exclusive checkout functionality...
For centralized systems, think of it like a technical library. (might be a stretch of the imagination how this hypothetical library functions...)
When teaching SCM classes to students that are new to Software Configuration Management, it happens that a question comes up like "What's the difference between checkin and checkout?".
Distributed systems like git have a "checkout" command, but it means something completely different. git checkout is used to switch between branches when working with a local repository.
If you are an author of a document, you might checkout the library copy, make changes, return it check it back in to the library for the world to see.
Centralized systems like TFVC, Subversion, and Clearcase use "exclusive" checkouts.  This is like Pierre's book borrowing metaphor, where only one user can have a file checked out at one time.
It's important to note that the terms "checkin" and "checkout" have different meanings depending on the type of SCM system.  
Of course for large projects the chances of a critical merge conflict issue is reduced (people will be working on different parts of the system) so checkout/checkin is not needed nearly as much.  And since distributed systems by design somewhat require good merge functionality, along with many other benefits, that concept doesn't really exist in git and other DVCS