It's nice to see you using named constants for some things rather than magic numbers. I recommend you change these macros to be just indexes, though:
In the struct image, the render_data pointer has a meaningless name. In general, you should avoid using words like data, info, record, object, etc. in the names of types because those words describe all types. That leaves "render" which is equally meaningless because all of this code is related to rendering. What you're passing here are vertex attributes, so I recommend calling it vertex_attributes or something like that.
The old-school C behaviour for malloc failure is to not only return null, but to set errno. This should not be ignored. Have a read through http://pubs.opengroup.org/onlinepubs/009695399/functions/perror.html
The function name rectangle_vertices() is also not very descriptive. I suggest something along the lines of image_coordinates_to_vertex_coordinates(), or object_coordinates_to_vertex_coordinates(). (Note that the use of object here is not in a type definition, so the above rule doesn't apply. "Object Space" is a term commonly used to refer to a rendered object's local coordinate space.)
Kudos on using modern OpenGL for this! We see a lot of OpenGL code around here relying on deprecated functionality, so this is a breath of fresh air.
To answer your questions, I think you've done fine separating the interface from the implementation. I just think your interface could be better. I can't comment more on convert_pixels_to_render_coordinates because I don't know what it's doing.
Next are the arguments to the function. The header calls the first parameter image_height. The implementation calls it image_dim. I'm guessing that since the other parameters have names like y_offset and height that you expect it to be used for calculating something related to height. The comment that goes with the function doesn't illuminate much for me as a reader who has never seen this code. What are "render coordinates"? Are these world coordinates? Normalized device coordinates? Object coordinates? I can't tell from your usage example what these various coordinates and dimensions are supposed to be. You pass in 256 for the image_height, but you haven't loaded the image yet. How do you know it's 256 pixels high? Then you pass 0 and 74 for the px_0 and px_1 values. Is that the width? Given the ratios you calculate, I can't tell at all what this is doing. Are you just trying to calculate normalized texture coordinates from the size of the image? Is this getting something out of a texture atlas? Suffice to say, I can't tell what's going on from the name of the function or the arguments.
If you want to tighten up some of your code, one potential way is to make a coordinate struct. This would halve the number of members of rectangle, for instance. Such nesting would not have a performance impact. It would also be used instead of new_x / new_y (for instance).
I think your naming needs some work. The name convert_pixels_to_render_coordinates is highly confusing. When I think of pixels, I generally think of an array of RGB(A) values (or possibly in some other color space). While I have seen OpenGL code that stuffs x,y,z coordinates into an image, this code doesn't appear to be doing that. So the name just seems wrong. It's not converting pixels to anything. It appears to be converting some sort of length from one coordinate system to another.