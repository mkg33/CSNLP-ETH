Everyone has their own accounts. Work is checked in to the version control system regularly (daily or more often if possible).  Since everyone has their own account, we can use the subversion "blame" function to identify who checked in the code.
The way our network is setup I have access to my students network shares. So, if a kid is absent I can get to their stuff and copy it for their partner. Not ideal, and definitely doesn't scale well if there are a bunch of students absent. Plus, I really don't like the privacy implications. But it works in a pinch.
My personal preference would be some type of source control. I've been looking for a reason to introduce git into my 2nd year course. Maybe this would be a good excuse. 
I've also had groups share a flash drive, and then leave that flash drive in the classroom. Works okay if there's no plan on working outside of class.
For the project, create a directory for each pair, or team of any size, with a unique (per directory) password. Provide that password to each of the team members. When one is absent, for any reason, the other (rest) can still access the directory. If you have the need to reassign team membership, you change the password(s) in the affected directories and give them to the reorganized teams.
(As a note, I'd just go ahead and use a git-based system.  True, it's more complicated overall, but it's unlikely you'd need more than straight commit/push in this situation)
This solution does not scale well at all, and is unworkable in a workplace environment, yet is simple enough to set up and use in the controlled environment of an educational arena. At the end of the term you can merely delete/clean the parent directory and you're ready to start the next term.
I am not looking for technical solutions, but I have included a few here, in case they would be useful to others (and this is not the right site for asking for such solutions).
Some groups will zip up and email themselves the work they've done at the end of class. Or, upload to DropBox, Google Drive, or something like that. 
My partner, who handled the keyboarding, looked at the finished program, had no idea of why it even worked and (wisely from a learning perspective) decided to try to solve the problem on his own without my help. 
If you haven't realized it yet, I'm proposing that what you really need is a version control system, probably a packaged server version like what most of the big name providers give you:
LOC and similar metrics from code and checkins are not useful for determining programmer productivity either in industry or in education.
It would also be nice if the system tracked things like changes to the code (enable the students to figure out what changes caused a problem), the ability to automate submission assignment and grading, and a few other things.  Plus it should look like something the students are going to be expected to use for any real-world programming.
Any solution will be "technical" in nature since the problem involves technology anyway. However, for the "access" issue, you can create a solution which puts more work on you than on the technology. (Since tech is supposed to make human work easier, that's kind of an anti-tech concept, right?)
The first solution, is the only one that could be used adhoc, without any set up. I have noticed that very few people use MS-Windows ACLs, probably because they are very complex. However there is a sub-set that is simple and useful. With the correct tools they could be made easy to use.
This provides each team a space to work, and share, including a place to make related notes, trials, documents, etc. You, as the instructor, will have access to all the directories, and can check the work at any time. The solution works equally well for program coding, research paper writing, and even graphic design. The hard part for the instructor is creating, and maintaining, the collection of directories and passwords. Especially if there are overlapping project time-frames, requiring that there be multiple sets of directories available at one time (along with remembering who has access to which one) with each directory needing a unique, yet easily used, password.
Of course, the underlying principle may be enhanced, or modified, using ACLs, Apache user names, SSH with PGP keys, and many other "technological" variations; but, non-technological was the target.
Required environment is a publicly (relative to the classroom computers) accessible file storage in which you (the instructor) can create password-protected directories. [This can still be a closed environment relative to the wider network, including other parts of the LAN, and the Internet as a whole, so long as it is a location that the students can access during class.] Out-of-class access could be an issue, either because it is desirable and making it happen is not easy on the school's system, or because it is undesirable, yet hard to prevent on the school's system. As mentioned in another answer, the students can always print a copy, or email a copy to themselves, for out-of-class review and planning.
Had he not made that decision, one could argue either that I was the freeloader because I had not keyboarded anything, or that he was the freeloader because he depended wholly on my experience. The instructor would have no way to tell who (if either) was the freeloader without knowing both of us very well.
I remember my final assignment for PDP-11 assembly class, which I worked on with a partner. With my prior experience, I was able to quickly solve the assigned problem in a way that earned all of the bonus points. For the curious, we built an desktop calculator in assembly. Bonus points were handling algebraic order, parentheses, square root, remainders, hexadecimal conversion, and smallest program. We got all of that into 120 bytes.
... but how do they access it when their partner is present?  Do they have to be on the same machine?  That's fragile (computer dies, is stolen, in use by another pair, etc).
While some of my team live close enough to each other to have face to face time, most work at a distance. Partner work is handled through online conferencing software.
I wouldn't be surprised if there was already an "educator" version of something like Github or GitLab out there.  Get a distributed server package, set yourself and any TAs up as system admins.  That would allow you to be able to change teams, if necessary, as well (grant access to repository).
So you need something on a centralized server.  Something that can control access to accounts, where multiple people can share code, and (probably) you can use to hand out any "starting point" code for assignments.
Source code is managed on a server in our rack in the USA.  We use subversion because git and mercurial are a pain to work with. I can get to my team's checked in source code daily.
A caution - operating the computer takes a certain amount of brain power, so the real work on the problem may be done by the partner who is not keyboarding. Detecting "freeloaders" based on counts or volume of checkins creates a false sense of security, and my be punitive to a team that has really worked out how pair programming works for them. 