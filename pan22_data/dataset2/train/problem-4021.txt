We generate the named.conf's for all of them with make and M4 macros, push them out with ssh  and record the changes to both named.conf and some zone files with RCS.
Stop using Windows (at least for a time) except you want to play games. Setup your own webserver for fun with some webpage (or better a CMS) and use some DBs.
Personally, I've found that being able to get apache running really isn't worth much, as it just isn't that hard. The key is in scoping the installation to the requirement, and getting the service exactly as necessary, with no more and no less in place.
Renaud's suggestions above are excellent learning points too, I just think that knowing the functionality is just a small part of the puzzle, and understanding the business drivers is much more important.
E.g. knowing how to set up bind as a master and slave is fine, but at my work we host several hundred domains over 7 instances of bind.
As useful as it is to get to know your way around a distro at home, you'll want to proper time in a proper environment. See if you can find a local LUG where you can talk to senior professionals and learn. Find out about their environments, procedures, etc.
I initially learnt by setting up all sorts of servers, etc in my own time, but rapidly found that gave too much freedom. Enterprise environments are configured to minimise damage, more than they are to implement interesting or useful features. Administration at a higher level is about providing a known, defined solution to a business requirement that is exact in its scope. At a lower level it is about implementing it, which is frequently closer to what you'd expect to be monkey work, as everything should be predefined.
There are a lot of free, open resources out there for linux knowledge. You've mentioned bash knowledge specifically, and the best way of getting that is by playing around with bash and shell scripting.
Good options for getting some more time are dual-booting, running pen drive linux or running portable ubuntu - there aren't really any good excuses for not putting some time into Linux if you want more experience with it.
In addition to any other books and links that people recommend, I advise getting some real linux-time.
Nothing very astounding about any of that, the named.confs are for the most part pretty simple, there just big. 
So you need to think about how you can record your changes (the better to identify what change it was that broke the service) and how you can back them out if required.
I'd get familiar with automated build tools such as kickstart as that is a job that some places give juniors as it lets them work with servers and understand how they are put together and configured in the organisation, without having to let them loose on live prd servers.
The point I'm trying to make is that when you are working in a real work environment, you need to be able to scale, what you do and you need to be able to track changes and you need to think about backout.
I've found in the enterprise that each environment has pretty strict rules on what is used, how each server is configured etc.