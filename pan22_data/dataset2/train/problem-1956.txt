There isn't really a simple answer as it depends on what you are doing in the code block for example a simple update to a column in the table for the trigger (updating a update date column as an example) wouldn't probably benefit from being in a stored procedure however for more complex code sql could use parameter sniffing to cache the execution plans but even the performance gains from this can be negated and i'm pretty sure unless you were dynamically building queries in the trigger sql will cache plans from triggers anyway so maybe you wouldn't see any difference at all (i'm not 100% sure about that though).
As a trigger and a stored proc are not functionally the same you would still need a trigger to execute the stored proc unless you relied on application code to call the stored proc after certain events (never do this) so a trigger would still be involved anyway.
The main reason i would use a stored proc inside a trigger would be to avoid duplicate code and make the code more modular, i think you would mainly see noticeable performance improvements from stored procs when replacing ad hoc queries in application code.