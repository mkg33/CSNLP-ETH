If you want to take the brute force approach, you could compare and contrast the state when you go to render said grid in two different scenarios: where you don't render the cube, and the grid looks correct, vs where you do render the cube, and the grid looks incorrect.  If you understand the device context state, just looking at the wrong result is likely to let you figure things out faster.
Wildly guessing, I'm guessing the fundamental problem is that you set something on the graphics context once on the creation/initialization of something, when it really needs to be set each time before you render the grid that uses it.  Direct3D and OpenGL are both very much driven by "what is the current state of the graphics context" rather than how things were originally created.
I highly recommend grabbing a graphics debugger.  Aside from the free GPU vendor ones (such as AMD's PerfStudio, and Nvidia's Nsight) there's also one built into VS2012 Professional.  This will let you look at the current state of the ID3D11GraphicsContext and confirm you've set everything correctly when you draw the grid.