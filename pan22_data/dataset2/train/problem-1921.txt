glCreateShader -> glShaderSource -> glCompileShader -> glCreateProgram -> glAttachShader -> glLinkProgram -> glDetachShader -> glDeleteShader -> Use shader.
In the following process of shader creation, shader object is detached after linking program (glLinkProgram), how does the shader program still works after detaching and deleting shader objects?
From this we can infer that the sole purpose of attaching a shader is for linking, and once linking is completed whether or not a shader is attached has no relevance.
It may help to understand that OpenGL is quite a high-level abstraction and that many of it's constructs don't (or no longer) reflect how the underlying hardware actually works.  This is particularly true of the GLSL interfaces, where it can be argued that they were never a good match for hardware in the first place.  No other API has the concept of a linked program object that holds it's own state.
So you attach one or more shaders, you link the program, the GLSL compiler takes the attached shaders and copies them off to the final linked program object, following which the shaders need no longer exist.