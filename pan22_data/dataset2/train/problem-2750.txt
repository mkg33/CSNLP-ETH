If you use expect or pexpect, you can encoded the password in a script (in a reversible manner), and then call into the program you need.  [I've come up with a method to encode/decode something that looks like gobbledygook, but it is security through obscurity, I'm afraid.]
I have posted some of the code that I am using here; I'm afraid it is woefully unsupported (and posted to the pymacadmin group about it here.  Unfortunately, it doesn't look like I wrote up anything on how to use it :(
For using pexpect, something along these lines would work [note that this example uses dscl, and not dsimport!  (I imagine it could be simplified a fair bit for your purposed; turning on the logging command for the dscl child helps when setting things up)]:
Just browsing through my notes on dscl, which I've scripted fairly extensively.  I'm fairly sure that the answer is no, there is no way to avoid supplying the password.  The only exception might be if you were root on the local box (which, in your example, does appear to be the case).  [I've almost exclusively done changes over the network.]
The problem is those two last arguments at the end: user and password. I want to avoid writing out passwords in scripts, to reduce the risk of them being compromised. Is there any way of using dscl or dsimport without having to provide a password, but instead having them simply use the privileges of the user running the command? (You know, the way every standard Unix command does.) Or is there some other way of accomplishing this without writing out passwords in cleartext?
I'm in an environment where user/group information is maintained in /etc/passwd and /etc/group files, which are NFS mounted. This is nice because we can just edit flat files to change user/group information. However, the OS X machines in our setup don't like this very much, because Directory Services doesn't pick up on when these files change.