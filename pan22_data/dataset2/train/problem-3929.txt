If you were going to set up a DNS server, expose it to the internet and then never maintain it, djbdns would be the way to go.
There are two sets of security issues. Security holes that allow an attacker access to the system - djbdns almost definitely doesn't have any of these. Some years ago bind had quite a few embarrassing ones discovered in a short time, also exposing a bad design. I would expect that over this many years, it's been completely rewritten. If you really want to be safe in this respect, run it under a virtual machine (e.g. Xen). Also consider, if you're running on a Linux system with SELinux in targeted mode, you'll have a setup for bind and probably won't bother with one for djbdns. The bind + SELinux system is potentially more secure.
If you find docs for something with DNS, BIND will be included and djbdns is unlikely to be included.  If you use dig, the format it returns can be pasted into a BIND zone file and work.  It acts like any normal unix daemon instead of something from another planet.
The other issue is security against cache poisoning. My guess is that djbdns was better when it was released, and bind is probably better now due to greater attention. This is probably the cause of your hearing that bind is insecure unless "properly configured". You should at least research and understand this issue. In the process you'll probably find out what configuration risks exist for both DNS servers.
The biggest problem with djbdns is best put the way my first grade teacher put it on my report card: "doesn't play well with others".  It simply doesn't behave like anything else on a unix box in all sorts of very small ways that can bite you later.  It uses a syntax for zone files you won't see anywhere else.
Also djbdns has strange behavior in certain cases that will cause people troubleshooting your DNS server with tools other than djb's (e.g. with nslookup) to get surprising results. You'll waste your time explaining "actually, I just use this obscure DNS server called djbdns. The problem is that your diagnostic tools are giving you a strange message, but it's working OK. If you look at this packet capture, you can tell. This isn't related to the problem we had a few months ago where djbdns was not interoperating correctly with your DNS server. Nor is it related to the problem we had a few weeks ago where I was out of the office and it took my teammates an hour to restart the DNS server."
So I guess the best bet for you is try both of them and see which one suites you the most, that is unless you use an OS that comes bundled with either of them.
Behavior under heavy load is a nonsense criteria for most users. Beware of performance used as a criteria to evaluate software that is rarely a performance bottleneck. You're not hosting a caching DNS server for a huge user base, where you might get requests at a significant rate. You're running authoritative DNS to provide services that are probably running on the same system. These services are thousands of times more expensive than DNS. Your Internet link might not even be sufficient to heavily load your DNS server, but if you were receiving such a heavy load on the services you provide, DNS would not be a likely bottleneck.
There is some educational value in setting up djbdns, if you're asking the question and have the time to kill. You can also learn plenty by just reading djb's website.
I primarily use FreeBSD for these kind of things and since it comes bundles with BIND I never really took the effort to learn anything else. Hoever I find BIND rather easy to configure and since it is maintained in a security perspective by FreeBSD I only have to track that channel for any security problems.
You can get packages for both. I view the difference as IE vs. other browsers. IE comes built in and works for many things and doesn't that you change from the default. Djbdns is different and requires a different set of trade-offs. For an ISP, moving from BIND to djbdns can be a little tricky, because BIND by default does caching and name serving, where as djbdns splits this into two parts. This preferred security solution, but is harder to setup, so many BIND installations don't bother.
Djbdns is up set to be real easy to admin from the command line. All changes to DNS data are done as commands. In BIND, you edit a series of text files.
In the real world, most admins are better off using the BIND packages from the OS vendor, and patching it promptly when there's an update.  But running it chrooted is a good idea, and keeping your authoritative DNS servers separate from your recursive resolver DNS servers is a good idea.
Also, I've had issues with djbdns causing serious problems due to an insistence on only respecting standards, and not software interoperability. Troubleshooting these problems was a big waste of time, because it hinged on minor differences in DNS packets.
The biggest advantage of djbdns is that it was designed from the ground up with security as goal #1.
See the page of maraDNS advocacy where there is a comparison of several DNS server software that may help you choose.
We use some hardware load balancers and load balance our recursive resolver BIND servers; works great.  Just make sure the users get the same source IP as they sent their requests to and any UDP and TCP capable load balancing setup should work.  If you're doing authoritative DNS, load balancing is as simple as having more than one server and publishing all of them in the whois info; the other DNS servers will load balance intelligently.
If you are running DNS just for yourself, djbdns is the the better software package. It was one of the few software packages that had identified the major DNS security issue from last year and was build/patched to fix it years before hand. For DNS caching I install dnscache (part of djbdns) on all servers that don't run as authoritative DNS servers. It really does work better than BIND for most items, but given today's hardware, the extra weight and slower speed of BIND is a non-issue.
Skip djbdns. Although djb is a hero, he carries over a mathematician's arrogance to software. The fact that it doesn't behave like other software with respect to starting/stopping it might be a good demonstration of a clever technique of managing daemons. But you're going to have to pull out the documentation if you don't use it on a regular basis, because everything is so different. If you set it up on systems that others maintain as well, you'll need to write them clear documentation - which they'll need to read in its entirety to do simple operations. Running stuff out of init is cute, even clever. But it's also obnoxious, surprising, and nonstandard.