First, I don't understand why you cannot use recursion or a stack. You have not elaborated on this. If it is because this is a learning exercise then perhaps I can understand, but it is a poor example of any normal data-structure manipulation...
As for the complexity of the algorithm, it is only O(n2) if your input List is an ArrayList or some other O(1) access list. If the input is a LinkedList itself, then your complexity jumps to O(n3). You should find an O(1) way to step through the List in your create() method, probably using an Iterator instead of indexed get(...) lookups. An Iterator over the input is the safest way to do it, but, if you have no choice then in the create() method you should check to see whether the List implements java.util.RandomAccess, and if it does not, then you should copy the input in to an ArrayList, and index-get off the arraylist....
As for the data structure, since the code is a 'decorator' for an input list, you should just add the parent-node pointer and be done with it. It is something you know in your create method so there is no extra work. Alternatively, just use stack, or use recursion.
This implies that your class should be java.lang.Iterable and it is not. If you used this then you can simply:
Still, assuming I am missing something important, what about the actual code? Unfortunately recommending changes while not using a stack or recursion is very challenging.... it's like you have been told to screw two pieces of wood together, but you are not allowed to use a screwdriver.... Ratchet-freak's comment/suggestion to add the parent-node is the right solution... and that fixes a lot, but, without that, there is nothing I feel happy recommending other than some big-picture structural items.... 
If this is a real application then I would have to question the whole thing.... Essentially you are taking a list of Data, and converting it in to a List of data.... there is no apparent manipulation of the data at all (at least from the end-user perspective).