First, you should realize that a spline is nothing but a set of points. It has a beginning and an end. A straight line is a form of spline. However, when you have more than 2 points, you can do interesting things, including using intermittent points to deform the line.
Using a bitmap (not necessarily the same resolution as your actual display; it can be lower) colour pixels for different effects e.g.:
Then your game can just read the pixels from an offscreen canvas based on the location of the player.
Edit: To that end, might make sense to have the checkpoints be vectors, so you can point the cars in the right direction, and detect "wrong way" before a bunch of checkpoints are crossed in reverse.
The problem with this method is that tight corners, hairpins, overpasses, etc might not work as expected.  It's been a long time since I played Micro Machines, but as I recall you were prevented from taking major shortcuts even if you never went fully off the track.  You couldn't just drive off an overpass onto the track below to skip half the track.  One possible solution to this is to add essentially "checkpoints" along the track, that are invisible to the player.  There could be 50 or even 500 of them on a single course.  The player has to get within X distance (which could be pretty far away, essentially your reset car to track distance) to "activate" the checkpoint, and if they activate checkpoint 32 without activating checkpoint 29~31 first, boom.
Now you have a (hopefully) automatically generated line in the center of the road. You can then use the distance to this line as a way to determine how far along a car is in the race and if it doesn't run off the track.
There is no need to do any fancy maths, unless you want to. And you can do all of the "fancy maths" ahead-of time, i.e. not build it into the game.
Here you have a set of points in a graph and you use a spline function to smooth out the transition between bars. Depending on the function, you will get a different spline.
Could I use a single path which defines the centre of the track and check a car's distance from this line? A second path might be required as a "racing line" for AI.
The mini-checkpoints is a somewhat complex solution, but it gives you a lot of flexibility elsewhere in your game.  Now you can more easily track distance to the finish line, use them for your AI logic, use them as the reset points when the car gets blown up, etc.  (Actually I think the reset is especially valuable since you can just back them up 5 or 10 checkpoints as a simple way of penalizing them, and there's no nasty track calculations to do)
If you're using a tileset, you can use the tile IDs to determine what terrain the car is on, and go from there.  If you're not, you can do essentially what MarkR suggested to accomplish the same thing (Some basic skills with GIMP or Photoshop can pixelate and even boil down colors for you so it'd be pretty straightforward)
My maths knowledge isn't great, so I'm finding it hard to separate 3D/complex concepts from those which are directly relevant to my situation. For example, I have seen "splines" mentioned, is this something I should read up on or is that overkill for a 2D game?
It really depends on what you want your game to "feel" like. You could go with the Micro Machines method of using a tilemap to generate the track.
I am designing a top-down racing game using canvas (html5) which takes a lot of inspiration from Micro Machines. In MM, cars can move off the track, but they are reset/destroyed if they go too far.
I wouldn't bother looking at the Wikipedia explanation (it's filled with dragons and maths), but this image explains it rather well:
Circular arcs are simpler to work with. However, they may not be able to represent all the shapes you want. (On the other hand, splines can't represent all shapes either.) Bezier curves are the next step; Bezier splines or B-splines are even more flexible. Use the simplest thing that works for your game.
Predefine the tracks in some editing tools of your choice; export them using a graphics program, defining colours for different areas of the track.
Although Bezier curves are the usual thing people go for, I'd recommend considering circular arcs (and maybe elliptical arcs) unless you really need Bezier curves or splines: