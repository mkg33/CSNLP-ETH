There are two requirements for a network packet (UDP or TCP) to trigger an action on the destination machine. First, all routers and firewalls on the packet's path must have let the packet through to the destination. Second, there must be an application listening on the destination machine. This could be your synchronizer, or a service starter such as inetd, or a server for a higher-level protocol that you synchronizer would embed into such as HTTP(S) or SSH.
If your packets are blocked by a firewall, then in principle there's no way to go around this. Otherwise the firewall just isn't doing its job. Of course, in practice, firewalls do have holes, for example UPnP (). You're more likely to be able to bypass a firewall over TCP (especially over HTTPS, which firewalls generally can't block selectively so have to let by to permit web browsing) than over UDP.
I'm trying to write a file synchronization protocol presently (consider it a hobby, I know there are plenty of file synchronizers out there) and I wanted to create a way to automatically sync things across a network. I've heard that this can be accomplished via UDP, but I'm totally oblivious to how to accomplish it.
Or, you could consider using some existing discovery protocol, such as Bonjour/Zero Conf, or UPnP (Universal Plug 'n Play) to locate your devices. 
Firewalls are a separate issue, which in any case you must make sure are open to your discovery packets. 
If there's nothing listening on the destination port, again, you won't be able to take control of the target machine to make it execute your application. (That would be the epitome of insecurity, like some older unpatched versions of Windows.) That's an advantage of piggybacking over a common generalist protocol like SSH: you just have to enable one service, and then you can do what you want over it, including file synchronization.
If you're interested in the local network only, and assuming the client knows the server's port number, the client could broadcast a UDP message, to which the server would reply with a unicast message, thus establishing communications. 
You can send a UDP packet to a machine and see if something answers, of course. You can even send a UDP broadcast and see how far it goes, or send a UDP multicast and hope it arrives.
If I use UDP, will I still have to ping 192.168.X.0 - 192.168.X.255? Or does UDP find a way around that? Is there a way I can in some way bypass firewalls so I don't have to go to each computer on my network and allow incoming traffic to the given UDP port?