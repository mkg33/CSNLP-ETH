These tricks work in games where player inputs are fairly infrequent and therefore the amount of time you spend waiting for an input to take effect is a relatively small proportion of the total time spent playing. Therefore, you would want to find ways to structure the game so that the player makes fewer inputs. This probably means making player actions more abstract and having the game implement the low level behaviour. Examples:
I have played some FPS games where high accuracy weapons (snipers and such) had very clear visual effects, and you could actually see that the other player shot behind you, but because of lag compensation you were killed. 
I hope this helps at least a bit; without knowing your exact game ideas it's difficult. I assume you have your reasons for wanting to create your game around such a pattern (simplicity, saving on bandwidth, reduced network complexity) 
These can take place while the information is travelling to the server so the player doesn't realise that their action has not started yet. As long as the server replies promptly and the action does begin soon, the player may not notice the delay.
You could also make lag be part of your gameplay for "realism" sake. Say your players are meant to control some robots from a distance, you could force the lag to be at least 500ms or 1s (you'd have to implement some dynamic lag padding system).
It's common for the client to implement some sort of feedback to let the player know immediately that their chosen action has been registered, eg.:
It is also a nice trick to simply hide the actions of players. A lot of FPS games do exactly this. They do not show any visuals of most of the bullets only sounds are played and you get the outcome in the form of damage dealt to players.  
The answer is quite simple - just build games that don't have time critical sections. You're looking to avoid implementing these types of interpolations for a specific reason I take it, which means you're not concerned about twitchy and fast gameplay. This is perfectly accetpable for a lot of games, including Civilization (which is a strategy game). However, understand this is NOT acceptable for a REAL TIME strategy game where you need to be passing a lot of data over the network at variable timings. If you'd like to design a game around a very high latency network, consider the following: