I could give you lists of countless defenses you could put up (limiting user agents, making your content appear using JavaScript from XML files, captchas - what a great way to piss off your audience!) but they're only going to stave off the inevitable while they work out how to get around them.
It would be best to drive a stake through the problem's heart rather than try to put defense after defense in place.  If you're able, look at the application and try to find out how they were able to get in, and try to patch the holes.  The most obvious places to look are form inputs - do these get passed to SQL strings without being parsed first?  Are they generating SQL strings instead of using prepared statements (which kill off SQL injection attempts from the word go)?  If it's something you can fix, do.  If it's someone else's product, create a patch and send it to them.
The worst thing you can do in security is assume it won't happen to you.  Worms, viruses and autobots are usually not smart enough to realise your little site isn't a threat.
Is there any way that my all websites are only avaiable to genuine browsers and not these automated scripts.