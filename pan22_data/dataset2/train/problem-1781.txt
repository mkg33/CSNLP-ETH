This often results attitudes like those asked about by the OP when two of these IT fields overlap.  Like that attitude, as a network person, I know how easy it is to have similar thoughts about sysadmins, as often sysadmins are asked to manage the network as well.
So, back to the question: Should developers have the root password?  Yes!  Should sysadmins have the root password?  Yes!  Why? Because complex systems cannot be effectively diagnosed without smart generalists who understand them end to end - or at least a team comprised of developers as well as sysadmins.  And part of the diagnosing can't be done without logging into the server and having the rights to inspect what's going on (for example, a developer might need to run strace or dtrace to understand what the webserver's actually taking all the time on.)  Just remember - look, don't touch!
I have worked with a good number of developers who (rightly) have no interest in being sysadmins - they just want to Make Their Software Work. They'll take the fastest route to that end, which can often entail e.g. fixing permissions errors with chmod 777 -R .
This advice feels a little dated;  It comes from an era where naughty developers who had a root password would go in and make changes on the live system.
When a network person is brought into the mix (either a consultant for a specific reason/project or because the IT staff has expanded and now includes one), they often find ignored recommended best practices, misconfigurations, security holes, etc.  They spend a great deal of their time trying to figure out how the blank things got the way they did, troubleshooting problems that should not be occurring, and fixing misconfigurations and problems.
Segregation of duties means that you never have a single person responsible for a single task. The best way to implement it is to make sure no single person CAN perform a single task alone.
These days no one should be making changes to a live system, neither developer nor sysadmin.  Making changes on a server is the job of a system such as Chef or Puppet.  Our industry moved beyond the concept of the singular server that can be hand configured years ago.  Now we either need the ability to have many identically configured servers deployed at once, or at least the ability to reliably rebuild any singular server at any point.  This rules out changes being made to a server by someone with a root password no matter what hat they have on.
In a relatively small number of cases they do a great job and in another relatively small number of cases they do a horrendous job.  Most of the time, they fall into doing a decent job somewhere between the two.  However, it is not the great jobs that are remembered, it is the horrendous jobs and to a smaller degree the decent jobs that are remembered.
As for change control, to properly implement it you have to make sure all changes to production systems are fully documented. The best way to achieve it is to have the dev perform a handout to the system administrators, giving them the code and the documentation and letting them perform the deployment.
This is an over simplification of a common problem in the IT industry.  There is simply too much for any single person to know everything, so people specialize their knowledge.  Ideally only those with the specialized knowledge to do a task should do so.
The other thing that annoys me is they tend to mix server roles, so a Hypervisor host would suddenly also become a monitoring server and web server. There also seems to be a lack of consistency, for example 3 servers preforming the same role which should be setup the same way would be setup in 3 completely different ways.
While they seem know their stuff they don't seem to have the attention to detail needed and random things get installed/changed, for example the other month I found out that one of our production web servers had KVM/QEMU installed!
But this goes both ways and includes a number of overlapping disciplines.  Specific to my example, I know as a network person that I cannot set up a server as quickly as a knowledgable sysadmin and/or that there will probably be a number of things I would overlook or do incorrectly (or at least not in the best way).  Give me enough time and I can do at least a pretty decent job, but often the job/work does not give that time.  If I have the choice, easily my preference is to hand it off to a good sysadmin.
In the real world, we are often asked to "wear multiple hats" by management structures that still don't know all the complexities of how IT works and are dealing with the complexities of the company operation and finances they do know (and often the IT staff doesn't).