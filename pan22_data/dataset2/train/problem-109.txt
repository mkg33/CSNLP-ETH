Another solution, - you may use different profiles in your browser (Firefox good on this), one for work that will hold your local CA certificate and another one private profile that doesn't include local CA. This way you(actually browser) may quickly spot events if your https traffic is filtered via proxy.
If you added local CA to the certificate store then if your company using http proxy, this proxy may generate on the fly fake certificates for any https connections and feed it to your browser and your browser will trust (as I described previously) to such fake certificates. Proxy on its side may decrypt such connections since its own private keys for all issued certificates for the purpose of filtering, monitoring, logging and in case if connection bypassed proxy's filter, proxy will ask targeted real site as a client itself, then re-incrypt reply and return to original destination (or it may decide to play fake timeout connection if some rules requiring that).
What I may advise you if you won't to be a subject of https filtering - setup some virtual machine (VirtualBox for example) with OS you comfortable on and add there your local CA while keep host machine non infected with local CA.
This way IT department who managing your local CA may issue and sign fake certificate for google.com and your browser will trust it, but... Here is two technical detail that you need to know. 
When you connecting to some https domain directly, web server reply with public certificate that carry information who signed this certificate and browser looking in its certificate store for CA who signed this web server's certificate, so you may think that it would be a hard job for the guys who attempting to fake google.com who should setup fake copy of google.com as its own web server and override DNS record that would point to the fake web site pretending to be google.com
But in reality it could be done relatively easy. While it sounds like impossible(or hard to do that), I should inform you that it no to hard to do that and this actually is a common practice with many companies to watch/intercept https traffic for various reasons(filtering, monitoring and logging) by employing transparent(or with authorization) http Proxy. 
You trusting your browser that in turn trust to particular scope of CAs. If you added to your browser your local CA as trusted to the certificate store then you automatically trusting to all certificates signed by this local CA.
You adding to the certificate store Public key of self established local CA. The only owner of CA's private key can sign someone's certificate (as you said for https://www.google.com), so stealing CA public key from your browser is useless since it isn't a secret and can't be used for signing others certificates.