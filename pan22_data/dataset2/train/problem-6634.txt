The inefficiencies of GUIDs are due to their size (16 byte) compared to an INT (4 byte) and the fragmentation they inevitably lead too, unless sequential. This is magnified where a GUID is used as a clustered index key (as is the case for your User table?) because all non-clustered indexes contain the clustered index key. Kimberley Tripps series of articles on the topic are good grounding for understanding this.
Caveat: Also assuming that the typical usage pattern would be to find alerts for a specified user, not results for a group of users.
Could you simply add an identity column to the Users table (not making it the primary key or clustering key) and put an unique non-clustered index on it, then you can join to it from the Alerts table (and put a foreign key in place)?
Assuming your intended option B is to have UserKey in Alerts and for UserKey to be an INT rather than VARCHAR(50)... you might save some space and improve performance marginally if you expected there to be a very large number of alerts per user. But it's going to be minimal so I'd probably stick with option A.