You should make sure that the baud rate of your device is equivalent to the baud rate of your serial port. 
The source code may have comments stating what the values mean, though the actual code is probably unreadable to you (unless you know what the hardware registers and the USB protocol stuff means).
A device file is just a link to kernel space. The output and how to "read" a device file depends on the device itself. You will have to consult the docs for your driver (if there are any) or read the source to figure out what its writing there.
Just random guessing, I'm sure the values being sent out are just position readings of the joystick X and Y (and Z?) and some settings of buttons.  Reading as text won't work, you need something that does hex and/or numeric dumps.  Plug the joystick in, read the values from it, and move the joystick around mash the buttons and see how the values change.  
A 'device file' is a special node on disk that links to code within the kernel. This code is the device driver.  When the device driver is loaded, you set up specific functions to be called when certain system calls (open/read/write/close/etc...) are called on the 'file'.
So, when you call 'read', it calls a specific function in the device driver code.  This code can do pretty much anything in kernel mode; in this case it makes sense to take a hardware reading of the joystick, convert the voltage values to numbers, and let it be read() from the device file.
If you just want setup your joystick use a userspace program, see e.g. the instruction here. Your desktop environment might also come with dedicated software to configure it. To access them directly you will need to access them via their C API.