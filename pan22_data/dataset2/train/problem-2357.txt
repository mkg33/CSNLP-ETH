Since I found out Box2D, I'm using it for kind of any game-like application I try to write, from very small prototypes or small programs to test something, to actual projects.
Something as easy as Super Mario no, as it doesn't really have much physics. (Mario does not affect other object's physics with his jumping)
To reassume my question: would you use Box2D (or other physics engines) in a game where physics is really simple (like Super Mario, let's say)? And, if not, why?
if you are using physics in the sense of multiple items (more than one) using physics to affect the outcome of other objects, then I would use an engine.
If the memory, disk space, development effort, or processor time used for Box2D is too much for your purposes, then don't use it.  Otherwise, there's no reason to avoid it if you find it useful.  
Sometimes, though, I have some doubts about it: if I only have to handle circles or AABB, and don't need advanced physics tools (joints or stuff like that), I think that a physics engine could add a sort of big, unneeded overhead.
My answer is yes, absolutely use a physics engine like Box2D for simple stuff, because you shouldn't spend unneeded development time implementing some of the features that you quickly get from a physics engine. For instance, define a static body and drop a dynamic body on it, and apply force to your dynamic body for directional input, and you've got a platformer in a few minutes. I don't think that an engine adds enough overhead to make this not worth it.
but is it worth it? You can simulate the same effect by diminishing the players' speed while they aren't moving...