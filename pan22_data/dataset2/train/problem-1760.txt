Let's say, we have an array var selectors = ['#someId', '.myClass', 'tag'] and we want to add a class to all these selectors. We can iterate over the array and add the class to each element individually or we can combine the array elements somehow to create a comma-separated string and pass this to jQuery as selector.
Yes, you can avoid loop by letting jQuery do that for you. jQuery accepts multiple comma-separated selectors and internally iterate over each selector and perform operations.
Line #2 will give firstElement"], .generatorContainer[data-generator="secondElement"], ..., .generatorContainer[data-generator="lastElement
And yes, you can use jQuery's filter. You've already found all .generatorContainer elements once, so that's the collection you want to filter.
As join will add the glue between the elements of array, the prefix and suffix need to be concatenated.
generators is an array of elements, this array elements can be joined with , as glue, to create the selector.
selectors.join(', ') will join the array elements by ,, thus giving '#someId, .myClass, tag' which is valid selector and can be passed to jQuery and any method defined on jQuery prototype can be called on it.