So in order to prevent locking and blocking implementing different kind of objects wont give you no results, but performance boost(if used stored proc). Instead you should change isolation level 
And yes it makes no difference, if you check execution plan you will see that they are exactly the same.
It depends on the construction of the view. SELECTing from a view with NOLOCK or READUNCOMMITTED table hints should avoid blocking the underlying tables (with the risks that entails).
An indexed view will have its data written to disk, separate from the table(s) in the query that the view calls.  So, you can think of an indexed view as its own table that is automatically updated whenever the data in the table(s) it calls is updated.  Because of this, when an indexed view is called it will be querying its own data set and not touching the dbo.sales table, so there will not be any blocking against dbo.sales.
And, as you thought, SELECTing from a normal view can temporarily block queries that are changing the underlying tables, just like SELECTing from the tbles directly can.
Indexed views (SQL Server term - more generally called materialized views) actually are stored on disk separately from their underlying tables, and are updated as the underlying tables are updated. This not only consumes more disk space, but can lead to contentions and delays if the underlying tables are frequently modified. SELECTing from the view can still block updates to the tables underneath, since when those tables are updated, the index for the view is also updated.
It depends on the code inside of dbo.view_sales.  If it is querying the dbo.sales table directly, then yes, there could be blocking.  However, if dbo.view_sales is actually an indexed view (or, "materialized view" to the Oracle folks) then there shouldn't be any blocking on the dbo.sales table.  
Depending on transaction level, those queries will block writes. Serializable & Repetable Read transaction isolation level will hold S locks (for the whole duration of the transaction), which are incompatible with X locks that are required for writes(inserts/updates) .