We want the bullet to be created at the tip of our rotating object. We can achieve this by using the built-in functions lengthdir_x and lengthdir_y. What they do is computing the offset distances along the x and y axes for us. Let's edit our code as follows:
Your issue can be easily solved. But first, I'd like to premise there's a tiny optimization you can do in your game.
This way, if you set the sprite_index of your "player object" to such a sprite, in the Step Event you can simply write:
Now, let's make the player object fire the bullets properly. From now on, I'm assuming your sprites both have their respective origin at the center of the sprite itself. In the Space Press Event of your obj_player_press, change the source code as follow:
They are as useful as easy to use. Check this out, and see your bullets being shot from the tip of your player object!
This way, your bullet object will be created at the same position where your "player object" is placed. The difference with your code is the usage of the local variable inst to change the value of the bullet variables instead of using the with statement. In this case, there's no need to use the with statement, as you're referring to one instance in particular only, and it's much cleaner, clearer, and faster referring to the instance by using its id on the go, instead of using the with statement, which will tell GM:S to look up for the instance whose id is the one taken as argument. The with statement is more effective when using object_indexes, whilst working with ids can be easier.
Since the direction variable is pointing leftwards when its value is 0, those sprites which are supposed to rotate (by changing the image_angle of the instance) of the same angle as direction may be loaded in GM:S facing the left side.