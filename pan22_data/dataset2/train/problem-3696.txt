1) Use an object store like Amazon S3 or Rackspace Cloud Files for your data. This will give you a nearly limitless storage capacity, and will relieve your server from needing to serve those files.
There are a lot of answers about advantages of different disk solutions, but there's another option, too. You could simply have more than one web server, and serve different parts of the site from different servers.
You could also do this by using mod_rewrite, so that when a browser requests a resource from /images /whatever.jpg it will be rewriten to http://images.yourdomain.com/whatever.jpg.
I think that NFS is the way to go, but there are some other options, like FreeNAS (FreeBSD based), AoE, which stands for ATA over Ethernet, and SAMBA but I would not recommend it unless you're looking also for windows interoperability.
One possibility is to split your site up based on the type of resource. E.g: Much of the content is images, so you set up a separate webserver with the hostname images.yourdomain.com. Then you change all the links to images in your application to no longer point to e.g. http://www.mysite.com/images/image1.jpg and instead point to http://images.yourdomain.com/image1.jpg.
2) Start managing your own equipment. Sure, you could possibly get some sort of clustered filesystem up and running on a managed dedicated server, but you're going to be fighting the system in a lot of ways. In order to ensure reliable data storage, you're going to need several servers, and costs will go up pretty quickly.
A third option is to use mod_proxy, to forward certain requests to a second server without rewriting it. The downside to this is that all requests for images will now be passed through both servers, affecting CPU, memory and network. Even if they're not a problem now, they may be in the future.
When you start needing to deal with the amount of data storage you currently have, you really only have two options as far as I see it: