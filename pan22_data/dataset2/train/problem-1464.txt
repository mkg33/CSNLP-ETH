As for how svn stores its files, it gets kind of complicated, but it essentially stores deltas so you don't have hundreds of copies of a file when you have hundreds of commits.
Subversion can handle files that are large enough for your purposes... I have committed files in the 100's of MBs and had it work; had some issues when I got into the 2GB range though.  (Nevermind why for now.)
The Subversion Book does a really good job of explaining how Subversion works and stores its files. The only part I can remember that's relevant is when you do branching it does not store a whole copy of each tree, but whether or not this applies to binary files I'm not sure.
I can answer one of your questions: We use Subversion for 20mb binary files regularly, and it handles them just fine. Obviously you can't do a diff or a blame on them, and thus you can't have any concurrency. We use reserved checkouts on our binary files to work around this.
I think a DVCS (like git, mercurial, or bzr) might be more suited to your application because it means you don't need a separate repository for the files... the working copy is in the same place as the repository. Admittedly setting up a repo in svn is easy, but it's just one more thing to manage... and all sysadmins know that one less thing to manage is a Good Thing.
An approach that might work well for you, depending on your setup would be to provide webdav access to the repository.  OS/X makes using those pretty seamless; if you're running Windows clients you'll have to look into details, but there should be something.  Webdav would essentially give you a shared folder that looks like part of your filesystem.  You save the Quickbooks file to that share and work from it.  All writes wind up as commits to svn, so there aren't any additional commit steps.  Yes, you'll generate a large number of commits pretty quickly, but that shouldn't be a problem.