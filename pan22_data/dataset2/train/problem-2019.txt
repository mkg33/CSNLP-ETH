Fourth is separation of duties. If you have folks responsible for deploying the web application, they probably need escalated rights to the web server to do so. What kind of rights depends on what you're doing, what OS, what web server, etc., but you get the idea. If those folks shouldn't have access to everything that's in the database server, and the updates to the database server are handled by a different set of people (like DBAs), they you can better protect the company by using different servers.
When you have suffient demand (and resources) to justify multiple boxes, do it.  Building the perfect setup won't happen the first time.  
Keep excellent backups regardless of what and how you set it up for quick recovery and restore.  Replicate your database off-site so you can rebuild and restore it anywhere (into the cloud, other hosts, etc.)
There are several reasons you'd consider separating database and web server, and some will echo what's already been mentioned.
So, just because a lot of people run db+web server +mail server + DNS on a single box, doesn't mean it is the best security decision, just an accepted risk based on the $$.
Third is because you can gain some insight in whether or not your web server is compromised by looking at the network traffic between the web server and the database server using IDS/IPS. For instance, if we're talking SQL Server and xp_cmdshell gets sent to the database server, or sp_configure, that should tell the IDS/IPS something is up. And that gives you immediate warning that the web server is compromised.
From a security point of view it should be on separated boxes. However, depending on budget it should be a business decision to accept the risk or not.
If your worried about redundancy, then it would be good to have all of the data on one box and backup on the other. 
Second, there's the case where your application may use some but not all of the data. This is especially true if internal systems touch the database, too. This isn't a likely scenario in a web hosting environment, which I'm guessing you're looking at based on your tags. But in that case, you can limit the access the web server has to the database to only what is needed. Yes, if the web server is compromised, they can get that access, but if it's a limited set of permissions, they can't get everything. Host it on the same web server and that's a totally different story.
If the box can handle the load CPU/RAM - then having them on the same box might be better for performance reasons as there would be no network latency between the web server and database server.
If your database is on a separated machine, it will require an additional step to attack it. If you follow defense in depth, the web server will not be able to access anything else on the db box besides the db (so, no shell, no running scripts, etc). That's why a firewall is good for internal control too.
If you are really doing security well, your web-2-db user will have minimum privileges on the db, only being able to access/modify what he really needs (so, no drop table, etc). It is funny how often we see GRANT * on a db, for a user that only needs to select and update from a few tables.
First, there's the potential performance issue. Generally, a database server loves memory. The more memory it can allocate to caching data, the less access it requires to read from disk. So there's a benefit to having memory. As a result, you can have a memory contention issue between the web server and the database server. With that said, there are plenty of cases where database servers are running on the same box as the web server, such as with MySQL or SQL Server Express or even full blown SQL Server with SQL Server 2005 Reporting Services.