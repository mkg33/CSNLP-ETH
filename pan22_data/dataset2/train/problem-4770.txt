When you write comments have in mind that the reader often wants to know why something is done, not what is being done since that is the purpose of the code.
are a waste of space. They are not part of the public interface and the function name clearly identifies what they do. Useless comments are worse than no comments as they need to be maintained.
A tip is also to write Doxygen styled comments (doxygen.org), that way you can get a nicely formatted html document which is generated from your code.
Your getChildNodes / getElementsByTagName functions I find are a bit too long, IMHO it would be better to split up the function in a couple of separate functions to make it more readable. (Also here you suddenly stopped having any comments). You have quite a few variables in your functions so separating the functionality into several small functions will help with that too.
A see a direct error also, you have not declared a virtual destructor in Error but you inherit from it, add a virtual dtor to avoid getting base pointer delete issues.
The call to exist merely tries to create a file stream object and returns its state. Why not just try and open the file then check its state.
Relying on specific type of error message deep inside your library makes it very tied to a specific platform.
It is a good rule to write out all possible tags in a switch statement, you have one case ErrorCode::None which you do not handle also add a default as well to catch any invalid values that may be added in the future. 
Solution: (assigner) search the value assigner through extraspaces or tab indent, so when a different character is identified just check if it's equal to the value assigner, else then you finish the attribute with value true (boolean). Do the same for the quotes search.
Your library should not be handling user interactions. This is the job of the application. The library should just inform the application that an error has occurred and then let the application decide what to do (this code could be used in some background server app; you defiantly do not want a dialog box to show up on a headless server).
That's old school not seen that in a while. But its also not even needed. A stream object used in a boolean context (like returning a bool from a function) is converted to a boolean value (or pre C++11 a value that can be used in a boolean context).