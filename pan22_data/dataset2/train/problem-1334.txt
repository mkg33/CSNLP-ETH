Here are some numbers from the Sphinx blog, as well as some benchmarks from Wikipedia's search backend.
I do use Elasticsearch, I did migrate from sphinx, and yes, the learning curve is higher, but it worths as It has a really flexible way to query with JSON. 
I have been looking at search solutions like Sphinx, Solr and Elasticsearch but they are all way too complex for what I need.
sphinxsearch will give you faster indexing, more advanced queries, incremental updates, and it will work out of the box with MySQL--but it is still a separate service that needs to be run and maintained.  mysql will be a bit slower and indexing will slow down with larger collections, but its built in and doesn't require any additional services to run in the background.  So the question is, do you even care if a query takes 1 second or 10 seconds?
Unfortunately, you are just not going to get the same level of performance with the MySQL fulltext search as you will from the dedicated search solutions, but that begs the question--do you care?
I'm basically looking for a server software, best distributed, that allows me to just throw in chunks of text associated with a single small identifier each. Then find keywords quickly and return the identifiers given for the chunks that yielded a match with one or more of the keywords.