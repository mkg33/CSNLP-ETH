You also have to exclude a lot of files, cache, temporary directories, and so on, otherwise you're going to fill up your repository with junk.
We're currently using Puppet (with the manifests and related files in SVN) to manage configuration of our *nix hosts. However, I've hit a bit of a perplexing issue.
Though there are SCMs that can store links, I'm not aware that any of the SCM systems handle links in this way. Nor should they IMHO! What if you wanted to work on two different branches at the same time and checked out two copies, one for each branch? (This is fairly common in my experience with programming projects.) They'd wreak havoc with each other if each pointed to the same files elsewhere on the disk. 
It sounds like you are attempting to over engineer the solution.  Don't use symlinks, have them use SVN in the arbitrary locations.
SCMs generally set aside a directory that belongs to them. This allows multiple checked-out repos to live side-by-side without interference, and makes the boundary between SCM-managed and non-SCM-managed files clear.
Instead of links, I'd build a solution around copying and explicit deployment operations. To handle your case, I'd write sync scripts between the deployed locations of your scripts and the SCM-managed source directory (which I'll call the "repo"), so that you can suck in-place edits of your scripts back into the repo. I'd also work on a simple-to-run deployment script (Puppet-based?) that copied from the repo to the target locations for testing.     
FSVS is a Subversion client for Unix that allows you to use any part of your filesystem as a working copy. It stores SVN data under /var so it doesn't sprinkle your directories with .svn subfolders. Importantly, it stores Unix file metadata in SVN attributes, transparently. 
Once you've done that you can try and encourage your staff to edit the files in the new place, and gradually standardise on the new directory structure. As a backstop you could have a cron job that does a check in each night, and emails you so you know who is not using the new system, so you can give a friendly reminder to the relevant person.
Can you do the symlinks the other way around. Have a directory managed by svn (say /usr/local/scripts/) and then copy all your scripts into that directory (or subdirectories) and put a symlink in the old location. Then whenever someone edits the file, they actually edit the file in the svn directory.
I'd recommend updating the revision control repository directly on the server itself.  I keep most of my production configuration on an infrastructure repository.
Many of our hosts have scripts specific to the host - cron jobs, data mining scripts, scripts that dynamically generate config files, etc. I'm looking for a way to manage these scripts, specifically version them and allow a relatively simple restore solution if a host is rebuilt, while not changing the existing layout.