In my tests, all this did was lock up Process Hacker and turn it into an unkillable process too, but maybe it will work in some cases.
Sometimes the process could be blocked on a resource or thread or something, and quitting or freeing that up, frees the process and lets it end. It is somewhat similar to how when you delete (to the recycle bin) a file in Explorer that is in use, it doesn’t actually go away and seems stuck (without immediately returning an in-use/locked error), but if you quit the program that has it locked within five seconds, the file suddenly disappears.
I suspect that with the increase in, yet still relatively new practice of multi-threaded programming, things like this will become more common, at least for a while.
It is likely that the programs you are using were developed before Windows Vista/7 and are incompatible with the changes made.
Process Hacker has a Miscellaneous → Terminator command that will try a bunch of different methods to kill your process:
I have seen this happen on occasion, especially with programs that have a pop-up dialog or something that somehow gets hidden; finding a way to dismiss the dialog allows the thread to terminate, thus allowing the process to end.
Your best bet is to locate the executable for the programs which have this problem, right click, go to properties, then select compatiblity, finally select Windows XP as the compatibility mode.