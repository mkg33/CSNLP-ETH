The fact that my applet requires a Java download/update for users who already have some version of Java installed is a big concern for me; the applets I'm creating slip into a web comic, so it's very disruptive. Having used the most recent version of Java, it seems as though I am able to assume that most of the readers I get will have to update Java to continue reading/playing.
Is there a best practice concerning which version of Java to use to make the process of using an applet easy for end-users? Any reading material on this would be very helpful. Should I be using an older version of Java if I don't require new features? I am using Slick for 2D games.
Normally the main compatibility issues are between major versions. If you compile for Java 6, it will not run on Java 5 but throw an java.lang.UnsupportedClassVersionError.
Java se6 has been around for a while but there are very few resources on it so if you can develop for java five with books like killer game programming in java and developing games in java then you should be fine as they're written for java se5 and considered best in their fields.
Considering Java 6 was released in December of 2006 and runs on just about every major operating system I would target that. Considering Java 6 doesn't really add any language features over Java 5 you could go back, if you aren't using any Java 6 features. However considering Sun stopped supporting Java 5 in November 2009 and thus support for Windows 9x I wouldn't write for it.
I recently deployed an applet that seems to require Java 6 Update 24. I assume the reason for this requirement is the matching JDK version I used to create the applet (I am new to Java).
There are plenty of other reasons to force users to have 1.6, but without knowing your specific requirements it would take me days to list them. In the end though their is little reason to target older Java versions unless you specifically have to.
Stendhal targets Java 6, but tries to be mostly compatible with Java 5. Over the last year the number of users with Java 5 has decreased a lot. I think that is because of the huge improvements Sun made to the automatic update of Java. It is now around 0.1% for us, so we are considering dropping support for Java 5 completely.
Another thing to consider is that java updates automatically and if the user has java 4+ they would have upgraded to java 6.
Also, if you're using slick2d I think most of it will work with java 5 without any interactions so I would say aim for java 5.
So a program complied on Java 6 Update 24 is supposed to work on lower versions of Java 6. But there is a small risk that you invoke a method that was added in a minor release, resulting in a java.lang.IncompatibleClassChangeError or one of its subclasses. The chance for this to happen is really small, usually you get away without explicitly testing older versions.