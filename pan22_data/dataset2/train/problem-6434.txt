It's hard to be specific since that would require much more info. If the images are not dynamically generated on each request it would make sense not to pass them through a script each time, i.e. make them static. If the images don't change often I would try to cache most of them into memory. You can avoid a lot of disk I/O since many small images can be put in memory due to them being so small.
Put Varnish in front of nginx and make sure every unique image has a unique URL. Put a few gigabytes of RAM in your server and configure Varnish to use most of it for its cache. If your images are 1-2kB, 1GB or RAM can cache about 500-1000 images. Varnish will work well with its default ruleset, however it's very tunable which gives it an edge over most other proxy-caches.
Make sure your app doesn't set cookies on the domain, or adjust Varnish to throw away cookies for the URL's that  point to the images, since it will take the side of caution and not cache the request if it contains cookies. Also, have your app return expire headers (See 'Cache-Control: max-age') that are far enough in the future to make caching useful. It's easy to set a max-age of weeks, and if an object needs to be expired sooner your app can purge the object from Varnish' cache, or just provide the new image on a new URL.
We have very good experiences with using Varnish for this. It's a so called reverse proxy-cache, which means it will receive incoming requests from the clients, check its cache, then serve the requested object directly from cache or retrieve it from the backend nginx server first. Varnish can easily handle many thousands of requests per second with very low CPU and I/O usage. Response times are very fast. We're getting response times of 20-30ms, and half of that is what it takes the electrons to travel there and back.