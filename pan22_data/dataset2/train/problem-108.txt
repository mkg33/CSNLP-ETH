A number of your member functions could (and in my opinion should) be const, but currently aren't. In a couple of cases we have functions that aren't "physically const", but are still "logically const", so they should be marked const. This means they don't change the visible state of the data structure, even though they might cause some changes in memory. For these cases, we mark the member function const, and add a const_cast to allow the const point to be passed to a function that takes a non-const pointer:
Much of the code for TSimpleStack's destructor is basically the same as code in Pop. I think I'd change the code to use Pop instead:
I'm tempted to recommend moving the memory allocation functionality into an Allocator object, but in this case that's probably more open to debate than usual--many of the functions you're using require aligned allocations, but at least in theory you could still switch to some other allocator that met the same requirements (e.g., possibly one that still used the same allocation functions, but also did things like keeping track of the memory usage.
At least in my opinion, some of the code can be simplified at least a little bit. For example, Pop can be rewritten to something like this:
Some prefer the single-entry, single-exit style of code, but in my opinion, this code ends up simpler and cleaner this way.