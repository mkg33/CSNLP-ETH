Are they good quality servers with decent network cards? cheap network cards (like cheap RAID cards) are a false economy. And all the latest drivers? You have to start at one end and work your way through verifying everything has a clean configuration. Then start troubleshooting. 
I suppose you could throw hardware at this to reduce the network latency. IMO, that really isn't scalable, but if you're in a pinch with a huge application that needs to be fixed up, it is an option, at least temporarily.
Basically when using shared memory the client application can read tabular data streams (TDS) directly from SQL Server's memory. When using the TCP/IP protocol the TDS has to be converted to TCP/IP on the server, sent to the client, and converted back into TDS, which takes time.
When both the web server and SQL Server reside on the same machine, by default shared memory is used for the protocol. If you move the SQL Server to another box the communication has to go via TCP/IP.
SQL queries can be blindingly fast on a 56k modem, if only the result set is returned. But, not if you are doing things like using client side cursors where you have to haul everything back across the wire.
Running Profiler on a server with relatively high query volume can be difficult, but if it's that high volume, you can turn it on for a few times, 1-2 minutes at a time, and get a good sample. Just whatever you do, don't run Profiler over a network connection. Either run Profiler on the SQL Server box via RDP, or set up the trace to run on the instance itself (preferred).
I can't seem to find a good reference for recent versions, but read through this, it hasn't changed that much since.
Always look for things that are 'different'. My latest weird one is a high end server that was running slowly. Plenty of CPU, memory, no disk activity etc. Task Manager showed 120,000 handles?! A printer driver was leaking a handle every 2 seconds.. 
If the application isn't coded well, you may be in a 'death-by-1000 cuts' scenario where there are hundreds or thousands of small, possibly insignificant queries returning single rows instead of as a set, or a JOINed result. Every time the application wants data for one of these sets of queries, separating the tiers introduces a huge amount of extra latency over a network connection. This is pretty counter-intuitive if you haven't seen this situation before.
Having the SQL server on the same box probably masked some of the bad design choices previously made in the app. Now, they are out in plain view.
and this blog post gives a brief overview too. A more technical explanation can be found over at simple-talk