The computer I'm remoting to at work has the same mouse, which when at my desk physically the forward and back buttons work fine.
From here: https://community.wyse.com//forum/showthread.php?2398-Additional-buttons-on-mouse-don-t-work
Back and Forward on OSX is ⌘+← and ⌘+→ respectively, which is the equivalent of Windows Key+← and Windows Key+→ over a remote desktop connection. Windows expects Alt to be used instead of Windows Key and so instead of Browsing back/forward, it will attempt to pin the browser window to one side of the screen or another. Not what we want.
So, a driver will be part of your solution, but a USB tunnel will be necessary as well because the Remote Desktop protocol doesn't even send the necessary information the driver will need.
I tried all sorts of work arounds, including changing the keystrokes that got sent with the forward and back buttons and then redefining the Forward/Back for Chrome on OSX, but everything caused problems.
I then created the following AutoHotKey script and now everything works flawlessly through RDP and also on OSX:
I have a logitech MX518 that has nice forward and back buttons built onto the mouse directly. They work great locally. However anytime over remote desktop these buttons do nothing. This happens both with the Windows Remote Desktop and the Windows Store / Windows Metro Remote Desktop.
This isn't the exact same problem, but it's similar enough that I'm explaining my use case and solution in the hopes it will help somebody else. I've got a Logitech Performance MX (which doesn't let you change keyboard shortcuts for specific apps) with Back and Forward buttons which work great on OSX, but not so much when used through Windows RDP. 
@LordJair's suggestion got me thinking though, and so I installed AutoHotKey on my Windows machine. It's important not to do this on the host machine using an OSX equivalent because the RDP client will be what's interpreting the keystrokes and things get messy otherwise.
For what it's worth, I currently use AutoHotKey to do this. Just like with other hotkeys, when the RDP window is active, I cause the XButton2, for example, to Send {XButton2}.  Of course, if you're not already using AHK, then it might be too much trouble to get a script together.  For whatever reason, it works.