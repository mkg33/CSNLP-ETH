Validation? firstName and lastName could reasonably be empty or null (see Falsehoods Programmers Believe About Names), but userID at the very least surely needs to be non-trivial.
This is not a very useful test: about the only thing it verifies is that neither the constructor nor the toString() method throws an exception.
This creates a few problems. How are you going to set up reliable test fixtures? Will you need to serialise and deserialise, and if so how are you going to do that? And are you guaranteed a consistent timezone? I looked at the Java docs for this, and found them rather ambiguous.
If this is intended for use in log messages then it should use member.getUserID() since that's unique. If it's intended for UI messages then it should use member.getScreenName(), since that's the whole purpose of screen names. I can't see any scenario where member.getLastName() + ", " + member.getFirstName() is the best option.
How many of those fields should be mutable? I would have thought that at least dateCreated, userID and memberships should be final.
Actually, that deserves to be a separate point. The treatment of names is simply wrong and will not survive contact with the real world without offending or confusing people whose names don't fit into the pigeonhole of "one first name and one last name". Not to mention that the usage given to those would be wrong if it assumes, for example, that the last name is a family name and more formal, whereas the first name is an individual name, and more intimate. Speaking as an expatriate, I have personal experience of the problems that can be caused by names from one culture not mapping well onto the naming schemes of another culture.
There is a general expectation that constructors will not have side-effects. However, it seems that the only way to add a member to a group is to call the Membership constructor. That will lead to code with statements which are just constructor invocations: new Membership(m,g); and which an incautious maintenance programmer might delete as unnecessary. If you care about OO purism then adding a member to a group should be a method of either Member or Group (or possibly both, with one passing the call on to the other). If you don't, a static method Membership.create will communicate more clearly that it has side-effects.
There's no need to explicitly call super() for two reasons: firstly, the no-arg super-constructor is the default one; and secondly, the superclass doesn't have any other constructors from which to distinguish.