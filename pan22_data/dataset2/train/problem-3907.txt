File.exist?("#{$folder_name}") - Folder name is already a string, so you don't need to wrap it in a string and then interpolate it. Just use File.exist?(folder_name).
This doesn't even look like it works - where's the end to the each block? The problem is that your indentation is messy. Every time you change scope you should indent a level further, and when you return to a previous scope you should unindent. 
and now people can answer "yes", "yeah", "no", "nope", "y", "n" and still get the desired result.  If you don't use a case statement you can still add this functionality in if conditions:
You can see how our indents move backwards and forwards by 1 every time we hit a scope changing keyword, like do, end, and if. If you were to draw a ling hugging the left side of our code, it would be smooth as it moved back and forth between levels, with no large jumps.
Avoid using elsif. In this case it's not too bad, but imagine in the future you want people to also be able to answer "q" to quit the process and "a" to automatically rename them and "c" to move them but keep a separate copy, etc. You'd need a separate condition in the elsif for each. Instead you should use a case statement:
When you use a method that takes arguments, surround the arguments in parentheses unless it's a Kernel method (like puts, gets and print). That line should be:
You should use puts to output to the console, not print, unless you actually want the output to stay on the same line (useful for, say, a progress bar or a question waiting for an answer). Using puts automatically appends a new line if there isn't one, so each line of output gets its own line in the console and you can read it more easily. 
Now we can easily see that the code is split in to three sections, based on the answer to the question, and it will be easier to understand and improve the code. 
Or to put it another way, when you start an each block, you should start indenting one level further until you end that each block:
case statements also accept regexes in their conditions, so you could change those lines to read like 