I've seen this done at companies with literally thousands of users and, since things were automated, it world very well.
Even if you could squeeze more than 14 addresses into the reply without causing problems at the DNS layer, it is unlikely to be very useful. The timeout used by the client before giving up on one address and proceeding to the next is often significant.
It is strongly recommended that you ensure the reply will fit in 512 bytes. That would allow for about 25 IPv4 addresses and 14 IPv6 addresses (considering that you need some other information in the packet as well). The exact limit depends on the length of your domain name.
Don't do that.  A better way would be to set up individual CNAME records for each user that point to the appropriate server.  Let's say you have two servers, server-f and server-r used for IMAP.  Configure each person's IMAP client with the servername being USERNAME.imap.example.com where "USERNAME" is replaced by their email username.  Now you can move people between servers without having to reconfigure their email client.
What you are describing isn't an especially new idea. As other answers have already covered, you are limited in how many A records you can have in one reply, but that says nothing about how many A records there might be in total.
Should the reply size exceed 512 bytes, it may still work over UDP if client and server supports EDNS. Without EDNS, the client would receive a truncated reply, and it would have to retry over TCP. This increases the communication from 1 to 4 roundtrips. But even worse, sometimes there are misconfigurations preventing DNS over TCP from working.
As I said, this isn't a new idea. In fact, it's in part how Akamai works (and probably a lot of other CDNs). The A record you get for any Akamai domain is determined by their black-magic DNS servers. I bet the answer you get depends on dynamic load balancing and geographical concerns.
The short answer: about 25 A records fit in a UDP packet.  Beyond that, DNS will switch to TCP and it will not be as fast.  You'll also have problems with clients that aren't using DNS resolvers capable of picking the "nearest" IP.  Also, with wifi and mobile, the "nearest" is often not going to be the right server.
However, if you do this, I HIGHLY HIGHLY RECOMMEND that you generate the DNS records automatically from a database of users.   You want to make sure that as accounts are created and deleted the DNS records are created and deleted too.  Otherwise you'll end up with a mess and a lot of confusion.
Having to wait for that timeout even once can lead to poor user experience. If the client had to go through 14 addresses before getting a response, the user would have to wait for 13 timeouts.
You could, for example, implement a DNS server which answers any query for an A record with a random IP. Queried enough times, this would result in 4294967296 unique A records: one for each IPv4 address.
Each IPv4 address will take up 16 bytes in the reply. Each IPv6 address will take up 28 bytes in the reply.
Others have mentioned it as a detail, but from a practical standpoint, the hard limit is the UDP packet size limit of 512 bytes. While it's possible to switch to TCP when truncation is detected, in practice many/most clients will not do it (and arguably they shouldn't; it would give bad user experience for most applications, and I would only expect zone-transfers or other special-purpose lookups to support TCP). So you're looking at a limit of somewhere around 30 addresses for IPv4 (A records) and somewhat less for IPv6 (AAAA) since they're larger. The length of the domain name cuts into this and will limit the number further.
I bet if you try it, I bet you will get a different answer. How many edge servers does Akamai have serving any particular resource? More than two, I bet.
To answer the question as it was stated ("how many IPs can a single DNS A record hold?") the answer is very simple: a single A record holds exactly one address. There can however be multiple A records for the same name.
If you have both 25 IPv4 addresses and 14 IPv6 addresses, then you are counting on the clients requesting IPv4 and IPv6 addresses in separate queries. Should the client ask for both types of addresses in a single query (which is rare), then you would have to go lower.
For example, I picked a338.g.akamaitech.net. If I look at that on my computer right now, which uses a DHCP assigned nameserver from Comcast: