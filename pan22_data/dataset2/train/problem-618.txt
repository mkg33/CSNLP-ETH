Main idea is storing balance and transaction records in the same table. It happened historically I thought. So in this case we can get balance just by locating the last summary record. 
In Oracle you could do this using just the transactions table with a fast refreshable Materialized View on it that does the aggregation to form the balance. 
Based on your requirements, option 1 would appear the best. Although I would have my design to only allow inserts into the transaction table. And have the trigger on the transaction table, to update the real time balance table. You can use database permissions to control access to these tables.
You define the trigger on the Materialized View. If the Materialized View is defined with 'ON COMMIT', it effectively prevents adding/modifying data in the base tables.
So far I like where you are going with this, but if this is for an actual project (not school) there needs to be a hell of a lot of thought put into business rules, etc.  Once you've got a banking system up and running there's not a lot of room for redesign as there are very specific laws about people having access to their money.
Archiving will not affect this approach. You can have a weekly,monthly,yearly summary table also if needed for things like reports.
Not allowing customers to have a less than 0 balance is a business rule (which would change quickly as fees for things like over draft are how banks make most of their money).  You'll want to handle this in the application processing when rows are inserted into the transaction history.  Especially as you may end up with some customers having overdraft protection and some getting charged fees and some not allowing negative amounts to be entered.
A better variant is decreasing number of summary records. We can have one balance record at the end(and/or begin) of day. As you know every bank has operational day to open and than close it to do some summary operations for this day. It allows us to easy calculate interest by using every day balance record, for example: 
In this approach, the real time balance is guaranteed to be in sync with the transaction table. And it does not matter if stored procedures or psql or jdbc is used. You can have your negative balance check if needed. Performance will not be an issue. To get the real time balance, it is a singleton query.