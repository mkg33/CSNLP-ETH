An alternate method you could try reduces the complexity a bit, but does not allow for the cube to follow the mouse correctly on the screen. As you are wanting the move the cube along only the two axes (X and Z), you can map mouse movement along it's 2 axes (X and Y) fairly easily. To make the movement feel more natural, you'd likely want to modify the effect of the mouse offset to take the camera yaw into account. To accomplish this, you can take the offset X and Y of the mouse, rotate them around 0,0 by the camera's yaw rotation and then apply those new X and Y values to the cube.
In any subsequent frame, intersecting the mouse ray with that plane will produce a coordinate with the same Y-component as the entire plane (including the originally clicked point). That means that whatever world-space delta you calculate will automatically have a Y-component of 0. Render the cube at (actualPosition + delta) and, when the drag ends, add delta to actualPosition and reset delta to 0.
Several solutions could be used here to accomplish this task, depending on how much work you want to put into it.
Now you have a 3D vector dw in world space. Project this vector onto the plane of interest to find the motion along the plane. Supposing the plane is world-oriented (that is, the world coordinates are the plane coordinates), then you simply have to zero out the y component of dw giving a vector on the plane:
For some detail on the math involved: http://geomalgorithms.com/a05-_intersect-1.html#Line-Plane%20Intersection
Note: take care to make sure these points are in the camera's reference frame, not the world. From there, the motion of the mouse in camera coordinates is then:
In response to your comment, the world-space intersection that you calculate resides on the plane that you want the cube to move in regardless of the cube's current orientation. The thing I think you have overlooked is that the plane you need to construct has "Up" (0, 1, 0) for its' normal and should not be oriented to a cube face.
If keeping the cube at the position of the mouse is important, you will likely be looking for this method. Essentially, when you first receive a mouse click, you will construct a plane at the Y level of the object (assuming Y is up). Then during your mouse drag you perform a ray-cast each step from camera origin to projected mouse coordinates. Your cube can then be moved to the intersect point of this ray on the plane.
If the plane you want to move on is anything else, you simply have to first rotate dw into the reference frame of the plane, and then project it along the normal of the plane.
Now, dp is a 3D vector in camera coordinates in camera space. Transform dp to world space using the camera's rotation matrix R, which is a 3x3 matrix defining the orientation of the camera: