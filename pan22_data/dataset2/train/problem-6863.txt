One simple solution appears to be this. Consider the administrative user to be admin, and that our special directory is to be /tmp/special.
The alternative approach would be that you code a limited chroot() implementation of /bin/rm and execute it as root. A chroot() can be escaped by a process ran by root but only if you give this process the freedom to execute whatever it wants. A simple C binary which first makes chdir() & chroot() to the /uploads directory, and then only calls unlink() or rmdir() should be secure. But this requires lots of coding like recursive delete of directories, a command-line option like -f to ignore non-existing files, etc.
NB If a user creates a directory in /tmp/special, the administrative user cannot remove it. That may be a showstopper for this solution, but as your question only mentioned files and not directories I felt it was worth offering.
We have samba share with subdirs. Network MFUs putting the scanned documents inside specific subdirs (MFU01 --> /share/001/, MFU15--> /share/015/ etc).
Hmm... how about chrooting to /special_folders_root/special_folder/./ to avoid problems with root-owned chrooted directories? See vsftpd's documentation (for example) for explanation about extraneous dot in the path.
Users (from windows) may alter or remove the files in any of these subdirs, but can not remove the subdirs. I made that using windows-style ACLs, but I know nothing about NFS ACLs
In the end, every item in $share is a link back.  Anything that isn't a link gets moved to the (uploader) owner's folder.
Keep original uploaded files in a separate directory, per user.  This covers governance and delete permissions. 
Any user can create/edit/delete their own files in /tmp/special. The user admin can delete any file (albeit with warnings from rm).
The full scope of this problem is unclear as we do not know what's the usecase. However using SELinux labels one get achieve what you ask for. SELinux gives you some fine-grained controls over who does what and where. If number of users is "limited" and "known" - having specific contexts/labels associated with each one of them is not a big issue, then it is a matter of writing a bit of policy to code-in your requirements.
Every file and directory in the mounted target is owned by nradmin. The -p ud+rwx makes every directory to be with permissions "rwx" for the directory owner. Since nradmin is the owner of all directories and it has full owner permissions in them, it can successfully delete any file in them, even recursively.