I personally don't care for the "Bulk Rename" app. As others have mentioned, the GUI is atrocious and not very intuitive. With a little research and simple coding, these things can be done much mroe efficiently and quickly.
If you really want to use the windows command line (if you don't want to download something), you could do it like this:
There are many options, including the /S option that recursively performs the rename on sub-directories.
I use Blackboard to administer courses in a University. When I download an assignment in mass (in Blackboard, click top of grading column, then "assignment file download" Blackboard adds a bunch of extra stuff to the file name -often making the file name too long to be valid on Windows.
Use this command to replace the Blackboard added filename stuff with just the username and file extension.
To do this en-masse, I used the following code. Note that when doing it this way, ALL parts of the filename are considered, including the extension of ".csv". That goofed me up the first time around.
Here's a command-line solution --- a Java program I wrote specifically to make it easy to work with "patterns" in filenames. It's free and open source, so feel free to modify it:
Assuming JREN.BAT is in your current directory, or better yet, somewhere within your path, then your rename task becomes trivial.
I have developed a hybrid JScript/batch command line utility called JREN.BAT that can rename files or folders by performing a regular expression search and replace on the names. It is pure script that will run natively on any Windows machine from XP forward. Full documentation is embedded within the script.
Like @zdan above, I did this by command line (using "cmd.exe" in Windows). It took some tinkering for my particular case, but a little research solved it.
I wanted the file date portion to be in y/m/d order, with the "name" part at the end so it would read like this:
Like zdan, I output the list to a TXT file, then used tokens and delims to rename the files accordingly. In my case, I started out with a list of files named like so:
The first line outputs the list of files into a file called fileList.txt. The second line separates each of the names in the list into 3 parts, the #, the "-" and the rest of the name. For each of those it does the rename command.
The tokens are the "parts" of the filename, the delims are the separators. Note that in my case, I had 2 delimiters (a dash and a dot).
So I used the approach that @zdan and @gtr1971 advised, by opening a command window on the folder with the files inside (CMD.EXE). Then run this command to put all file names in a document.