There's a program called "script" that's included in practically every distro, and which should be easy to install on the ones where it isn't.  It's a session logger that records all input and output from a shell, optionally with timing data so it can be replayed and look just like you were watching over the user's shoulder when they did it. (95% anyway, it occasionally bobbles the output when ncurses is involved, but not very often.)
This still doesn't prevent users from copying files out of the system, but it does let you review what was done by which users and when.  It's probably not impossible to bypass, but the bypass would almost certainly end up in the logs so you'd at least know somebody was up to no good, even if they manage to hide exactly what it was.
Its man page includes instructions for setting it up as the system's login shell.  Make sure the logs go somewhere that the user can't just delete them (the append-only filesystem attribute (settable via chattr) can be useful for this.  As can ACLs or inotify scripts)
There is a way to use 'scponly' as the shell to disable interactive ssh and allow scp, but I am not aware of anything existing that works in the reverse manner. 
For what it's worth, the commercial product CryptoAuditor claims to be able to control file transfers over SSH, by MITMing the connection and using deep-packet inspection. Obviously no solution is safe from copy+paste, uuencode/decode, FISH, etc. The nice thing is that it's transparent (aside from probable certificate errors); there is no agent software to install on either end of the SSH connection, and no portal/proxy to configure.
Your best bet isn't to lock down scp, but to use a file system with ACLs to prevent read access.  You could probably do something with SELinux to prevent certain applications from reading from certain files.
Remember, if they can read files, they can copy/paste them off the screen. Binary files? xxd/uuencode/mmencode all get around this.
The best you can do is to change the users' shell to a restricted shell (rbash) and only then to run certain commands.
As others have noted, you can't block scp (well, you could: rm /usr/bin/scp, but that doesn't really get you anywhere).
Blocking file transfer without removing so many system utilities as to leave the machine completely useless is impossible.  You'd have to get rid of everything capable of displaying file contents to stdout, and everything capable of writing its stdin to stdout, and by the time you've removed all of those there's so little left that there's no point to allowing shell access at all.