This is using the aforementioned Git+SSH transport layer (see link above) - and should typically use my forwarded-agent key (which I have verified present with env | grep SSH_AUTH_SOCK)
I also can't rule out EC2 weirdness (security policies, etc) - but in that case, I would have expected a timeout or connection failure. I feel pretty confident that I'm hitting github.com - and that they're not letting me in, because my agent isn't offering my beaks key for their git user.
The response is a simple "authentication failed (public key) the other end hung up unexpectedly", I suspect because the agent for my user isn't being used when I approach github.com as their shared git user.
My team log into the server as themselves, individual user accounts, everyone is in a developers group, and the umask is 002. None of the above is really relevant, except to say the purpose is to make sure my team can always work as themselves, without requiring super user privilieges.
This query isn't directly related to Git, but since one of Git's supported transports is SSH, and I'm trying to use agent-forwarding, I thought I would ask for clarification (the man pages have let me down)
The initial login works perfectly, ssh example.com opens a connection to my user account, and all is in order.
I'm trying to automate a software deployment using Capistrano, I've managed to suspend some of the pain-points (pre-seeding the known hosts, before deployment, etc), but I'm left with the following situation.