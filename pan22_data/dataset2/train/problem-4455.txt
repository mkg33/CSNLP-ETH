However, most teams do much of their work outside my view. I seldom respond positively to complaints about team members (and get only a few), reminding the complainer that it is also their responsibility to foster team work. 
I would like for students' project grades to reflect their contributions, but just grading projects is time-consuming and difficult enough. What ways have teachers found to provide individual grades on team projects?
While, in general, I prefer that students on a team get the same grade for the work (see below) I also ask each student on a team to fill out a questionnaire at the end. The questions are simple. Assuming a team of about five, I'll ask each student to name the three most valuable members of the team and to list the contribution of each. They may name themselves as one of the three and are told that. I also ask each "What was your own principal contribution?". For a pair, I ask each, to give the partners main contribution and their own. 
Then ask the students to provide a link to the repository, along with the project. This allows you to see on GitHub how much work each student contributed. 
I've been pondering the same problem, and I've come up with an experiment to try next year: let the students discuss the division of labor among themselves, but once they've decided how to proceed, they should write down what they came up with and submit that to you.
The reason for a default equal grade is to have the system encourage sharing and contributing. In Agile Development, one of the key ideas is that the Team shares in the success and reward of the project. It is not up to the team's manager to pick winners and losers on a team. I extend that idea to the classroom. 
A student complained about their grade not reflecting the amount of work they put in, which was substantially more than their other teammates. I can sympathize with the complaint, although I pointed out to the student that I had followed the syllabus and project grading guide and that they had learned more and would get a better letter of recommendation than students who contributed less.
What I am thinking of doing in the future is to have the "plan" document include contingency planning: what the team will do if someone is unable to do their share of the work. I will point out that rarely does someone slack off due to laziness; it's more often due to distractions from personal illness, death in the family, and other issues. That helps avoid some of the embarrassment of saying "I didn't do what I said I would."
I wouldn't pull these back out unless it's needed, but if there is trouble, it gives you an easy way to grade the individual contributions.  Also, if the lower contributions of one student prevented the project from getting completed, or forced the other students to have to do more, you now possess the justification for giving the worker bees full credit even on a partially completed project.
I also like group programming projects (usually pairs, so some of the mutual grading ideas, which I like, don't apply). What I do is have an early phase of the project be a co-authored "plan" document that crucially, includes specific tasks for each member. I make the assumption that they can divide the work equitably or that they can re-negotiate later. Later in the semester, if one partner is lagging behind (and I have one or two such occurrences every semester), I have a way to verify that one person did more and so can adjust the grade accordingly. 
I teach undergraduate programming project courses and have traditionally given the same project grade (about 45% of the semester grade) to everyone on each team, unless a team member's participation was clearly minimal, in which case I deduct points from that student's project grade, but I do not add points to other teammates'. 
GitHub allows you to see a person's contribution (# of commits etc.), so this method is quite convenient.
Also, the students need to know that the "product" I'm most interested in isn't their program (or whatever) but the learning. If the project "fails" the students can still succeed. The educational process should be a "safe zone" where you are not yet expected to perform at a professional level. 
First, teach the students about version control, and introduce GitHub, and tell them that they need to create an account. Then say that each group should have their projects in a repository. 