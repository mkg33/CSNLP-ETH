Generally I feel one element should be core when it comes to this and that is readability. From my own experience when I was just starting off with programming I'd always explicitly define my scopes. That is  to say every if opens with a condition, followed by an encapsulated (series of) statement(s).
Note that in some organizations, not using an approved style will (WILL) get you reprimanded. Some might treat the idea that you should fully brace every  compound statement (if, while,...) in Java as syntactic sugar, but I treat it as essential. 
While the student can be led to always writing with a consistent and clear style that avoids tricks and obfuscations, he/she will also need to be able to read code of others who take less care. So, especially in a language like Perl, which seemingly has an endless number of ways to do things, being able to read may be as important as being able to write. 
While I agree with this answer that the conditional expression is more than just sugar, I think the following consideration is important in many languages: 
The point here being that you want to let your students know you can do these things but advice them to get the basics down first. Then after repetition, and you yourself steering more to actual proper code, I reckon many students will pick and choose what they themselves are most comfortable with, which you can use to actually understand and support them better as well.
When I show my code to students I tutor, they ask about "all those things in my code", which refers (quite vaguely) to things such as shortened ifs, post\preincrement etc.
That is all the more reason to develop a good style, but also shows why the less-explored corners of the language need light shed on them. 
They are confused by these things, but once I explain those things, I see that the students constantly use them (not in excess).
This got me wondering what are some of the benefits of teaching syntactic sugar during regular teaching (as part of the lesson plans in the curriculum). What might the students gain from learning syntactic sugar during lessons?
Then when they get more comfortable and experienced I feel you should slowly make your code more and more implicit and add some more sugar to it. That way you can be sure that once you explain it, everyone will get it fairly quickly, and it gives them the freedom appropriate for their skill level.
After all, the text of a program is normally read more often by humans than by computers, especially if the program is important. 
So I feel that at first you should try and teach your students a very clear and obvious way of coding. Ternary operations (i.e. the ? operator) tend to be hard to grasp when inexperienced, so try and stick to always start from the more explicit code, and then as you come across your N'th if statement in your example you show them alternatives. That way, you'll let them know you can make the code more interesting, without pushing them to do so and get confused in all the options there are.
So, think of it as an inverse funnel, you start them off straight and reliable, and as they learn more and more, you give them more options and freedom.
Moreover, some things that look like syntactic sugar are really well developed idiom in that language. 
The point for me back then was to get rid of ambiguity when you aren't experienced in recognizing scope and the flow of code.