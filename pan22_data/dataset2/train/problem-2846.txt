Set up an Excel template file (.xltx) (on a user-accesible folder on a server) to link via ODBC to the pg table. This Excel template file can contain an XL table (or a Pivot Table) that will automatically read the pg data. 
If new requirements appear that are too complicated for users to build themselves, you could set up another version of the table (or the PT) in a new worksheet in the same file just by copying the worksheet, then modify and save.
One important thing: you may want to restrict access to the tables that are really editable by your users.  A good approach might be:
Users can then filter and reorganise the data to suit themselves, and save an ordinary xlsx file locally. This local xlsx file will also contain the link to the pg table and can autoupdate itself. 
A poor man's solution might be simply installing pgAdminIII, setting up the connection to the database and using it's built in filtering and data view/modification functionality.
I admit this does not give you a very good user experience (about 8 clicks to get to the table you want to view/edit), but it is very easy to set up.
(Instead of installing ODBC on all machines, install it on just one machine, do all the donfig until you get a succesful connexion, reboot, and then export all the registry data that corresponds to the pg odbc - from that one machine - into a .reg file. Then import the .reg into the registries on the target machines. Faster. )
When doing this, revoking access from public might have some unwanted effects on other users' privileges.  Fix them accordingly (for example, by setting up a more powerful editor role, that can be granted to other users).