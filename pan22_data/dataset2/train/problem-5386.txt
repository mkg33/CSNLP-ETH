First of all, you will have lower CPU overhead by filling a buffer yourself and uploading it to the GPU all at once, than by setting each uniform with its own individual GL call (which also makes the driver do some work to track changed uniforms and upload them when needed, etc).
Moreover, UBOs can be shared across multiple shaders if desired, and only need to be filled out and uploaded once, rather than per-shader.
Uniform buffer objects (the GL equivalent of D3D constant buffers) are designed just for such things and will probably give you the best results.
As for the various types of buffers, GPUs and their drivers often have optimizations for UBOs that don't apply to buffer textures or SSBOs.  For example, when executing a warp/wavefront, when you read a value from a UBO, the read could be issued just once and the result broadcast to all threads; but reading from a buffer texture or SSBO might issue a read for each thread, which would be less efficient.  Also, GPUs often have a special memory cache dedicated just to uniforms, while reading from a buffer texture or SSBO would go through the texture cache and potentially conflict with other texture accesses also done by the shader.