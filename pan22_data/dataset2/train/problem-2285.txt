You can then do further validation: if you have a 39U rack and somebody tries to put a 5U device in at location 38, you can throw an error (as U's 40-42 don't exist!). Also if somebody puts a 3U device in at location 10, and something is in location 11, you know it won't fit or they have not updated the details of the device that is no longer there!
I can see two ways to tackle this depending on how many locations, rooms, racks you have. It depends on quantity for your interface.
User selects one, then fills in the information. List will be equal to the number of racks (which could get a bit excessive).
I have made primary keys as auto IDs as I prefer them to be integers and there's less to think about should you change a location/room/rack reference.
I've used racks in the past, I simplified the schema but these are some additions that spring to mind.
You could also make some clever queries that would tell you how much space there is in your racks (and where). But that's beyond the scope of this question!
I think the difficultly lies in using the parent table as part of the sub-table's primary key. So long as you have a reference to the parent table, you can always generate a reference that combines Location+Room or Room+Rack. Otherwise the primary key will get too hard to update and you have bad primary key.