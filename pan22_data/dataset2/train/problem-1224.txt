One last note: if you're interested in saving space, you could simply save the number you're seeding the random number generator with.  Then, if you reseed the random number generator with the same number on the next startup, it'll generate the same sequence.  Here's a snippet from the official docs:
Any data structures ds_... are global (and you need don't forget to destroy them, when it not need more), but variable, where you stored id of data structure, has own scope. For example, if you use var data = ds_list_create() then you can use data variable only inside current script (and you should destroy this data structure, otherwise there will be memory leak). If you use data = ds_list_create() then you can acces this data structure from any object, using data variable, like ds_list_add(obj_enemy.data, 100);, etc.
If I had occasion to revisit this project, I'd probably try to update my code to match the approach taken by Dmi7ry in the other answer.
I needed something similar when I was collaborating with a friend on a simple shmup.  I was doing development and he was doing design.  I exposed various game constants in a plain-text .ini file.  He could edit them and modify the feel of the game without having to recompile the code.
Note that I ended up storing my arrays of reals as a string.  When I needed to use them again, I split the string by commas and cast them to reals via a function:
After these variables were set, I'd check for the existence of my .ini file.  If it existed, I'd overwrite the variables I had just set with the ones stored in the .ini file.
I scoped options as a global variable so that the appropriate game objects had access to it.  There's probably a more elegant method -- there is in most object-oriented languages -- but this was the approach I settled on.
Use ds_grid for store 2D array or ds_list for store 1D array. Then you can use ds_..._write function for write data to string (and write that string into file, for example).
I came to the same conclusion you did: I used ds_map.  Basically, on startup, my game would run scr_readIni.gml, which set a bunch of variables.  Here's an example: