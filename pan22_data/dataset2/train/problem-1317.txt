When and if you ever reach this scale, you will then have quite a bit of money and resources to throw at this kind of problem. 
why not divide based on the alphabetical range? If you will have millions of users, create a separate table for each letter or for pair of letters (table 'a' for users with username starting with 'a'). It will be much overhead at first but since you are expecting big database and want to be able to distinguish which table should be used for particular user - i guess the alphabetical order is the obvious and easiest choice.
Don't worry about sharding until you need to do it. You are attempting to optimize prematurely for a problem that may or may not ever exist and in the process, you will severely cripple the rate at which you can innovate. Be fast to launch and find the problems as they come. You cannot predict in advance what your scaling challenges will be.
You're not going to have a billion users tomorrow and MySQL can handle several million rows without any problem. I have 5 million users in my user table and trust me, it isn't even on my radar of things to worry about. 