RN and RL are quite confusing variable names, I understand that they are in fact randomNumbers and randomLetters, I think these names are clearer!
The code right above constructs your code in 2 times, the first where we will add one number and one letter one after another until we reach our CodeSize. The second part will have the responsibility to add your separators. The real advantage is that you don't need to worry anymore about your array's indexes, which could become confusing.
Now, if we want to remove the second loop, we need to be able to tell when to Append the GroupSeparator at the good moment in the first while. To do so, we need to be able to tell how long will the final code, including the separators, will be. Let's introduce another constant to do the maths!
We see the int 9 used alot in the code, what if I wanted to change it to... 12. I'd have to check all the code and change all the instances of 9 for 12. This looks like a good scenario to use a constant!
Your method GenerateCode should have one simple responsability, to generate a code. So, this method shouldn't worry about the TextBox nor the ClipBoard. This method should return the generated code, and your Generate_Click method should take care of the rest.
It is a good practice, if I recall, to use a static Random variable, in order to have a better... randomability (I just invented that).
Now, you can reuse this code generator for other codes. The separator is an optional parameter. I don't know if you already know about this, but if not, here's the link : https://msdn.microsoft.com/en-us/library/vstudio/dd264739(v=vs.100).aspx
You don't need to use while loops in this case. You want to do an operation X times, and the for is all designed for this. Also, there is no need for the 2 loops, only one could do the job.
i and a shouldn't be class members, they should be declared in your method scope. That is because they are specifically used for your method implementation. This way, you won't need to reset them afterwards. Some people already pointed out that you should use the C# code conventions (generateCode should be GenerateCode).
So we will extract this logic in a method, in order to hide to your method these ugly hardcoded values.
Since we don't want a separator at the end of the code, we need to do codeSize - 1, and we need to see how many separators will be neccessary, hence the CodeSize / GroupSize.
I'm not sure if this is a best practice or a personnal preference, but I like to see the private visibility modifier indicated, even if by default it is private. This way I can make sure it is intended to be private and that the developer didn't simply forget it.
To make the loops more efficient, you can use a StringBuilder So that you do not need to create a new string every time with string concatenation.
We need to check the condition before incrementing the separatorIndex in order not to have a separator at the end of the code. Also, note that I used the var keyword as @Abbas proposed, it is a great keyword to use when it is easy to guess what is the type!
Now, if we want to get rid of the String.Format that is a little difficult to read, and keep the fact that you alternate between a number and a letter in your code, we will try and use a StringBuilder instead of 2 string[]
You could shorten up some pieces of your code and use loops to generate your code instead of string.Format
This last step might not be a good idea, but I decided I was gonna share it with you anyway. You do not need the 2 arrays, thanks to the ASCII table. As you might know, 'A' = 65.  Now, as I wrote before, using hardcoded values in the code isn't good, and I'm pretty sure you don't want to introduce constants like :
But wait, there's more! At the moment, we have constant values that define our code rules. 16 characters, groups of 4 and a "-" separator. These values could (should?) be parameters to an object!