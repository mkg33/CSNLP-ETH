We can now look into the code of the said method. You define success at the top of your method, but do not use it until you assign it again, meaning you could join these two statements and remove bool success = false;
In addition to these, our instructor challenged me to use as few loops as possible and to use ref or out parameters at least once (we just learned about them in class), because I am already somewhat familiar with C#.
Also, ref and out parameters are dangerous and misunderstood, you shouldn't use them unless you are sure that you need to use them. Here isn't the case in my opinion. But I can't argue with your teacher ;)
I'm currently enrolled in an introductory C#/.Net 4.5 course and one of the things I want to focus on is the quality of my code. 
In your prompted message, you always use Console.Write and specify the line breaking character \n. Instead, you can use Console.WriteLine which sums up to :
The interesting point is about your two other parameters, min and max. In your cases (prompting for a difficulty and for a guess), you only validate if the number is within a range. But you might need other kind of validation in the future, for example any number greater than 1 (which is a little excessive I might say). In this case you'd have to tweak your code to make it work. My solution for this is to use Func<int,bool>. I'm not sure if you have seen those before since they are a little bit more advanced. This would give you the opportunity to let the caller of your method define the validations to be made on the input. For example : 
This is the first assignment our instructor had us do, the ever-popular number guessing game. The requirements our instructor set out for us were:
When you write code, it is very important to make the said code as clear as possible. Methods named getInt and getBool aren't self explanatory. Think that when you read code, you should be able to understand what a method does without reading the code of the method. To show you a good example of what I mean, I wrote a really long answer about the getInt method being about selecting difficulties but I found out at the end of my review that it wasn't the whole point of this method. 
A big issue I have with your code is that you have Console.Read and Console.Write scattered through your functions.
Maybe you could respond back to the teacher that you used a class which is passed around by reference :D for example
In this method you currently have 3 parameters, message is quite good, though I might have named it promptedMessage or something like that, just to make it even more clear, but that might be nitpicking. 
Talking about success (eh eh), what does it mean. What succeeded? Your boolean answers the question "Is the user input valid?" so I think it should be named isInputValid. Also, you have a problem. You assign success (now isInputValid) twice in a row, but never use the first assignation meaning that if your input wasn't a valid integer, your application will process as if the user had input the number 0, which isn't good. What you wanted to do was probably more : 
Then, this looks weird, what if we could do this in 1 statement. Well, we can. (Also, using Int32 is the same as using int, I prefer using int)
I propose that the enum should just list the difficulty level names but not their maximum values. Put the maximum values in a Dictionary<Difficulty,int>.
I'm not sure whether an enum is he best way to keep the mapping between difficulties and maximum values. If your ideas of these change, or you add more difficulties, then the type itself changes. That shouldn't happen.
With this approach, there is code repetition, but I'd say it is neater. We can fix the repetition by using do...while() with a little tweak (god I hate this word).
Any input would be highly appreciated! I want to focus on becoming a better programmer in any way I can. Don't be afraid to nitpick!
And here is a portion of the resulting new code. Granted it's not that much different... but it is testable.
Those tests all pass with your current code. However, because I have tests I can now easily change your code (fyi it took about 5ms to run all 3 of those tests)
I'll attack the getInt method for now. It's sole responsability is to prompt the user for a number. Meaning a better name could be PromptUserForNumber, or something like that! When I name my variables/methods/classes etc, I think about what my method does, resume it in 2-4 words max and that is my method name (works most of the time).
Now, I need to talk about the recursive call. Recursion is, in my opinion, a beautiful monster. It is a pain to read, to write but so awesome once you understand it. In your case, recursion seems a little over the top. Recursive calls aren't that great, seriously. You could make this a little easier to read (and write) by using a while loop.
Now that is great, your prompt method doesn't need to know how to validate, it just uses the Func. Now, this is how we use it :
It reads like you are thinking through one long process and taking actions as soon as your possibly can.
As an exercise I suggest you refactor so that only your Run (or main) method ever reads or writes from the console. This restriction will force you to write in a more OO/functional way and I think you will be pleased with the results
Next I am going to point out 2 things here. One is that even though you are in school, and you are somewhat new to programming I am a firm believer in using tests (and not user input) to test your program.  I don't want to start a debate about how to write tests and when. That isn't the point. The point is that writing automated tests have many benefits. Granted at first it is a little harder and slower to write a program. But once you get the hang of it it is amazing. Some of the benefits are that your code can test itself, and it can test itself very fast. For this game I would imagine that it could be written using about 20 tests total. Those 20 tests would (and should) complete in less than a second. (probably in the 100ms range) You may be fast, but not that fast. What's also nice is that it gives you confidence to change your code willy nilly to try new things and know that you didn't break your code. So I am going to take 2 of your methods. Pull them out, and make them testable.
(FYI, I had started a book about how I got from A to B with your code. But instead I decided to just show you what a few of my tests look like, and what your getInt method turned into)... First the tests