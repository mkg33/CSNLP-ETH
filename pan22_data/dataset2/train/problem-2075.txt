So you could create a command line tool with any programming language that will fit your needs and then call it from the command line.
For an imbedded .tar.gz file, you would need to do those individually when you find them by sending them to stdout with -O:
If you want to see the compression rates for each file in a zipped tar bundle, see the answer by Mark Adler.
For another archive I know, that it also contains .tar.gz files. Is it also possible to calculate the size of the unpacked archives that are contained within an archive? (for example by setting a level to which the "unpacking" should be simulated?)
I don't know how to do something like this on the terminal (AFAIK it is not possible). But most programming libs for extracting archives also allow to query content information (e.g. tree, size of content) without extracting the whole compressed contents.
If you are only interested in the whole zipped file (or bundle), the correct way of determining the unpacked size is:
Note, these options are for GNU tar, which is what is on both Linux and Mac OS X.  The options for BSD tar may be different.
You can write a script to find those in the -tv output and then extract them, and even do it recursively.  I will leave that as an exercise for the reader.
Is it also possible to find out the size of the contained files without unpacking the compressed archive (on a Linux and/or MacOSX system)?
I have a 32GB .tar.gz archive and I'd like to know the size of the files if I unpack this compressed archive. I'd like to avoid unpacking the archive first and than use e.g. du.
The compressed and uncompressed numbers show bytes. Ergo my syslog.1 file would be about 32 MB uncompressed.
First, you should know that the .tar.gz suffix means it's a compressed tar file. tar is just a means of packing multiple files and directories into one file. It does not have any compression by default. This is where gzip comes in. It's a tool for compressing a single file. Hence the aforementioned suffix means it's a compressed bundle of files and/or directories.