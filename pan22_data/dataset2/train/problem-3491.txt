In an office, they might have records of a client's information that they'd traditionally write on a piece of paper and store it away in a file cabinet. That file is a record of related information that you can look up by a name. That metaphor works for computers. They store information electronically instead of on paper, but that digital record is organized in one place and can be looked up by the file name.
So, a "file" means different things in different contexts, and the only overriding idea is that a file is a way to group data together.
We also call these folders "directories", another metaphor.  A "directory" is from the same etmological root as direction, and it means "to guide".  So, folders can be thought of as places where files sit, or can be thought of as a guide to where files are.
So the metaphor of a file, then, is a document with some information about something.  And the metaphor for the folder is as a place to store those files.
I'd actually answer this question from an Intro student from more of the HCI perspective, because they likely have more experience using a computer than understanding how the computer works. @MichelBillaud had a similar notion in suggesting it as an abstraction (although most intro students won't fully appreciate what abstraction means the point of asking what a file is). Relating the abstraction to what they already understand in the physical world helps establish a good foundation.
I'd add that a file tends to be the lowest level of abstraction of a container or boundary around data that the Operating System manages.  That is the file's name is accessed through the OS and if you want to know the bits and bytes of data "in" the file you need an Application or program to read/write the file.  The OS "promises" to return the data to any Application in the same order in which the creating Application specified but physically the OS may scatter the data to the wind - as long as the OS can return the data properly to some Application.
As for the files themselves, there are two perspectives to think about this.  Again, the metaphor is there, but it breaks apart a bit in translation:
The second perspective is the perspective of a file itself, which is really just some way to store some data, after all.  So far, that's just like a file in our big office.  But our files can store so many different kinds of data! We aren't just storing readable text.  We can store pictures.  We can store sounds.  We can store runnable code.  All of these require very different internal organizations, so the contents of files are extremely variable.  
What is a synonym for what we call folder...? There isn't one! It is a brand new concept, like variables. Nothing else in our world is like that. This is why we have to show that analogies are limited and misleading. You have to actually know some things.
I would approach this pragmatically, beginning with the metaphor that kicked it off.  I would tell the students something like this:
Was in a conference the other day and someone was showing intercept security... A .exe file started with MZ. Why? Those are the initials of the man who created the first DOS executable file format. Many kinds of files have 'signatures' in the first few bytes. 
I suppose that explains why its difficult to define what a file is. In a physical sense it is just a list of connected disk or tape or memory sectors containing codes for data values.
From there, you can build upon that fundamental to explain different file formats (e.g. plain text vs binary) or how the metaphor extends to other abstractions of digital data represented in ways people can relate to in the physical world (e.g. folders, storage, copying/moving and recycle/trash, to other WIMP metaphors.
Attack it in many ways, showing the aspects of 'files' that are meaningful to you. Give some of the history. I am sure you can come up with analogies. One issue is that although 'file' makes some sense, 'folder' does not, because we don't ever nest manila folders! Nnnnt! The other term, 'directory', has fallen in to disuse, and really is not any better. 
On UNIX systems everything is a file. A file of data is a datafile but a directory (folder) is also a file. A device is a file (found in the /dev directory). Programs are executable files and even running program and system states have associated files (found in /run). Network connections are files that can be read and written. 
Imagine that it's 1925, and you're working at a giant company like General Electric as a secretary.  There are files, meaning pieces of paper, for all kinds of things. Personnel files about employees, files of record for payments, files of company policies, board meetings, tax documents, you make it.  There are hundreds of rooms holding thousands of file cabinets holding millions of files in hanging folders.
Many files begin with some sort of metadata.  "Hey, I'm a picture, and this is my encoding and my color depth and my size and and and and...".  Some files depend on the file system to just remember what kind of files they are.  Every file is designed to be read by programs or by the computer itself, and is highly organized to make this possible.
I used to use a tool called 'strings' that would show any displayable sequences of characters in an otherwise 'binary' file. Helpful sometimes. We have gotten far away from this level of reality in our everyday use of computers, so it is good to show that there is really no mystery, it is all just a heap of ideas people have had over time, piled up in layers. Start at the bottom with characters and follow the clues.
The first is from the file system, which is concerned with being able to store and retrieve these files.  As far as the file system is concerned, a file is a size and a series of locations as to where the various parts of the file are stored.  This is because the files don't have to be contiguous inside the computer.  It doesn't actually matter if the first half is stored over here in the hard drive and the second half is stored somewhere else, since the file system will retrieve it for us as if it were one document anyway.  The file system just has to keep track of everything so that the files can be assembled properly when they are needed.
I'd start by explaining that the first personal computers with graphical interfaces (Xerox Star if they want a historical context) faced the challenge of making it easy for someone who works in an office learn how to work with a computer, which stores information digitally instead of on paper.
But translating that idea to the very alien mind of a computer involves some tweaks.  First there's the idea that folders can contain folders, which can contain more folders still.  This is incredibly convenient, and using the same metaphor as "directory", we call the list of folders and subfolders and subfolders that bring us to a particular file as a "path".  Get it?