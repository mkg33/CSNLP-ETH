I've included two contrasting examples of pixel art below, the first one being a very simple one of some cherries, and the second one being an amazingly complex one (to see it in detail, you may need to right-click on it and choose "Open").  For more examples of pixel art, use Google's Image Search:  http://images.google.com/images?q=%22pixel+art%22
The first has a vast video library with great info on digital painting. You will learn the process and the tools.
If you have a job or university to go to, AND you are making your own games, you already have enough work on your hands. Learning to make art is hard work and lots of it. The sites I recommended often tell you that you need to be patient, that you need to draw everyday for 1-2 hours at the minimum, and you will have to work for months for substantial improvement.
Learning art is fun, but only if its a goal itself. You see it as a means of acquiring art for your games, "you're gonna have a bad time".
Im playing around with varous forms of art as a side hobby, and after a year or so, my work is nowhere near worth putting into a game.
The second text I recommend is Kimon Nicolaides' The Natural Way to Draw. Different drawing techniques, exercises and intents will also help develop your innate ability to draw. And everyone has the ability to draw well once they understand how to draw.
Programming generally involves thought processes located in the left-hemisphere of the brain that handle logic, linear sequencing, and predictability. Drawing utilizes thought processes dealing with space, patterns (visual or otherwise), shapes, color, etc located in the right.
A great place to start learning is by modifying existing artwork rather than starting from scratch.  Find something that's sort of what you want, and modify it to be what you want.  
You probably got some instruction on the thought processes required to create a program. You will probably need some instruction on the the same for creating artwork.
With practice, you can keep reducing the total number of different colours used and still make really nice images.
The problem with learning art, from a programmers point of view, is that you cant understand it just by reading and seeing it done. If you see some code, have it explained to you, and you can reference it while making your own attempt at the subject, you can get good at it very fast and produce reasonable results quickly. In art, you can intelectually understand the process, but it is not enough to go through it yourself. You have to teach you brain a subconcious understanding of form and lighting, and you have to acquire needed control over what you draw. This can be only done through work work work.
I recommend first Drawing on the Right Side of the Brain by Betty Edwards to learn what the thought processes used by artists are; how they work; and importantly, how they feels. If you ever recognize being in the flow where your ability to code just continues effortlessly you have a sense of the way thinking can feel. The spatial and coordination thought processes required for drawing are not often used by programmers who develop using typical conventional practices and languages, and you can feel the difference when they're employed.
You could try starting with pixel art by taking some graph paper and never violating the golden rule of "one colour per square."  The alternative to using graph paper is a graphics editing application like Adobe Photoshop and it's "zoom" feature.
And even if you could produce a piece of acceptable quality having little training and experience, it wont be worth the time investment. In the time you make the piece you could write code for someone to earn enough cash to hire an artist.
But, the main problem is: you wont get good enough without unreasonable amouts of tiem and hard work