For 2D solutions: Game Maker is very simple, and has been used to make some great games.  You should be able to pick up its scripting language quite easily, but it might be too simple for someone with a year of Java experience.  I develop in Flash using pure AS3 (tutorial), which is close enough to Java for your skills to easily translate.
If you're interested in game design, why not start with making a card game, or something that requires no programming at all?  That will allow you to focus on the design and mechanics of the game rather than fighting your way through APIs, languages and frameworks you're not familiar with.
The Unity engine will allow you to abstract away most of the details so you can focus on gameplay programming.  The community on the forums and the Stack Exchange based Unity Answers are incredibly helpful.  You can program in either Javascript or C#. Coming from Java, I started with Javascript because a lot of the tutorials were written for it, but switched to C# (which was quite an easy switch).
C# is very close to Java (I sometimes joke that it's limited-platform Java with better libraries), so XNA might be a good choice.  Minecraft is developed in Java with the lwjgl game library, so if you want to stick with Java, that's a good method.  Of course, 3D development is kind of complicated; depending on your knowledge, experience, and perseverance, you might want to wait on 3D (or even 2D in a 3D-based system) until you get more education under your belt.
Main options for Java I know about are jMonkeyEngine, which is a 3D graphics engine and generally considered pretty good.
I think XNA and Pygame could also be good (since they abstract some of the more tedious stuff away), but I don't have experience with them.
Python is a very easy language to get (took me about a week at max with little attention from a book, coming from a year of C++). Pygame is a wrapper around the SDL libraries from C, so probably doesn't have the same amount of functionality as XNA.
Finally, don't aim too big with your first game. It can be very easy to underestimate how time consuming it is to implement features into a game.  Start with a core game mechanic that allows you to get the game in a playable state quickly.  Then you can start adding other elements.
XNA and AS3 are very close, and can create games as complicated or as simple as desired. (though same holds true with java)
If you're just looking for game development, why learn another language at the same time? I would stick with Java, unless you want to learn a new language. 
Another vote for Unity.  You will have plenty of time in your next few years of CS study to engage C++ and other languages.  If your goal is to develop a game, getting tied up in what is essentially the work of developing an engine is going to take too much time.  If you want to be an engine designer, definitely come back and try lower level implementation.
If you're just starting out and want to work with the logic more than dealing with buffers and shader binding and the like, go with jMonkeyEngine. If you want to get deep in to start, go with jOGL.
If you want to learn a new language, out of C# and Python I would probably say C#. The syntax is very similar to Java, and XNA and SlimDX are very good for graphics. XNA being higher level, and having done some things for you. However, this does come with a Windows-only restriction, without Mono.
Could always do some java based games, nothing wrong with those (http://zetcode.com/tutorials/javagamestutorial/)