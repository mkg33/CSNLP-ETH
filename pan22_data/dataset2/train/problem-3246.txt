I think enumerating all the combinations is short enough to be the easiest-to-read way of doing this.
It is easy to handle this case specifically. (!a || !b || !c) will be false only if all three values are true. This leads to my final solution, which follows:
This feels like a fun time to use the XOR operator. If you're not familiar with it, it's basically the "either or" operator. It returns true if-and-only-if exactly one of the two operands is true.
You can use filter on an array of arguments to filter out false ones and then count the remaining true arguments. Added the !(... - 1) so it will return true only if length == 1 (because using == was prohibited).
The return value will be number in range [0,a.length): 0 when no truthy arguments and a.length when all of them are.
This is similar to the the Array.filter solution already posted, but can expand to any number of arguments which I thought made it unique enough to add.
Here is some generic one, that uses new (at least to me) spread syntax. It is not that efficient but it works nicely with any number of arguments:
JavaScript does not have a logical xor operator but it does have a bitwise xor operator: ^. It also has other bitwise operators that you can read more about on the MDN Reference page. If we coerce our truthy and falsy values into true and false, we can utilize the bitwise operators. We can perform this coercion by prepending a value with !! (if we want to retain its truthiness) or !! (if we are okay with negating the value). 
The spread operator ...a will put all provided arguments to array a. We can use reduce method to count truthy entries:
As you can see, the only case this does not handle is when all three are true. This is because the xor of the first two will return false and then the xor of false with the third one's value will return true.
I started with !a ^ !b ^ !!c, which covers all but one case (all true) on its own. I wrapped it in parentheses and prepended !! to ensure the resulting value was a boolean rather than 1 or 0. Note that I'm using 200_Success's tests in the following code: