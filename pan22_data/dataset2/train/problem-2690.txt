Above all else, polish everything you make, no matter how small or what kind of project you have.  If programming is about robustness and usability, then designing is about fun (people often forget this) and showing that you can really nail the details.
Now I am moving on to DirectX and purchased a book titled "Programming an RTS Game in DirectX" by Carl Granberg. It has fantastic reviews. I'm still not sure if I made a bad decision with DirectX over OpenGL, but we'll see.
I was in a similar position as you though, and decided to "start over" so to speak with C++, and 2 weeks ago I purchased "Beginning C++ through Game Programming."  It is NOT a game programming book, but a C++ beginner book that covers everything you will need to know in C++ when programming games with another API or Library, and substitutes boring projects with more game-related ones. It was a great read.
Is this the case? Or can I continue to hone my C# skills using XNA and WPF for personal projects that can elevate me into such a career?  
For designers and artists, the portfolio is arguably even more important, since you can't take programming tests or have straightforward tech interviews.  So, I'm not saying that you should freak out and learn everything there is to know about C++.
While I don't expect a game designer/programmer is an attainable goal early on in my career, This is a goal I will reach later on in my career.
With this in mind, I feel that ignoring C++ and game design tools associated with it are eventually going to hurt me or slow me down in my ability to reach my goal.
Learning more languages will only be to your advantage.  Even if nearly all pro engines use--or should use--scripting and/or extensive tools for designer ease-of-use, you're correct in that it helps greatly to have a project that you have specifically worked on.  Even if your interviewer doesn't pay attention to your projects (which is already unlikely,) working on even one personal project will be a huge learning experience.
Rather, you should be able to show a few games that have good design potential (think small, clear game concepts like Limbo or Portal,) whether you developed them yourself or you made them using Flash.  Use coding as a tool, not as your primary weapon.  Make sure they're easily accessible on your site with gameplay videos, screenshots, and available downloads.