You don't even have to have the public key (just know it's ID).  Assuming that someone wasn't purposefully hiding the keys used to encrypt a file/message, then you can use the list-packets command to do what you are asking.
Now, consider another person received test.txt.gpg the the pub key test@example.com, how to perform a check to make sure the file is really encrypted using the pub key?
But, unless someone is purposefully hiding decryption keys from the listing in the message header, you can see what all PGP keys can be used to decrypt a message without having access to either the public or private key for any of them.
Bonus points if you do have the public key because then the --list-packets command will also tell you the friendly name for each of those packets in the message header.  (And you get to use the public key you already had around).
Notice the three different Key IDs listed.  Yup, you guessed it, each of those keys can be used to decrypt this particular message.
Some behavior has changed in newer versions of gpg (I'm testing on gpg v2.2.4). It prompts you for the passphrase when doing --list-packets. And now by default, -k doesn't show the key IDs anymore, only the 40-char fingerprints.
I actually use this far more that I'd like to admit, normally when folks at my company are exchanging PGP-ed messages and suddenly someone can't open one.  They always blame the software implementation.  So far, every single time, it has been that a message was drafted, encrypted, and after encryption a new recipient was added to the TO list.  I can copy out the cypher-text to a crypto-text.pgp file (like in my example) and see exactly who the message was encrypted out to; showing them that tends to stop the "your software plugin is broken" game firmly in its tracks.
That will show you a listing of each of the decryption packets that are listed in the PGP-ed message/file header.  There are ways to encrypt to a key and hide that key from this list, but using the normal commands (like the one in your example) will result in all of the decrypt keys being listed, something like this.