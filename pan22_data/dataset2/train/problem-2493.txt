Rather than a self-signed cert I'd create a local root CA and then generate the SSL cert from that, ensuring that all internal systems have a copy of the root CA'sl public key.
Having a single root CA for your organisation is a lot better than being held to ransom by the recognised CAs who'll charge you for each and every server you want a certificate for, and dare to charge you a "license fee" if you want to put the same cert on multiple servers in a load-balanced cluster.
The problem with a self-signed cert is the clients will generally spew warnings about it being unverified. Depending on security settings, some may block it altogether.
We have a webservice that our application uses and the developers require https connections to the webservice.  Since this is an internal webservice would you use a self signed cert?
For the low price of starter certs, like rapidssl, I would probably purchase one of these, at least if you only need a minimal amount of them. I feel its worth the small fee to stop users being asked to accept the untrusted self signed cert, as it always causes some issues with non-technical users.
Keys generated this way have plenty of uses outside of plain HTTPS, they can also be used for OpenVPN, POP3S, SMTPS, etc, even for individual SMIME accounts.