One thing that jumped out at me: Mick was indicting classes...but he wasn't really presenting good evidence.  He said that their team started with bad code, wrote good code, and solved their problems.  That could just as easily have been "we had a terrible entity management system, and we replaced it with a good class hierarchy, and things improved."  My point is that bad code is bad, good code is good, and any architecture can occupy either role.
By relying on Hitpoints to do too much, you've run into problems.  They are at the core of your AI's targeting.  Depending on their value, they fire an event.  That event affects your user interface.  You user interface affects your rendering, which checks Hitpoints again to see how to draw.  You've got spaghetti.
I like your Targetable component, I think that's a step in the right direction.  But you probably also need Selectable, Dying, Render...everything as a true single-purpose component.  It will be challenging to maintain that stricture when those systems need to talk to each other (and real-world compromise is unavoidable, says Mick), but the alternative is to lose all that your entity system promised to give you.
I've read up a little bit since our conversation last night, because I was (still am) woefully inexperienced with this particular game architecture.  One article I read was Mick West's preeminent talk/case study about using a component-only system.  In it, he describes an effort to get rid of a badly written class hierarchy and instead use an entity manager.
What happening is that, in spite of using a component-only system, you still have brittle interdependent systems.  You don't have encapsulation.  You can't add new features to objects without breaking manager systems.  You have to add redundant code to (ID value-only) entities, just to keep unrelated functions working.  Which, according to Mick, is the original problem you were trying to avoid:
I think the problem with your system is that it doesn't achieve the goals that Mick needed: encapsulation, no tight coupling, simple components that can be added freely.  