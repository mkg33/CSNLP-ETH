in a word - Docker! - this is what Docker was made for and it is the most active open source project on the internet at the moment - it will be supported in Windows Server 2016, has many 'day 2' design considerations and is supported by kubernettes, AWS, OpenStack Magnum, Azure, Stackato, Cloud Foundry, IBM blue Mix, Messos and Docker Swarm
check out Docker Hub and explore, deploy and pass around entire distributed systems as if they were binaries - have dev, production and sandbox all at the very same level, implement a desired state configuration and let kubernettes or messo scale, load balance and version you applications. Docker is so good it's threatening Cloud 
However, I was wondering how to approach some of the management services/servers that sit around the application server estate from an immutable perspective. I can appreciate how the likes of AWS RDS take away some of the complications of maintaining the data tier from an immutable perspective, but how you would approach some of the other 'less stateless' servers/services that typically make up a solution? I'm thinking of things like the CI server e.g. Jenkins, Directory Services, Monitoring/Logging Services, etc. I suppose I could look to engage 3rd party services for some of these things, like the approach with AWS RDS, but what other approaches exit? What alternative approaches are there to maintain these servers and services without deviating widely from the immutable server deployment approach?
I'm working on a cloud based solution architecture at the moment and want to take the approach of using an immutable server infrastructure (creating and then deploying new AMIs when updating software, OS, etc). There's plenty of good reading and presentations out there in terms of the approach and the various tooling to use, and I'm aware of the virtues of stateless web/application servers and using the likes of AWS RDS to take away some of the headaches in managing the data tier.