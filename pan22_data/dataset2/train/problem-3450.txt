Msofficesvn is a Microsoft Office plug-in that gives access to Tortoise SVN inside Office applications. OfficeSVN
I would suggest a document management system over a revision control system for "binary" documents.  Revision control works best for text files like source code but you loose a lot of the features when dealing with binary types.
SVN has a GUI front-end with good Windows integration: Tortoise SVN. Many of my colleagues swear by it.
I'm trying to find a good open-source/freeware document control solution for all of our engineering-related documentation. Most files are in the format of .docx, .xlsx, .pdf, or .dwg (CAD).
(Note that I have no experience of teaching nontechnical people to use version control — I'm interpolating from observed behavior with “manual” versioning, where documents are sent by mail to a person who is supposed to merge changes.)
Is Subversion adaptable to my purposes of doc control as opposed to code control? Would it also be sufficient to produce reports of documents in the system with corresponding revision numbers?
Code files are simple text files. .docx and .dwg files are "little less" userfriendly ) so you need plugins for such files. In case of msword files there is a plugin xdocdiff. 
With those tools, SVN is usable without requiring a command line. Administering the repository might require basic command line competence.
A workflow where people take a lock before working on a document is a lot more constraining, but can save headaches if they can't be taught not to panic when a conflict happens.
A document management system that provides pure archiving without exposing conflicts will be easier to use. But that's because it hides the difficulties under the rug: instead of confronting users with conflicts, it silently loses data when a conflict occurs.
I work for a small company in the Mechanical Engineering sector. Nobody here knows a thing about coding or databasing except for myself, and I know little more than basic SQL, some C#, some VBA.
SVN does require some user training, but that has nothing to do with programming. Mainly, you have to get people into the habit of 1: update, 2: work, 3: commit; and you have to train them to perform merges.