You could encrypt files with keys and passwords. But it would require the system having access to the encryption keys when required, which in turn means that root would also have access and that they could be attacked with brute force. Unencrypted files would be present in memory or disk for the period of time that they were used, and you guessed it, root can see those too.
You really can't do anything about securing screen and irssi. Root will always have permissions to force the attachment of screen sessions, to sniff IRC traffic from the network or potentially to peek into the contents of process memory.
That said, what you describe is possible using an OS that uses mandatory access control. Examples would be Trusted Solaris, or SELinux. On these systems, you can restrict even the rights of root/SysAdmin to the point that scenarios like yours become possible.
Create a virtual machine with OS of your choice, preferably with encrypted filesystem, and place your secret files there. If possible, set up a token-based or biometric authorization instead of, or in addition to, username/password
On a regular Linux (or Windows, or most other OSes) this is not possible. As the other answers point out, root / System administrator can by definition do everything on the box, and can circumvent any protection you set up (even in a way that you cannot detect).
Large enterprise systems are by default protected even from the possible root hacks by the access control systems such as RBAC or some variant of MAC. Sleske's comment supports this statement. Check Wiki for more details. However, if you are user on the smaller or medium size system you must that must have "all-mighty but not trusted" root account you have to develop "double-books" system based on the autonomous virtual machine in charge of the user session and another virtual machine in charge of the root's server session. 
Thinking about it logically - without touching on any specific technologies - if it's not your machine and you don't trust root then you have a problem.
It is still fairly tricky to set up though, and will probably cause significantly more work in configuration and use. So practically speaking, it's not possible.
Is there a way to add another layer of protection to avoid that, perhaps by encrypting them, but allowing smooth on-the-fly decrypting when programs run by me request them?