This question is old, but I wandered across it looking for something else, and wanted to add an alternate answer for consideration.
The second method of course does not work with packages, but you would avoid the --noop and state.yaml problems.
Regarding the third question, yes, you can use pipe and redirects (use an title and put the command in the command attribute):
While we're here for Puppet, and the problem is solvable with puppet, I worry that it's leveraging a weak part of a tool to badly respond to a condition that's much easier to trigger on with a tool that's already on the host and a tool into which most admins on the box should have dipped their toe. Sorry to suggest a solution outside the lines, but if you're wandering across this message in the future like I did, and the RPM trigger is an option for you, please do consider it.
A more reliable method is just to duplicate the file elsewhere and use it to trigger updates (the location isn't important we are just tracking the original tzinfo as source).
Use the audit attribute to track the file content or package version number and trigger the change by subscribing to the package resource. A few issues with this, this does not work with --noop because the state.yaml file will update the file md5 checksum/package version in --noop mode. I'm not sure if this is a pending bug since I can't track it down at the moment. 
Building the trigger RPM is verrry simple, and while it's no fun to learn, once the first one is done it can be repeated for other apps and conditions very easily too -- thus, costs is non-zero but benefits quickly and vastly outweigh those costs.
It doesn't use puppet:  Since we're wanting to trigger on an RPM install/update why not use an RPM trigger?  It leverages the very system used to do the install, extending it properly in a manner for which it was designed.