I have only looked into the basics, at least I assume it gets more complex. So does network code really change from one game to the next or is it pretty much portable. For example I can create say a 2 person chat app, now if you want to make it multi-chat you then need to use mutli-threading, ie a new thread for every connection(load a new Winsock object for each connection). I am also reading about mutex ojects, blocking and non-blocking sockets.
In terms of synchronisation strategies, there are four main approaches to keeping each client's view of the world in synch:  
Another issue is what kind of tools are necessary for moderators. Are moderators needed? If so what tools do we provide them with?
So there's no one universally right choice for how game networking works.  You need to pick what sort of system architecture (or architectures) are most appropriate for each individual game, bearing in mind the hardware and networks on which the game will be being played.
You then have 2 base networking API's, Winsock and BSD sockets, there are various wrappers for these such as Boost.
More importantly, is the system scalable? If the game is going to be player by a handful of users at the same time, it may not be an issue. Other times dozens or hundreds of players play together so the question becomes more prominent.
I cannot think of all the reasons but there are differences in networking code, just like there will be differences in rendering code or in the code that handles user input. In theory we could have come up with a generic interface but it may not be suitable for every user (game developer).
The principle is that you then send a snapshot of all the gamestate data back and forth between client and server and have some kind of load balancing to take into account lag and general synchronicity.
There are also a few methods of coping with latency.  Especially on the Internet, you can often have 300 milliseconds of latency, and there are a couple different ways to cope with that.  Different approaches are appropriate for different types of games.  Here are a few:
Is there a logging system in place to allow further debugging or studying in case of errors, cheating and other unwanted occurrences? What do we log?
Does the game have physics? If so, are physics being checked on the server securely? How is lag handled? What is the behaviour on the client-side when the round trip times increases?
I can't see how this would really change from game to game though, these are fairly linear principles and one set of networking code should be compatible with the next?
Each of these approaches requires a different strategy for managing bandwidth, detecting joins/parts, for synchronising game clocks, and for handling other network events.