I would strong suggest using something like Amazon EC2 or Rackspace Cloud.  Create a basic image that contains ffmpeg, and an interface that allows ffmpeg to be called remotely from your app.  Create some instances of that image and make sure that, using the cloud provider of choice, you are able to create and destroy instances of that image to match the load.  Your app should then delegate all ffmpeg tasks to your cloud servers and control the number of cloud servers that are up based on the number of ffmpeg jobs it needs to process synchronously.  This will keep what I perceive as a bottleneck in your app, video transcoding/etc, separate from your app and able to scale at will.
ffmpeg is very CPU bound, not just memory. The app will hardly be any faster because the box has more RAM - more instances means each runs slower and has less CPU to use.
At the risk of sounding like a marketing droid from a cloud computing company, this is what cloud computing is meant for.  
Go for primarily CPU with enough RAM to not start swapping before you max out utilization on all CPUs.
I think you could probably do some things to improve the memory usage, but when it is all said and done you will most likely have come out better by buying some more memory.  I'm sure I will get voted down for this answer, but I'm just thinking about the economics of fixing this problem.