Your worst case memory usage is largely contingent on the sum of these two values; per-session buffers typically don't have as much memory overhead and cause scripts like mysqltuner to give extremely unreasonable maximum memory usage estimates to the point that they are largely worthless to look at.
For more information about what each parameter does, you can reference the MySQL documentation available online. Here is a link to the MySQL documentation for MySQL server 5.1: http://dev.mysql.com/doc/refman/5.1/en/server-system-variables.html
Have you enabled any form of query logging (e.g. the slow query log in MySQL as well as capturing any queries from within your web app)? Perhaps they could be optimized to improve performance. 
There is an online MySQL memory usage calculator at http://www.mysqlcalculator.com/. By comparing the starting point files and using the memory usage calculator you should be able to adjust your my.cnf configuration file to accomodate your server's memory constraints.
If MySQL is utilizing most of your memory, from here you should consider tuning the variables listed above as well as resetting the following to their default values if you made the mistake of changing them:
Keep in mind that if you lower the allowed memory usage of MySQL you will be increasing I/O utilization.
There's little or no usage of this particular database (perhaps once or twice a day) but simply running mysql grinds the whole server to a halt. I've looked through the top results but nothing is really denting the CPU however the memory seems to be the issue.
MySQL should include a number of starting point configuration files for my.cnf that can adjust the memory usage. The files are named my-small.cnf, my-medium.cnf, my-large.cnf, and my-huge.cnf.
My first thought was: do you do a full table scan? and if yes, is this necessary? In most cases an index would help to at first improve performance of the database and at second the mysql database wouldn't need to load the whole database into memory, only the needed rows.
Your server is probably grinding to a halt because it is at near full memory consumption before MySQL is running and starting MySQL pushes you into utilizing swap space. The SHOW STATUS output doesn't help much (use SHOW GLOBAL STATUS; and SHOW GLOBAL VARIABLES; next time), but it at least shows that your innodb_buffer_pool_size isn't large and you've left most values at default. Therefore, I doubt you have MySQL configured in a way that will exhaust most of your memory.
Running the mysqltuner.pl script mentioned by GloMac as well as the tuning-primer.sh script will also help point out configuration issues.