Scaling your application over multiple servers (for performance, high availability, geographical locality, or some combination of the above) is not as simple a task as it might first seem.
What you describe there, from a database point of view, is a "master-master" replication scheme (see here for some notes on that which would probably means you need SQL Enterprise Edition (one license for each server) which isn't cheap - you will not be able to do this with Express Edition and probably not with Standard either. You could try implement this in your app logic, but this would be a complex can of worms. If the two servers are on the same vlan in the DC then you could have both servers access the same master DB in requests when they need to write anything but then read from their individual DBs for read-only requests - this can be dine with master-slave replication which is an easier (and potentially cheaper) prospect. Essentially: farming a SQL database to many machines is much harder than farming the web servers that access the database.
The easiest way to pass requests to two different web servers (if, as in the situation describe where all the HTTP(S) requests are carry all the state they need rather than some being held in a server-side "session", you don't need anything like "sticky sessions") is to use round-robin DNS by having multiple A records for the relevant name. See here. This does not account for one of the servers being down though so is not a solution for high availability and you have little control over the balance (you can't decide which machine gets the hits so you can reduce the hits on one server when it is already busy). For HA and controlled balancing, you need an extra machine that all the requests go through and have it decide which real web server gets the hit.