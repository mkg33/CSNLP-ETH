One approach to facilitate a different code base for each target SQL version is with separate source control branches. Another method would be composite projects, with the SQL version specific code in separate projects. All of these add complexity the development, build, testing, and deployment processes so I suggest you stick to common features except in cases where the newer feature adds significant business value. 
As per MSDN BOL Here In general, DAC tools are capable of reading DACPAC files generated by DAC tools from previous SQL Server versions, and can also deploy DACPACâ€™s to previous versions of SQL Server. However, DAC tools from earlier versions cannot read DACPAC files generated by DAC tools from later versions. Specifically:
The dacpac target platform SQL Server version is determined at build time so newer features cannot be used unless you manage and deploy those with custom code. You can deploy a dacpac built for an older SQL Server version to a newer one but not visa-versa. This assumes you include the latest DacFx version included in your setup program.