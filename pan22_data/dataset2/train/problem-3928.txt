Another option would be to set up a custom file type that translates tabs into spaces delimited by some special character.  You can set up autocommands to fire an import (ie convert to delimited columns) routine on read and an export routine (to convert back to tab-delimitation) on write, so it ends up working more or less transparently.
There is a dev-list patch for Vim that is said to implement variable tab stops.  It's indicated{1} as being in beta stage.
Also I'm assuming familiarity with c-style backquoting: in the first part of the example, "\t" represents a tab character; the \x and \u sequences are hex and unicode character representations.
File a feature request. VIM needs an option to display varying tab stops like is common in every word processor. So many people use vim as a word processor, I'm surprised this isn't already in there. I'm proposing that tabstop be modified to accept an array in place of an integer.
It might be better to instead pad with characters that look like spaces{2} but aren't, like '\xa0' or '\u2002'; again this would only work correctly if the padding character wasn't present in the file, or you're having the import routine escape those that are.
I think you may be able to accomplish what you want using the Align plugin.  (Apologies if you've already tried it.)
I hate that my only good way of editing or even visualizing tabular data is to scp it to my work station and open it in Open Office. There has to be a better way.
How about changing to spaces instead of tabs, and just using R (instead of i) to do your edits?  That way you won't re-align anything (except for at first when you re-space everything).
I regularly view or edit tab (or comma, but that would be a bonus) delimited data. I hate having to set my tabstop to some ridiculous number in order to have everything line up. Example: The BIND zone files are ~40+,6,2,5,15+. So, even though I could view them on a single screen, if I set ts=40, I cannot. I have been searching for a "dynamic tab size" solution for years, but no luck.
I'm usually a purist when it comes to vimming. I don't like remapping keys, or learning to rely on a bunch of plugins. I like to feel just as powerful on foreign boxen as I do on my own dev box. I do, however, believe in syntax files. Even though the solution may not be a syntax file (bindzone.vim is what I use), I want it bad enough to do whatever.
This is more or less off the top of my head; there may well be a vimscript package that implements this.  If not, it wouldn't be that hard to write.  You just have to make sure that the column-delimiting characters —here "»" and "«"— aren't actually used in the file.  For a bind config file, I would think that anything non-ASCII would be safe.  For improved robustness I guess you could give vim a few options, and have it scan the file to find a set that wasn't present in the file, or just escape any of those characters that are.