Getting source code from .class files java is easy but it is difficult to get code from .exe files.Use this http://www.hiew.ru/ to disassemble .exe files but this generated code will not be same as original as it misses many lines that are ignored by the compiler which makes it hard to read.
The technical side:  Yes, it is possible to decompile the code... sort of.  What you'll get back will not be the original source code and it may not even resemble the original source code all that closely unless the executable was compiled with full debugging symbols enabled.  Final production builds often have debugging symbols disabled, however, in order to keep the executable as small as possible and to avoid giving any more than the bare minimum of information to anyone who examines the executable.
Also is it ethical to do such a thing,considering the executable is just a small file which is not copy-righted?
The legal side: Under the Digital Millennium Copyright Act, attempting to decompile or reverse-engineer any software which the copyright holder has attempted to protect against this.  As interpreted by courts thus far, it doesn't matter how ridiculously feeble the attempt might be, it's still illegal.  Even if there are no technological measures in place to protect the code, there is likely to be a license agreement stating that you are not allowed to decompile or reverse-engineer the executable.
I have seen my friend retrieving the source-code file from a java '*.class' file.He used some kind of a software for it.
I don't see anything wrong ethically for decompiling the code for your own amusement or education but if you have malicious intent such as decompiling commercial software to change the copyright message to your own or to seek out a vulnerability for malicious exploitation then this could be considered unethical. 
You may find that the developer has gone to some lengths to prevent decompilation by creating a loader that unpacks the software into memory or has code explicitly to confuse decompilers. This is all part of the fun.
When decompiling software, the more Assembly language you know, the better as you may have to examine the high level code from the low level assembly if the decompiler becomes confused or if some of the code was actually written in Assembly language. 
If the application is written in one of the .NET languages (VB/C#), you can use Red Gate's Reflector reflector.red-gate.com to disassemble the application into corresponding source files.  Not every application is written in managed languages like this though, and decompiling a C++ application, or one written in Delphi or another non-managed language is not nearly as easy, and all you can really get are hex dumps, which are very difficult to then reconstruct into an actual application.
Yes it is possible to decompile .exes using tools like The dcc Decompiler. This will produce good results if the original program was written in C. If it was written in another language then you may have to try another tool that is suitable for that language. 
As a general rule, I tend to consider these things to be entirely ethical, so long as you're not doing them with the intention of harming anyone else, but the law tends to disagree.
Decompiling is an excellent way of studying how programs work at the lowest level. You will also find that in many cases the decompiled program will compile back into the exe but the symbols used to describe the variables are totally meaningless. You may have to do detective work to actually understand what the code means and does.