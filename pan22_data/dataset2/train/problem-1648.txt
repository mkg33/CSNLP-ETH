Also, you probably want to enable SYN cookies, so that if the DoS is sending SYN packets it has very little impact on your system.
Over at the ISC SANS Diary entry for this topic, there is a very strong clue in one of the comments.
Here is a tool that can mitigate some DDOS attacks by limiting the number of connections per IP on Linux servers http://www.ddosattack.info
To limit traffic by source IP, based on what @sysadmin1138 says, there's a great iptables module called "hashlimit".  Here's an example set of rules:
There's ddos mitigation devices such as toplayer that you can buy and DDoS mitigation managed services such as the one Prolexic offer.
The second attack type is the most vicious, because a single bot could conceivably bring down a server. For instance, MySQL's LIMIT N OFFSET M is notoriously slow when M becomes large, so a simple attack would be to request pages 200-300 out of 500 in quick succession, clogging all the MySQL worker threads. On an unprotected server, this can be done with firebug. The only solution is to identify costly operations and then either optimize the hell out of them, make them sequential (so that clogging that part of the site does not bring down the rest of the site), or detect IPs that ask for costly operations and refuse to perform that operation unless a certain wait interval is respected.
Fundamentally, such denial of service attacks involve sending the server more requests than it can handle. It can be a large number of bots sending simple requests (though it does not require billions to bring down a single server - a few thousand tops) or a handful of bots sending requests that are notoriously long to execute.
Though usually you want to whitelist some IPs, so you probably want to create a table and jump to that if it's port 80, then have your whitelist rules in there, and a final drop.  That way non-HTTP packets don't check those whitelist rules and you could have several services all call that whitelist ruleset.
The first attack type is harder to pull off, because you need many bots. On the other hand, it's also harder to stop from the server: if you have thousands of bots sending you data as fast as they can, your bandwidth will be eaten up by the flood and there's nothing the server can do about it (even if it flat out refuses 99% of those requests), so a router with flood prevention is a good bet if you think you might be a target.
As Rory previously pointed out, it is very difficult to mitigate against a deluge of seemingly legitimate requests without help from upstream providers and often your tier 2 or 3 isp will need to help from their providers. A coordinated effort between yourselves and you ISP and their upstream provider, not withstanding a lot of capital investment is required to effectively mitigate a serious attack.
Traffic floods are also but one vector of attack and require a decent botnet to pull off effectively. SYN flood attacks only need to come from a handful of hosts and can quickly cripple your front end servers however you are able to do something about these by ensuring your tcp stack is hardened, look at security application modules for your web servers and ensure such filters are enabled at your perimeter network kit.
What this does is allows up to 500 packets (not connections, because HTTP can do multiple transactions per connection you have to consider whether you want to do this on all packets or SYN packets only).  If there are more than 500/min, it will then throttle it down to 50/min until the rate drops.  Anything outside of these limits get the DROP.