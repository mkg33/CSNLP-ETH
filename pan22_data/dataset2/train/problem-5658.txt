I'm still rookie about libgdx and I currently started to port my android game to iOS via libgdx. In the android version I have drawable folders (assets) for different screen densities and resolutions and the loading of the proper ones works automatically (android knows which folder to access based on the device specs). 
What I read everywhere for libgdx is that people use Viewports and Camera to handle different resolutions. This maybe a good case for most games, but it seems like overhead to implement for my game which fits entirely on the device screen (it's a card game).
After this, you load the texture of size "size". The example above is for when you need about 10 sprites to fit the screen. You should choose font size similarly. You also want to make sure the textures are antialiased.
For my NoThree puzzle game (see profile for link), I drew my graphics in Inkscape and I exported several resolutions (144x144, 72x72, 48x48) for each texture (the font is also packed in several sizes).
In the resize() method, I calculate the actual sizes and positions of all graphic elements. Here's an example:
4) a nice consequence of not using Viewport and Camera and doing things directly with screen pixel coordinates is that all libgdx event coordinates (touch, mouse, etc.) can be used directly to tell what object is clicked and there is no need to unproject, project and translate coordinates in any way. This seems like a benefit as it's more simple to think about positions, because there are no separate coordinate systems to switch between, and constantly keep converting and imagining in your mind what should happen and when it will happen on screen.
I decided to give up Viewport and Camera and try to implement the android scheme with direct batch drawing on the screen. So what I currently try to do is this:
Unfortunately, there is no magic: the only good way is to implement resolution independence yourself. While libgdx may be of some help, it's not going to solve your every problem.
On the web, most data are about LibGDX < 1.0.0 and is totally irrelevant. The few things I have found talks about the Viewport classes, but it is poorly explained ; the game is either horribly stretch or way too small on high-definition devices.
At this point, I have understood that I need to define a "virtual screen" of some unit (lets say meters) and then place my elements based on this unit. But there is no fragment of clue on how to do that the right way in LibGDX ; when using Scene2D, for example, buttons are totally misshaped, with letters out of the box, buttons clearly overstretched and such, or ultra small based on the Viewport class used.
I realise that this is super simple solution that may not prove viable in the future. However for the moment while I still learn about the framework, I decided to give it a try and see if it may prove worthy for my game. 
In render(), I would then simply call gameBoard.draw(). The gameBoard itself is an Actor that renders/keeps track of the game world.
2) when game is starting make a simple check for these resolutions (if,else,switch) and manually load the corresponding textures
I am developping a Android smartphone game in LibGDX, and I am encountering issues about resolution managing. Most notably, I have no clue how to handle that in LibGDX.  For now, I am developping based on my Nexus 5 screen, but it will certainly not (down)scale well to devices with lower density screens.
3) directly draw things on screen with batch and calucalations based on the real pixel dimensions of the textures and the real pixel dimensions of the screen. For example, if I want to center an image on screen I will calculate it's coordinates like this:
You need to set a OrthographicCamera passing width and height of your screen, If you want pixel-perfect manipulation, pass the screen resolution, but for your problem you could just pass a size in 'meters'
What I want to know is : is there somewhere some good, updated to recent libGDX, demos, examples or tutorial to the proper way to handle resolution, screen ratio and such in recent libGDX ? The libGDX viewport example, while a good start, are still unclear to me, and don't show the multiple asset size thing.
1) have 4 folders with different quality assets: mdpi, hdpi, xhdpi, xxhdpi. I borrowed the names from android.
To summarise, load textures of appropriate size (depending on the size of the screen and how many elements you need to fit on that screen), in resize() recompute the actual positions/sizes of the graphic elements and in render simply call their draw method.
The code and explanation and the explanation is oversimplified due my own limitations, but I hope it can be somewhat useful
In the same way, using multiple asset size is not clear ; how to load them based on pixel density, how to force them to be there at the good size ? Etc... This stuff can make anyone crazy at start.