Why void? The method would be more useful if it returned the value rather than printing it, and throw an exception if the input was invalid rather than printing an error message.
What this may mean is that you will organize your code into many methods, some of which are small and quite singular in purpose.  I see an opportunity for such a method here.  I found the while loop confusing.  In order to find a square root, it seems that you may need a squaring method.  In your odd case, the squaring method may only use addition or subtraction.
i and j as loop variables are fairly conventional, but what does k mean? It's not a loop variable. A comment indicating that after the inner loop k = S - i * i would help, and might suggest a name like surplus.
Finally, on scope, by pulling k out of the loop you should be able to figure out a way to update its value without using an inner loop...
This is a type of question I usually avoid because I see little educational value in it.  If I were teaching beginners C#, I wouldn't devise such an awkward example where you can't smartly use the framework's Math.Sqrt or even operations such as multiplication or division.
Note I carefully avoid Math.Abs since it may not be allowed.  Furthermore, there is an edge case where int.MinValue will not return an Int32 for its absolute value.  I coded around that and used the unary negation.  
Again, for the record I don't find such exercises practical or educational.  Others may feel the same way, which could explain the lack of answers.
Here at CR, we place a premium on readable code.  Other than loop variables, one letter variables are generally frowned upon.  Write the code as if it were to be strange to you if you revisit it in 6 months.  Better yet, think of someone else picking up your code in 6 months and trying to understand what it does.
So there you have 3 different variations to produce a square by addition.  And note that the method name is clear about what it does SquareByAddition.
If I were devising an exercise for beginners, I would ask them to find the integer square root of an input integer because there may not be an answer.  Beginners are more comfortable with exact results, so I would have them check if the input integer is a square of an another integer.
You should also consider edge cases.  For instance, you have no check that S cannot be negative.  For a squaring method, there's also cases to consider when an Int32 is squared it may produce a value larger than Int32.  Since a number squared cannot be negative, and its larger than a Int32, I will have my method output a UInt64.
But your example doesn't want that.  A short method to find the root, if any, for a number follows.  It checks that the input is not negative, and reads much better with the SquareByAddition method:
Performance-wise, a ulong as the index variable can perform slower than an int.  A quick change can make it: