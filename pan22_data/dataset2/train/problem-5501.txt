If the language allows it, I would cast/convert result into a Boolean to make it more clear, because implicit conversions can cause not only surprises, but also nasty unexpected bugs.
I find it interesting you had to explain it so much.  I imagine if this were real code you may have to attach a similar code comment.
Any compiler worth its salt will optimize out the working variable and emit exactly the same executable code, so the increased readability costs you nothing.
At my first glance at what you wrote, I was misunderstanding the precedence and thinking that you were evaluating the truthiness of println result (which is a void method so would always be "falsy").  With the parens in place, I think it's obvious that you're coercing the result into it's truthiness value and the rest is self documenting.
Personally I prefer to write code that requires no comments, if possible, and no explanation, by using well-crafted symbols.  So for example if you wrote it as
...you wouldn't have to explain that a exit code of 0 indicates success, and it wouldn't require a second glance to figure out the reversed ternary expression.
I think it's common knowledge in groovy, and it's idiomatic, to rely on the "truthiness" of non-boolean values.  The only change that I'd suggest to what you have is to put the explicit parens in for the println, so:
... and your groovy code has that reversed, which is confusing, if not a bug (I don't know how Groovy implicitly converts integers into Booleans).
Bottom line, write code as if the next person reading it was a dangerous psychopath that knows where you live - and that person might be your future self!