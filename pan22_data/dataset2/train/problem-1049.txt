Be aware that the script as it is will not be able to convert remotes that were created using URL shorthands. For example, I have this in my global .gitconfig:
Parsing the config file is error-prone. A much better way to extract the information about remotes is using Git commands. This will simplify your script a great deal.
Since Janos has covered the functionality pretty well I will focus on semantics. Nothing in this answer will fundamentally improve the functionality of the code, but will result in a better user experience and will thus work towards making your code more acceptable to your reviewer.
This lets me clone a GitHub repo with git clone gh:user/repo instead of git clone git@github.com:user/repo. The config file will be written using the shorthand instead of the real URL, so your script will not be able to pick up the pattern.
Without parameter, exit will use the exit code of the previous command, and if that was echo, it's likely to be success,
Please spell check anything that might be visible to an end user. If I was an end user and saw 'existting' or 'exitting' instead of 'exiting' it would lead me, maybe incorrectly, to believe the author did not have good attention to detail. This in turn would potentially lead me to have less trust in the program to operate correctly.
But when the text transformations are simple enough, and Bash's parameter expansion can handle it, that's even better. For example, instead of this:
GITHUB_USERNAME having a hard coded value makes the code less portable. It is absolutely reasonable to have a default, but if you allow this to be overwritten by user input then it allows the same program to be used in a more flexible environment. Following from Janos' suggestion of passing the path as a parameter, the username could be passed as an optional second parameter. Such functionality would not affect users who do not need it.