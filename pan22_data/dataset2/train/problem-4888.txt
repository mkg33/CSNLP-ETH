Even if it's not currently necessary I am a big advocate of keeping the HTTPS enabled between any application level firewalls / load balancers / front end servers and the back end servers. It's one less attack surface. I've contracted with places that needed to convert over as more sensitive information began being passed - it's better to start there. 
I thought this would be a common question but I could not find an answer to it. Thanks. If this is a dupe please point me to the right answer.
Back in the day, people assumed that internal networks were safe as houses.  I once got into a dispute with a supervisor who was appalled that my internal-facing servers were running their built-in firewalls.  "If you can't trust your internal network, who can you trust?"  I pointed out that we had student laptops on our internal network, and that there was no firewall between the student laptops and my servers.  He, being new to academia, appeared to have his universe in tatters at this information.  
This is really more of an opinion question, but the answer is it depends. What are you trying to do? What kind of data are you encrypting? What threats are you trying to defend from? Do you have a legal requirement (e.g. PCI-DSS, HIPAA, etc.) that says you need to encrypt the data in transit? If the data is sensitive and you are concerned it could be misused when it is being transmitted inside your network then I would suggest getting together with management to fix the problem. So in the end, what are you trying to protect and why are you trying to protect it?
This really depends on what you are trying to accomplish. Understand the purpose of using HTTPS is to protect data in transit between two points. If you are concerned about the data being sniffed inside your network then maybe that should be taken care of first. If you need to protect the data in transit inside your network what you are saying is that you either have a concern about the security of data traversing your systems inside your network or there is some compliance related reason for you to encrypt the data in transit.
My Question ... Do the "lots of other servers" need to run over HTTPS or, given that they cannot be accessed externally, can they run over HTTP safely instead?
That said, yes, it depends on what information is being transmitted, any legal compliance issues, etc.  You might decide that you don't care if someone sniffs, say, weather data.  That said, it's possible that even if the data sent isn't sensitive now, someone might decide to add features to your application later that are sensitive, so I would recommend greater paranoia (including HTTPS). 
Behind the API server, there are lots of other servers. The API server reverse proxies to these servers. Ports for these other servers are not open to incoming traffic. They can only be talked to via the API server.
The only reason to disable encryption that I can think of is performance. However, in your case internal servers are interfaced via HTTP, meaning they already bear the performance cost of running a web server, supporting HTTP protocol and encoding data in HTTP/JSON/whatever. Disabling encryption will free perhaps 100KB of RAM and earn you a few microseconds per KB of transmitted data, which will have no visible impact on overall performance. On the other hand, you'll have to pay significantly more attention to security since you run HTTP in your intranet now. In fact, it's possible that more strict firewall configuration will slow things down more than disabling encryption have speeded them up, resulting in worse performance perceived by end users.
Internal networks are no longer considered that safe, even if you don't have student laptops on your network.  See Tom's answer for some examples.  
What I generally would suggest is using an internal CA (if available) or self sign (if no internal CA) the back end servers. We'd set the expiration date nice and far into the future to avoid unnecessary changes. 
It will be like putting a spoiler on a tractor: you gain next to nothing theoretically, and a lot of inconvenience practically.
I also have a backend API server that my webserver makes API requests to - this is public facing and requires authentication - port is open.