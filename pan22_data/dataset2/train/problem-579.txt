...and this is a very real limitation. For example: when you have multiple sessions trying to create nice fast MEMORY temp tables the single-threading can cause a serious performance bottleneck.
According to MySQL and MariaDB manuals, BLOB and CLOB (various TEXT types) are not supported by MEMORY storage. For our own purposes, this made the MEMORY storage engine almost useless.
MEMORY tables are not intended for persistent storage, particularly of large subsets of data or anything where retention is critical. Their best purpose from my experience is to house transient records during the creation and population of temporary tables during complex procedures, which performs significantly faster than most other table types for this purpose provided your key buffer threshold for the engine is set high enough not to incur a disk write. This can operate an order of magnitude faster than MyISAM or InnoDB for this purpose as there is no disk I/O, and in the case of a table that is encapsulated within a specific procedure, indexing and relations do not bear as much significance as they would where persistence is expected.
Also - do not underestimate the value of row-level locking and MVCC (readers don't block writers).  It may be "slower" when writes have to persist to disk.  But at least you won't be blocking during that write operation like you would be on a memory table (no MVCC; table level locking).
The other disadvantage of the MEMORY-based tables is that they can't be referred multiple times in the same query. At least that behaviour was found till the v5.4. How with CTEs (since v8.x) there is no need to use mem-based intermediate tables for complex procedures. 
When trying to convert only part of the database into MEMORY storage, I found that inter-storage engine foreign keys are not supported. So, all the tables, that should have foreign key references to the tables, containing BLOB/CLOB should also be in non-memory storage types (at least, this affects InnoDB child tables).
There are plenty of cases not to use the memory storage engine - and when InnoDB will be faster.  You just need to think about concurrency and not trivial single threaded tests.
If you have a large enough buffer pool, then InnoDB will become entirely memory resident for read operations as well.  Databases have caches.  They warm themselves up!
"MEMORY performance is constrained by contention resulting from single-thread execution and table lock overhead when processing updates. This limits scalability when load increases, particularly for statement mixes that include writes."