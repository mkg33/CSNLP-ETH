You can write your own driver and API, there is nothing to stop you but your ability and knowledge levels. If nothing else it would be a good learning experience, the real problem is that without having lots of previous graphic experience then even if you are a great programmer you will probably be at a loss at to what you need to do...or even to get started.
If you did in fact write a library that abstracts all common 3d graphics hardwares into a single API you would effectively have rewritten DirectX / OpenGl. If you were to use your code to write a game you would have added your new library as a new dependency, just like you now have DirectX / OpenGl as a dependency.
APIs like OpenGL or DirectX are partialy implemented by the operating system and partially implemented by the graphic driver itself.
The other answers answer your main question quite nicely: technically, it's possible, but in practice, if your goal is to broaden your customer base, you're actually doing the opposite. While wasting a huge amount of work on supporting the thousands of different hardware and OS configurations you need to support.
Yet the interface you make yourself will be easier to use and more stable for you than something updated behind your back constantly. So it is a little surprising to me that more people don't go this route, but the reality is few people have the technical acumen and no one wants to pay someone for years on end to learn how to do all this, then possibly have them leave the company and leave them in the lurch. The good thing to them about standardization is it makes employees much more expendable and reduces risks.
The problem with writing your own graphics api is that it is very complex. You could interface with the hardware directly, but there is no guarantee that if it works on a system with X CPU, X GPU, X amount of ram and X operating system it will work on a system with Y CPU, Y GPU, etc. One good point is that DirectX works with kernel-mode drivers. It is rooted into the kernel. Also, graphics apis aren't built to support GPUs. GPUs (and their drivers) are built to support them. So you pretty much can't build a graphics api unless you build your own OS and use x86 provided VGA interrupts. But you still wouldn't be able to properly interface with the GPU and you would be stuck at low resolution.
That means when you would want to create your own low-level API which makes use of the capabilities of modern GPUs, you essentially need to write an own graphic driver. Making sure that your driver works with all common graphic cards would be quite a challenge, especially because the vendors are often not very open with their specifications.
Getting rid of DirectX or OpenGl would not remove dependencies, it would introduce more of them. The other answers already contain several good points why it may not even be possible to talk to the graphics hardware directly (at least it's not feasible), but my first answer would be:
I understand that you want to build everything yourself and not use an engine or anything like that. But making your own graphics api would just create inconvenience for the user. 
However, that doesn't mean you have to be 100% dependent on one particular API. You can always code up your own abstraction layer, and then swap the more specific implementations (e.g. a DirectX implementation, an OpenGL implementation, ...) in and out.
Abstractions like OpenGl or DirectX allow the hardware manufacturers to provide code of their own (drivers) that lead to a common code base, so games are more likely to run on hardware that didn't even exist when the game was written.
Even then, it probably isn't worth it. Just pick something that works well enough for your purposes, and be done with it. You're an indie game maker - you need to keep yourself focused on the things that make the game, not on the minutae. Just make the game!
By using DirectX or OpenGl your dependencies are basically saying "This code depends on a library to provide the code that explains how to run certain commands on different graphics cards". If you went without such a library you would introduce the dependency of "This code depends on graphics hardware that behaves in exactly the same way as hardware that existed when I built the game."