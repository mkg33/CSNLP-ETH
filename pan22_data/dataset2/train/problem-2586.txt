A nice point here is that if you need for some reason to change the value of that constant, you will have to edit its definition only in one place. The rule here is not to hardcode magic values, but make named constants out of them.
And finally, you iterate items in order of decreasing ratio. On each iteration you will take item with maximum ratio. It will take O(n). 
getMaximumBenefit should return some simple data structure representing the result, not just print it on standard output.
Printing within an algorithm is a bad taste (unless debugging). Think about how much output you get in production whenever computing a large problem instance.
First, you need sort your items by ratio. If you take merge sort, for example, it will take O(n*log n). 
You expose the state of your algorithm to entire package. Also, your implementation is not thread-safe: if two threads call the getMaximumBenefit more or less simultaneously, they might interfere.
One way to circumvent this issue is to make sure that getMaximumBenefit  constructs an object holding the state of computation and manipulate only that object throughout the computation.