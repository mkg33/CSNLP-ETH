Beginning in 1982, Microsoft competed with VisiCalc, and later 1-2-3, with their Multiplan cross-platform spreadsheet. Later on, Lotus 1-2-3 was introduced in 1983 specifically for the IBM PC, and quickly overtook VisiCalc on it. To make the transition easier, it made sense for both to parse formulas in the same way that VisiCalc did. So the limited look-ahead behavior would be carried forward.
The lesson is, if you are unsure whether your environments is sane or not, include the parenthesis to be on the safe side. So write -(A1^2).
The second one says first do the negation on operand A1, and then use exponentiation on the result of that and 2.
The fewer special cases and less formula look-ahead is required, the simpler (and by consequence smaller) the code to parse a spreadsheet formula can be made. It would therefore make sense to require the user to be somewhat more explicit in corner cases, in exchange for being able to handle larger spreadsheets. Remember, even with a high-end Apple II, you only had a few tens of kilobytes to play with after the memory required by the application was accounted for. With a low-memory system (48 KiB RAM wasn't an uncommon configuration for a "serious" machine), the limit was even lower.
In 1985, Microsoft introduced Excel, originally for the Macintosh and beginning with version 2 in 1987 to the PC. Again, to make the transition easier, it made sense to carry forward the formula parsing behavior that people were already used to since by now almost a decade.
When IBM introduced their PC, a port of VisiCalc to the new architecture was made. Wikipedia refers to this port as "bug compatible", so you'd very much expect to see the exact same formula parsing behavior, even if the system technically was capable of more complex parsing.
Fast forward to 2019, and we're still stuck with the formula parsing behavior decisions originally made no later than 1978-1979.
As was said in the comments to the question, Powers have higher priority than minus signs in any sane environment. Which means, it is best if a system assumes the first one.
Other people have answered the "how can I avoid this?" part of the question. I am going to tell you why it happens.
This is not a problem with excel but with exponents and negatives. When you take a number and raise it to an even power, you cancel the negative sign. 
The expression - A1^2 contains two operators, namely the unary negation operator - and the binary exponentiation operator ^. With the absence of any parenthesis, there could be two interpretations. Either:
The first one says first do the exponentiation with operands A1 and 2, and then do the negation on that.
With each upgrade of Excel, the opportunity to change the behavior existed, but not only would it require users to learn a new way to type formulas, it would also risk breaking compatibility with spreadsheets used or created with the previous version. In a still very competitive market with several commercial companies competing with each other in each field, the decision was likely made to keep the behavior users were accustomed to.
The expression = - A1^2 + A1 is specific to Excel so must follow Excels rules. Contrary to some other answers here, there is no correct order of precedence. There are merely different conventions adopted by different applications. For your reference, the order of precedence used by excel is:
VisiCalc was introduced for the Apple II in 1979, two years before the initial release of the IBM PC (to which most modern desktop and laptop computers trace their direct ancestry). The Apple II could be had with up to 64 KiB (65,536 bytes) of RAM, and VisiCalc required at least 32 KiB to run. As a bit of an aside here, VisiCalc is rather widely considered to be the "killer application" for the Apple II, and perhaps indeed for personal microcomputers in general.