Absolutely not, cookies are an application level not OS-level feature. There is also no facility for a webpage to access cookies other than for their explicit domain in the current browser, in the same way there is no functionality for a webpage to access any files on a user's machine unless given explicit permission (eg. a file upload).
Plain HTTP cookies are specific to a browser. But there are other technologies that can achieve similar functionality as cookies. Techniques called "supercookie" or "zombie cookie" can be used to restore cookies after user deleted them. This often uses Flash or other plugin storage. Now if this storage can be shared across browsers, the mechanism will recreate cookies from one browser on the other. Another way is to get some machine identifier - if you can consistently obtain machine id, your webserver can recognize that browsers are installed on same machine, and synchronize cookies between them.
On Red Hat Enterprise Linux and siblings, SElinux is enabled by default. SElinux gives contexts to files and processes. This actually makes it possible to prevent a browser on the OS level from reading the cookies of another browser.
In short, a browser cookie will not be read across browsers as long as you quit a browser before using another. 
Cookies are per-browser, but plugins (such as Flash) have their own storage and can be used to share information between browsers. Nowadays I believe Chrome has its own sandboxed Flash, so it's possible that this also has its own storage.
That being said, browsers in theory can generally read each others cookies, as cookies are nothing more than files on the filesystem. But to the best of my knowledge (I didn't bother to check), browsers do not have code to do this. With an extension with filesystem access this can be possible, though.
Pay attention to companies that offer elite protection and hijack services to keep up on tracking devices in a computer.
A supercookie is generally stored in macromedia folder in #sharedobjects, but can get into other places as well. A supercookie will launch with whatever you use to access the web 
If there is a large security hole in one browser that would allow filesystem access from JavaScript, it is possible for a website to steal cookies from another browser, although I would think that in such a case, cookie stealing will be the least of your worries.