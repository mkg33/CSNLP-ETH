Here's my testing methodology (initially adopted from http://andyduffell.com/techblog/?p=852, with modifications to work with BtrFS):
At this point, the pre-delete and post delete verifications still show the same disk blocks in use.  I should instead see a reduction in the number of in use blocks.  Waiting an hour (in case it takes a while for the TRIM command to be issued) after the test file is deleted still shows the same blocks in use.
A takeaway form this: some Ext4 TRIM testing instructions ask the user to only verify that the first sector was TRIM'd from the file.  The tester should view a larger portion of the test file to really see if the TRIM was successful or not.
We are looking into using BtrFS on an array of SSD disks and I have been asked to verify that BtrFS does in fact perform TRIM operations upon deleting a file.  So far I have been unable to verify that the TRIM command is sent to the disks.  
To ensure the TRIM command had time to run, I did a rm /mnt/testfile && sync && sleep 120 before performing validation.
So after many days working on this, I was able to demonstrate that BtrFS does use TRIM.  I was unable to successfully have TRIM work on the server that we will be deploying these SSDs to.  However, when testing using the same drive plugged into a laptop, the tests succeed.
Now to figure out why manually issued TRIM commands sent to the SSD through the RAID card work but automatic TRIM commands to not...
I then upgraded the SSD drive firmware from version 0001 (as shipped out of the box) to version 0009.  The tests were repeated with Ext4 and BtrFS and both filesystems successfully TRIM'd the data.
After many failed attempts at verifying BtrFS on the server, I decided to try this same test using an old laptop (remove the RAID card layer).  The initial attempts of this test using both Ext4 and BtrFS on the laptop fail (data not TRIM'd).  
One thing to note if you're attempting this same test: SSDs have erase blocks that they operate on (I don't know the size of the Crucial m4 erase blocks).  When the file system sends the TRIM command to the drive, the drive will only erase a complete block; if the TRIM command is specified for a portion of a block, that block will not be TRIM'd due to the remaining valid data within the erase block.
It appears that the first and last sectors of the file are within a different erase blocks from the rest of the file.  Therefore some sectors were left untouched.
So to demonstrate what I'm talking about (output of the sectors.pl script above).  This is with the test file on the SSD.  Periods are sectors that only contain zeros.  Pluses have one or more non-zero bytes.
Partition that was created from fdisk above (I keep the partition small so the verification can go faster):
I know BtrFS is not considered production ready, but we like the bleeding edge, therefore I'm testing it.  The server is Ubuntu 11.04 server 64-bit release (mkfs.btrfs version 0.19).  I have installed the Linux 3.0.0 kernel as the BtrFS changelog states that bulk TRIM is not available in the kernel shipped with Ubuntu 11.04 (2.6.38).