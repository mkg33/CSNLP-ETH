How do I control versions if for example it was installed on another computer, the profile migrated to a new machine? The msi won't be there in a consistent state and when you release a new version I might not catch it or something may break?
Also common in corporate Windows environments is Software Restriction Policies.  This underutilized feature of modern Windows allows the administrator to allow or restrict executables from running based on the path or even based on a cryptographic signature. I routinely only allow executables to run only in the windows or program files directories.  Otherwise users could download to AppData or even their user directory and basically be running anything.  What's the point of forcing users to be limited users if they can run any EXE they want to?  I make exceptions for GoToMeeting, but not as of yet Chrome.
What happens if the user has a roaming profile and I'm trying to install the MSI out via GPO? Does this mean the user gets it or the machine? Whats the case with multiple users using the same machine?
Honestly, I don't get it. There are certain ways programs are supposed to be installed and run on the Windows platform. Why don't you just follow these proven methods? Really, at great deal of the problems I face with Windows apps can be traced back to programmers who either don't know how windows programs are expected to install and behave or who think it's to complicated and take some shortcuts or something like that. 
While your app might not be that large, add in all the others who decide that AppData is the place to do their installations and profiles get huge...users login times increase...and than we're to blame for slow systems/network (yes this goes for those who should know better too).
What happens if the profile moves from a computer where they are supposed to run things to one they aren't like a print server in a Uni lab? Will the application follow?
(Granted, I often deal with scientifc programs that are written by experts in their domain who don't care at all about the platform or even try to write platform independent, but still). 
I don't know how big your app is but do I really want a backup of it for every user when I run the backup jobs for the profiles?
Your application sounds really portable and self contained, thats great and there are work arounds to each of the above. But why rock the boat and force it somewhere it shouldn't go when it's just as easy to put it where it's expected? I can't speak for anyone else but the above cases make things fall into the "unpredictable" basket and that isn't great.
Well, in the (quite common) case of a networked home folder, you still have all the problems associated with starting from a network share, because in fact that's what happening.
As to Google, it depends on your usage case, they are pushing to a lot of home users maybe who don't care? You sounds like your pushing to corporate IT and it can't hurt to get on the good side of the people who will be testing and deploying your app. They will spend less time thinking of ways to replace it if yours is stable, predictable and works like every other one they have.
My soon to be released AppLocker policies will kill these examples of bad Windows programming so all is not lost.
There are good security reasons for making sure your executables and your data are completely separate, additionally in a number of environments you may not be able to expect the user has execute permission to their appdata folder.