So to pinpoint the problem, I'd check the data link layer counters for errors or possible flow control influence and the performance counters of your heartbeat-generating server for possible CPU or memory bottlenecks at night. If you don't find anything suspicious, just increase the timeout :)
TCP is not the best protocol to use with very frequent heartbeats - every segment (i.e. acknowledgement) lost on the link will delay its reception by at least one second (the minimal retransmission timeout value). If losses should come unfortunate enough to happen 2-3 times in a row on a certain link, you will get your application timeouts.
It does this to find out if there are any duplicate IPv4 addresses on the LAN; if so, it reports the problem to the user.
First a little background:  On the (isolated) /16 LAN in question, we have several devices that keep several persistent TCP connections open between them.  The program at each end of these TCP connections sends a "heartbeat" packet to its partner once every two seconds; and also each program keeps track of when it last received a heartbeat:  if it hasn't received a heartbeat packet for four seconds, it figures something is wrong, closes the TCP connection, reports a problem to the user, and then tries to re-establish the connection.
Another possible explanation could be the load of the host sending the heartbeats - if it is doing some high-priority jobs at a high saturation, your heartbeat-generating threads may suffer from short-run starvation and not get the heartbeat out in time.
arp-scan just sends arp-who-has requests to the broadcast address - that's what is happening on the network all the time anyway, so there would be no reason for it to disturb any connections.
This is all fine, except that occasionally (e.g. once every few days) we get heartbeat-timeouts for no obvious reason, and there has been some speculation that the arp-scan may be interfering with the TCP traffic such that the heartbeats are getting held off long enough to trigger the 4 second timeout.  These events often happen at night, when the LAN is more or less idle (except for the heartbeat packets and the arp-scan, of course).  When these events occur, the TCP connection is always immediately and successfully re-established, but the resulting error messages are making the users nervous, so I'd like to figure out what is going on here.
Even if the ARP caches of a host get overflown, it will just issue an arp-who-has request on its own before sending an IP packet - it will delay the packet by at least the RTT, which is three magnitudes lower than your timeout value in LAN environments and thus negligible.
My question is:  is arp-scan's scanning mechanism intrusive enough that it might plausibly be the culprit here?  Note that we supply a --bandwidth=2560 parameter so that it shouldn't use up a significant amount of bandwidth during the scan; but perhaps the arp packets cause the arp<->IP address caches to be flushed, or something like that?