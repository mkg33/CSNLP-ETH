If you're happy for the game to require at least a low-end ATi/NVidia card/chip, then going using a 3D API will allow you to do a lot of cool stuff (alpha blending, scaling/rotation, etc) that would be tricky to do well/efficiently in a pure software renderer.
If your game is simple enough, and you want the game to run well on low-end machines, particularly netbooks and older laptops (with no 3D acceleration, or very minimal - older Intel integrated graphics, etc), it's still worth considering a pure 2D framebuffer approach
Also remember that fillrate is limited. And it's surprisingly easy to reach those limits in 2D. You might not have many polygons, but if you want lots of alpha-blended parallax layers, or particles, or post effects - you can quite easily end up filling as many pixels as a fairly high-end 3D game.
Also, be aware that a few things that are very simple in 'pure 2D' become more interesting when 3D hardware (and bilinear filtering/alpha blending) is involved.  Understand the concept of premultiplied alpha.  And also think about, for example, how you'd handle the seams between tiles in a 2D tilemap if you wanted a zoomable/rotatable view.