However, standard permissions in linux make it nearly impossible for a normal user to "harm the system". What sort of harm are you trying to prevent? It's trivial to prevent users from being able to install software or run programs outside of their home directory, and you can use chroot to lock down the system even further.
To setup a users restricted shell, set /bin/rbash (or similar, most shells enter restricted mode when the binary is named r***name*) as the users shell.
First, unix has very a very comprehensive filesystem permissions system.  This seems to be a decent tutorial on unix filesystem permissions.  The gist of this is that directories can be set such that a user can go into a directory and can run programs out of that directory but can't view the contents of that directory.  If you do this, for example, on /home, if the user runs ls on /home, they get a permission denied error.  
This (as the Wikipedia article mentions) isn't completely secure, but if you can guarantee that no application allowed to run is able to execute a new shell then it is a good alternative.
If you're really scared of your users and want to stick them in a supermax type of restricted environment, use something like freebsd's jails or solaris's zones -- each user gets their own tailor made environment.  For added points use ZFS so you can take a snapshot of the environment when they log in so if they delete their files you can just pull them out of the snapshot. 
Then, edit **.bashrc (or equivalent) and set $PATH to a directory where all allowed binaries/scripts are stored.
Don't try and limit commands, limit file permissions.  You can't practically limit people's access to syscalls, so all someone needs to do is provide their own copy of whatever "dangerous" commands you don't want them to execute, and you're stuffed.
Yes, it's possible, but in practice it would take a lot of work and planning. You can create scripts and have them run as a privileged use, then remove all privileges from the user in question. Or, you can set the user's shell to something of your own making that lets them do only what you explicitly allow.
This way you can choose whether $USER can execute any command on his/her own behalf (via a link in the private ~/bin directory, provisioned via /etc/skel, as explained above), on behalf of other user (via sudo) or none at all.
I don't trust my users.  The dumb ones see something on the internet and try it out without understanding what it does.  The devious ones like to snoop around and look at other peoples files and steal their ideas.  And the lazy, don't get me started on the lazy ones.
The way I usually implement this kind of restrictions requires that several conditions are met, otherwise the restriction can be easily circumvented:
If you want the user to only be able to execute certain scripts/binaries, you can use a restricted shell.