Instead of altering the texture and erasing pixels that should not be shown, I suggest you build your geometry in a way that it fits your floor.
If you want to tile your texture, you can do that by specifying UV coordinates bigger than 1. So if the texture should tile 3 times across width and height, the coordinates would look like this (this time in C#):
To do that, we could dynamically create the required mesh in Unity (using the Mesh class). So let's assume that 0,0 of our coordinate-system lies at point 3 and our coordinates from 0 to 3 are (2,4), (6,4), (4,0), (0,0) then we would write something like this in Unity:
Here's a slightly more advanced script that allows you to specify size, origin and skew values in Unity and the Mesh gets generated on the fly (script is just a quick and dirty example to illustrate the concept). Here's how it looks in Unity with a MeshRenderer that has a checker texture applied (the texture repeats with the Size parameter).
Now we have the vertices. Next step would be to define the UV coordinates. A UV coordinate specifies the texture-position a vertex maps to. UV coordinates are normalized from 0..1. To have our texture fill the generated mesh in it's entirety, our UV coordinates would look like this: