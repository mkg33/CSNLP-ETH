If you don't use an engine, I think the best thing to-do is write your own layer of abstraction. So that any calls to your library have to go through this middle layer, so when it comes time to port you just need to change the implementation of the abstraction layer and your game code is more or less intact.
Wouldn't it make sense to launch it on a small number of platforms, see how well it does, and determine if it's worth supporting the more challenging platforms (e.g. less powerful systems, those with arkward input devices, or those that require a complete port to C# or Java)
If you are targeting the Xbox with XNA (aka the indie store) then you have to use C#. But you cant really use C# with iOS (except with unity). While you can use C/C++ for iOS you still need to use a little bit of Obj-C unless you use some sort of middle ware.
It's very easy to get bogged down in cross-platform tools/tech development. Focusing too much on cross-platformness before having a game is kind of like premature optimization. It's certainly worth thinking about early on, but don't spend all your time on it until you've actually got a game.
Step one should probably be to make the game, at least a decent prototype, using your favourite tools/tech, for a single platform (or small number of platforms).
I would say your best language choice would be c#.  You can use it to develop in Unity for a number of platforms.  c# is also the language used in MonoTouch (for developing for iOS) and MondoDroid (not out yet but will let you target Android platforms). And, of course, c# can be used in XNA which lets you target XBOX 360 and Windows Phones.
That pretty much covers everything.  There will still be work to do in the fact that you will be using different tools for manipulating game content, but your core game logic shouldn't need to change if it's all in c#.
For example, we have a Win32/DirectX platform, a SDL/OpenGL platform for Linux and Mac, working on an iOS platform for iPhone/iPad, and an android port would also be possible. For some time we had a Playground platform, meaning our framework ran on top of PlayFirst's Playground engine. This layered approach allows you to leverage whatever interface you have to the underlying hardware/OS, as long as you can draw a textured quad, get some input and play a sound, you're pretty much set.
Trying to support every platform before knowing whether the game will be a success sounds like a high-risk strategy - especially if it's a simple low-budget game (where the cost of developing cross-platform systems could massively outweigh the cost of developing the game itself?).
Also, all of our dependencies are open source and cross platform libs, such as SDL, Ogg, LibPNG, etc.
We have a thick C++ framework on top of a thin platform layer, also C++. Porting a game to a new platform is a matter of implementing a new platform layer, which because it's quite thin, it's quite fast to do.
I'll get flamed for this, but C++ is probably the most cross-platform language there is. Every architecture and OS most likely has a C++ compiler or gcc can be ported to it.