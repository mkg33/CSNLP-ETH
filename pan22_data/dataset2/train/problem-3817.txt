It would help if this had some proper context to it. But the general rule of thumb as far as I am aware is this:
The result will be that the object's vertices will first be scaled (along the local XYZ axes), then rotated (around the local origin), and then translated into "world" space. Then the world-space co-ordinates will be translated such that the camera is at the origin, and finally everything will be rotated around to the correct view direction. This is probably what you want for a basic scene.
As Richard Fabian says, you generally want to consider the camera transforms as an inverse, though you might equally replace the camera transforms with a lookAt() function or similar, to directly construct an appropriate view matrix.
You're right about having the camera applied first and then the object transform, because this allows the usage of pushing and popping matrix states between objects.
Aside from that there is no "correct" order, other than a basic assumption that the transforms will be applied in the reverse order to which you call the matrix functions.
If you push the matrix stack after setting up the camera, you can pop/push for each object without having to set the camera up again.