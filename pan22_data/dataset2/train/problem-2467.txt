Perhaps you haven't gotten to methods yet.  When you do, consider going back to this and writing a play method.  
When processing guess, you don't need to do three comparisons.  There are only three states.  If it's not equal (otherwise we break out of the loop) and not less than, it must be greater than.  So use an else rather than the third comparison.  
This won't necessarily work any better.  But this pattern will generally be easier to maintain.  One of the problems with academic code is its low reuse.  You never have to maintain it, so it's easy to slip into unmaintainable habits.  Outside the academic context, most of your time will be spent on maintaining existing code.  
The larger mistake comes when you play repeated games.  To my mind, the correct way to fix this would be to move the count declaration and initialization to a different location.  Note that in Java, variable declarations do not need to be at the beginning of a block.  They can appear anywhere.  Figure out what's wrong with the current behavior (win repeated games until it becomes obvious).  Then think about where it should be.  
Including twice in the previous repeated code.  Don't do that.  Instead organize the code so that you say these things once each.  
You don't manage the count correctly.  I fixed a small mistake for you, but I left the bigger one.  The small mistake was that you incremented the count even if the guess was 0, which is not a real guess but the exit criterion.  Without the larger mistake, this doesn't really matter.  You don't display the incorrect count anyway.  
The Java standard is to put { on the same line as a method declaration or control structure, so I switched to that.  It's more important to be consist though.  So the other way is OK.  It's just not how I normally write Java.  
I added a (Y/N) to your play again query.  As is, it works if you know how.  But someone who doesn't know what to do might type "Yes." which seems like a reasonable response but won't work.  Give a little extra guidance as to what to type there.  You also might consider accepting "Yes" as a positive answer.  
The inner loop will loop forever until explicitly exited (with the break statements).  Notice how the first thing that it does is collect the next guess.  This saves collecting it in the five different places.  Collect it once and then process it once.  
I would prefer to move generator and scan into class fields.  This means inside the class but outside any method.  
I used a while for the outer loop even though a do/while would have been more natural (since you always loop once).  Notice though that it is gated by restart rather than guess.  I find this to be a cheesy solution and would prefer the do/while.  