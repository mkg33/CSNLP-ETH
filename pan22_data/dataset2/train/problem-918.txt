This may sound a bit confusing if you've never thought about configuration this way, but you're already partway there, with your test server and workflow. You could start with just managing Apache, or even something less critical, and ultimately manage your entire server configuration with Puppet. Puppet can even become your documentation. Once your entire server is managed by Puppet, reinstalling it or building another server becomes a piece of cake, a matter of minutes.
So how do you move your code from testing to production? Use version control software to manage your Puppet modules. Most people use branches that match the environments, and push new versions of the configs from branch to branch. Puppet will then see that the server does not match the new configuration and will update it.
Treat your configuration as code: use a configuration management tool like Puppet to manage and deploy the apache config.
Your create a template from your current Apache config, where the values that differ between your development, testing and production environment, and between your servers, are replaced by variables. Depending on the environment that Puppet is pushing the config to, the variables will be replaced by the values you set. Puppet is designed to regularly check if the target servers (nodes) are in the desired state and if not, it places the config in the correct location and reloads Apache.
Write (or download) a Puppet module to manage Apache, i.e. the Package, Service and config files. Set up your puppetmaster server to support two or three environments, say development, testing and production, and add your servers to their respective environment.