Search papers on : "Shortest Path Queries Using Highway Hierarchies". There is a paper by Sanders and Schultes. If you follow their citations, there are lot of other papers. These methods are very useful for real road networks.
Here's an idea that sometimes changes the view one can have one hard instances : you can recursively remove vertices of degree 1, because for each of them the "shortest path" goes through their only neighbor, so it is easy to remember at very small cost. With some luck it can reduce the size of your instance.
Strictly speaking, the paper pointed out by singsumit handles the P2P shortest path problem (not the all pairs shortest paths problem).
While Sage is written in Python, this part is written in C so it can be expected to be very fast. This being said, your main problem is not about computing the distances but storing them. If you want to compute the distance between all pairs of vertices (100 000) and store it in memory, and assuming you are storing the distances on 32b=4B integers -- so be careful if you run a 64bits machine or if you should use floats instead -- you would need a total memory of about 20Gigs. That's already BIG if you planned to allocate this memory in a C array, it's a nightmare if you were thinking of Java and Integer objects.
If you really want to compute the all pairs shortest paths problem, I will recommend you to read these two papers.