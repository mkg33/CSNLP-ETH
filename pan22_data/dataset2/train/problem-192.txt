By always sending out a 0 or a [1 - 4] on each cycle, we can now use the power of parallel processing! On the middel row of processors, shunt the outermost pipes to the middle two, and use
I was stuck on this one when I went to bed last night.  But of course, like any good programmer, sleeping is when I get most of my work done.
Then Node 3,2 MOVs UP, RIGHT and node 3,3 is a copy of node 2,2. This removes 2,3 as a bottleneck that needs to gather 3 values and instead will let the other nodes help gather them.
If you don't mind using more nodes you can simplify Node 2,3 by letting it ADD UP ADD RIGHT and MOV ACC, DOWN (and MOV 0, ACC)
My primary goal here is fewer cycle counts.  If the above... erm, graph... is anything to go by, it looks like I could have quite a bit less cycle counts.  Secondary would be reducing the instruction count (but not at the expense of cycle counts).  I can imagine how to get it down to 7 nodes rather than 9, but I can't imagine that also makes the program more efficient (in terms of cycle counts).
You can swap JEZ and JNZ and then remove the noop jump to check, and because the instruction before start is the same as before the JMP to it at the end you can remove the two instructions: