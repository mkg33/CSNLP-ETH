As you can see, the ship stays perfectly still behind and the world rotates around. As a result, it looks very unnatural, as if a 2D ship sprite was simply glued onto the screen! 
In your update method get the difference between the ship's angles and the camera's angles, multiply it with a value between 1 and 0 (The greater the value is, the faster the camera will follow the ship) then add it to the camera's angles.
In order to learn PyOpenGL and test out an engine I am developing, I am trying to write a 3D asteroids flying space shooter game. Currently, I am implementing the camera using a "look at" function positioned right behind the player's ship. The player is able to control the yaw and pitch with the left+right and up+down arrow keys respectively. The results look like this (forgive the placeholder art):
So my question is, how are third-person cameras in flying games typically implemented? What would a keyboard+mouse control scheme look like that controls yaw, pitch, roll, banking, acceleration/deceleration, etc? Would the camera controls for the camera be separated from moving the ship? Any help would be greatly appreciated.
The camera control is usually semi-separated from the ship's rotation. Instead of making the camera have the same angles as the ship, the camera should try getting closer to the ship's angles.