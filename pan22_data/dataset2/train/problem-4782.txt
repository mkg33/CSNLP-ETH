Whatever the case, you want to minimize effort and complication for your client. Have your application or its installation program do the work, don't expect them to understand or have to jump through many complicated hoops. This applies even if they are large companies with IT departments, although in that case you cannot just install on their servers - they are in charge. 
The correct way to handle this is to include your database setup in your setup kit, so that it creates the database and all required objects (tables, views, procedures, users, logins, ...). 
If you don't have a database project or you don't have a setup kit, you should probably rethink your deployment strategy completely.
Is this one of those situations where the application could or should legitimately be run locally with a different DB on each target machine, or a single DB on a central server?
Will your application be one of many running on whatever it is running on, or might it make sense that you are delivering an entire disk image or PC?
I also suppose that you want to ship an empty database with your application, with at most a handful of rows for built-in values in some tables.
One possible way to do this is to include a .dacpac file in your setup kit and invoke sqlpackage to deploy it to a target sql server instance. The .dacpac file should be obtained by building a database project in visual studio (SSDT).