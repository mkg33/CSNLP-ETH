Also as an experiment, get an old domain you no longer use and point it to the same IP. Visit the domain.
Curious: does your site use SSL? Browsers would refuse to connect due to invalid certificate if someone attempted a crafted domain attack.
On the public Internet, you cannot easily prevent the situation I would describe as:   somebody puts mydomain.com into their browser, but gets the content that is meant to appear to the public as properdomain.com. And TLS/SNI cannot prevent this either.
Ideally, a virtualhost is good practice. It's a simple way to protect against various domain crafting attacks (facebok.com, aple.com, micro-soft.com), as Apache will only serve requests from webpage.com.
Without a vhost it would be trivial to proxy to your raw IP, making it easy for the aforementioned crafting. Here's a Wikipedia article on that.
It doesn't matter much. Even if you "secure" the VirtualHost X by preceeding it with NameVirtualHost X, it doesn't change much. This does check Host HTTP header that comes to the server. But it's still very easy for anyone to setup it's own proxy (for example, it's own apache server) to re-direct to your site.
I am trying to figure out the cons of a current setup and discovered a potential anomaly. There's a webpage hosted at (say) webpage.com. If I point my domain (say) mydomain.com to the raw IP of webpage.com, the actual webpage.com web page is returned on a web request for mydomain.com. But is this a good practice? Should VirtualHost (or SNI) filter queries with 'host' param in the HTTP header, which are not present on the server?