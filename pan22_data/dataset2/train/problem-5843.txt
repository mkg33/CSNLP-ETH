Just as example - one of my machines is a 32 gigabyte AMD Opteron system (soon to be 64 gbyte). I rarely get the CPU fully loaded (with only 4 cores) - simply because albeit I run more than a dozen servers on it, most are not busy at the same time, or light load systems (multiple DNS for example). I have another server where TFS (Ms equivalent to TeamCity) Runs, and if I have some action there - things get nasty. Builds, unit tests, scheduled virtual machine lab tests, database unit tests - all use up tons of CPU power. Depending on how busy that is this CAN requier more CPU power. How buy is mostly a "how many users" thing - 2-3 developers rarely keep the server busy most of the time.
As such, 3 VM's and a 8 core CPU make zero sense to use 1 virtual CPU per host. You basically leave most of your processor power unavailable for the virtual machines. If you go dual core on every server - assuming the server and processes gain from it - this will give you better uitlization. THat said, you could possibl go higher - depending how load is distributed (does SQ LServer do a lot while the other servers are busy?).
So, even if you allocate multiple cores for for example TeamCity - will you do tings like multiple compiles at the same time, or not? If there is one developer checking in, he simply will never check in in two projects at the same time ;) But give it a try ;)