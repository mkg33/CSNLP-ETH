There are also some text editors (generally not full IDEs) that have networked text editing, or even some online editors.  The experience will not be a good one.
Setting up a Git repository isn't that hard (you can also use third party hosting like the on provided by GitHub and others).
Solutions like GitHub, BitBucket, CodePlex, SourceForge, and more offer these services for free (often only if you make your code publicly viewable, though).  They allow you to "commit" changes and "push" them to a central server, then allowing the other developer(s) to "pull" those changes.
This is called a Collaborative real-time editor (Wikipedia article provides quite a comprehensive list of those). 
An additional advantage to a good source control system is that it maintains history, allowing you to back up to an older version if necessary, see who made which change, and so on.
If you're using Visual Studio, the best option would be using their Team Foundation Server or - with the addon being in beta right now - Git.
You're looking for a source control solution.  These are a common part of the industry.  Large Open Source projects often have dozens (and in a few cases hundreds or thousands) of individual developers spread over the entire world.
If you want fully automated syncing, you should try Dropbox, Cubby, or BitTorrent's Sync. These work more automated, but will give you trouble if both of you edit something at the same time.
This is how multi-developer projects are handled in the corporate world, the Open Source world, and even most smooth private/small/school/hobbyist projects.
This is not instant.  You don't usually want it to be.  You want to be able to compile and run your changes against a known stable/functional base and then only sync up when you have completed a feature or fix, thereby ensuring that you aren't held back by a teammates incomplete changes or vice versa.
This will require some setup and getting used to, but it should help you a lot merging changes and conflicts (i.e. when someone is editing the same files at the same time).
If you are using Visual Studio, you can download VS Anywhere. You can have many person typing codes simultaneously, and it doesn't lag much. Though it's kinda buggy sometimes. I'm using it with my friends all the time! 
This is really hard to pull off, because real concurrent editing (on the same files) can be rather tricky.
The normal answer to work on different files rather than trying to edit the same one.  Anything big enough to involve multiple people will also involve multiple files.
There is a great number of text editors which allow several users to simultaneously edit the text. "Simultaneously" in this case means that when you open a document and someone else is/are editing it, you see those someone else's cursors, and what changes they make -- in real time. Obviously, you can make your own changes too, and they will be broadcast to other users.
You'll then just have to install the Visual Studio Tools for Git to interact with your repository, sync code, etc.
If you really want instantaneous syncing, you might consider using DropBox.  Your IDE will typically have some trouble if edits are made to the file, but again, just don't do that.
If you both edit the same file, you will have to "merge" your changes when syncing.  Modern tools usually do a fairly good job of figuring this out automatically, though something you'll have to help it out and manually figure out how to merge some overlapping changes.  Typically, just avoid doing this; there is usually little reason for two developers to be simultaneously working on the same feature or fix, even if sitting next to each other, much less when geographically separated.  Your project likely has a number of different tasks which can be completed in parallel.