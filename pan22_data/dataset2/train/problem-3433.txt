However at least on unix-like systems sockets are represented by file descriptors and there are both per-process and system wide limits on the number of these. Artificial limits asside the kernel also needs to set asside some kernel memory for each connection.
For UDP, datagrams from all clients are received on the same socket. The server application must use specific API calls to receive and transmit the metadata.
On the TCP level, since you have a real connection between a local and remote host, your connection is uniquely identified by a 4-tuple (source IP, source port, destination IP, destination port). So whether on the server or client side, the theoretical limit is pretty high, since even for a given client and server, and a specific server port, you can still open 65536 individual connections that have a unique 4-tuple. In practice, as Ron Maupin stated above, you would run into other limits first.
No, when a connection is accepted the the server OS creates a new socket to represent the connection but this socket does not use a new TCP port on the server side. 
Traditionally this was done with the "recvfrom" and "sendto" API calls. Unfortunately these calls have a fundamental flaw, they only provide and accept the remote IP/port, not the local IP. So they can misbehave on multihomed servers. There are newer APIs that fix this but unfortunately the details vary between different operating systems. 
A client could have a limit on the number of servers to which it can connect because there are only so many ports available for outbound connections, but it would probably run into hardware/software limitations before it runs into port number limitations.
On the UDP level, since there is no connection, your socket is only identified by its local IP and port, and it's typically up to your application to deal with separating the data coming from different hosts (look at the UDPClient.Receive method in .Net for example).
Not at the OS level, if packets come in faster than your server can handle them then packets may be dropped, if your server needs to keep track of clients then it may exhaust it's own resources in doing so.
A server can have as many clients connect to a single port (TCP or UDP) as the server (hardware and software) can handle.