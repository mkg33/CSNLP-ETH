If your SQL Server must be accessible outside of your netowrk, you can Whiteliste the outside IP addresses needing access.  VPNs are a better solution, (but not always available), and best solution is no outside access.  
You ought to restrict login attempts, so if the same user tries to log in more than 5 times, they are blocked from any further attempts for a few hours or a day. At least then they cannot brute force a login after a million attempts.
DISCLAIMER - By downloading and installing the above-mentioned program, you agree to hold me harmless for any damage, loss of data, corruption, or any other functionality issues resulting from the use of said software.  I have tested the program to the best of my ability and currently have it running on 2 servers, but you have been warned to use at your own risk.
Feel free to download the program using the link below.  Donations are always appreciated using the link in the right-click menu of the taskmanager icon.
And like others have said, don't allow public access if it's not necessary. You can restrict access to a set of known IPs if some people need outside access.
Whitelisting requires more management, but it removes this silliness.  If someone needs access and they have a frequently changing IP, then they can login to a different system via RDP and connect to the SQL Server from there.
Please note that this only works for SQL login attempts using the 'sa' login, but I could modify it to work for other log events as well.  Also, you can view the IP's that have been blocked, but you will continue to see some items in the event log since the program only runs every 60 seconds.  This is due to not being able to delete a single event log entry, and I didn't think deleting the entire log would be a good idea.
Any questions or comments, please feel free to get in touch with me using the contact form on my website at www.cgdesign.net
I agree with other posters regarding probable next attack vectors and this is probably someone running a script.  
Renumber the SQL Server IP listening port.  This means updating client configurations or application configuration files.
I had this problem too where my event log would be filled with thousands of entries for hackers attempting to login to my MSSQL instance with the 'sa' login.  After much searching, I decided to write my own program, have it create the neccessary IPSEC items, and then scan the event log every 60 seconds for attacks from new IP addresses.  It then adds the IP address to the IPSEC filter, and blocks all traffic to and from the IP.  I have only tested this on Windows Server 2008, but believe it will work on other versions as well.
Audit permissions and trigger a password update for all SQL Server User Accounts; maybe increase password strength requirements.
For anyone looking for an program that will create the IPSEC policy, filters, etc and automatically scan the event log and add IP's to the block list, I've written a small program that does just that.
The first thing you could do is start by blacklisting that IP address, and outright denying ANY traffic from their IP at your firewall. Of course, they may just change IPs, but at the least it'll stop them from bombarding your server with traffic and logs.
It's probably just some script kiddie running a scanner and not worth your time pursuing.  I would look at not having your database accessible from the Internet.