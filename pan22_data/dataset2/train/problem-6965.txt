As far as I understand, fsync() faking is a property of battery backed RAID controllers, not drives. The RAID controller contains a battery that can power its write cache until power is restored to the drive and the write can be safely committed to the disk. This allows the controller to return immediately to the OS, as it makes some level of guarantee that the write will be written to disk.
As you say, a proper battery backed RAID controller will be expensive, but you can find Dell Perc5/i controllers on eBay for Â£100 ($150) and especially with RAID5 the speed of a controller like the Perc5/i will amaze you. I have several servers with Perc5/is and six disk RAID5 arrays, and they are amongst the fastest disks I have ever seen. Especially for database applications fast disks will really improve performance.
It should be noted, if the drives writeback cache fills up, writes will block until the cache has be written back to the drive. This means the cache is generally not as effective under sustained writes.
How many IOPS does you application require? Are you sure that you are being limited by the drives write cache, or that a small (compared to memory of your server) on the drive will be of benefit?
One of the misconceptions if disk write back caches is that they only lose data on power loss. This is not always the case, especially on sATA devices. If a sATA device has an error on it (such as a corner case FW bug or controller bug) and it resets or is reset externally, there is no guarantee that the data in the write-back cache is still available after the hang.
This limitation also goes for other SET FEATURE and similar parameters which are configured for performance and reliability.
This can lead to scenarios where a device has a transient error, gets reset, data loss occurs in the loss of any dirty cache, and this is silent above the block level of drivers.
SCSI/SAS drives and some sATA drives have the ability to save the state of the write-back profile to ensure that across resets the property is not lost -- but in practice this is rarely used.
RAID controllers which integrate the block layer into the upper layers can notice drive resets and disable write-back cache again -- but standard sATA and SAS controllers will not do this.
Worse, disabling the drive cache via OS tools will also be lost on device resets, so even if a device has its cache disabled at start-of-day, if the device is reset, it will re-enable write-back caching. At another reset, the device will then lose data.