Roy has answered this question for you.  When you install a new server package, you stop that server and then use a tool like sysv-rc-conf to prevent that server from being started at the next reboot or runlevel change.  Yes, you have to do some work yourself, and that's reasonable because you're configuring your system differently to most people who use Ubuntu.
You should invest some time to learn how to configure lighttpd so that it is permanently configured to only listen on localhost.  Then, when you do start the server, you know it's already configured to your liking.
I think there is a command that'll do that same trick, and add all the symlinks for all the runlevels, but I just do it manually.
If you set up iptables with a default policy of DROP for the INPUT chain then you don't have to worry as much about listening ports because they will be blocked by iptables.  Ubuntu server comes with a user friendly interface for iptables if you are new to iptables.
Take a look at what run level you're in with the 'runlevel' command, and remove all the symlinks at /etc/rc<runlevel>.d/. You'll probably want some of the daemons running, but most could probably be removed.
From your post, it sounds to me like you might be happier with a different Linux distribution such as CentOS.  The default install process for CentOS will allow you to install different meta-packages, and by selecting none you might be happier with your base install.
How about watching on the directories where the init scripts are located?  You can likely make those directories unmodifiable with the chatr command.
The expectation of the packaging system is that when you install a server package, you want to run that server.  It is a reasonable expectation.
Also, I think you question might have a been a bit clearer if you substitute 'service' or 'daemon' for the word 'server' when you mean something that runs on a server.  People tend to use 'server' to refer to a physical box or VM. Although I guess its not technically incorrect.
The package policyrcd-script-zg2 includes the policy-rc.d script, which either runs /etc/policy-rc.d with its parameters if present, and exits with that script's error code, or exits with 0 (success) otherwise. The interface policy-rc.d is expected to offer is documented briefly in the invoke-rc.d manage, and much more extensively in /usr/share/doc/sysv-rc/README.policy-rc.d.gz.
The packaging system uses the invoke-rc.d program to start the server after the package is installed.[1] This program will run /usr/sbin/policy-rc.d to determine the policy on starting that server.