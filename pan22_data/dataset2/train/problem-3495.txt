You don't actually use any of the benefits of a LinkedList, e.g. easy insertion and removal in the middle of the list.  Why not use an array-backed data structure if you're going to directly manipulate the contents?  
You may find the challenges at http://cryptopals.com/ interesting if you want to get a better understanding of cryptography. Their authors certainly know a lot more about it than I do.
It's not uncommon to obfuscate cryptographic code, but I'm not sure how helpful it is to get a review of the obfuscated code.  Many of the responses are going to be like this.  Trim the code down to the essentials and it will be easier to review.  
Relying on a key to remain secret is better: even when a key gets compromised, only that system becomes insecure. Other systems (using other keys) may still be secure.
It's more common to create one static random number generator and allow it to run for the life of the program.  That way there is only one entry point to the sequence, minimizing the chance of overlapping subsequences.  
What you've got here is essentially a substitution cipher, with some additional obfuscation steps (inserting random characters and swapping/cycling the results).
It could be worse.  Some implementations use the time as a random seed.  In that case, you'd likely have only one or two distinct generators of the four.  
Another issue is that you are creating four separate random number generators here.  Why?  Assuming each gets a different seed (apparently true in Java), you are essentially creating four opportunities for the sequence to repeat.  Once the sequence starts repeating, it no longer looks random but planned.  As a result, four generators from the same sequence are less secure than just using one generator.  
Relying on an algorithm to remain secret severely restricts its use. You can't release applications that use it, because those applications can be reverse-engineered. You can use it on your servers, but an attacker only has to gain access to one of them, once, to completely defeat your encryption. And how do you know that you've got strong encryption if you can't even publish it for a code review? ;)
Also keep in mind that even though a single encrypted message may look secure, having access to multiple ciphertexts may reveal patterns or other kinds of information that can help an attacker. If an attacker is able to control (parts of) the input they'll be able to get even more information (your random character insertion step would be quite vulnerable to this).