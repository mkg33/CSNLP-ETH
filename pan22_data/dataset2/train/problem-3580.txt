If one understands objects, fields, and variables, static fields should be easy to understand (e.g. as fields of a "class object"). And if one does not understand objects, one can not apply OOP or software design, which makes it very hard (maybe even impossible) to really understand that material.
I am however not sure the memory spaces of the JVM are the best tool to communicate this, because your students may not know what memory spaces are. After all, memory spaces are like objects in that they host variables, so if people are unaware that variables exist in a scope and are bound to its lifetime, naming that scope "memory space" rather than "object" won't help.
Therefore, a solid and accurate understanding of objects, fields and variables seems worth investing into even at the price of covering less of the official curriculum.
BTW, when Java programmers say "Memory Model", they often refer to the so named chapter in the Java Language Specification, which gives a formal mathematical model for memory as seen by concurrently executing threads. That would probably be too advanced for your course ;-)