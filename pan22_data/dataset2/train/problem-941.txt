RA can be useful for determining if the game functions; but when it comes to things like balance, replayability and other factors that determine the ultimate fun factor of the game, then it's difficult or impossible to test them. So ultimately, it depends on whether or not you're going for an excellent implementation of an existing idea; or whether or not you're looking for success in novel gameplay.
In addition to all that, requirements validation could include things like unit testing and verification of features, which is invaluable for a developer without a large QA department at his back.
Programmer: The lead determines the technical requirements which will depend hugely on the platform and the asset pipeline. You'll learn how to do this as you work with your lead on the job.
Requirements analysis is much more aimed at corporate software, with formal communication channels and that kind of thing, little to none of which will exist for an indie developer. It's not very useful for games because many requirements cannot be formally tested or verified. If you have a toolbar and you say, "Clicking this button should drop down a menu with XYZ on it", then you can pay someone virtually nothing to click the button and see what happens. Is your game fun? That's a whole different kettle of fish.
Artist: Again its the lead artist along with the lead programmer who usually set the requirements for art assets. Learn on the job.
Requirements analysis will be incredibly useful, whether you're an independent developer or you work for a big company. Requirements analysis lets you break down your project into manageable chunks. It lets you estimate the time your project will take, and weigh the value of a feature against your desired development schedule and required effort. 
Games typically have incredibly fluid requirements, and even if it were possible to invest time and best practices into gathering requirements, much of what you'd end up with are meaningless and vague terms referring to fun, addiction, immersion, and so on. Very rarely will you have very clearly defined deliverables because, as much as we like to pretend making software is engineering, it's actually more of a craft, given the variety of different ways that programmers can express themselves. This goes double for games.
Designer: They write a lot. A whole lot. There is usually a design document which communicates the designers vision but for everyone else except the producer or publisher you'll normally get the information from the designer themselves.
I think this class will have between zero and very little relevance to game development. Certainly the semi-formal or formal methods you mention do not get used in my experience.
If you're in a larger indie game company, it will help you work together with other developers and content producers to make sure everyone's always got something to do and you can meet your development targets. If you're working for a big corporation, learning requirements analysis will make you one of the few developers at the meeting who can actually give a realistic time estimate for a feature instead of just pulling a number out of your ass.
If you plan to go indie take a business/accounting/management subject. You'll need it to survive and not get screwed. Good Luck.
Requirements analysis, like the course they will most likely be teaching, is useful for big corporations trying to justify spending money and for outsourcing. And its often done by someone who once coded and has possibly since forgotten. stab