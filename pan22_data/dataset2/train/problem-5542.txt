Let's say the character has three moves and each are scored, higher score is a better move.  (Other answers talk about adding noise to creating this score.)
First thing (and this is by far the most important one), if you're trying to make the enemy feel more interesting and human then your combat tactics are irrelevant.  The trick to making players "believe" an enemy is alive is to use animation, sounds, and little details to imply human behavior.  The perfect AI might walk around a corner, see a player, and shoot.  A human AI might walk around a corner, see a player, have a surprised look on his face and shout out in alarm, and shoot.  The first one seems robotic.  The second one seems human.  Both are using identical AI in every way, other than the insertion of the animation just before shooting (or, to keep the tactical behavior the same, during shooting).
I'm sure there's a ton more examples that will be given, maybe you could tell us about your game and we can get more specific :-)
First, we consider the Ice spell, which scored a 20.  45 - 20 = 25.  This is above zero, so we throw the Ice spell out.
Second, avoid randomizing.  Players don't appreciate it as much as designers want to think they will.  Players don't see "computer generated a 1 out of 100, followed by a 5, 3, and 4, so the error factors for the last four shots were only 1%, 5%, 3%, and 4%, and that's why you died in half a second this round."  The players just see enemies that sometimes wildly miss and other times nail them repeatedly for no discernible reason, which is incredibly frustrating.  Good game design is largely about building patterns that human players can observe, learn, and beat, and making the player's success based on his own judgement and skills and intuition rather than making it about whether the player got lucky.  The urge to randomize comes from experience with table-top games and gambling games, both of which are incredibly different mediums than video games (and what works in one medium often does not make sense in another).
Take the character's intelligence stat out of the max possible value for this stat (let's say 60 out of 100).
Second, look at the Attack with a sword, worth 30 points. 25 - 30 = -5. We hit our threshold, so we choose the Attack with a sword action.
Adding a floor mechanism to the random number will increase the chance that better moves are selected.
In this system, a character with low intelligence won't pick the best move.  And a character with high intelligence will often pick the best move. (In this example, a character with perfect intelligence picks the best move 50% of the time.)
One obvious thing to take into consideration is the speed of the AI. In most games, AIs can react MUCH faster than humans (especially in fighting) and do apparent multitasking (very visible in RTS games). So you have to act on that, by keeping the AI a bit slow (maybe adaptively so), and limiting the amount of things it can do in a determined frame of time (ie one action each half-second).
One quick way to render a perfect AI fightable is to have it make unperfect decisions by adding some 'noise' to either its inputs or its outputs. By noise I mean some random factors.
Generate a random number between 0 (or some other floor) and the intelligence ratio (0.6), multiply by the total points (100).  In our example, let's say the result is 45.