You need to zero out the EDX register before the DIV Ten instruction after the EnterKey label (or any of the other places you use DIV).  You can also rewrite the code so that this isn't required:  Multiply by ten before adding in the new digit, rather than before getting the next digit from input.
In IncX, the first MOV X,EAX is unnecessary since you replace it two instructions later.  The same applies for MOV Y,EAX under CheckAnswerY.
There are many places where you zero out a register with XOR when you don't need to zero it out at all.  The sequence
There's a lack of error handling with the number entered, since a user can enter 99999 for Z and your program does not complain.  The SUB, CMP, JB sequence can lose the CMP instruction since the flags will already be set by the subtraction.  You can also get rid of the JB in this case, since the next check (CMP AL,9/JA) will detect all the wrong inputs.
In the Initialize section, you can zero out a register then store that value (which uses shorter instructions than storing a constant to memory).
You've hardcoded the offset to store the answer in (MOV SI,31).  Your data declaration can be updated to include a label for this spot so you can store the address directly into SI.  Similarly, you can get rid of the constant used in ReplaceAnswerX, and where the sign is stored in ChangeSignString, and the offset used in NoAnswer.