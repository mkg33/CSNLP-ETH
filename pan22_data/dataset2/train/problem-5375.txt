Of note is that it only supports single-character pairs, and that modifying it to support multi-character delimiters would require essentially an entire rewrite. I have it bound to F2 (and rarely use it), but you could of course just as well bind it to %. 
With Vim's plugin matchit, you can match not only parens, but also a lot more language structures that come in paris (e.g. , if..end, do..end).
Consider also highlight-parentheses-mode, which colors braces surrounding point; I find that using this mode gives me 99.4% of what I used to get from bouncing between braces, without needing to move point at all.
You should be able to come up with an evil mode binding that makes sense.  If you were really ambitious you could lisp up and call the ruby versions in ruby mode if % failed.
I think typically the mode will define something like what your after (or were after 2 years ago).  C-h m (help mode) in a file in the mode you're working in.
I commend to your attention the Smartparens mode, which supports arbitrary pairs of single- or multi-character delimiters, including cases where both delimiters are the same string. Once you have your pairs configured, a fairly trivial Lisp function, which depending on context calls one of the navigation functions sp-beginning-of-sexp or sp-end-of-sexp, should give you the behavior you desire.
I dont know which plugin matches the language structures, but I do use a simple function which matches simply parenthesis.
I don't think there is a general facility since it depends heavily on the language being edited.  For example GAP mode which I have worked on, does have a function emulating vim's % key, but I'm pretty sure that, for example, cc-mode doesn't.  Ruby mode is an example of a mode that has functions for going forward and backward across logical blocks like class ... end but I don't think it has a match.  It's not very emacsy to have a match, rather a forward and backward is more typical since it's more powerful.