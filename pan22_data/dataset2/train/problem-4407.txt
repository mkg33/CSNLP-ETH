Afterwards, you can explain why this is a really bad idea, e.g. by using different functions asking for names etc. 
Don't blame the code given too much: It is a very good example if you want to explain how the python interpreter actually works! 
I will admit that the boilerplate at the bottom is about as opaque as you can get. Even so, boilerplate code is something they will encounter in many other programming languages. I correlate it for my students to the MLA heading they write at the top of any essay. It's something that just has to be there, and it has a clear and important purpose.
I teach Python after teaching students C, so my context might be slightly different. That said, my students get used to program execution beginning at main() from day one. You could take this as an opportunity to introduce the same approach in Python with the following:
You could show the code and ask the students, whether name really is available in greeting() since greeting is defined at a point in time where the interpreter does no know anything abount name. Then show a step-by-step walkthrough in a visual debugger. 
If a student doesn't have a main function defined, they will see NameError: name 'main' is not defined.