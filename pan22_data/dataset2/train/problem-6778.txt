I don't know anything about the GUI classes that you are using but you seem to be repeating yourself when building them. Could you extend JFrame to build the entire component, or write your own GUI class?
My knowledge of Java is not great, so this next part will be largely a vague suggestion, but it should be clear what I'm trying to say. You have a lot of repeated code, which is a flag for refactoring. In particular, you could have a TemperatureConverter class, with FarhenheitToCelsiusConverter and CelsiusToFahrenheitConverter as subclasses. Then you could have an abstract convertTemperature method that they override. The location could be passed in as a parameter. This follows the DRY Principle.
I would recomend that you extract the handeling of temperature conversion into its own class, maybe Temperature?
Class names should be capitalized (window -> Window). It's also not great to have a local variable the same name as your class. I'm surprised that didn't give you a warning. 
On a higher-level, this probably wouldn't be great if you need to add Kelvin or Rankine units. I'm not going to try to give UX advice, but if that's something you want to worry about, there are plenty of online samples to look at for inspiration.
First, some style nitpicks: Throughout, it would be better to have more descriptive, spelled out, camelCased variable names. As a reader, quitButton is so much easier to understand than quitbtn. 
If you wanted to adapt this program to run from a CLI or be used within another program it would currently be impossible.
At the very end, you're setting fahrenheit/celsius to false, and then checking if they're false... I'm not sure I understand what purpose the flags serve at all. Are they needed? 
Since refresh==true will always evaluate to refresh, you can simplify if (refresh==true) to if (refresh).
At the moment you have no reusable components. The logic for converting temperatures is bueried inside your GUI code.