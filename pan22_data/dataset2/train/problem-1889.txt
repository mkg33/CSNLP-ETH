If i'm not mistaken this should work just fine, if that doesn't work then you can always force the application to start up on the second monitor if you know that it will always be located on it, that way you "start" the renderer on the second monitor and thus making that the primary monitor for the application, to do that, simply do:
Assuming you are using two separate graphics cards for the monitors in question, you have bound to the primary graphics card on the main monitor, and then drag it to the monitor the second card is rendering with. on -most- systems you will just take a huge performance hit as it still renders on the primary graphic card but then copies the data to the other one for display. In your case however it would seem its not capable of doing that.
All I know however is the hardware flow behind it, not the python and pygame software on top of it all.. But I would assume this hardware issue is why you are seeing your issues.
The fix was sort of easy tho (if it works for you, this is NOT logical because it doesn't have anything to do with the actual problem BUT it worked for me, for some reason and), all you have to do is (before you call the render function):
When I drag my game window over to my secondary monitor, the screen updating just completely freezes.