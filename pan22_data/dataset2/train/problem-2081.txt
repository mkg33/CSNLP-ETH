using die causes the script to halt and send 1 little message to the user, who would think this is rubbish, and never visit your site again :( :(
You can also have an box that says, Enter your email address and we will email you when were back on line, you get the idea.
is very easy to set up multiple connections. You are, however, required to know the connection you are querying always.
I don't think it makes any difference in regards to connecting to the database within the construction or within a connect method, what i do think you need to change is those die commands.
This gives you more functionality in the long run as every action is decidable within your APP, nothing is auto fired on default.
From your question I infer that you're thinking of having several instances of the DB class.  If so I'd suggest abstracting the connection out to another class and holding a reference to the same connection in each DB instance.
You might also look into the built-in php command mysql_pconnect().  This differs from mysql_connect in that it opens a persistent connection to the DB the first time it is called, and each subsequent time, it checks to see if an existing connection to that database exists and uses that connection instead.  You should then remove the mysql_close command from the destructor, as they will persist between page loads.
What you should be doing is catching your errors, and redirecting to a static page where you can show a very nice message to the user, fully apologising for the technical issues your having.