Or you can still create an EBS volume and add it to the running instance to expand your storage space.
->How exactly does EBS work? I know it's like a mountable external drive, but for example, can i install my entire web stack (mysql/apache/django) in the EBS and have it be plug-and-play to any instance?
I've been looking at BitNami Djangostack, which installs the whole stack for you on your EBS which then plugs into the instance. Is that basically what it's doing, installing the webserver, db, etc. on the EBS, or something else? Does the data live on the EBS aswell?
This is generally where EBS steps in, the non-EBS backed instance can die but the EBS volume attached to that instance will be available again to attach to a new instance and your data saved on the EBS volume will also be available again. Think of it like SAN storage in a way.
Since the micro instance does not have any "local storage", when i am installing apache, django, mysql, etc., where is it going? Does it automatically go to an EBS, is it kept in RAM,  or something else? I presume the applications must have somewhere to put their files.
Micro instances on AWS EC2 are already what's called EBS backed instances. IE even if the instance dies/terminates then your data should still be recoverable to simply start the server up again. This is very different to non-EBS backed instances where if the instance dies or is terminated the data on that instance is lost.
How exactly does EBS work? I know it's like a mountable external drive, but for example, can i install my entire web stack (mysql/apache/django) in the EBS and have it be plug-and-play to any instance?
Well sort of, you'd have to have all the software and everything installed in there as well or set-up and install an instance and then point config files to say all data can be found over here in this folder (or eg attached storage). But not quite as simple you can only attach a single EBS volume to a single server at any one time, however you can create a clone of an EBS instance by snap-shotting it to AWS S3 and then re-creating another EBS volume from that snapshot. Its also important to note that EBS volumes cannot move between AWS EC2 availability zones (AV) you can only attach an EBS volume to an EC2 instance if it exists within the same AV zone.
But most basic two things here, if your running micro instance they are EBS backed so if it dies you can restart and everything should be how it was before the server died.
Either way you'll want to take snap-shots to S3 every now and again as EBS can fail and in this case your backups are the only thing to help you. AWS S3 has a substantially higher percentage of reliability.
Instances of this family provide a small amount of consistent CPU resources and allow you to burst CPU capacity when additional cycles are available. They are well suited for lower throughput applications and web sites that consume significant compute cycles periodically.
I'm moving my person webpage to an Amazon EC2 free (for now) micro instance, and want to clarify some things.