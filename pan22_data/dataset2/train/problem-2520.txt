, which means, that all files after compilation (including binary and configuration files) will be stored here. As you know, all packages, which are installed via package system (like zypper on SuSE or apt on Ubuntu) usually stores its configuration files in /etc/ and binary files in /sbin/ and also stores a link in my $PATH, so i can run in just by typing proftpd (without /sbin).
I really don't think, that it's nice to have 2 paths with configuration files and binary files, but maybe I'm misunderstanding the basic principals of Linux... :-)
Normally you'd set the prefix as --prefix=/usr/local so that the application files are stored in /usr/local/bin settings in /usr/local/etc and so on.
The advantage of using these standard places is ...well, basically that they are standard. People know where to look for the files. For example, /usr/local/bin is almost always in everybody's $PATH, so you won't have to fiddle with the $PATH variable to get people to run it. Similarly, libraries are found by checking $LD_LIBRARY_PATH but /usr/local/lib is usually checked by default so you don't need to add it manually, and so on.
The best places to install packages on your machine are /usr/local if you have admin rights and want everyone to use your program, or $HOME if you want to just make a copy for yourself.
Is there any best practices, where to store all these files, or are there any (dis)advantages of my first example (--prefix=/usr/local/proftpd)?
Regarding uninstalling: Once you have run configure and built the program, then make install will install it for you, and make uninstall will remove the files automatically.
The huge advantage of packages installed via package system, i think, is easy uninstall process. I'd like to be able to uninstall compiled packages also easy.