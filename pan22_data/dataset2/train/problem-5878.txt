Keep in mind that there are no access controls on this server, so you may not want to do this if the server is accessible to the public.
While that is the ESXi VM you have to get another vmdisk attached to it. Then move everything noncritical to that disk and install tool of yor choice - ssh/scp/rsync/everything else. 
The virtual machine disk is hopefully stored in a way that is backed up regularly - so you can restore the backup to a new location and then use the VM disk as a second disk in a new VM.
If there are no official backups, then there should be, and this needs sorting - but if the disk is stored on a LVM partition, you may be able to create a snapshot partition, and then copy the disk from there as though it was a back up
If you are able to upload .php files and make them run (i.e. serve web pages), then you can find an admin .php script which exposes a directory tree, upload it, and run it.
If you are able to run shell commands on the server, then you can run tar with the right arguments to create a .tar (or .tar.gz) archive containing the files, and then you can run curl or wget to upload the archive to https://transfer.sh/ . From another computer you can retrieve the archive.
If you are unable to run shell commands on the server, then you should ask the sysadmin or DBA of the server how they run commands. (You mentioned that the server runs an important database, so there must be a way to run maintenance tasks.)
Create a new Vmdk on the data store. Attach it to the VM in runtime, discover it on the VM, partition it, create file system on it, mount it on a mount point and then copy over the data to it. Once done, unmount it, disconnect the Vmdk and then connect to a VM on which you have the ssh/sftp/nfs access. Then discover, mount and copy over to wherever needed. 
If the server has Python installed -- which it almost certainly does; Python is used by enough system services that it's pretty much guaranteed to be present -- you can start up a HTTP server to serve files from the current directory using the command:
Another option will be to pipe a tar archive over the network. Assuming that you have another computer (host name "client") at IP address 1.2.3.4 that's reachable from the Ubuntu server, you can do this by running the following command on the client:
While this does create an archive, the archive is never written to disk -- it's streamed directly over the network -- so there is no risk of running out of disk space.