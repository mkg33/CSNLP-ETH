"stable" is currently the 1.6 branch. Non-windows OpenAFS client releases are cut from this branch (eg. Mac OSX, Linux, Solaris, etc). This branch only gets bug fixes and security updates; no large features will land in the stable branch.
OpenAFS's versioning is not totally straightforward to newcomers. Here's the deal as of 2012. There are three basic OpenAFS versions: "master", "unstable" (1.7), and "stable" (1.6).
For CentOS you can use repos from Scientific Linux https://www.scientificlinux.org/. This is yet another clone of RHEL ( as CentOs is ) which comes with openafs.
I am trying to see if OpenAFS fits my needs as a distributed filesystem and is a bit stuck. There are docs but they're all quite hard to understand, so asking for some expert advice here. My questions:
This tutorial might be helpful. This tutorial for Debian is more verbose. Myself, I ran into some trouble using afs-newcell when setting up OpenAFS 1.6pre2 on Ubuntu. OpenAFS takes quite some effort to set up. I recommend you try to try understand what you are doing instead of blindly following the tutorials (like I did), as this might save you a lot of time when you run into problems.
If you can use pre-built binaries for your OS, I recommend doing that. I comaintain RPMs for Fedora, via RPM Fusion. If you're using Ubuntu or Debian there are also packages available. If you absolutely cannot get it to work, the openafs-info mailing list is a good source of help.
"unstable" is currently the 1.7 branch. The Windows OpenAFS client binaries are cut from this branch.
If you're using afp, do you mean Apple's network sharing protocol? You don't want to store the AFS cache over a network share - it's supposed to operate on a local disk.
"master" is where all development happens, and it's the bleeding edge. Developers normally land their changes in master first, and if necessary, the changes get backported down to the older branches. Unless you're an OpenAFS developer, you don't want to run this.
OpenAFS doesn't require dedicated partitions, either on the server, or the client. You might see references around the internet that describe setting up dedicated /vicep partitions for servers, or dedicated /usr/vice/cache partitions for clients. It's up to you if you want to use dedicated partitions or not; the point is that it's optional.