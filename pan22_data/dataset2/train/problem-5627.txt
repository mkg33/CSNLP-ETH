Booleans are a value type, which means when you do this, you're copying the false value from  doorclass[i].lockState to Doors[i].doorLockState, not creating a reference from the door to the bool in your array.
If you meant to populate these lock values procedurally as your level is generated at runtime, then that procedural logic to determine true or false lock states should run before you assign the lock values to the doors, rather than using the default false for all of them.
If you meant to use this collection of bools as a control panel to later change the states of the doors after Start() has run, then you need some code to fire when the i-th door's lock bool has changed and relay that state change to the i-th door. You'd do that differently if you need it to work for editor interaction via the Inspector (which seems to be suggested by the fact you made this array public), versus via code (which I'd assume you'd want to do for systemic gameplay, but I don't see evidence of it in your current sample), so again it's unclear from the current question what solution is appropriate for your needs here.
If you meant to author these lock values ahead of time in the Inspector, then you should remove the lines that create a new DoorClass[] array and default instances in Start(), as that throws away anything you wrote at edit time. However, this is a brittle method with no real control over order, and it would be easy for the collection of doors & lock bools to get out of sync and cause errors like an index out of range.
This line creates a new instance of the DoorClass type, with default values. The default value of a bool is false. So the value of lockState on this instance is always false,
This line throws out any lock state information you might have previously had and creates a new array from scratch. So if your plan was to use data you'd authored in the inspector at edit time, you've just lost it.
I'm not sure what to tell you about how to fix this, because it's unclear how you expected this to work.
Since you never check doorclass[i].lockState again, changing this value in the inspector later won't change the door's behaviour. It still has its own copy of the false value and knows nothing about the DoorClass instance you created for it.