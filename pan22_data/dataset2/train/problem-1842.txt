The other piece of duplication shows up where you do one set of actions when the color argument is one value, and an almost identical set of actions when the argument is the other value.  The only place the repeated lines of code differ is at a single hard-coded value.  If you just set a variable to be the correct value for either case, you don't have to repeat yourself.
Something you may have not considered is trying to index the array past the boundaries.  You should avoid it so you don't encounter errors.  Simply add a check for this before indexing the array.  I've split this check into a separate function because the boolean expression is quite lengthy on its own, let alone compounded with other boolean expressions.
Another tip is to handle all the cases.  If you use a switch, use a default at the end.  If you have an else if, use an else at the end.  Even if you just want to ignore the case that didn't match the other cases you do handle, you can just write a comment, log a message, or even throw an error.
It's easy to see that there's a lot of code duplication going on here.  What might not be easy to see is a nice way of condensing it.  One way to start is to see the similarities and where the lines of code differ.  It appears you want to perform an action on each of the four directly neighboring cells and something separate for the center cell.  A nested for loop could help tremendously.  The only thing to consider here is ignoring the diagonal neighbors.