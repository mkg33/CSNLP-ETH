data[ (int)(normals.Texture.X * normalMap.Width) + (int)(normals.Texture.Y * normalMap.Height) * normalMap.Width] and then convert it from a Color to a Vector3.
Depending on the normal map method you use you either just replace the normal of the vertex, apply it as a delta or apply it in tangent space which is a little bit more complicated.
My code might be a bit off as I haven't run it through a compiler but I am sure you get the idea. Also, I am not really sure why you would want to do this... if you are using a normal map with the hope of doing bump mapping without a custom shader then I am afraid this wont work as all you will be affecting is the normals at the vertices.
The next thing you have to do is denormalize the normal by multiplying with two and subtracting 1 => mapping 0->1 range to -1->1 range.
The common reason to use a normal map is to map normal details on the surface of a primitive formed by the vertices. It is not possible to do this mapping in software. You can only change the vertex normals but this will make your mesh incompatible with the normal map if it is in tangent space.
To map the normal map normals to the vertices you first need to extract the uv coordinates from the mesh and then access the normalMap data using these coordinates. To do this correctly you will need to implement bilinear blending by taking the 4 neigbouring values and blending them by the exact coordinate.