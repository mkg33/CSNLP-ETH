More likely I can accidentally corrupt the local data and it will be synchronized with the remote version and destroy the data on both locations.
But if the data gets corrupted on the part of the cloud storage provider, the corrupted data will be synchronized with my local directory and I will lose the data from both locations.
Corruption of files in Dropbox is also a non-existent problem, as generally these sorts of services maintain backups in case of a severe or catastrophic failure on one of their servers (these companies wouldn't stay up if they couldn't keep your files safe, which is one of the main selling points of this kind of product). Dropbox also has a form of differential storage, so that you can, in some cases, revert back to an older version of a file.
Local (unintended) corruption is also difficult, having in mind the usually high-reliability of consumer storage media. Of course nothing stops you from messing around in your own files.
Only the local Dropbox folder could potentially be corrupted. The data in your My Documents folder won't be corrupted because Dropbox isn't synching with that folder.
This strategy should work in case my laptop gets stolen or my house burns down. But if the data gets corrupted on the part of the cloud storage provider, the corrupted data will be synchronized with my local directory and I will lose the data from both locations.
In addition to backing up to Dropbox, I would back up to a local directory using for example Deja Dup. This way the data is protected against both destruction and corruption of the data.
Corruption of files sent to Dropbox (or any cloud-based service) is pretty much non-existent. I would argue that since Dropbox uses TCP as its file transfer protocol, it is assured that files on either end are the same.
I was thinking of using a simple backup strategy like copying my Documents directory into the Dropbox directory. 
I have used Dropbox for several years and quite probably the biggest problem I have had with it was due to shared folder ownership. As it turns out, space is handled in a relatively easy way: the one who creates the folder owns every file in it, even if uploaded by other users. This can corrupt files only if the folder creator has no free space. Dropbox tries to upload a preexisting file, whose newer version is heavier. In this particular case, nothing is changed in Dropbox and the older version remains.