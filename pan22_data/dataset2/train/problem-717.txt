This works fine. As long as I only have <200 enemy entities that is. When I get closer to 300-350 enemy entities my frame rate begins to drop heavily. First I thought it was bad rendering so I removed their draw call. This did not help at all so of course I realised it was the update method. The only heavy part in their update method is this each-enemy-loops-through-every-enemy part. When I get closer to 300 enemies the game does a 90000 (300x300) step itteration. My my~
Recently I've been working on a fast-paced 2d shooter and I came across a mighty problem. Collision detection. Sure, it is working, but it is very slow. 
I generally do three collections for systems like this. And when you are talking about the number of entities you are aiming to have you might even need to go with a full blown scene graph for this as the tracking data (3 lists per entity with an entry for every other entity) can quickly get out of control.
What you will also need to do to maintain this is when you are doing the collision tests, make sure you update which list the entities are in. Ones that move out of range should be downgraded and likewise ones that move closer should be upgraded into a more actively checked list.
The next list are ones that would be in a buffer range that Could move into range of the entity with out too much effort.. We will call this range X * 1.5 just for sake of argument. This is a time sliced list where you will only update a handful of them per frame but ensure that you are going through them fast enough to keep up appearances of things working smoothly.
I'm sure there must be another way to aproach this collision detection. Though I have no idea how. The pages I find is about how to actually do the collision between two objects or how to check collision between an object and a tile. I already know those two things.
My goal is: Have lots of enemies on screen and have them to not touch each other. All of the enemies are chasing the player entity. Most of them have the same speed so sooner or later they all end up taking the same space while chasing the player. This really drops the fun factor since, for the player, it looks like you are being chased by one enemy only. To prevent them to take the same space I added a collision detection (a very basic 2D detection, the only method I know of) which is.  
Assuming you are keeping things simple enough this should suit your needs. If you can tac in extra information to an existing rendering scene graph (assuming you have one) so you can query it to get a list of entities that are reasonably within range that would be even better as that is the entire point of a scene graph anyways (fast access to a list of relevant data based on a position). This would just potentially take more work to do and you should always consider what you need to do vs what you should practically do.
You already hit your problem right on the head, you are having every entity check against every other entity. What you will want is some type of 'Level of Detail' system (its pretty much a very simple scene graph, you are just using it for things other than rendering :)) where possible collision candidates are better selected.
Basically though you have three lists. The first one should be a very small list of entities that you are going to check with interactions every frame. You determine this because they are within X range of the entity in question. As mentioned the point of this list is to contain every entity that can reasonably collide with another this frame.
The third list is the 'everything else' list and a way to avoid having this one might be worth while (Scanning the entire entity list and maybe checking to see if its in one of the other lists before progressing maybe? Depending on list sizes this might work, or it might make things a lot worse.) Objects in this list get checked least of all as it should definitely take more than a few frames to be placed into one of the other two lists.