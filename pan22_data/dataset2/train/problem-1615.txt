I'm not crazy about the diagonal searching, but I can't think of anything better at the moment.  Maybe it's because I've been awake for ... yawn
This function is included in two rules mentioned above, but I mention it here because there is a much easier way to do it:
Again, you should be using a more descriptive name, but I brought up the for loop because you use i as your variable name.  There isn't anything wrong with using it, but in cases where the variable is not used, it is common practice in Python to use _ as the variable name.  It just makes it a little more obvious that it is an unused variable.
There is no need for while to be checking anything since you account for all cases inside.  I also added an else: so that the user would know why he was being asked again for input.
I would do all of the printing outside of the function.  In your main() function, it would be like this:
Excellent!  Many people use wildcard imports, (from <module> import *), but you didn't.  You even alphabetized your imports.  Keep up the good work.
That line is one character too long for PEP 8.  I would suggest changing boardLoL to board in all places.  What is LoL doing there anyway?  Are you laughing as you type?
Any condition is checking a boolean.  That is, if ...: is seeing if ... is True.  Using if ... == True: is redundant because you could have just used if ...:.  Consequently, if ... == False: is redundant because you could have used if not ...:  You can simplify that line like this:
Yeah, nifty.  You see, all(row) makes sure that each item in row is a Truthy value.  Any non-empty string is Truthy, so if any of the cells in that row is empty, all(row) will return False.  Since I am running all() on each of those all() calls, it returns False if any cell in the board is empty, but True otherwise.
I realize that you want to save characters, but -.5 is a little hard to read.  It almost looks like the - is one argument and 5 is another argument.  The extra 0 between the two would greatly improve readability.  Speaking of saving characters, you could use a for loop ... probably.  I haven't come up with anything that I really like, though.  You should also consider a different name for your argument.  Perhaps turtle would be more descriptive.