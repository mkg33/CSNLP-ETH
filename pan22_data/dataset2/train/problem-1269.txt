I've never had this issue before because there were always enough new users to make it unlikely for an ID to be reused in this way. However on my new project signups are rare and inactive user deletions frequent (especially since the "Open Alpha" accounts only last for three days as a preview), and such ID reuse has happened three for three now.
But I'm deliberately leaving their forum posts orphaned, labelled as "Posted by =User #123=", so that past conversations are retained. Clearly, should an ID be reused, this will be a problem.
Our system uses a tombstone table pattern to store deleted items because we do 2 way sync on disconnected systems, so we use this code to match the tombstone tables with their live tables and extract the highest value possible :)
I have "fixed" the issue by saving the correct value for AUTO_INCREMENT elsewhere and using that instead of relying on the internal value. Is there an actual way to have InnoDB remember the actual last value?
This will of course complicate the insert new user operation. Any new user will mean 2 inserts, one in each table. Deleting a user though will be by deleting from the ActiveUser table only. All FKs will be deleted with cascading, except the forum posts, which will be referencing the Alluser table (where no deleting will ever happen).
We had a need for this an extrapolated a solution for our own system based on instructions on this post. If this can help anyone reach their goal in an even easier way.
Normally, this isn't a problem, because when a user is deleted everything associated with the ID is deleted from other tables too.
2) One solution is to use a dummy row to your data, to keep the AUTO_INCREMENT above a certain value. Not super convenient depending on what you are storing, but is a simple solution in some cases.
Just don't delete the user.  Relational integrity is more important. If you have to because of privacy reasons or whatever, simply change the username to 'deleted' and clear out any other fields.
Since you want to keep the "Posted by =User #123=" information after you delete the user with id=123, you could also consider using 2 tables for storing users data. One for Active users  and one for all (including deleted ones from the active users). And never delete those ids from the AllUser table:
I recently read that because of how InnoDB recalculates the AUTO_INCREMENT value when the server restarts, any records on the high end of the ID list may have their IDs reused.