I love thesecretmaster's answer of showing the mapping between the two loops (and I will almost certainly do that in the future). However, as an AP Computer Science A teacher, I teach in Java, and there is a subtle trap in saying that 
As others have suggested, you could start by teaching while loops, since they have simpler structure. Then you could point out that many of these loops have some common structure: they initialize a variable before starting, and update that variable at the end of the body. This is so common that we have a special for statement that encapsulates it.
Theoretically, I teach the while loop first. Others have already explained how and why, but I'll go ahead with an example:
Now I would want to use something concrete here so I can show that it really always executes once, but I don't have time to make something up today. 
Tl;dr: a for loop looks for the boundary conditions, and then does what it needs to do, rechecking with a redefined variable accounting for the change that has been made. You input what change needs to be made to the variable to account for the action.
If you are to take the path of mapping equivalencies between the loops, you really should also point out this trap.
This logic helps justify why the order goes 1, 2, 4, 3 to start. I explain it as follows: a variable can only be initialized once so it happens first and never again. After that the variable is tested against the condition. If the condition is true, then the code proceeds to the statement. Only then will it reach update. If the first conditional test fails, the update code is never executed.
It's about setting boundary conditions first. Provide them with a more concrete example, like filling a glass of milk. You kind of need a glass or container (let me know the next time you pour milk right on the counter) and that glass is some amount full. We'll just treat it as empty. Then, you stop filling the glass when it's full (or half full or whatever), unless you want milk everywhere. 
Somewhere along in here I'll introduce the faux style thing about bracket placement and warn them not to argue with the managers about where to place them.
This is also useful as an illustration of modularity, which is a cornerstone of good programming. Whenever you find yourself doing similar things over and over, give that thing a name and encode it as a function, macro, structure/class, etc. In this case, it's just happening at a higher level, in language design: much of the evolution of languages over the decades has been finding common programming patterns and creating languages that have them as built-in operations and/or functions (e.g. foreach in PHP).
I'm likely to teach the post-test do ... while loop after having shown an indeterminate loop with a break at the end:
I have found that for loops are one of the few constructs that benefit most directly from drawing a flowchart. Using the visual diagram will help this logic become clearer.
I think the way to teach it is not by talking about order of operation, but by teaching the overall concept of a looping. The for header contains the steps that are generally common to looping: initialize iteration variables, test whether the loop should proceed, and update variables between iterations.
The two loops are identical, but of course there is one subtle but important difference: the scope of i (and its corresponding pollution of the namespace).  Java considers the int declared in the first section of the for-loop header to be declared in the loop, and therefore out of scope once the loop ends.
Some of the examples will be better expressed as for loops, and that's where I introduce the for loop, as a way of containing the essential elements in a concise construct. I might ask what happens if I forget to increment i:
That's exactly how a for loop thinks. It needs your conditions first, and then what you want to repeat while those conditions are true. (Yes, while - just like a while loop. I personally agree with thesecretmaster in that it makes a lot of sense to introduce while loops before for loops.) As you're pouring, you're constantly rechecking the level of the milk - "updating" a variable in your head as you act. So, if you were asking a computer to fill a glass of milk:
Another benefit of teaching the for loop this way is that it becomes trivial to translate it into while or do-while with the same pseudocode constructs.
Too often, people think first of counting when they think of loops, and that's why they jump to the for loop first. But the C for loop is not really the counted loop that BASIC has led us to believe it is. And the English grammar for the word is not limited to counting, either.
Once I do this, I can focus on each of these four parts, so students understand the different components that make up a loop regardless of the structure thereof.
Within those boundary conditions, you pour the milk jug. That is, mentally, you're thinking (in not so many terms):