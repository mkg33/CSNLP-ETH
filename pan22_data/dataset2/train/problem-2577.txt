Even Java with a tool like Greenfoot might work for you since it is very visual and has quite a lot of support through greenroom.greenfoot.org. The greenfoot folks are working on a scratch-like environment at this time, but its introduction may be a ways off. It does, however, include a language simpler than Java (Stride) with nearly the capabilities of Java (and translations between it and the full language). 
Note that there are quite a number of books for teaching Python to kids. A search at Amazon, for "Python for Kids" will turn up several, including a book with that title. I don't find that particular book especially inspiring, however. 
Either is appropriate in general, but the background of the students might also be relevant. Is it a random selection or self-selected interested kids or a captive audience? Knowing that might push you toward the more or less "sophisticated" option. 
You can probably do much of the same with a Raspberry Pi, but you'll have to take care of the wiring, motors, and sensors yourself. You may also not find a good block programming language for the RasPi.
Anything object oriented I would say. Such as java, C#, or Alice!. The reason is the high level concepts are hard to grasp such as threading, loopers, and ect. For example in Java create a object class called animal what can an animal do? eat and sleep, fight ect. Then grow it from there. Once you establish real world applications for the kids concepts such as inheritance(ex. lion inherits from animal because a lion is an animal) and polymorphism(ex. not all animals have the same growl such as a cow says mooo and an lion says rooaar, so like have a method called growl they have to override) are easy to grasp.
If you choose Python, I'd suggest also finding a suitable environment (i.e. something richer than idle) to provide support, with code management, code completion and the like. Scratch will provide much of that, but you might not want to have the choice Scratch v. "Naked Python". 
I think it largely depends on the kids. If you are proficient in both you might even want to give them a choice (as a class, not individually). Show them a bit of each in the first session and let them discuss the options. It might make them more connected to the course, in fact. 