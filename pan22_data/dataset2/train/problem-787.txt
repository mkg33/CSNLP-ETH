I've found an elegant solution. Since we are using maestro-ng to orchestrate Docker containers we can use it's lifecycle checking to wait for the web service's know end point to return HTTP 200 OK before moving on to the next container. We can safely assume that something went wrong if this condition is never met.
I can't seem to figure out if it's possible to setup Tomcat to stop when the ROOT context initialization fails. Since my Tomcat instance only hosts one application as the ROOT context, it makes no sense to keep Tomcat running in idle state if the initialization of this webapp fails.
I know this is not the optimal thing to do, for example a Spring Boot based microservice architecture provides this out of the box, but we cannot move to Spring Boot right now. However i need some kind of auto failure handling because we are bundling into Docker images and i would like to see it on the container level if something fatal happened inside that container (the container exited).
You could have something to parse the logs in crontab(and look for the specific root initialization) then stop the service or send an e-mail. Safe and easy to implement.