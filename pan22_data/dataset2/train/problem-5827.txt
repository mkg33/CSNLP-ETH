I have a standby solution for this in Linux ("redir") ... but not Windows; however, I found this in the Google machine:
Essentially, you're trying to work around what appears to be somebody else's bad implementation.  That seems reasonable to me, and sometimes, that's a necessity.  If this program is indeed "crashing" when trying to connect to one database but not another, as opposed to, oh, you know, displaying an error message, that's pretty weak.
If your client is "crashing" upon connection, it most likely would not stop doing so just because you are using a different destination IP address.
You should direct your efforts towards the problem's diagnosis instead of doubtful workaround attempts.
There might be a myriad of reasons why the software is running fine when connecting to a local database but becomes troublesome with a remote database, including but not limited to
I tested it just now with the "Cygwin" version -- no install required, it has an exe and a DLL and it "just worked" on my Windows 7 laptop.  Neat little bonus, it has a --log-to-stdout option which, combined with > into a file, logs the bytes sniffed from the stream (might be interesting reading).  I didn't have a SQL Server handy, but I tested it with some other TCP services and it seems to work as intended -- it listens on a local socket, and when connections come in, it makes a connection to a designated socket on a remote machine, and ties the ends of the pipes together.  Listening on 1433, it "should" do the trick.
While you certainly could use techniques like SSH port forwarding to make a remote listening TCP socket appear like a local one, it probably would not be of any help.