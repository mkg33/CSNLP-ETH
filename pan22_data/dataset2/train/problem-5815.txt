Since after the switch you do nothing else then returning the value of id you can directly return the outcome of the new method extracted() and get rid of the extra break line:
You can select this two lines in one of the case blocks and invoke your IDE's automated refactoring extract method. This will replace all the occurences of the repeated identical code with a call to the new method create by this refactoring:
Obviously it is not meaningfull to pass the null reference stored in variable id to the method. Tho change that we first avoid the use of this parameter in our new method by directly returning the return value of TypeUser::getId()
Of cause you should give the new methid a carefully chosen name but I keep the name suggested by my IDE on purpose.
As suggested by Ankit Soni you should have an interface that all your different user classes implement:
Then in your method you could store all different UserType-objects in a variable of same type having the same name:
Then place the cursor on the method name and invoke your IDE's refactoring change method signature. In the upcomming dialog select the id ror in the list of parameters ad click remove. This removes thisparameter vrom the method declaration as well as from anny usage of that method:
To stress the good advice of Ankit Soni again throughout your program you should replace branching with polymorphism. To enable that your method should not return an I but a TypeUser object so that the rest of the code can call a method defined in the TypeUser interface not needing to know what concrete type of user actually is given.