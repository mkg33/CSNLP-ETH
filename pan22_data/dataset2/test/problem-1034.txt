The proper way to concatenate characters into a String is to either use a StringBuilder or create a char[65], populate each char and create a String from the char[] with new String(array).
The brackets are redundant in public static final String VERSION = ("1.0");, and also in CHARACTER_SET.
Strings in Java are immutable, so prepopulating the string with spaces is a waste of time because that string will be discarded anyway.
You are picking the characters randomly - so whatever the order should not have any impact on the randomness of the password.
Your method is not very efficient because you create a lot of objects. Everytime you write password = ... + ... you create a new String.
You say "The 65 comes from the CHARACTER_SET length, which I have found out before". Well then make it clear! Ideally your code should be self explanatory. So instead of using 65, use CHARACTER_SET.length.
It's 65 at the moment. But what if you want to support more or less characters? A different character set? You'd have to change those hard-coded values every time.
SecureRandom.getInstanceStrong() returns a more secure Random implementation than Random itself, because Random uses the system time.
Extract the 20 to it's own variable. This allows you to extend your program to, for example, ask for user input and use that value instead. Perhaps the user prefers 16 or 28.