If it's an open source project, you might consider putting it on SourceForge and/or link it to Ohloh. People might like what you created and will (hopefully) give positive feedback/ratings on these platforms which can increase the popularity of your project. That way you might even find some developers who will help you improve the software you wrote.
Posting it on a developer forum like the TIGSource forums would be useful, but you should make sure not to just drive by and spam them. People will be much more receptive if you're trying to be a member of their community and also happen to have this cool tool to help them work.
With SlimDX, we started by hosting the project on Google Code, advertising very narrowly -- within a single community of developers (GDNet). That got us a few high level bits of feedback that we iterated on. Most importantly, though, we used the framework ourselves to build our own projects so we knew what the user experience was like and tweaked that until it was a good user experience. This includes things like making the end-user runtime installers as painless as possible, coming up with a decent documentation build, and providing at least basic "getting started" samples. 
You have to be careful when plugging your project, of course; we tended to be able to say, "well, you could use XNA if X, Y and Z or you could use SlimDX if A, B and C." It helps, I think, to be honest about the advantages and disadvantages of your product.
Social networks. It may sound a little stupid, but lots of people use them, and you are generally connected to people with the same interests as you, so it can be a good place to get a little exposure.
Then we kept plugging it whenever it was relevant in forums, we started a Twitter account to watch for people mentioning it and interacting with them, and slowly built up a community around the library, at which point the community was able to take on some of the burden of mentioning it all over the place. 
Having a website for the engine/lib/framework may also be a good idea, it will make the project look a little more professional. Then depending on the type of project, some screenshots will allow people to see the level of quality. Some getting started tutorials will also allow users to quickly start using the projects.
The most important thing is probably going to be establishing yourself as quick, responsive, and client-focused early on. We were able to turn around bug reports and feature requests extremely quickly in our first few months and invested a lot of time in making the framework easy to get and start using. Establishing that solid initial relationship with your early-adopters will really help propel you forward.
Not sure why it hasn't been mentioned yet, but I believe the best way to attract users to your engine is to write (or have someone write) a good game using it. When evaluating libraries and engines, the list and number of titles using them is always a good indicator of ease of use, versatility, support availability...
Marking technology is going to be quite similar to marketing a game -- in fact, if you have games made with that technology, that would be a great boon to adoption. Show them off.