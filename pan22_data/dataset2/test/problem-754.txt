I expect that all of your queries are going to be including a time range of either event_timestamp or logged_at, so really those are the only columns (except the primary key, of course) that need to be indexed, because no other index will work in combination with those. However, if you commonly filter the results by exact match with 1 or 2 columns, then it might make sense to have a combined index putting those columns first and the timestamp last. Of course, you have to use the right timestamp in the index and only one timestamp. Combining event_timestamp and logged_at in one index is worse than useless. 
With InnoDB it is important to use short primary keys, because the whole table storage is organized around the primary keys, plus the secondary indexes refer to the target rows by primary key. Having huge relatively random primary keys can cause the table B-tree to get out of balance and worse, makes the secondary indexes unnecessarily large. So the first thing you can do to improve performance is change your event table to have an auto-generated primary key that is an integer of the appropriate size. 
It will also help to build some kind of data warehouse strategy to keep that table from getting ridiculously large. Think about the kind of queries you need on events that happened a month or a year ago and how often you need them, and then move the data somewhere else (possibly summarizing it) on a regular basis. 
Agree with @Rick James. It is highly likely the VARCHAR especially on the PK is slowing down the query.
Second, indexes only help if they significantly reduce the number of rows to scan. Having what is called a "low cardinality" index, which means an index where the number of possible values is small relative to the number of rows in the table, is a waste because it is almost never useful but it takes up time and space to maintain. You probably are not getting any benefit out of indexes on event_type, status, or result by themselves.
In fact I would do this to other related tables that also have VARCHAR type for PK (group_id, person_id, client_id).
Similarly, indexes only help when the column is used as an exact match or the column has a natural ordering and is used in a range match. Combined indexes should have the columns in order from least specific to most specific and again will only be used to the extent that the columns, in order starting with the first one, are the target of exact matches (except the last column can be a range).
No, splitting the table into multiple tables the way you propose will not be helpful in your situation. Here are some tips that will help: