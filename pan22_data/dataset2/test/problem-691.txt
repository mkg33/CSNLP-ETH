This is very common in application development. The idea is that you have a resource file which defines a bunch of constants like:
Just one last thing you might find useful. This is a very comprehensive list of languages (actually "cultures"), with predefined codes for each of them that you may use in your program.
It looks like Python supports gettext out of the box so it should be relatively simple to get gettext up and running in your game.
I've used Poedit (runs on Windows, Mac and Linux) to edit translations for WP and found the experience to be fairly nice.
In this matrix the first dimension of the matrix is the language the second dimension is the string u need.
Because of this, in my opinion, simple is best. I prefer to use the simplest solution that works for my interests. Here are some ways to localize a game.
This allows you to add translations to an already finished game with minimal impact on the original already functioning code. I rarely see it used before a game is finished, because if the original text changes, you also need to change the lookup key. But it works, and if you have good lookup tables, it can be quite fast.
There are thousands of variations of this. You can have a file for each language, a file for each module; you can store them in source files, xml files, json files, csv files, binary files; you can import them from excel, word, a proprietary tool, etc.
Also, it is very common for developers to try to avoid string duplication by encoding common strings like "yes" and "no" only once. However, in some languages, the words used for those common words are different depending on the context. For example, if you're asked "don't you want coffee?", and you answer "no", in Japanese it means "yes, I want coffee" (a double negative), while in Spanish it means "no, I don't want coffee". Because of this, it is very common for developers to encode each string in a different ID, even if that means you end up with hundreds of "yes"es in your string file.
As always, there are lots of ways to achieve what you want. However, unlike other applications, games have very specific requirements, so what works best for other programs may not be best for a specific game. 
If your game has very few (less than 100) strings, and you're not considering on updating it, or if you just have very few languages, it is very possible to just say
This is not location related, but many games give up on this, and make the game understandable with drawings and other gimmicks that don't require written words. It definitely makes interesting games, and doesn't require any kind of translations. Remember cultural differences though (some colors have different meanings on some cultures, and some hand gestures may be okay in one culture, while offensive in another)/
I'm not sure if there is a game-specific translation framework but I've used gettext system for handling translations in WordPress. Here's the WP page describing their translation process along with a list of tools. The gist is that you create a template file that you in turn use to create translations. The final step is producing a binary, machine optimized file that is used in the actual application.
The obvious advantage of this is that programmers love it. Keeping program and data separate is the dream of every programmer, and it pretty much works. However, keep in mind that as the amount of strings increases, the amount of ID vastly increases, and a string ID has no semantic information attached to it, so it is very easy to make mistakes.
Doing stuff like this just works, and if it works for you, you probably don't need anything fancier. Also, you can do more sophisticated things, like reducing or increasing the amount of texts depending on the language. If possible, try to consider localizing like this.
Since moving strings to a separate file and attaching meaningless IDs to them loses the context of the phrases, you may need to have a much more thorough language testing effort. Be careful with this technique.
If u want to add a language u simply add another file that contains all the translations for that language. Because your game will load all these language files into the language matrix, the new language will become available when u restart the game.
Remember that localization is a very complicated matter. It's not just about translating words and meanings. There are lots of subtle meanings in whatever texts you have,  cultural issues to remember, and even technical matters such as textbox size (a text may fit on the screen when written in English, but can overflow when written in Finnish).
Especially when making translations after an initial game has been shipped, it is possible to add a very thin translation layer in every text related function, that takes the original text, looks it up in a translation table, and replaces it if a match is found.
Default/English language file the only weird file because the key(left word )and translation value(right word) are an exact match.
This is pretty much the same, but I've seen it more in the scripts a game uses, instead of the main program. The idea is that every function you make that can be localized, you take each possible language as an argument, like so:
Most European languages (English being a notable exception) use diacritics, accent marks and glyphs unique to them. Other languages use other scripts (like Greek or Russian). Others use different writing systems (Arabic and Hebrew read from right to left, and Japanese can be written from top to bottom). Do you have all the fonts required to support all those languages? Specifically logo like texts are very susceptible to text length problems, so be careful, and optimally plan for localization from the beginning.
When your game is starting, you just read all the language files and store them into a global defined string matrix.
This is very common in the scripts a game uses, and the best thing about it is that it maintains the context of each string, which allows for higher quality translations than just isolated strings, and if possible should be considered.
If you use this language matrix all over your code, u can simply change the language of your game by changing the LANGUAGE global variable.