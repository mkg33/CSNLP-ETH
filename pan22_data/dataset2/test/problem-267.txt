Short version: the modeling tool's rendering should never, ever be expected to match that of the game and an artist needs tools to visualize what the actual output will be quickly and efficiently.
Another option is to write a plugin for the modeling tool (Maya, whatever) that embeds the engine and allows the artist to work in real-time against the actual final output. Again, environmental controls are critical. I haven't seen this approach used in a while, but it wasn't uncommon a decade ago. Stand-alone previewers that automatically convert and reload models when they're modified are simpler and about as productive, though.
3D modeling software packages like Maya usually include a great variety of options for rendering.  For instance, Maya itself includes several software and hardware-accelerated renderers, and 3rd party renderer plugins can be used.  Different renderers have different features and support different effects, but for the most part, they're designed for high-quality, non-realtime rendering.
Most professional modelers have little expectation that the model in-game is going to look exactly like it does in Maya. The engineers have a very strong responsibility to provide tools for very quickly visualizing models using the game's rendering engine.
The needs may be satisfied by creating a model previewer using the engine. Thus the artist can at least see how the model and its animations will work using the engine's tech. The viewer needs a lot of options to control lighting and environmental parameters so the artist can mimic the actual environment(s) the model will be used in.
Rather than try to make an engine which supports all the myriad of advanced effects you could create in a 3D modeling package, the options are either to create a plugin for your 3D editor which will render objects as they would appear in your engine, or more commonly, to use an external tool or editor built especially for your engine which imports the asset, converting it to whatever engine-specific format you're using, and lets you edit engine-specific material properties, use custom shaders, etc.
This may be by allowing models to be re-loaded in game so there's no long shutdown/startup process to see the model in its final environment, which of course is significantly more valuable than simply visualizing the model by itself.