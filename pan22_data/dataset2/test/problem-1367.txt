Are you in a position to do a test 2 box migration before you need to do it for real, and have you got the time available to iron out any bugs or other issues that may arise?  If not, I would say stick with one box.  Otherwise 2 boxes would put you in a better position long term.  This for me is the crucial deciding factor.
I'm running an ASP.NET website with a SQL Server database and another server side application  which does processing to support the website on a Windows 2008 Web Server 32bit operating system.
It appears for the same price of upgrading to one Quad Core Xeon 2.66Ghz X3353 is around the same cost of running two Core 2 Quad Core Q8200 systems.
Two boxes will more than double the complexity of your system and more than halve your reliability.  There is the very real possibility that you'll wind up with a system that's slower than your current system if you rearchitect it without understanding exactly why it isn't fast enough.
I intend to invest some money into the configuration of my servers to improve the speed of my website and to support it as it grows and was wondering if anyone had any advice on the situation.
The server is normally at 95% CPU usage with sqlserver.exe, w3wp.exe and  my processing app taking up most of the CPU resources and the majority of RAM is also being used - which I understand is normal.
Would my money be better spent upgrading to a single Xeon machine or splitting database and asp.net front end between the lower spec Core 2 Quad Core systems?
The most reliable way to make your system faster is simply to replace it with something that is exactly the same but faster.  
With a 2 box solution you can spec each box according to the requirements of what's running on that box, and also isolate each component from the other.  Be aware though that the connection between the two boxes could become a bottleneck, and that the setup may be more fiddly - with everything running on one box it's always going to be easier to configure e.g. your site to talk to your database; going 2 box, and depending how things are written, this could require a non-trivial architecture overhaul.