Representing the helicopter's orientation as a quaternion has the advantage that interpolating between quaternions is much easier than interpolating between matrices. So if in the future you have a current orientation and you want to figure out the per-frame rotation that will bring you to a new orientation at a desired time, the quaternion representation may be more friendly to you.
The weird thing is, if I use my finger to represent the three axes of my helicopter (thumb up = y, index = z, middle = x), I don't seems to run into those problems. Why?
You should be able to use either a matrix or a quaternion to store the current orientation of your helicopter. The problem you're running into is how you apply change in pitch/yaw/roll to the helicopter.
You have a fourth degree of freedom that you've missed: the speed of the blades controls the volume of air being pushed, which also controls the amount of lift the helicopter generates.
The trouble I think you might be seeing is a difference in axis rotation and velocity vectors (and also that you're missing a direction).  When a helicopter tilts forward to move forward, the propulsion of the helicopter blades pushes air both down and backwards at a perpendicular angle to what you've labeled the X axis.
You are right, you would end up with the same problems. The key is to store the current orientation (matrix, quaternion) of your object and apply only a delta when changing the orientation. 
You should be able to use quaternions to do this, but don't base your quaternion values on the tilt of the helicopter itself - try using the forces of motion the helicopter generates instead.
I think you want to apply pitch/yaw/roll to the helicopter in local space each frame. You can do this by taking the change in pitch/yaw/roll for that frame and constructing a rotation matrix (you can do this with euler angles). Then you rotate the helicopter's previous orientation by this matrix (with the previous orientation represented either as a matrix or as a quaternion). It will give you the orientation for the new frame.
But even so, your "tilt left and right" and "tilt up and down" generally control the helicopter on a given plane.  That is to say, a helicopter shouldn't fly downward when it tilts forward, backward, or to the side - but the lift amount might have to change and the speed will be controlled by the "opposite" side of the right triangle formed by connecting the helicopter to the ground with a straight line down (gravity), and the hypotenuse (lift).  That should give your velocity vector to use.
I'm trying to make a simplified helicopter (for the moment, it's a cube) simulation in 3D and I'm having some problems with rotation. An helicopter can rotate along the three axes :
I seems that I need to use quaternions, but I don't know how to control each individual axis, since quaternions uses a direction and an angle. Should I create three quaternions and multiply them together? Wouldn't I end up with the same problems?
When you want to turn 10 degrees around y, just create a delta matrix/quaternion for that and post multiply it with your current orientation (if you use post multiplication for matrices). If you multiply it the other way around, it will rotate the system around world's y-axis rather than around object's y-axis.
Basically you can use every other representation of rotations, but Euler Angles. Matrices, Quaternions even Axis Angles will do what you want.
I need  to be able to control each axis individually. So far I've tried using euler angles, but whatever the order of rotation I use, either I run into a gimbal lock or some axes "switch places". 