Also, I'd like to be able to use git to deploy web page contents. I don't want to know any technical details on how to do this, but rather how I should organize the rights again. I use gitolite and each repository is stored under /var/lib/gitolite/repositories (the owner of the files is the git user). What is the best way to allow the git user to write to one of the web page directories while using the correct user:group information? Is this possible at all? How do you manage your /var/www access rights? How do providers do it?
You permit the apache user to have read-only access to the appropriate git repositories.  Then you periodically run git pull ... (e.g., via cron) to update the web server.  This means that you don't need to worry about permissions on the filesystem at all -- all the files are owned by the Apache user; nobody else has write access.
However, I do not want them to be able to view any contents of a subdirectory within /var/www other than their own. How can I do this? If I set the rights of the top directory to user:www-data and the access rights to 760, I think it would be possible. But how can I ensure that each file or directory created within their directory uses the same user:group attributes?
First, note that your 760 would deny www-data group the permission to "enter" that directory, so it would be unable to serve files from it.
any files and folders created in that folder after that point will be user:www-data.  Note that you only want to set this on the directories, and it will not "fix" files and directories that already exist.
I have a server with several users and would like to allow some of them to store webpages on it. Thus, I have created subdirectories of /var/www for them and configured my webserver accordingly.
If you don't need the directory listing or content negotiation features of the webserver, you can leave off the group r bit on the folder (6730).  This will make it a little harder to write a script that gets run by the webserver and peeks into another user's directory (they'd have to know the name of the file they want to read).  You can also mitigate this by using some form of suexec to make sure that scripts in user directories aren't run in the www-data group.
If you want to have the update happen automatically, rather than polling via cron, you can have a CGI script that triggers the git pull, and then in your repository post-update hook, you would put something like:
This is important: the git user does not have write access to the Apache directories.  The apache user is running a git pull operation and connecting to your git server over ssh (even if it happens to be running on the same host).
The +s bits on directories force files and subdirectories to be created with the same uid/gid as the directory itself (and subdirectories will also be +s), thus if you 