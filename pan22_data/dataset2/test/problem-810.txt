I took a brand-new Windows 7 Pro 64bit machine, built-up from scratch with absolutely no added applications. Not even anti-virus software.  The Hardware is an i7-6700 CPU on an Asus H270 motherboard.  One hard drive and 16 GB RAM.
But using a Windows machine (as described above) as the client, the minimum was 31 msec, the average 59 msec, and the maximum 1092 msec.  About once or twice an hour (perhaps more?) the Windows system would "go away" for about a second.  (Not only that, but the Windows system could not keep up with the full 32 Hz rate that the server can provide.)
The CPU bouncing may just be the power-saving feature.  CPUs regularly drop their frequency when not under heavy use to reduce heat and save power and improve longevity.  It will look in the task manager like a CPU usage spike, which can be frustratingly difficult to differentiate from actual program lag spikes.
Leave Windows Task Manager running so you have something you can check next time you see this behavior. The resource monitor provides more information than basic applications, processes tabs.
I suspect that the problem is something inherent in Windows 7 (and probably other variations as well). Exactly what it is, I don't know, but perhaps this will shed some light on the issue.
I'm getting this same issue -- stops responding for half a second, text delays appearing as I type, etc. I looked at my Resource Monitor -- and lo and behold! The CPU "Maximum Frequency" keeps bouncing up and down, at about the same tempo as the surging lockups I'm experiencing.
I went into my Power Savings Settings and modified the Minimum Processor State from 5% to 50%. This seems to have fixed it. For now.
Next time your PC freezes, check the resource monitor and check CPU, Memory and Disk I/O levels, hopefully you'll see a process that looks like a likely culprit, and you can investigate more specific fixes from there.
I installed git-bash (git for Windows) so I would have a bash shell.  I wrote a script that did an http post to a server that is guaranteed to respond within 31.25 msec to that post. If you issue a post immediately after receiving a response to the previous post, it takes about 31 msec to get the next post.  The script timed the intervals between the posts running in a tight for-loop.
If the client is running without any delays then one would expect the average interval to be 31 msec. If there are some delays from time to time that might stretch out to 40 msec or so, and then "catch up" on the next post with an interval of about 20 msec. In fact, using the same bash script on a CentOS 7 machine (with a much slower CPU and only 2 cores) I measured an average of 31 ms, a minimum of 13 and a maximum of 49 over several hours of operation.