template.attr("id", "#colour-box-template_" + index) is wrong — and altogether superfluous.  It's wrong because the ID must begin with a letter.  Also, since index is localized to the function, you'll end up assigning duplicate IDs on subsequent runs of the onclick handler.
          <div class="colour-input-div"><button class="btn btn-lg btn-primary" id="source-process-button">Process</button></div>
jQuery is called jQuery because you can use it to operate on sets of elements that you specify using a selector.  When you set the onclick handlers using two calls with two selectors $('#html-parse') and $('raw-colour-list'), you aren't using jQuery effectively.
I have nothing nice to say about Bootstrap.  Such a simple demo and you're asking the user to download all of that?  Even worse, your markup is littered with unsemantic class names.  It might be faster while prototyping, but you're going to pay for it down the road when it comes time to do the real thing.
Therefore, I recommend that you pre-process the colour specification string as little as possible — perhaps just trimming whitespace.
I'm going to add something about the way you present your sample input. It's only somewhat helpful. For example, what exactly is the ; doing? Is it delimiting the values so one can enter multiple values at once? Why does the last value in your sample input have it than?
Incidentally, I recommend writing all code using American English, as that is the international norm for code.  British spellings just make the code more confusing to maintain, and the cognitive dissonance between names like background-color and your colour variable are annoying to me.  (Use whatever language you want when writing comments.)
          <div class="colour-input-div"><textarea rows="9" cols="100" placeholder="Paste the source code in here .. We'll fetch all the colours for you"></textarea></div>
You're loading both jquery.min.js and jquery-1.10.2.js.  I assume that that is an unintentional mistake.
          <div class="colour-input-div"><button class="btn btn-lg btn-primary" id="colour-process-button">Process</button></div>
          <div class="colour-input-div"><strong>Sample Input: </strong>#ffffff; #000; #555d50; #474747; #929292; #393939; #bada55;</div>
        <li role="presentation" class="tab-options active" id="raw-colour-list"><a>Raw Colour list</a></li>
It's one thing to play with colours in your browser; playing with the colour specification in your code is not something I would recommend, because:
In .colour-box-text, you've specified font-family: "inherit".  Unless there is a font somewhere named Inherit, this isn't doing what you think it's doing.  The inherit keyword needs to be unquoted.  You shouldn't even need this anyway.