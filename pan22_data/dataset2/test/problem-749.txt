For years I've been using nohup or screen to keep processes running after I disconnect to the terminal through SSH. So it quite shocked me when one of my friends, a green hand at Linux or CS, told me ctrl + D (or exit) could do the same thing, and probably in a more elegant way.
I tried to search for some information about this but it seems everybody is talking about nohup or screen. Is the method I'm talking about a common knowledge? Is it just a specific feature for some systems or environments? If it is available generally then what's the meaning of nohup?
I know ctrl + D or exit are very common ways to log out. But after you log in again, you'll find the process you've just initiated running.... This may sound hard to believe and I said I was shocked. I tried the method in several different situations, including simple dead loop python scripts, it indeed worked. 
In most (all?) terminal emulators and terminals it'd simply log out you, ending the process. This means if you had a process running in the background, which wasn't nohup'ed or in a screen session, it would die along with your log out.
Firstly you can only use nohup or screen if you know prior to running your command that you'll need it to continue before you log off.
So here's how to do it: First run your process in the background just as usual (by adding & or using bg, whatever), then, when you want to disconnect from the terminal, use ctrl + D or exit to log out.
What happens when you press ctrl + D is that the input buffer is sent to the running process. Now what happens next depends on what application you're currently in.
However it's possible that you're within some application, that using ctrl + D isn't actually ending it, but putting it into some background state.
Another thought is that your friend was thinking about ctrl + z - this will pause the running process, which you can then 'disconnect' from the running terminal session using bg and disown. Once you've done this you can close your terminal. This is basically the same as using nohup before running the process.