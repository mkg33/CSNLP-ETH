One problem might be if your levels are huge, editing them in a paint program might not be pleasant depending on the power of your machine. But for iPhone-game style levels I suspect you'd be fine.
Fundamentally that algorithm isn't any different than what a dedicated tool would be doing, and if you can do it on a bunch of distinct image files you can do it on images in memory -- in other words, it might not be terribly complex to write your own simple tool that does this after you get the basics of the process down using a paint program. 
I've been working on a non-tile-based editor myself (screenshots: http://www.bluescrn.net/projects/twodee6.png , http://www.bluescrn.net/projects/twodee4.png), but it's still very much a work-in-progress.
If you haven't already read it, I'd recommend reading this, gives some ideas of how non-tile-based 2D can be done very effectively:
I've recently released a non tile based level editor for iPhone and Android. It has in built physics simulation for testing and can load game elements from SVG or by tracing PNG images. For your game you could just import rectangular PNGs and position them where you wanted. The level designer produces a config file and a packed sprite sheet (optional) which can be exported straight to XCode (code is supplied to read the config file). It's pretty simple but very flexible. The program's called Shape Workshop and can be downloaded here.
You could also take a look at the Aquaria source code, and see if its editor is adaptable to your needs (that used a mix of tiles and arbitrary object placement)
Offhand, I don't know of any game-agnostic editors aimed at this task. However, you could consider using any existing paint program (Photoshop, GIMP, Paint.net, Acorn, Pixelmator, et cetera) that supports layers, build each level sprite in its own layer, then simply saving each layer individually to some directory, and then writing a tool to post-process that directory to isolate the position and bounds of each image within the layer file, save out that position and bounds information, and slice up the layer and re-composite all of them back on to a texture atlas.