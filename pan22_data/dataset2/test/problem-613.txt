Now all of the logic about when to trigger certain events lives in your data, rather than a big nest of if statements in code. This makes it easier to scale to bigger & smaller scenes, since you can reuse the same code with different scene objects.
This also keeps the timing information attached to the object that needs it, so you don't need to jump around your scene when editing the plane landing - the plane object has it all in one place - and if you delete an object its timing logic goes with it, rather than hanging around as unused cruft.
When the time changes, the DailyClock script is responsible for finding all DailyEvent intervals in its lookup structure overlapping the current moment, and telling them to trigger or update their animation playhead position. It also needs to find all formerly active DailyEvent intervals and deactivate them, for when the time seeks outside of a DailyEvent's interval.
The way I'd approach this is to create a MonoBehaviour representing a daily event. We'd attach an instance to each object that needs to do something at a particular time.
Then I'd have a master DailyClock script that handles time of day. On startup, this script would find all DailyEvent instances in the scene and add them to an efficient lookup structure like an Interval Tree.
You might have a few subclasses to specialize eg. DailyAnimationEvent vs DailyToggleEvent, or just handle them all in one class - that's up to your coding style.