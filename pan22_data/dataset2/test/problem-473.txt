Ubuntu is based on Debian.  They take the latest stable Debian and add their own Desktop apps, software management tools and other things to make it unique. There are many other distributions of Linux.  Most are either based on Debian or based on Redhat, although there are also Slackware and Gentoo based systems.  Each of these 4 bases are built upon by the other distributions.  For example, I'm running Elementary OS right now, which is based on Ubuntu which is based on Debian which is a version of Linux which is a flavor of Unix.  Got it?
UNIX was an OS created in the 60s and 70s. Computers were expensive, and UNIX was expensive. That was not a problem. Only big companies, universities and governments had computers back then, and they had money. 
GNU stands for "GNU's Not Unix", and it is an attempt to create a free, independent version of Unix, developed by the Free Software Foundation.
Many other distributions were later created, often not from scratch, but taking an existing distribution as a starting point and adding extra software to it, or organizing it differently, or whatever. Ubuntu was based on Debian this way.
There are two main distributions: Debian/Ubuntu and Redhat/Centos. Besides that there are some other distributions, but these have the main marketshare. 
Linux is a type of Unix, although purists will tell you that Linux is just the "kernel" the lowest-level part.  The rest of the OS is made of Unix compatible tools from the GNU Software Association and other places.  Together, this makes GNU/Unix.
Debian is a "distribution" of Linux; they did all the hard work of compiling all the various tools you needed to make a whole Linux system, compiled them and offered them for download as a bunch of floppies. Or a CD, later. Others did the same, e.g. Slackware, Red Hat and so on.
Linux is an operating system kernel initially developed entirely by Linus Torvalds. It was intended to be a bit like Unix and drew many ideas from Unix. Torvalds did not start with any Unix code as a base. 
They got very far, they made a C compiler, a C library, a linker, editors, shells, all the commands you'd expect in a typical Unix shell, lots of stuff. But the kernel (called "Hurd") wasn't finished. All the things outside the kernel (running as processes owned by users) are together known as the "userland".
When Linus Torvalds created his Linux kernel, he didn't create a userland. He just had a kernel, it wasn't a full system either. It turned out to be possible to compile his kernel and use it inside the GNU userland (this was probably not trivial, but I wasn't there and don't know).
Linux is unusual in that the kernel, the C library, the compiler, the basic set of "shell" utilities, and so on are all developed by different groups of people; moreover, there's more than one choice for most of those pieces.  Someone has to pick a set of pieces and put them together and make sure they work properly in combination.  That someone (usually a group of people, nowadays) is traditionally referred to as a distributor of Linux, and their output is a distribution.  Debian and Ubuntu are distributions of Linux; they used to be extremely closely related but have since diverged quite a bit.
Ubuntu was created on top of that, but then with normal users in mind - those that don't know how to use a terminal, those who want something that simply works. 
Ubuntu is a downstream distribution of Debian. One in which Ubuntu add a lot of value (compared to some other such relationships such as CentOS and RedHat perhaps)
(There are also a bunch of experimental research prototypes that are trying to move beyond the Unix design, but they don't qualify as "in wide use", alas.)
Nowadays, "Unix" is an umbrella term for an entire family of operating systems, some but not all of which are directly descended from that original OS; anything whose primary system programming interface is compatible with the POSIX.1 API specification can legitimately be called an implementation of Unix -- and there are dozens of them. It is easier to list the operating systems still in wide use today that are NOT implementations of Unix:
Mac OS/X is similar to Unix in that it uses a different kernel (Mach) that is also Unix compatible with a set of software packages on top of that to make it compatible (mostly) with BSD-flavors of Unix.  A lot of software is easy to port from Linux to Mac because of Mac's BSD compatibility.  However, they change the upper layers of the OS with a GUI based on display PDF and other additions.  The whole thing was originally created as NeXT Step and Apple bought it and gave it a facelift.  Its in the Unix family.
"Unix" was originally the name of an operating system for the PDP-11, developed at Bell Labs in the 1970s.  Its design was immensely influential, and it was copied and reimplemented dozens of times.
"Linux" is the common name of one implementation of Unix.  It has been around since the 1990s and is one of the top five most commonly used implementations today -- probably either #1 or #2, depending on how you count these things.
(Technically, the name Linux refers specifically to the kernel, and it'd be a little weird to call an operating system Linux if you didn't use that kernel, but there are people keeping everything else and swapping out the kernel, e.g. Debian kFreeBSD.)
To make a usable operating system you notably add to a Linux kernel a set of "GNU" tools  independently developed by the FSF. You also nowadays add one or more of several competing subsystems (e.g. Gnome or KDE desktop manager). Each of these is called a "distribution".
Debian is a general distribution of Linux.   Every distribution has its own package management tools, set of default packages that are pre-installed, and may differ in what services are pre-installed and even what configuration files and such are used.
It was so expensive that Linus Torvalds created an alternative: Linux, which stands for Linux Is Not UniX. He wanted it to be open and free. UNIX was copyrighted, so he rewrote all necessary code (with many helping hands), and required all code to be free, using a special license. As this was a lot cheaper, many people started using it. It was cheaper than UNIX, soon had more users, was used on more servers. As it was cheaper and faster than Windows, it was more popular for cheap webservers as well. 
Android uses a Linux kernel, but the rest of the OS is of their own design, so while the lowest levels of the OS are based on Unix, the rest is not, and its not generally considered to be a Unix flavor, although some consider it a Linux flavor.  Confused yet?  Android doesn't conform to the POSIX standards.
Redhat and Centos both are server systems, like Debian. They both have desktop versions (and debian as well), but not as user friendly as Ubuntu, which has a server system as well, which is becoming more and more popular. Redhat is the OS of choice for big companies, because they offer support contracts - expensive but for some people not a problem. 
The OS people usually refer to as "Linux" actually started out as the Linux kernel with the GNU userland, and lots of other stuff has been added since. The Free Software Foundation has always insisted it should be called GNU/Linux as a result.
Some distributions are essentially modified forms of other distributions. Typically one distribution is referred to as an upstream distribution. Releases of the downstream distribution depend to a large extent on new releases of the upstream distribution.
I suspect there's not any PC-DOS code in Windows 8, maybe not even for compatibility purposes. There is a clear progression from DOS to Windows 8 though. This is not really the case with Unix and Linux.
Unix is a class of operating systems all based around the same theory and all similar enough that most people can't tell the difference.  The history is kinda convoluted and involves Berkley (BSD) and AT&T (SysV) and a standard called POSIX.
DOS/Windows is totally different.  MS-DOS was originally a port of CP/M from the 8080 to the 8086 (the 8080 is an 8-bit CPU and a .COM file is an 8-bit executable for CP/M).  Microsoft didn't write it, they bought it then licensed it to IBM and its competitors.  Windows started out as the old Apple API, more or less stolen legally, which is why it uses a Pascal calling convention.  Windows 95 and Windows Me and a few others still used DOS internally for some things (there were lawsuits about this).  Newer versions of Windows are based on the Win32 API which was co-written by IBM for OS/2.  Microsoft broke off from the OS/2 deal and took the code with them.  The Windows NT kernel is normally used for running the Win32 API which doesn't use DOS at all, and Microsoft actually borrowed some ideas from Unix .. in fact a couple Unix copyrights even show up when you boot NT, but its still FAR from Unix compatible.
In one way or another this is true. The latter group were essentially based on a re-implementation of many ideas that came from Unix. There was no Unix code in Linux (although this was the subject of prolonged litigation which ultimately failed).