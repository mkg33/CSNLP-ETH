The library is designed to throw an exception at the first bad parameter it encounters.  It would be nice to have a mode that returns a list of all of the validation failures — which parameters failed and why.  That would be useful, for example, for validating web forms, where it would provide a better user experience to let the user fix several errors before resubmitting.
I like that the library provides syntactic sugar to make code easy to read in English.  Chaining is a nice design.
I'm not convinced that in its current state, the advantages of using the Preconditions library (mainly syntactic sugar) would be worth the trouble of introducing more external dependencies and dependencies of dependencies.  I hope that it could be reworked into a more flexible validation framework, though.
I would hope that StringPreconditions.isNotEmpty() also checks that the string is not null.  Otherwise, it would be tedious to write .isNotNull().isNotEmpty() everywhere.
IllegalArgumentException is a non-final class, and by subclassing it, you could probably do better than encoding the validation errors into the message string.
You have a lot of methods to support .isX() and .isNotX().  It seems that there should be a generic way to specify AND / OR / NOT operators.  Also, there is no good way to support preconditions other than the ten-or-so types that you have mentioned in the Preconditions class.  Nor is there any way to, say, add support for a validator that checks that a string looks like a North American phone number.  (StringPreconditions has a regular expression that checks for e-mail addresses — why can't I take advantage of that for a similar goal?)