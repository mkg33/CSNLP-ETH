I think these answers are all getting a) way too complicated, and b) off-track relative to what user2023861 wants to accomplish:
If you want a procedure to return a result you either need a REF CURSOR as an out parameter or you need to create a function that returns a result set. But in both cases you can't just call the procedure/function. The caller needs to consume the result somehow if the procedure returns REF CURSOR or explicitly use it instead of a table, e.g. select * from  table(my_function());
If you want to make this semi-procedural, then you use BIND Variables and the declarative syntax of PL/SQL similar to T-SQL. (In my opinion this is a HUGE waste of effort, but is included to help clarify variable types.)
So, when do I use each case?  I use SQLplus Substitution variables 75% of the time when I write SQL scripts that I want to parameterize the input for. Executing a script at the SQLplus prompt allows passing inbound arguments, so my favorite Substitution variables are &1 and &2 as in the following example:
"I am trying to declare a variable, then select that variable." means two different things in either PL/SQL or in SQLplus, and perhaps two more things in DBArtisan.   To accomplish the objective in SQLplus, use "Substitution variables"...excellent background is found here.
Notice how the inbound arguments are assigned into substitution variables, then used in the SQL statement.  I never use the middle example, and I always use the 3rd examples (procedural PL/SQL) when writing functions, procs, and packages.
You can't just "select" inside a stored procedure (or a PL/SQL block) and then have the result magically "returned" from there. This is a fundamental difference between PL/SQL and T-SQL. 
My example, doesn't precisely follow your SQL Server T-SQL example, but it's close and is NOT procedural (read: no anonymous PL/SQL block.)
This may not be the most performant code, but it's easy to understand.  I have found that the documentation for PL/SQL in regards to reading from and writing to variables extremely poor.  I'd be happy to be proven wrong, but I can't find a simple example of PL/SQL code that contains the same concepts exhibited in the following TSQL code: