But I would also question the use of adding verbose behaviour to the class at all. It seems to have no value other than debugging. If that is the case, you could simply use a debugger. 
Checking whether b is a divisor if a explicitly is also superfluous (again the algorithm handles this by itself already) we kick that too.
Now if a is not the larger of a and b you switch their values. Ironically, a property of Euclid's algorithm is that it automatically performs this switch by itself. So the code to make sure a is greater than b is superfluous (we kick it)
I immediately wondered why you method was so long. Of course the verbose related code added quite some bloat, but even then, the code could be as short as this (I used the more traditional name gcd for greatest common divisor) : 
But we're not done. This code doesn't check input validity (0 values are not dealt with properly, negative values are not dealt with properly)
Other answers suggest you to make this method static. I would advise against that. While it is more convenient to use, it also introduces greater coupling of clients. In fact I would suggest having this class implement an interface and allow different algorithms to be implemented as classes implementing that interface (a different implementation may be using shift operations to extract the common power of 2 from the arguments)
Now if r becomes 0 we're done, yet this form still moves b into a and r into be before checking. Converting this to a for loop solves that problem, note that with this conversion our answer now is b instead of a, once we exit the loop.
If the verbosity is needed because this method is used as part of a command line tool, I think this level of detail is unwanted or unneeded. Verbose output should help the user spot problems with their inputs. For such verbose output, using the decorator pattern should do the trick (this is also a good reason to have this class implementing an interface). The verbose decorator then simply produces output (without if checks) before delegating to the non verbose delegate.
For verbosity I can only also recommend the callback approach, although I would be registering callback instances seperately from calling the method.