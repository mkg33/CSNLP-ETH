The take away is:  We use physical formatting to help the reader understand the structure of a document at a subconscious level --- you don't have to read it, and you can identify the components and key relationships almost instantly.  Then you can use your intellectual effort to understand what's there rather than "Is this one of the items that goes with that thing?"  Publishers have figured these things out and honed their skills for centuries.  Alas, self publishing and the web means there are a lot of poorly designed documents around.
Lots of good comments here.  Showing bad code and asking them to understand it will particularly drive the point home.
I've taken to having coding standards in my courses.  No one followed them until there were points attached, of course.  Initially, it was protect my eyesight, but it helps the students write clearer code.  
Enforcing those good practices early, even under threat of penalty, pays off in their junior and senior years. That's when the understanding part kicks in -- when they're working on larger projects, sometimes with others.
Like most things in CS, learning the 'why' of good code formatting is a gradual process. In CS1 and CS2 we mostly say "just do it or else you lose points". (I do go on to gently explain to them that I want to give them the most partial credit possible and that I can't do that if I can't read their code. They usually get the hint.)
Side note:  I had a blind student once who was a fantastic programmer.  I hired him as a TA, and he was superb at that, too.  He was once hanging out around my office when I was talking to a student about these things, and he blurted out "I don't know why you people need that stuff!  It's just 'space, space, space, space,...' and it's annoying."  It's true:  he takes in programs in a necessarily linear way, and he makes structures in his head that I cannot fathom.  I program, and teach my seeing students to program, by drawing lots of pictures.  I have no idea what he has in his mind, but it sure works!  I wish I knew how he did it.
Using an IDE like Eclipse (which can do 80-90% of the formatting for you) and a tool like Checkstyle helps tremendously. It's not a substitute for understanding why we do it, but it makes it less of a hassle for the stubborn students.
It may be a hassle (is this an argument for better editors), but the time spent in keeping the code tidy usually pays off by both avoiding and finding bugs faster. Its a different (but related) question to 'would you prefer your code to be really fancy and efficient, or to work properly'? I think this latter problem is maybe easier to explain because it's more tangible.
When your juniors are critiquing the formatting of sample code from a visiting professor you know you're getting through. :)
Print out some code and then put it some distance away.  E. g., stand it up on the marker tray of a white board and back up until the text is too blurry to read.  I used to say 10 feet, but my eyes are bad enough now I can just take my glasses off.  Just ask the students when they can't really read most of the words.  
The purpose of indentation (to express the intended control flow) and the value are subtly different things. For a 5 line script, there is really not much value in indentation or comments - the code is a throw-away.
The real value in cleanly presented code (of which indentation is only a part) comes when a person is reading the code some time after it was written. Maybe it's something you've posted on SO as part of a question, maybe you're asking for help in improving the code from someone else (or explaining how good your code is). Maybe even worse your code is broken and you need to fix it in a hurry.
Indentation can be used as a visual queue for processes. Whenever there is a bug in the code, it is possible to more easily spot it (again, visually, not just by understanding). Especially wrongly placed curly braces are easy to find this way.
If the code is formatted in a way that is considerate of a human reader, we can tell how many functions there are, which functions have loops, which have nested conditionals, all without reading any text at all.  We can even pick out the more complicated functions and sometimes even spot opportunities for refactoring based on common shapes!
For programming, you don't want anyone to use their conscious thought to answer easy things like "Is this statement controlled by a test in a conditional?  In a loop?  Is this a function call or a special syntactic thing?  How many arguments are there for this function?"  There are enough things you'll have to think hard about, and it's inconsiderate to make your reader spend their valuable time and energy on mundane items like this.  That reader might be you in 4 or 5 days even, when you've found a bug and can't quite remember what's going on in this part of the code.