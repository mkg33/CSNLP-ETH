LGPL allows your code to be used in a project that's closed as long as they don't directly include your code in their project, but link to your code as a dynamic library instead. The project maintainers are also required to make any changes they make to your library available (so any bug fixes, etc need to be made available as open source). The linking issue has important consequences -- afaik technically you shouldn't be using LGPL'd code in a closed project on iOS for example, since they only allow static linking.
There are tons of other licenses. I suggest you check out the Apache license, Mozilla license, and the zlib license as they're in common use as well. Also check out the WTFPL :)
MIT is very similar to BSD. Both BSD and MIT basically allow anyone to do practically whatever they want with your code. They aren't obligated to make any changes/fixes they apply back to you and can include your code in their project in any way they deem fit.
You may also want to take a look at the Apache License v2.0.  It is similar to the BSD and MIT licenses in that there is no copyleft.  It's differs in that it spells out its conditions EULA-style that the BSD and MIT licenses mostly imply, such as the grant of patent rights.
GPL doesn't allow your code to be used in a project that is closed source (proprietary). You should only use the GPL license when you want to force anyone else who uses your code to have an open source project as well. Specific to your question, licensing your engine under the GPL would probably turn a lot (the majority) of people away from using it.
However, there are several other more permissive and straightforward open-source licenses such as MIT and BSD. OpenSource.org has a large collection of open-source appropriate licenses available for perusal. 
This will bring benefits for you, as developers will be more likely to use your engine if they know they can make money off of their project.  You won't be losing anything by letting them profit, and they'll be more grateful and richer; thus, more likely to donate.
There are also important details between license versions, especially with the GPL licenses... so make sure you read up on those before choosing between LGPLv3 and LGPLv2.1 for example.
In my opinion you would do well to avoid the GPL and its derivatives (LGPL), instead opting for the MIT or BSD licenses. The GPL family of open source licenses are extremely complex as well as viral, and as a consequence are hard to use correctly, by both licensees and licensors. 
Mozilla Public License Version 2.0(MPLv2) is a FSF-approved open source license. It prohibits changes to the MPLv2 licensed code without redistribution of the MPLv2 code but is non-viral. It can be likened to a more reasonable LGPL.
Please use the Zlib license, or something similar, instead of the GPL. The Zlib is very liberal and allows developers to use your code in closed-source projects.
There are tons of opensource licenses: http://www.opensource.org/licenses/alphabetical, and you have many different licensing options. Here's a super brief run down of popular license options... I may have gotten some details wrong.
BSD allows your code to be used in a closed source project as long as proper attribution is maintained. There are some other specifics as well that try and absolve the author of the code from being liable for its use. This is a much more liberal license than any of the GPL ones. 
Google also recommends the Apache License v2.0 in this post about license proliferation (and GPL v3 if you want copyleft).