A similar system can be created like this (note, this is not with loading scripts, but just setting timeouts, however the principle is pretty much the same, also note that the order of loads is not necessarily the same as I typed them, it's important to node that keys on an object don't have a guaranteed specified sequence.
As you didn't specify if ES6 would be viable for you, I don't know if it fits your use case, though you could use babeljs to transpile it to browser compatible JavaScript.
Another important node is that this code will wait for each loadDependency to complete. However, it will not block any of your code. Hence, you will see loading started in the console before any other message.
To the outside world, this function is accessible through module.loadTree, however inside the function, I can access it through _treeLoader.
In the completedCallback, this counter will be decreased, and if it reaches 0, it will fire the eventual real callback
Another thing to note, would be the that you can assign properties to functions, which can be handy sometimes, in our case, to assign it with a counter:
It's important to note, that this pattern is not fully implemented in all browsers (eg: Internet Explorer).
Since you expressed interest in loading through Promise, I thought I would offer 1 version that loads the promises through the async / await pattern.