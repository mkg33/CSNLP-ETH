There isn't really a "best" language to use for game development.  What goes into the consideration of a language is what your target platform is, what criteria your architecture must meet, and, yes, what your preference is.
As far as workflow is concerned, things would indeed move faster if you choose a framework which is based in a language you are familiar with.  That's not to say you shouldn't shy away from a challenge and learn the ins and outs of an entirely new language :) (but that's just my opinion).
I generally recommend using the best language for the target result, even if you are not the best at it, since you will get better with experience, and also important, when you get stuck on things, when you ask for help, you don't receive the reply "I don't know, I always use $other_language!".  However, if I am writing a quick-and-dirty program for myself, I'll usually write it with whatever seems easiest and quickest.  It depends on how nice you want the result, and how much pain it is to do it the nonstandard way.
A random comment: if you are using C++, I recommend using std::vector (or any of the other containers) over int a[].
I'd recommend you decide exactly the requirements for the game first, then figure out if your language of choice can handle it. Chances are someone made an engine that does do it.
To sum up: it depends on what your goals and requirements are, but if you're just starting out, I'd recommend using something you're familiar with.
Depends on what you like. Assembly would be a horribly inefficient language. PHP won't apply well to non-website games, C won't work well with browser games.
For example, if you are developing for an Apple product, you might benefit from using Objective-C.  If speed is paramount (perhaps you're doing something incredibly CPU-intensive, or even GPU-intensive and use some third-party library) then C++ is probably necessary.  If you want to get something up and running as fast as you can, and would like to iterate quickly, then a scripting language is the way to go.
It's always more efficient in terms of speedy development time to work in the languages that you are most familiar with, but there are frequently reasons to use other languages
Generally, languages like C, C++, C#, Java are good mid-level languages that can create almost any kind of game well. Go as high level as you can, then move lower level when you need to optimize.