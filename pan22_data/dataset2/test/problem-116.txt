I don't think messing with the permissions on shutdown are the way to handle the situation.  Basically you just learned a lesson.  Chin up.
Depends, really. You could try just wrapping the command but it means that if you do updates or upgrades that affect that executable, you might forget about it and have it screw up an update. Playing with system shutdown commands can be a PITA, especially if you have new hires or a replacement that ends up not knowing you were playing with system binaries.
The nature of my job requires me to spend a lot of time at a lot of varied root prompts, but thanks to my errors in the past I maintain a far better situational awareness than I did when I started.
One way is not to use su and/or login directly to root. Better to log into directly into the account AND have different password for root on local machine and ssh key.
As a solution for it not to happen again, I was thinking to remove the execution permission for the shutdown command as that machine should be always on.
Today I have shutdown'ed a production machine by mistake because I thought I was on my local machine. I know, novice mistake :-(
I've done the same kinds of things -- getting long chains of ssh sessions, then messing with the routes on one of the machines I was ssh'd through, cutting myself off.  I've botched a rsync request, leading to a systematic destruction of a system on the other side of the world.  I've run rm -rf / path on a production server.  (That time I got to learn how the restores worked.)
Personally I'd look at wrapping the command in a script that identifies the system by name and makes you confirm that's what you really want to do before running the actual binary, or that you have to type in a certain sequence of letters to confirm shutdown before it runs the binary. That should give some pause.