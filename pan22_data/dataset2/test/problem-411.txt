If you are looking for games specifically, playdeb.net has an installable package (.deb) that integrates your web browser into their site, allowing easy one-click installation off a game page. This is still in beta, and although advertised for Jaunty and up, it installed fine on my Intrepid system too.
Using apt-get from the shell will cover you if you need to install a whole bunch of packages easily and quickly, but synaptic and apt cover the same repositories, so it's the same stuff to install just harder to find.
Option 4 remains the old-school approach, with the caveat that they should always be installed under /usr/local, under /opt, or in a home directory -- since they aren't part of the package system, a later package install could overwrite them, so keep them out of the typical system directories if possible.
It's going to roll all of the GUI software installation features into a single interface, called the 'app store'.
Applications under constant development however will only have the latest stable build in the repos, and if you like more up-to-date versions (that include serious bug-fixes for example), the application website usually offers a downloadable .deb setup package.
Sometimes you need to shoehorn a package in manually, in which case you'll download a .deb file and run this:
Some applications only offer source code tar.gz downloads, but usually include instructions for compiling the source. As snicker said this is only for about 5% of them.
So that's your option 3.  Naturally there are lots of options to help force a package to be installed despite missing dependencies, but they can be a pain.  
Installing through the repositories via Synaptic, aptitude and apt-get is recommended because if any packages in the repos get updated, then those updates will push through to your system.
You need a different last-ditch, just-before-old-school thing to try.  Synaptec, aptitude and apt-get are all great tools but they use the same installation process: search (generally) remote repositories, check dependencies, download files, and install the package(s).  The package manager they're all built upon is dpkg.
Doing it "old school" is usually only required for smaller apps and things you need to compile yourself from source. This is the other 5%.