However, would there be a way for me to see whether or not the system does transmit my packets, or if it eventually reaches one of its limits, and starts dropping them? If so, what is this limiting mechanism, and is there a way I could configure my system so it allows my applications to work at the rate I programmed them to work?
I added some verbosity to my server to make sure it kept broadcasting, and it does. After a few seconds, it seems like the server's sendto calls no longer reach the client's recvfrom calls. I checked all my network-related code, and since it is quite simple, there isn't much to be wrong about: the server builds a buffer, calls sendto, and starts preparing the next buffer... The client simply waits for buffers.
Since I can't find an explanation in the programming, I'm starting to believe something is... stuck over the network. It seems like something, somewhere, is preventing my UDP packets from reaching the client after some time. Now, since UDP is competely control-free, I can't find a way to check my buffers' transport from my program.
Your packet size seems a little strange.  If you aren't using jumbo frames, your packets are likely to be fragmented for transmission on the network.  This may be the cause of your issue.  
The mechanism itself works perfectly fine (after quite a lot of struggle I'll admit). However, now that my applications are running, I find my client struggling to receive some frames parts. The client will successfully retrieve parts for the first, let's say n frames, and then just... hang on recvfrom. I won't bother you with all the applications' details, but here are some stats:
I am currently developping two applications to work over a custom video streaming "protocol". Basically:
We'll also assume that the client is always listening when the server is sending. Now, with these rates, the client will be able to keep up for 1 or 2 seconds. While the application does not freeze, the client will eventually start hanging on recvfrom, as if the server had stopped broadcasting.
You may want to do MTU discovery on the connection to prevent fragmentation.  This would allow you to avoid or limit packet fragmentation. 
You can use tcpdump to monitor packets on either end.  The tool can be used to capture headers or full packets.  The man page includes examples on how to filter packets so you only capture the traffic you are interested in. 
Since my applications communicate over the loopback interface (server on 127.0.0.1:n), I thought it'd be a good idea to add information about this interface. I am running a GNU/Linux (kernel 3.13.0) system.
Spitting the frames into parts of 1472 bytes or less would be more appropriate for an ethernet connection.  Internet connection may have an even smaller MTU and a parts of 1464 bytes or less may be be more appropriate. 