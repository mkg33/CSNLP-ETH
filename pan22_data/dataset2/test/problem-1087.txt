The most obvious thing is that your upward force is 3x your downward force. Basic physics tells us that, if you apply a force of 3x to an object to start its movement, it'll take a force of 3x in the opposite direction just to stop it moving. You're applying 1/3 of the force necessary to stop the object, which isn't nearly enough to start it moving in the opposite direction.
You have (at least) two fundamental problems. I'm assuming here that you're not using any friction or gravity, but I'll come back to that later.
However: it's worth noting at this point that you're using the physics engine here to handle your jumping, and the physics engine is capable of applying gravity and friction to your object. This could make your fall much easier to implement: simply stop applying the upward force, and your object will fall back to the ground!
So, probably, you need to switch to using GetKeyDown instead of GetKey, and make the downward force Vector3.down * 6. Then, you would hopefully see a change in direction.
For clarification, rb is reference to Rigidbody2D. In my Awake() method, I have:   rb=GetComponent<>(Rigidbody2D); 
The other thing that's happening (as others have noted) is that you're applying an even bigger upward force than you realise, because you're using GetKey. GetKey will return true for every frame that the button is held and so, if you press the key for 1/10 of a second and you're running 60FPS, you'll apply the force 6 times. When you release the key and GetKeyUp is true, it's only true for a single frame. That's skewing the balance of your forces even further.