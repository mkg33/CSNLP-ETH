You can make as many levels following the above pattern as you want to keep directory sizes manageable.  Also if you prefer, you can use some user id to identify the images and still use a similar structure e.g. assuming user id of 14: (/images/orig/0/00/0014/0014.jpg)
The fact that you hash the original image to md5 means that if 30 people upload the exact same image, you will only keep one copy (in all sizes) of that image on your filesystem instead of 30 copies.  
You might want to try md5 hashing of the image as it is uploaded, and then storing them in a directory structure like that below.  Assuming 3 images which hash to: 
You can store user -> image hash data in your database, while keeping your images on the filesystem.  Regardless of the fact that it may be possible to store images inside a database, there are reasons you may not want to do so.  Keeping them on the filesystem makes them much easier to move, say to a CDN, or into the cloud as you grow. It also allows you to put directories on different disk to increase read performance, if that's your thing.   