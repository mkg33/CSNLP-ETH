You'd just specify in a designer mode system, that when marine collides with cutsceneTrigger, then start playing C1M1_FranklinDies. Very little of this has to do with a "loop".
No. Every electronic game thats some sort of updates in real time use a game loop. The Only kind of game that wouldn't really use a game loop would be txt based game that reacts to user input only.
I can't think of any other paradigm other than event-based when there is no explicit loop, so maybe you can describe what it is you are having difficulties with or want more information about. Is it a general question of how to structure code, or how stuff gets done?
The only way I imagine you can avoid a game loop is recursion, which would eventually end in a stack overflow. Even if a game is event-based, there's something outside the game looping and sending those events. IE: Flash triggering tick/update/draw events. Inherently, to have more than a single frame of a game, you need to loop. That or your game is limited to a certain number of frames that are precomputed. That limits you to a rather simple game that isn't very actively... interactive.
All game engines will have that loop at the low level, so what you're essentially looking for is using a helpful engine without doing much of the base-level coding. That may remove your capabilities a little bit, but for many games that's not a concern.
Sure, but even though it is hidden, everything applies. Flash for example has a loop for code execution, and you cannot specifically edit the main loop, you however can use different events to trigger code, or have code on the timeline which flash executes when it hits it.
In some ways, I think your example of X-Craft's editors is well-put. Many people have even made entire mods for Half-Life 2 with just levels and various triggers in the Hammer Editor. Those are abstracted game systems in many senses. The reason people don't all make their games in the StarCraft 2 editor is a mix of game exposure/licensing, and the need for more fine-grained control.
What I understand of your question, with its edits, is that you're writing a game by coding, but never actually writing any of the code that is executed on every single frame. For instance, rather than:
That is easily doable, but the thing is, someone has to set up that Method and set up the animation. Game Development is not magic.
For example, in Javascript/HTML5 I'd use a repeating timer to send an event every 1/30 of a second to signal the drawing of a new frame of animation.
In addition, some engines like Unity can help in terms of only exposing you to code on actual events, like collision, or more expanded time intervals; and do so without being specialized to specific types of games like RTSes.
First off, I don't think it is possible to have a game that doesn't have a loop, somewhere, unless it is absolutely trivial. A web game uses a loop, the only difference is that you aren't writing the loop, you generally just respond to events. There is still a loop happening. In a way, the distinction is immaterial anyways, you generally must repeat a sequence of code many times. If you use a loop to do so, then fine, if you use events or some other mechanism, great: the end result is that you  are repeating. A loop just seems to be the more straightforward way of repeatedly executing a block of code without overflowing your stack. ;)