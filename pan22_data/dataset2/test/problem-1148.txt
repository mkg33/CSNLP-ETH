Considering how linux jobs and process ownership works, I'm afraid it's not really possible to re-own a process, without help from the adopting process.
A parent may 'disown' a child, which is then 'adopted' by the process named 'init'.  System security prevents someone from grabbing someone else's processes.  When you disown it, a process becomes someone else's (init's) to control.  You as the 'user' could still kill the process, but you can't get it back.  Attempting to coerce init to return your process is unlikely to work, as init doesn't even read mail.
What are the circumstances? If you just want to get your terminal back for a while, you could use GNU Screen instead. It doesn't quite detach the process from a terminal - Screen emulates one for the process's benefit - but you can attach and detach it from the real terminal that you're using. You can even detach a screen, log out, then log back in and re-attach to the same screen.
While I assume this doesn't help anyone in the unfortunate situation of having disowned the wrong process, if you were to banish disown from your workflow and replace it with:
Sorry, no. In principle, it would be possible, since disowning merely changes some shell internal state â€” it basically removes the process ID from a list, and it could be put back without too much hassle (you'd have to be a little careful in testing that the reattached pid is in the right session, but that's not insurmountable). But none of the usual shells (bash, ksh, tcsh, zsh) seem to have a way to re-add . (Though with zsh you can write to the jobstates, jobdirs and jobtext associative arrays; I don't know how much you can achieve that way.)
All you need is reptyr. It lives on GitHub and has been packaged for Debian since Wheezy, and probably for other GNU/Linux distros, too. It will foreground your disowned process in the current terminal if you invoke it with its process ID (PID). So for example:
If you want the shell to send signals to the disowned process as it does for its owned subprocesses, you can write a stub job that waits until it receives a signal and sends the same signal to the disowned process. You can send SIGSTOP and SIGCONT to the disowned process to simulate Ctrl+Z and bg. None of this will be quite as convenient as re-owning.