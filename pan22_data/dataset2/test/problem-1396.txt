Also, as Hannesh said, writing to the console is incredibly slow, I guess you should probably avoid writing "Processing some number" and just wrute the last number processed at the end.
You could consider tweaking the prime test to bail out as soon as you reach a prime that is >= sqrt(numberToTest). The proof (very loosely) is that a composite number can always be written as the product of two integer factors, each > 1. Of the two factors, one must be necessarily <= the other. Thus you can stop testing when you reach the worst-case upper bound which is the square root of the test number. Other more efficient means exist for testing primes, but this tweak requires remarkably little code.
Here is a sample of code for the Miller Rabin algorithm written in C#.  Maybe it can be parallelized and work faster than the method you currently have?
For checking a the primeness of several numbers, you should use Sieve of Eratosthenes. It is two simple loops you can parallelize, and the time complexity is just O(n log(n) log log (n)).
I've had many cases where updating the console less often resulted in a massive speed boost. A good rule is not to update the console more than a few times per second.
Hmmmm... To speed it up, I'd look into alternate Prime Number tests, like Miller Rabin Test or AKS Test
Console functions also create a bottleneck, specially if you check them after every number, I would check numbers in batches of 1000 or 10000 before asking if the user is pressing a key.