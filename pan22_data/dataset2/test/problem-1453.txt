Then, on the client side you will need to account for the increase in request time. So rather than using a setInterval you should start a new timer once the request has been completed.
As some other users have suggested in comments, I recommend separating the CSS from what is returned by the PHP script and using caching to reduce the number of queries you need to make.
This is the simple example. But if you leave this running for too long JavaScript will complain about nesting depth. You can find solutions for this.
As you guys can see, I run the following JavaScript code every ten seconds.  I tried to run it every second, but it started eating up the CPU of my hosting company like crazy.  With it running every ten seconds, I have no problems when there are a few users online, but have not massively tested this with a lot of people online at once.
First you need some way to measure load on your server. A simple approach would be to count the number of requests per minute.
Then, before you do any work, have your script 'wait' a while before doing anything. (sleep or usleep in PHP).
Let's say that I have 100 users online at a time; do you guys think that running this code once every ten seconds would flood the server and cause it to run slowly?  Should I keep it at 10 seconds, or maybe push it back to, let's say, 20 seconds?  Or maybe even reduce it to 5 seconds?  The shorter the time here, the better; I just do not want to be running too many processes at once and flood my server.
You say that the more often this is updated the better - with caching your server will be able to respond to many, many times more requests than querying the database every time. It will also be easier to expand to support more users later too.
Today, I do not have a coding question, but just a general question about a piece of code that I have written.
The best way to implement caching is to split off the queries into functions and apply logic to check if a cachekey exists (probably using memcached for PHP). If it does then return it, else query the database and set it. You will have to be sure that any time data is updated/inserted into the database, though, that the cache is updated to ensure that they remain in sync.