Most of the shader I have so far is based off of this youtube tutorial. However, I have made some slight modifications to it. The main one being that it is only using a camera's depth texture instead of the depthnormal texture.
When things look alright near the vertices but get wonky further away, it almost always means that something is being done in the vertex shader when it should be done in the fragment shader. In this case it's the depth calculation. So how do we move the depth calculation to the fragment shader?
However, this is a problem as there are large areas of the object that remain the initial blue colour. What I was expecting was something that looked like this.
I have tried removing the difference check, this initially appeared to work. Although, when I placed an object in front of the object with this shader, the shader behaved as if there was a collision when there was not. As you can see below.
It's mostly self explanatory once you know about VPOS, but there's at least one thing worth noting: the uv of the depth texture also had to be calculated in the fragment shader, and since vpos.xy is in screen pixel coordinates, we have to divide by the screen resolution (_ScreenParams.xy) to get texture coordinates.