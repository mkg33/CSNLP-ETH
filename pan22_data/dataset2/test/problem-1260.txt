Like I said above, I think your approach is good, and if I came across it in code I was reviewing at work, I wouldn't bother to comment on it.  But I do think it could be cleaned up just a little.  When approaching a nested if I think it's best to start with the broadest question/condition in the outer if, then ask the more narrow question(s) below.  Also, I think it's usually better to put the most common case near the top, because when someone is reading the code (perhaps trying to debug an issue), it's this branch that they're most likely to be interested in...also it just seems more logical to me.  Finally don't be afraid to drop in a well named variable just to make the code more readable.  
If you like the idea of decision tables (like in palacsint's answer), then you could use more elegant approach using ValueTuple and Dictionary combo.
That being said, I can understand why the solution is frustrating.  As the many other, varied answers suggest, this is one of those problems that just feels like it should have a simple, elegant, one-liner style solution.  But, it just doesn't. There are shorter solutions, but they all sacrifice readability.
You could simply make GameState a Flags enum, which is merely a more compact version of the decision table palacsint proposed.
I find this much more readable than trying to do conversions to an Enum, and more straightforward than a decision grid.  That being said, it doesn't scale as well as either option.
I think decision tables are good enough. If you want to go esoteric you can also define enum values as bit values and mapping would be automatic (which is very specific to the given example, so not a good idea in general):
The end result is that all your reading/writing of the flags is done entirely with your variable storing GameState, rather than having separate booleans floating around and a muti-dimensional array to look things up.