However, I consider offloading to the client as a step up from cloud computing.  If the idea of the cloud is to have scalable elastic computing power then being able to "tap into" the computing power of your players is what the cloud was before "cloud" was even a buzzword.
Being portable doesn't necessitate offloading code to a server.  It just means writing portable code.  These days, you can compile C++ into standards-compliant JavaScript, with WebGL and other services across multiple browsers.  Game engines like Unity target a wide variety of platforms.  You can be quite widely portable without paying a bazillion in server costs.
You can offload anything.  You shouldn't try to offload certain things if you want a smooth game.  For instance, physics is generally run on both the client and server in order for the client to predict where objects will move to compensate for the lag between the server's simulation state reaching the service.  Likewise with graphics.  Certainly the rise in streaming video games has shown that you can still get away with such processing on the server; you could just stream your game if that's what you're looking for.  Loading between levels must be on the client assuming the client needs to load something almost by definition.
Also don't forget that users tend to reject online-only games that aren't inherently online games.  See the outcry on Sim City or before that Assassin's Creed or so on.  If you're making an online game where the game has no value without being connected in itself, that's one thing, but if you're making a single-player experience you really don't want to make a server required to play.