I would consider instanced rendering to either be a single Draw call of some sort, where the geometry itself is either duplicated in the buffer N times, or the drawing API renders the mesh N times for you with some per-instance vertex buffer data, or multiple Draw calls with no other API calls in between them (i.e. only changing the starting index or vertex and number of primitives, which you would need to do if you wish to draw less than a whole mesh, but in parts).
Since each instance is completely separate from the other, sharing absolutely no data at all (the matrix is basically just a bulky way to encode the two endpoints of each line), you would gain nothing from instancing. Instead, you should build a vertex buffer that contains all of the lines (and their colors). If lines change, you change the buffer.
Any other API to change textures, rendertargets, shader constants, render state, and shaders calls can incur quite a lot of overhead.
I have a class which "collects" line mesh transformations throughout the update and then draws them in one place by drawing one line over and over again. I'll post the code below. I'm just wondering if this is instanced or if the idea is to join them all into one mega-mesh and send that through?
The purpose of "instanced" rendering is to make one draw call to draw all of the instances. You are making allLines number of draw calls. So no, that's not instancing.