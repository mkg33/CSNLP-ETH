I'm not sure why there can't be multiple certificates assigned to the same entity or how to get around this.
My local build environment has a certificate issued to local host. I also had another one issued to localhost to run MVC in a browser (IIS express).
c) use another IP for the other cert.  Give your machine another IP and run that dev server on the new IP.  This may actually be the easiest but i thought of it last, so it's C.
a) use a multi-domain (or UCC) certificate. This is a single certificate with many names attached to it.  The server only needs to manage 1 cert, but it will be valid for any of those names.  They're pricey to get for real, but you can make self-signed UCC's.
These certificates interferred with each other, so my colleague deleted the IIS express certificate. Now my local build environment works, but I can't launch my ASP.NET website from Visual Studio (says there is an IIS problem).
b) if you're running up-to-date enough software, you can use SNI, which is an update to the TLS protocol which allows discerning HostHeaders (or effectively so) before description so that the request can be routed to the proper cert/key.  only the newest version if IIS express support this, but it may be of value to you: http://www.iis.net/learn/extensions/introduction-to-iis-express/iis-80-express-readme
Traditionally you could only use 1 certificate per IP. The reason for this was that the HostHeaders were encrypted and so name-based routing could be done on the server before decryption was done.. but which cert/key to sue w/o knowing the HostHeaders?