So here is my issue: am I using this correctly?  How is a camera supposed to work?  Say I want to billboard something, how would I use the camera's information to do this?
Typically, I store and manipulate a world space quat & position, which I visualize as a real world movie camera, bundle them into a world space Matrix, then invert that matrix properly and send the result off to the effect.
However, this makes the camera's position reflected about the origin (ie, the camera's position vector has negative values but DRAWS as if it had positive values) and modification of position and rotation are consequently negated from their expected values (to get closer to the origin from z=3, I must add...).
If you were to manipulate a world space Matrix to represent the camera orientation and position, the matrix you send to the effect is the inverse of that. An inverted a matrix is not simply the result of negation of its components. There is more to it mathematically, even more than transposing. It seems like you probably already know this, and you may be using a framework method for inversing, but just making sure.
I use the world space version's component vectors for any needed local space transformations. Typically these values are different than simply negated inverted version's values.
I've been bashing my head against the concept of a 'camera' for my 3D world for some time now, and I'm not sure I'm doing this right anymore.  Maybe I've been working on this for too long and have confused myself, or I have a fundamental mis-understanding of the topic.  Therefor, I could use a refresher/help on the concept of a 3D camera object and how that is supposed to operate.  I have a camera class with a position, an orientation (quaternion), and a derived transformation matrix.  Currently, my draw loop looks something like this:
Additionally, the clipping plane suddenly cuts out my scene if I rotate too far in any direction and I'm not sure why.  How can I fix/avoid this using camera information?  Any help is much appreciated!