as to what ownership, it all depends what the scripts are supposed to do. if they modify some resource, then the script has to either have user or group permission to modify the resource (assuming this resource is a local file). often the most sensible way to do this on a unix-like system is through group permissions.
That will run the script the 0th minute (:00) of every hour, every day of the month, every month, and every day of the week (you might want to spread them out so one script starts at 0, one starts at the 5th minute and so on).  The commands in your personal crontab are run as your account, so all your script needs in this case is for your account to be able to read the script, execute the php binary, and have access to all the files the script needs.
once for each script, with /usr/bin/php being the full path to your commandline php binary, and the full path to the php file you want to run.
(b) execute permission. if the php script need to create the file, make sure the permission same as the user running.
to schedule them, edit the cronfile for the user they should run as. "man crontab" should tell you how to do this.
crontab -e will open the crontab editor for your personal crontab, assuming the admin allows them.  Here you'd put a line like