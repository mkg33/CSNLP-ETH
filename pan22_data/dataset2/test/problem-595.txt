If your service generates large loads (not just peaks) above and beyond what your infrastructure can safely handle, then it might be worth calling in a CDN. Add in the requirement for fast round-trip times, resilience, and scaling, and you should hopefully have the revenue to pay for one.
in response to your question: when does a CDN become worth it.  Having a hard time justifying the cost of even the lesser-ranked CDN services to the business people?  You might wish to evaluate and price out a cloud-based CDN system, the likes of what you can home-brew cook up yourself with components from Amazonâ€™s AWS cloud services.  Geographically-close-to-the-end-requestor distribution-of-content, at a fraction-of-the-top-tier cost, compared to the big 3 CDNs.  
It depends on the application.  If you're highly latency sensitive (an interactive application) then you want the fastest page loads possible.  If you're a streaming app (like YouTube for example), then latency is less of an issue.
CDN pricing has gotten a lot more competitive in the last few years.  Shop around, see what's out there.  And if you can build and maintain several racks of caches distributed around the world for cheaper, then you don't need a CDN.
If you have lots of international users, you can either build out racks near your users (most likely expensive to do) or you can pay a CDN to cache your content for you locally.
Additionally, when you have to reach an international audience, you may want to have servers closer to your users. Your site will be snappier, and you could want to spend more just for that. 
In your case, you're just looking to grab some optimisations where you can. You might consider using Google App Engine as a mini-CDN for your static files - check this out:
But there's one case where it's absolutely indispensable: when you can expect to have very strong bursts of traffic. Typically, when a company is launching a new product with heavy media promotion, or doing some sort of viral thingie without using existing social platforms. 