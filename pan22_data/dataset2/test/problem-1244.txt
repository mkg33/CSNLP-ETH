Your Product class doesn't have any flaws other than the ones I mentioned. You need to, however, adjust your setCode() method in that.
At first, in your constructor, the fact that you did not use the this keyword to invoke the validate method, looks quite weird. You should always make your code very precise. Therefore, you can replace it to:
Each class should have only responsibility. The Ean13 class should only be responsible for representing an Ean13 code as the name suggests, it is Ean13. So, what should you do? You can do something like this:
That way, someone reading your code won't have a sudden stop wondering where did it come from. And then, realise, it's in the same class. The keyword this refers to the current class.
Like @ChristianHujer suggested, do not pre-generate exceptions. Look at his post for details regarding this.
Your Ean13 class should not have anything more than a getter/setter and a property to store the code. However, it can have some getters/setters accepting the code in different ways.
You could use something like, oddSum, evenSum. That is more meaningful. Also, your method names need to improve.
The variable names you use such as e, o are quite horrible, and do not make sense at a glance. You have to go through the code to see what they actually are. Use some meaningful variable names, do not worry about the length. A good IDE will suggest you identifier names you might be trying to refer to by just typing 2 to 3 letters and hitting enter.
The expression: !(pretendVd == dv) is too complex. You could easily refactor it to: pretendVd != dv.