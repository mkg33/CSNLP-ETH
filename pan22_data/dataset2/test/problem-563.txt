you should actually divide the firs table into two tables so that you can use a subquery and select the second row as a column, or many columns. it is more flexible that way and by that, you can get a result like the second one more easily.
You could also then consider rolling up the daily table-2 structure into further weekly, monthly, quarterly, yearly rollups if warranted.
I'd go with option 1, and then if reporting speed became an issue down the road I'd also add table 2, and populate it into a reporting database in some sort of automated overnight / offpeak process.
Considering the volumes you mention, I would go for the second option, but without the TotalCost. You could say that is still normalised.  
Ultimately, you'll probably find it's sparse - certain accounts not getting costs from certain sources/drivers - and some accounts not getting anything.  In a normalized model, those rows don't exist.  In the denormalized model, the row exists, with some empty columns.  Also, in a sparse normalized model, you should see performance improve, because the existence of a row is typically quicker to check (with covering index on CostType) than checking for all rows with non-NULL in a particular "bucket" (even with indexes on every amount column - which you can see starts to get very wasteful).
Edit: as an alternative, and depending on your requirements, and the size of the AccountId, you could also consider the following:  
I would normalize.  We did cost accounting for customer account profitability at a bank and we generated over 250m rows of individual costs using hundreds of drivers which allocated by cost center or by general ledger or by various other techniques over millions of accounts each month.
For instance, the total cost of servicing ATMs was divided out among accounts which had used ATMs based on the relative amount of usage.  So if $1m was spent servicing ATMs and only 5 customers used it once each and one customer used it 5 times, then that one customer cost the bank $.5m and the other customers cost the bank $.1m each.  Other drivers might be a lot more complex.
The number of data items to store is still 200k * 13 * N. As columns, you'll get less rows per page and it will take more space than as rows. You may gain if "CostType1" is not a fixed length datatype, but it's marginal.
With that design, you could still add a denormalized TotalCost to the first table, and have it recalculated nightly, allowing to run some reports on the first table alone.