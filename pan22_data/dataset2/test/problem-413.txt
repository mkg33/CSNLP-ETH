You should create a data model/context to encapsulate the logic around the user verification status. You can observe changes in that model to update your UI.
The implementation of the data model/context updates the properties based on the verification status.
It's good that you are getting that feeling that something isn't right. You are violating the single responsibility principle. Your view controller should only be responsible for it's view hierarchy, not the data that drives the view hierarchy.
This is my code to determine what stage the current user is in the verification process, what page to segue to, and what view to display. I think the way my logic is set up is pretty messy, and am looking for advice to make it more clean and concise. Any advice is appreciated. I left some comments that could help reading the code as well. Its nothing complex, but think the code could be improved, I wrote this pretty quickly. 
After tapping "get verified" button, or the "verification badge" displayed on another users profile, they will be redirected to a view that will either prompt the current user to get verified, indicate that current user has already been verified, or indicate the user they selected is already verified. In code, this logic is initiated by calling the method checkStatus. 
The process to get verified requires the user to first upload their ID (2 attempts to successfully upload), and agree to a background check. These steps are carried with the use of a UIPageViewController. 