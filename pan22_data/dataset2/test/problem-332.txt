I will add though that if you have access to a deployment system such as SCCM, you can have a package run only when the user is logged on and it will then run in the user's context. You can also run the package as part of a logon script which would also be run in the user's context.
All of these answers correct as far as impersonating a user over the network.  However, you can impersonate a local user without the need of a password, under certain conditions:
If you can fake the operation as if it where executed by another user you can get at that others users data. Privacy goes out of the window.
There is always a number of processes running under several admin-accounts on a Windows computer (Like LocalSystem and NetworkSystem accounts just to name 2.)
If you need to run a program as a different user during say, logon, you can place the file in the "All Users" Startup folder. Otherwise, you'll need their password or use some administrative tool.
If you still really need to run a task AS the user, look in to running tasks at login.. which, of course, will still trace back to you, for security reasons, but Windows will still run the task as if you were the user in question.
One tool I know that allows you to do this is Process Hacker 2. Run the tool as a administrator, and find a process that is running as the user you wish to impersonate. Right Click on it, select Misc > Run as this user..., you then type the binary path you want to run as that user, for example cmd. CMD would then open as that user without prompting for that user's password. 
And there is no longer any way to tell if something was actually done by that user or somebody impersonating hem/her. That's means you can't reliably trace who did what anymore. You loose accountability which is a big thing in systems that must adhere to compliance regulations, like medical systems.
So these are very good reasons to isolate the environments of accounts from each other. (There are a whole lot more, but that is beyond the scope of this question.)
If your request would be possible to achieve any arbitrary process could insert new processes into those accounts: There is no way in hell you would ever be able to protect your system from viruses. (Any arbitrary process literally means what it says: That also includes viruses !)
As noted by other answers, you probably really do not want to do this. If it were this easy, I could, for example, force a user to load some illegal website where they'll get fired and arrested.. Not even admins should have that kind of God-like power.
If all you really want to do is find out who is currently logged in to a computer (local or remote), consider the "psloggedon" utility from MS TechNet (Formerly SysInternals): https://technet.microsoft.com/en-us/sysinternals/bb897545.aspx
This is permitted because of how Windows delegates the PRIVILEGE to impersonate locally logged in users to SYSTEM and Local Administrators.  You may find information about this PRIVILEGE under local group policy > Local Policies > User Rights Assignments > Impersonate a client after authentication. 