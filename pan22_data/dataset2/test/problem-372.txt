As for the multiplication with a vector, you just extend the vector to a quaternion by setting a quat's real component to zero and its ijk components to the vector's xyz.  Then you do the quaternion multiplications to get v', and then extract the ijk components again.  (The real part of v' should always come out zero, plus or minus some floating-point error.)
First of all, q^(-1) is not -q/magnitude(q); it's q*/(magnitude(q))^2 (q* is the conjugate; that negates all the components except the real one).  Of course, you can leave off the division by the magnitude if all your quaternions are normalized already, which they typically would be in a rotation system.
Here is an alternative way to transform a vector by a quaternion. It is the way MS does it in the xna framework.
I would appreciate if someone would look over mt deriviation I used http://pastebin.com/8QHQqGbv I would suggest to copy to a text editor that supports side scrolling
in my notation I used q^(-1) to mean conjugate, and not inverse, and different identifiers, but I hope that it is follow-able. I think that the majority is right especially where on proving the real portion of the vector would disappear.