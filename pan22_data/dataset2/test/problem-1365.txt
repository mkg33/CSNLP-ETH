There are multiple solutions, all depending on, exactly how close database structures are you wanting.*
Note, if you want to use different software versions simultanously, you will likely need to have same database versioning and (1) falls out.
*A remark: the Stack Exchange has the same situation: they have a multi-tenant website, all with nearly the same engine and probably with the same database format. Probably they decided behind (3).
Likely (but not sure), that you will have at least a little part of your database, which will be the same, for example the user data.
Changing your decision in a late phase of the development, or during the maintenance, is a major refactoring work, so decide wisely as early as possible.
Your options depend also on the applied database. For example, mysql has no schemas, but knows the cross-database queries. PostgreSQL can make cross-db queries only by extensions, but you can configure schemas for it.
So the best would be if they had their own tables, in their own databases. But then it's more difficult to develop the service since I have to do all the changes to all the databases when I change something.
As the site databases (thus, also the frontend engine using your DB) are more closer and closer to eachother, so should you use the more and more closer options also for the DB.
I'm building a kind of "multi site application" based on wildcard subdomain. And every site will of course have the same files but also the same database structure. But it's not necessary for each and other to share tables. They will never use each other's datas.