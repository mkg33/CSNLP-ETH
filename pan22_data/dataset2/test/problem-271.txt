Shell scripts like bash, ksh, zsh, sh, and fish are notoriously surprising, compared to high level general purpose languages like Ruby, Python, or Perl. While a shell script may begin its life as a shorter file than the equivalent general purpose script, the surprises lead to lots of defensive wrapping code, such as set -euo pipefail to enable strict modes.
Being familiar with the shell pays off quickly if you live in Linux, so maybe you want to start with that. If you find a task you that is impossible or impractical to solve in a shell script, use something else.
Also, bear in mind that learning shell scripting is very simple. The real power of it lies in other programs, like awk, sed, tr, et al.
I run bash scripts on millions of DNA sequencing reads in thousands of files, and it serves me just fine. And contrary to what everyone says, the same versions of the scripts in C++ don't actually run all that much faster (on a few minutes separate them). 
However, the differences between them only really matter once you have a healthy amount of scripting experience under your belt. I suggest you pick one language and push it to it's limits before moving to the next. You can do a lot in a shell script, more than most people would admit. Any language is just as hard as you want to make it. After you've written a couple things in it, every language is "easy" to you.
I think bash, like perl, is not the most user friendly/easy to read. That scares people away because most people are not great abstract thinkers. But brighter, more creative programmers tend to love it and make frequent use of it. If you know yourself and you know you have a brain, don't be scared off by bash. If you're a basic thinker, maybe stick to something like Python. To each their own. 
How do you decide when to use Perl/Python/Ruby over Bash for a script? I don't think an init script with Ruby makes sense, but how about a slightly longer script that adds email accounts?
Conclusion: use bash/shell only when you're absolutely forced to (like ~/.bashrc, busybox), because it's almost never "the right tool for the job" nowadays.
Bash is a general purpose scripting language just like Python, Ruby, Perl, but each has different strengths over the rest. Perl excells at text analysis, Python claims to be the most elegant of the bunch, Bash scripts are excellent at "piping stuff around", if you know what I mean, and Ruby... well, Ruby is a little special in a lot of ways.
And every time you write a shell script, you're "practicing" doing exactly that - instead of learning something more powerful/productive.
TL;DR - use bash only for installing a better language (if it isn't already available), otherwise you're wasting unrecoverable, precious human time. If you can't do it on the command line by hand without mistakes, don't script with bash/shell.
For exampmle, most shell languages continue executing lines in a shell script, even when one of the commands fails. By contrast, a general purpose language fails immediately on the first error, and often loadly, resulting in safer, more predictable behavior in scripts of even light complexity.
Given a problem that both can handle, you'll want to use the one you're most comfortable with. Ultimately, there are a lot of small details, and only experience can teach you to see them.
We are doing all our scripting with Bash so far, but I'm starting to feel a bit silly about it. While we can of course do everything we want with Bash (it's quite powerful), I'm starting to wonder if we shouldn't use a proper scripting language (in our case most likely Ruby) instead.
Why do people use Bash nowadays? Because it's a terrible, hard-to-break habit. A script is rarely "finished forever" after the first few minutes - no matter how strongly people tend to think that way. Along with the "it's the last bug in this script" fallacy.
I don't find bash to be all that hard to debug. Python is often much too rigid, whereas bash allows you to be very creative. If you're a good out-of-the-box thinker, you'll like bash. 
And probably getting Ruby/Python installed doesn't even need a bash script in the first place (with the exception of busybox, some system tools depend on Python/Perl being present anyway).