From my understanding, inheriting from the appropriate handler interface and implementing it's required method will allow your class to handle events from the EventSystem. As an example if I have:
I'm trying to figure out how I can make a custom UI element identify when it has been selected or deselected. Classes such as Selectable inherit from the ISelectHandler and IDeselectHandler  and their methods OnSelect() and OnDeselect() are called whenever I click inside the Selectable element and click outside of it.
When the mouse enters and exits the element the OnPointerEnter() and OnPointerExit() methods are sucessfully called. However selecting/De-selecting the element does not cause the OnSelect() or OnDeselect() methods to be called. Though if you look in InputField.cs (which inherits from Selectable), the OnSelect() method does successfully get called when the input field is selected. I'm trying to replicate this within my own element without having to inherit from Selectable, and since Unity's event system is publicly accessible this should be possible.
I managed to figure this out. You need to manually tell the EventSystem that the object has been selected. On a method such as OnPointerDown() you need to call the EventSystem.current.SetSelectedGameObject() method and pass in the event data and your gameobject.
If you have inherited from ISelectHandler and IDeselectHandler the OnSelect() method will be called, and if you click off of your UI element onto the background or another UI element the OnDeselect() method will be called.