First I'll talk about the little, less important things, to eventually get to the more important ones.
Furthermore, it is a good practice to always place brackets in statements, since it can be a place for bugs to hide in and it's not very noticeable:
Lastly, as @brezotom said, you need to keep your logic out of your trigger. A best practice is to use a simple trigger framework so you have a maximum of 1 trigger per object and the actual framework decides when to run what. Here is some docs.
Use terniary operators to reduce the amount of lines you have to write. The if/else clause you wrote can be done in one line:
Trigger sets at least three values ​​in the "Old Value" field. These are the historical values ​​of Brand_c.Name
Furthermore, try to isolate business logic in business logic classes which follow the object orientation paradigm. I'm not sure if this kind of implementation makes sense, since I don't know your use case, but something like this:
I won't implement your code with a framework since you can find a ton of examples in the web, but that's the gist - a trigger with a couple of lines that invokes your handler and then the handler manages the different events (insert, update, etc.)
Moreover, don't access directly your trigger data. It is a good practice to have them copied over to a variable so you later access them.