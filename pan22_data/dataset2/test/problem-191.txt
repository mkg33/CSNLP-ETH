If you are running a distributed database (which Amazon's database services are) then your app also needs to be able to deal with the trade-offs inherent in the CAP theorem.  This states that you can get two of the three aspects: Consistency, Availability, Partition tolerance.  You will need to know which of the three you don't have and have your app compensate for it.
Note: I have used Amazon as an example here but there are other cloud hosting providers with similar capabilities of spinning up and down instances very quickly and only charging you for what you actually use.
There are a few key differences with cloud providers compared to colocation.  If you are able to take advantage of them, they will make hosting in the cloud a clear winner.
It's not necessarily true that "real hardware will always be faster than virtual machines".  It is true that on the same hardware the same application will perform better for not being in a virtual machine but since you don't have access to Amazon's hardware, that comparison is moot.
That said, your application has to be capable of scaling horizontally.  You can't simply throw it into the cloud and expect it to scale forever.  For instance, default PHP sessions have two problems:
This is only a single example but applications that have not been written with horizontal scaling in mind are usually full of exclusive resources like that one.
The point about the cloud is that it scales horizontally, so if you can serve 100 simultaneous visitors with one server, you can serve 1000 simultaneous visitors with 10 servers and each visitor receives the same speed of response, no matter how many of them you have.