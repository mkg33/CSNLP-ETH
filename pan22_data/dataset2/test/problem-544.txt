In all likelihood, however, you will probably want to generate the graphs yourself, and you will probably want the generated graphs to all have (or not have) certain properties.  Random graphs are often a poor approximation of the graphs an algorithm actually gets used upon.
This package is perfect for creating experimental instances for verification and benchmarking algorithms.
Using geng is suitable for scenarios where you want to test all graphs on (say) up to n vertices, or all connected graphs with m edges or something like that. If you have more specific requirements, then please state these in your question.
This is a multiscale graph generator that accepts some input graph and generates another graph that can be arbitrarily similar to the original. The parameters are flexible enough to generate a new structure at different coarse-grained resolutions. See examples in the gallery.
Not huge, but maybe still useful, 3054 "standard named graphs" from Mathematica's GraphData collection 
This produces undirected graphs (also known as "graphs"). To produce directed graphs you can pipe the output through directg which also comes with nauty.
Igraph package has different types of graph generator including both random graphs and structured graphs.