When the code wraps to the next line, it becomes unreadable and incomprehensible - not to mention that which line is which gets muddled.
That said, :set number to turn on line numbers and :syntax on to allow highlighting will make vim a bit more friendly. Also, learn text objects.
I read a book about vim (Learning the vi editor) from O'Reilly, and that was all I needed.  A couple of things that I got out of it that I use all the time...
Everyone's saying that they avoid using a .vimrc because they're on different servers all the time. I've never been on a server that didn't have wget installed. Put your .vimrc on github, and it's as simple as:
2) Splitting windows.  Type in ':sp' (horizontal split) or ':vsp' (vertical split).  It'll split the window.  You can then move between windows with Ctrl+w [hjkl] to move to the right, down, up, or left, respectively.  ZZ or :quit to close the window.  :e  to open another file.  Especially useful for diffs (vertical split) or whatever else (copying / pasting for the easy).
I feel that the power of vim for a sysadmin is that it's everywhere and you can instantly just start using it. That's why I have choosen not to customize my vim.
This probably isn't going to be the prevailing opinion, but I use vanilla vim. I don't use any special features (other than syntax highlighting and line numbering), but it's great, because I can go to any Unix machine and feel right at home with whatever vi they happen to be running. 
1) storing macros.  Hit the 'q' key, then the key you want to bind it to, then do the command, and hit 'q' again.  Then, if you hit '@key' it'll execute that command.  If you hit '@@', it'll execute the last command.  I love this for "joining every other line" sometimes:  your macro is '^Jj' (go to beginning of line, Join the line, move to the next one).  Then, do '@j' (j is my macro key for this).  Then, just hold down the '@' key. It'll join every line with the next one, move down, do it again, etc.
3) If you code, folding is fantastic.  Folding, basically, closes or opens segments between markers.  Determining the markers can be done manually, by regex, by... whatever.  Google "folding in vim" and you should get some good tutorials.