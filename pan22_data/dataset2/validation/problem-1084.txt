I've created a script which helps me auto-generate a GameObject prefab. It uses some UnityEditor, so it can't be used at runtime (and its not meant to be).
You could use Platform dependent compilation blocks in your scripts, so certain parts would be compiled just if they are in a specific platform. Example:
That way when I compile a build, the compiler sees the file as effectively empty and skips over it, even if it's not sitting in an Editor folder.
However, since it needs to be attached to a GameObject as a Component to do its thing, I'm not sure where I should put it. I can't store it in the Editor folder, because Unity yells at me and says I'm not allowed.
I use this a lot to write Gizmos' attributes for the Editor without generating unnecessary data types on the final build.
Myself I'll usually just wrap the whole file in a preprocessor conditional directive block like this:
You could also use Inspector classes that will only be compiled on Editor mode, this scrips must be on Editor's folder of course. With this solution you separate the Game's functionality from the Editor's (on this case, I have created the PrefabUtilities MonoBehaviour class). Example: