If God is not a functional programmer and would only include one PFDS in the Book, it would have to be the zipper.
Result is pretty simple, but super helpful to use in practical scenarios, and algorithm design . It can help to reduce computation complexity by load balance in algorithm based on "the power of random two choices"
From the world of purely functional data structures and algorithms, GÃ©rard Huet's zipper comes to my mind.
I think that Hensel Lifting is pretty nifty too, and it has many applications in algorithmic number theory and algebra.
Floyd's Cycle Finding Algorithm is one of the most beautiful things I've seen.  Especially the part where he finds where the cycle begins.
Normally, PFDS do not expose local structure, due to the absence of explicit pointers. If you want to access a certain node in a tree, you're out of luck. 
I would add universal hashing (or more generally pairwise independent hash functions) of Carter and Wegman. While not really an algorithm in itself, it is the enabling technology in a lot of fantastic randomized algorithms. To name a few:
However, with an extremely simple insight (just "turn the tree inside-out" and remember the path structure from your location), accessing specific locations in PFDS is made possible, all in a purely-functional manner. This, basically, is the essence of the zipper.