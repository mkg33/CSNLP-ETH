I would suspect you need to adjust the values like threadsperchild to a much larger value in order to handle that load.  The value controls the maximum number of requests that can be processed at once.
We have a Windows Server 2003 machine running Apache2.2.  Most of the time there is no load on the server, but we have a notification program on 3400 PC's that can request a small web page that plays a 64KB .wav file.  When an event occurs those 3400 PC's all request the web page over the course of 3 minutes.  On a few machine we saw the browser sit in the "connecting" state for a little over a minute before the page painted.  What is happening, and how can we speed this up?
There are few scenarios that so clearly show advantage of a good light webserver, especially a single-threaded one.  Try either nginx or lighttpd, i'm sure either can comply with a much smaller machine.
You have a fixed number of clients you can serve at one point in time. Each slot is used for the period it takes to transfer the file to your client.  If you have 100 slots, and it takes the network 5 seconds to transfer the file (perhaps these computers are behind slow links, dialup), then you're going to need 175 seconds to serve all of those hosts. You'll look at the webserver and everything will look alright - not a lot of CPU load, not a lot of disk load, not a lot of network load. But those slow clients are killing you.
Why do the computers need to fetch the audio file from a remote server if the alert is occurring locally? Couldn't they have a local copy distributed with the notification app?