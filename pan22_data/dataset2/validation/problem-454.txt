In general, your example sounds like the method is actually doing two distinct things, otherwise there would be no confusion in the first place. But this is code smell anyway: every method should have only one purpose. If that is the case, then the meaning of the return value is always clear, no need to give it a name.
Regarding your suggested change with an out parameter, I couldn't do that.  Its not more expressive, and it forces callers to create a variable to hold the result.  In general, I think you should steer away from out / ref paramaters, they should be used pretty rarely.
Using out has implications if overloading such a function. The compiler cannot differentiate between ref and out. 
Not a good idea IMO. Too much extra work and potential gotchas for something that is easily solved with good code comments.
I think the main problem here is not the code itself, its that there's no xml comments.  Seriously, commenting can go a long way.  I'd address that first.  Second, I'd look at the name of the method itself.  Is it doing a check?  Then CanDoSomething, IsSomething, etc would work.  If the method actually does "do something" and it's returning success or failure, then the name is fine.  Another alternative though might be an exception, depending on if the call should normally work or if failure is pretty common.
I think the key question here is whether the boolean being false indicates an 'exceptional' problem or not.  If it does, then forget the boolean and throw an exception.
Youâ€™re asking the wrong question. In reality, both methods are bad. If you need the success message, either throw an exception on failure (but only if this is really an exceptional scenario, or return the success and indicate this in the method name. For instance, by calling the method TrySomething.
If you would not use output parameter, you had to use any public property or create class as return type. This is easier.