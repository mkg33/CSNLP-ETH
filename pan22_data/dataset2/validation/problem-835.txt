As a note, I used paragraphs for all the work, but it is possible that you intend to use a manual return, or new line, between the quoted and unquoted sections of text. In that case, where you want to add a new line use ^l (small letter ell) rather than ^p in the 'Replace with' box, and if you need to find a new line, use ^11 (eleven) in the 'Find what' box.
Next is a decision point for you. Some of the quoted text can be at the beginning of the paragraph, the end of the paragraph, or inside the paragraph. If you don't mind looking for extra lines later you can do it all at once by using
On the Word ribbon, click on Find and select Advanced Find.... In the dialog box click on the More button which makes the dialog box larger, with more options. Check the box for "Use wildcards". This will allow you to use Microsoft's version of regular expressions.
If you want to know more about the power of wildcard searches in Word, you can see the Microsoft MVP's page Finding and replacing characters using wildcards.
The final point is that in Word for search and replace the paragraph symbol Â¶ cannot be used, but they give you ^p as a replacement in the 'Replace with' box. That is the carat ^ (Shift+6) and a small letter p. In the 'Find what' box you have to use the numeric equivalent, which is ^13.
The title, with "~~~", is unclear. I think what you want to do is find strings of quoted text and place each one in its own paragraph, separate from what might be before it or after it. A regular search and replace is not up to handling the task. Regular expressions, however, can do the job in a snap. While it is not nearly as good (powerful) as what most are used to, Microsoft does have a complex system of wildcard expressions that look like, sort of, regular expressions. Your objective is easily within the power of that system.
That will match any one character, like the ? wildcard does, which is not a double quote. To make it match more we use the count control { and }. It can either be used to indicate how many to match, {4} match four characters, or set a range {3,10} match at least three, and as many as possible up to ten. If the maximum is left off the range it acts like the * and matches as many as it can, {5,} match five or more. For this case we need to match at least one, and as many as we can, so it is {1,}
In this case you want a double quote followed by anything that is not a double quote and then another double quote. The tricky part is the text between the quotes. the symbols [ and ] form a group of characters to match, but it only matches one character. We could use a range like [A-Za-z] for all capital and lowercase letters, but there could be other characters, such as numbers and commas as well. Instead we can use the not symbol ! and the double quote to match any character that is not a double quote. Like this, [!"].
Put all together, the pattern we want is "[!"]{1,}". The last part is to make it so that we can use what was found in the search as part of the replacement text. To do that we add ( and ) around what we want to keep, like ("[!"]{1,}") and then we can use it in the replacement part as \1, meaning 'the first group found in the search pattern.' There can be more groups, but we don't need them for now.
for the entire text of the file. But I'm not sure are there any good strategies for this line change for "~~~" contents using find and replace, or any other method. 
On other possibility, if you know that you do not have any blank paragraphs, is to use the first option and then find and remove the extra blank paragraphs:
On the other hand, if you want to avoid the work of removing extra blank lines, and are willing to use multiple (3) replacement commands, you can search for each of the possibilities with the appropriate replacements.
Problem is, there are lots of parts, where no space or no dots before or after "". This makes it hard to use find and replace option for this work...  