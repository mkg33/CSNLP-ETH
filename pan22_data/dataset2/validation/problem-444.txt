Mounting to a drive leter could be bad because it is possible for it to change to another mount point. Then you are reading and writing to something you don't expect. If executables from a mount point change, they could contain viruses.
2) Moving your application to a new environment will be tedious. In the event of a disaster recover, moving to a more powerful machine, or if another developer is taking over your application. If the new environment doesn't allow mapped drives or drive letters are mapped differently then someone is spending time rewriting code.  The time saved on the front end will be more than lost fixing it. 
Windows (at least  XP) does not support file paths with over 256 characters. Mapping allows someone to add a file where otherwhise wouldn't be possible, by shortening the path. Then you have a program that navigates through all files and folders, and is not aware of the mapping. Without the mapping, the existing file has a path length above 256. The program crashes.
At least half a dozen times a user from accounting has called because she gets the same error. It's because she opened program X, which is using a file mapped on network drive Y:, and it's not connected for some unfathomable reason.
1) They take up resources on both the local machine with the mapped drive and the network resources. Local applications can become sluggish because your local computer has to read the contents of the mapped drive when the application is launched or when the system is booted. Try it out. Map a bunch of drives and launch Excel. Unmap the drives and try it again. 
We've had serious problems with network drives where I work because sometimes Windows doesn't connect to them, and it seems to not automatically connect a network drive when a program tries to access it. 
One problem with the \server\dir syntax is that command windows cannot cd to them. If you have admin privileges and do not want to use a drive letter you can use the mklink command to mount drives to a directory instead of a drive letter. The directory Home should not exist.
A number of pieces of software, including various version of Microsoft Visual Studio and CMS Bounceback, will only work with drive letters and not with absolute paths.  Given this restriction then to use any such software requires you do define drive letters - you have no choice.  But Windows does not make this very easy as it seems to ask for a user ID and password, but only one user ID and password is allowed in Windows for all connections to any one network device (e.g. multiple disks and printers).
My solution requires admin privileges, so if you are not running with admin rights, it is more secure since another program could not change it on you without admin rights.