The problem lies in the naming. "Design Pattern" is an extremely broad name, but when we talk of design patterns we typically mean on a smaller scale than architectural.
When using the component-based paradigm in game development with engines like Unity, is component-based design an architectural pattern, or a design pattern? 
So from my experience and interpretation of definitions, the only real difference is scope of the pattern. Meaning that realistically there is going to be overlap and with how wide-spread the use of the component pattern is in Unity it could easily be referred to as an architectural pattern, though it is traditionally a design pattern.
MVC is an architectural pattern because it's a pattern for the entire presentation layer. MVC states that you have a controller that will pass some model (which holds the data) to a view so that it may render. It's a very broad method, that view could be Razor, aspx, php, etc. That controller could do who knows what. It simply states that the architectural layout will be MVC.
On the other hand, the Strategy pattern (which we typically think of as a 'design pattern') usually applies to having multiple algorithms for one action (e.g. You might use the strategy pattern to determine how and/or where you will log information). This could be use with or without MVC as an architectural pattern.
I see architectural patterns as being more high-level than design pattern. The component-based design in game development's context (like with Unity engine) seems to fit as an architectural pattern to me. However, on some sites, I read that component-based design is a behavioural pattern, much like other behavioural design patterns, and not so much like an architectural pattern like MVC.