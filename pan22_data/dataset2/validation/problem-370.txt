If you're looking for "tiny" examples and you like Roguelikes, you should check out the listings for the 1kb roguelikes contest. There are a couple C examples that are rather clever (though they probably aren't good learning examples, just fun to read.)
It is something I would reccomend You if You are more advanced programmer, because some of these techniques are quite non-readable.Nevertheless, it is a nice set of techniques. Proper way would not be to make such "abominations" but to properly design, document, test (...) Your program and such code would be the result of many compression techniques applied on very good design. Please, this is not how You should program but a demonstration how much a game can be compressed.
I've got the source for a simple one we're using for a code war competition at Windward Wrocks. It's in C# but that's close to Objective C.
It's written with the idea that all an aspiring game programmer wants to do is get to the point of writing games, so that is what it lets you do, from the very beginning. In the end you will be making games that are pretty much what you describe here.
You can find a few open source games written in objective-c on github. Although most are larger than a few hundred lines.
I am, very slowly, teaching myself programming (only need to grasp basic game logic) with the free book "Invent Your Own Computer Games with Python".
Maybe it is a good idea not only look at open source games but to some freely available game systems (editors etc.) where you can find some inspiration for your data structures and what is behind it all. I mean for example GameStylus adventure game editor and engine, where - in the editor - you can clearly see what data structures are in the back of the game and how they are used.