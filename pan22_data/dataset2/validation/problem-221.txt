The nginx ingress controller can be replaced also with Istio if you want to benefit from a service mesh architecture for:
Yet another option is to expose Nginx Ingress controller over NodePort (although not recommended for Production clusters).
If you would have more than 1 replica of nginx Pod in your Deployment spec (example here), you could control pod to node assignment via pod affinity and anti-affinity feature.  
See a full example with source code at Building a Kubernetes Cluster with Vagrant and Ansible (without Minikube).
NodePort type still gives you the LoadBalancing capabilities, and to which  specific Pod (backing the Service endpoints) the traffic should be sent, you control with 'service.spec.sessionAffinity' and Container Probes.
In order to access you local Kubernetes Cluster PODs a NodePort needs to be created. The NodePort will publish your service in every node using using its public IP and a port. Then you can access the service using any of the cluster IPs and the assigned port.
If you want to expose service to outside cluster use service type either LoadBalancer or ingree. However is you use LoadBalancer approach has its own limitation. You cannot configure a LoadBalancer to terminate HTTPS traffic, virtual hosts or path-based routing. In Kubernetes 1.2 a separate resource called Ingress is introduced for this purpose. Here is example of LoadBalancer.