The example above is just a bit of a simplification, I know for the above situation I could just use GetButton instead of GetButtonDown, but for a fighting game, you can imagine that the necessary inputs to buffer would get significantly more complicated.
Is there a way to store inputs for a few frames, so that I can read a button press a few frames back? So, instead of using Input.GetButtonDown("attack"), it'd be something like InputBuffer.KeyBuffered("attack",12) to see if the button was pressed within 12 frames?
Basically, if the fighter is in the neutral state, pressing attack should lead into an attack. It uses Input.GetButtonDown("attack") to get the button, and if it detects a press, transitions into attacking state. Now, let's suppose the fighter has just landed, and ends up hitting "attack" a few frames before the land animation ends and he transitions back into neutral. As of right now, nothing would happen, since he's not in the neutral state where the check is, and when he enters the state, the button press is no longer happening.
When the time comes for you to act on the input, you can simply pop from the queue and proceed according to what you find. This assumes that you care about every input (and the order in which they arrived). If you only need to consider the first input made during the attack, you don't even need a queue/buffer.
As suggested in the comments, you can buffer frame inputs for when you're ready to process them. In your update method:
So, I've got a fighting game with some pretty tight input windows, and I'd like to buffer the inputs for a few frames.