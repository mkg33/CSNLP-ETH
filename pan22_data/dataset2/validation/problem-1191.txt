SSD's have different method for secure erase.  I will say that it seems to be very cumbersome to do, because you usually need a certain type of SATA controller that can do IDE emulation, and the procedure can be complicated.  Some manufacturers provide tools to secure erase their own SSD's, but you can also do it with hdparm on Linux:  https://ata.wiki.kernel.org/index.php/ATA_Secure_Erase.  But you'll notice in those instructions that you have to make sure the drive is not "frozen" before you can proceed.  This is one of the more difficult steps because it requires finding a motherboard & SATA controller that will let you "unfreeze" the drive while the system is booted up, which usually involves unplugging it from it's SATA cable, then plugging it back in.
Assuming that what you are seeking to prevent is the next customer reading the disk to see the old customer's data, then writing all zeros would actually still work. Writing zeros to sector 'n' means that when sector 'n' is read, it will return all zeros. Now the fact is, the underlying actual data may still be on the flash chips, but since you can't do a normal read to get to it, it's not a problem for your situation.
So it's worth reading articles such as this. If someone has physical access to the disc then retrieving information is easier. Have you considered encrypting the data on the SSD and then all you need to do is securely forget about the private key which should be an easier problem. I can see SSD being a big win on vps's because of the much better random access performance. 
Although one answer is already accepted, I think the command blkdiscard /dev/sdX is still worth mentioning here.
there's no way to make 11011011 become 00110011 (notice that it would be necessary to turn one 0 to 1, and it's not possible to do that in SSDs). So, another memory cell will be used.
It IS a problem if someone can physically get hold of the disk and take it apart (because then they could directly read the flash chips), but if the only access they have is the SATA bus, then a write of all zeros to the whole disk will do just fine.
After, when you want to save something different, the previous content and the new one are compared.
To do what you want: first, erase (delete) the files. The memory cells to that files will be marked as free. Then do a TRIM: all those memory cells will become 1's, without any sign of data. 
If the previous one can become the new one by writing down some 0s, ok. If it's not possible to do that, another memory cell is used.
Anyway, my recommendation is to do your research & pick an SSD that comes with a secure erase utility that can be used on a system convenient to you.
According to Arch Wiki: SSD, the blkdiscard command will discard all blocks and all data will be lost. It's recommended to use before "you want to sell your SSD".
I am not familiar with how TRIM works so I don't know whether there is a guarantee that the data will be erased. But I think it's better than doing nothing.
When you TRIM a drive, you are reseting all the unused memory cells to 1. So, they'll be clear to be used again. And the saved data is preserved.
You definitely do not want to use traditional methods of erasing SSD's, such as using dd to zero out data, or other methods that write random data to the disk.  Those methods are better suited for platter based disks.  It is effective in erasing the SSD, but it will also unnecessarily use up a lot of the SSD's limited write operations, thus decreasing the SSD's expected life.  That would get expensive quickly.  It can also decrease the SSD's performance over time.