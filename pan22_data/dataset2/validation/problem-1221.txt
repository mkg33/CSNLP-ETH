It's also worth pointing out that AWS is very much oriented towards separating which can be managed efficiently with large economies of scale from what is unique to your application and delegating what they like to call "undifferentiated heavy lifting" to managed AWS services. For example it's common on AWS to use either SQS or a Redis based MQ on ElastiCache, which both support a HA architecture out of the box (EC via Multi-AZ). Likewise you could delegate your LB to ELB, freeing you to focus on optimising your application and possibly DB servers (if RDS doesn't suit your needs, I'm not sure what the Postgres situation is) servers.
Ideally your MQ should be located on a separate instance(s) so it can be scaled independently of either your application servers or load balancer. This is also makes maintenance easer (you can swap out your load balancer instance without having to migrate your existing queue for example) and it's better for security to have them isolated (your LB needs public access whereas your MQ doesn't).