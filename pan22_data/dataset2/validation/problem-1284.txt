Finally, int main(int argc, char *const *argv) isn't a standard signature for main().  In a portable program argv should be an array of mutable pointers to characters.
The help message doesn't indicate what's meant by "special" characters.  I'd call them something like "punctuation" instead.
Traditionally the command lines are built mentioning the options first and then the remaining arguments. GNU allows to mix them freely. Your program even requires the options to go behind the arguments. There is no reason for this restriction, so you should follow the style of other programs and use optind, too.
Your use of strncat fits well into the GNU universe, where obscure string functions with a bad API are used all over the place. Everyone else would have simply used strcat or even memcpy.
There's really no need to allocate memory to hold chars.  For this small string (whose life is within the function scope), it's going to be much more efficient to have a local (stack) variable large enough to hold the largest combination of character groups:
At this point, we know a non-zero length is required, but we output nothing and return a success status.  That could be misleading, as the calling program might assume the success status means we have given it a strong password. We should either exit(EXIT_FAILURE), or (more usefully) default to including all character types.