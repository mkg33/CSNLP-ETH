I think you're doing premature generalization.  Don't get stuck too much on future-use questions right now.  Pick an answer and run with it, learn from it.  Flip a coin if you don't have a preference.
And for 'framework vs library', I would base it off of how tired you get of writing a game loop over and over again and stuff. ;)  
Start by building a game.  When you build your second game you'll have a better idea what parts are re-usable and can be turned into robust library functions.  When you build your third game you'll have a better idea what structure is re-usable and can be turned into a robust framework.
Mike Acton and insomniac games (www.insomniacgames.com) have written a lot of topics and discussions regarding game development, in particular data-driven. Look them up and see what kind of information that is too complex and which you find interesting and understandable. They're great developers with a ton of experience.
If you're not sure which way to go - just do whatever your game requires. Try to write small, basic libraries for stuff that you feel might be usable in the future. Look into data-driven software development. I suggest looking into component-based entity systems. Don't base the code around things that are unique such as a player. A player is just another object, just like anything else. An entity has components, perhaps a list of components. 
Writing small stand-alone components often increases readability and debugging possibilities of your code. 
Don't worry about the future quite yet.  Worry about your current game, now.  Otherwise you are not going to get anywhere because you are fretting on the details.  
By writing small, contained libraries that interact with each other, you can go ahead and determine which ones to re-use for your next game. Personally I have things like a "container" library for data-storage types. I have a math-library for such things. There are several things like these that you can sort out and write as modules. Camera, effects, input, entity, movement, physics, rendering, resource-handling, threading, the list goes on. 
You should concentrate on building the game first and then later, if the game was successful enough, you can extract it out into something reusable for your next game.  This will keep you from being locked in to something else and give you full control over your project.