I guess if you were trying to tunnel ssh within ssh that might make sense, though I can't off the top of my head think of a need for that!
Alternatively, SSH does have a -D option too that acts as a SOCKS proxy that can do HTTP[s] , but tell the web browser to connect to a SOCKS proxy rather than a regular HTTPS.  So I suppose then like the line David said ssh -fNg -D 8888 -p 1000 username@server-address  -v  The -fNg  and -v isn't essential of course.
If you put the http[s] proxy on port 22 of the destination machine(server-address), and configure your web browser to use proxy 127.0.0.1:8888 then your web browser could connect to port 8888 and that will be forwarded to the http proxy on port 22 of the destination machine.  When you did -L 8888:127.0.0.1:22 it means you have to have something listening on port 22 of the destination machine. And you might want to change 22 to something more sensible like 8080  I haven't tested it but I think it'd work
OK so the client program would be connecting to port 8888 and whatever it sends there will be forwarded to port 22(22 being the port commonly used for ssh). 
No, you already have SSH opening a port listening on port 8888.  You can't have another thing listening on that port.