Modelview and projection are conceptually different although mathematically the same (it's all just matrix multiplication).
With the programmable pipeline all of this goes away, and you can use as many (or as few) matrices as you like, concatenating any you like in order to get the end result.
The use of a concatenated "modelview" in OpenGL (which corresponds to D3D's "view" and "world") is therefore just an artefact of OpenGL's design but need not specifically refer to the way things are actually done.
The camera analogy is a lie because there is no camera.  Instead all that happens is a transformation of points in 3D space to points on a 2D screen, and the matrices define how that transformation happens.
Since you mention "modelview" I'm going to deduce that you're talking about OpenGL and with specific reference to the old fixed pipeline.  The fixed pipeline in other APIs, such as D3D need not have the same concepts.  In fact in the old D3D fixed pipeline there are 3 matrices used: projection, view and world.  In this case "view" is what you might call the "camera" and "world" is what you call "each model's model-matrix".
Projection defines how those points are then projected onto the 2D display; i.e how perspective, foreshortening, etc happen.