I think I'm agreeing with @Anton when I say use parenthesis when there is doubt. I'd say this is an issue of understandability.
Depends on our ability to distinguish symbols, which is really good, and not on pairing symbols. It does also depend on our ability to apply precedence rules. My experience has been that after years of practice coding that's second nature.
All in all, I advise to allow your coworkers to decide which form to use where, and to spend code reviews checking code for correctness, not for compliance to formatting standards.
I don't see how wrapping a single identifier into parentheses is ever going to make things clearer.  On the other hand, I also don't see myself immediately understanding how a op b ? c : d parses for every possible operator op, or what a && b, c || d will evaluate to.  There's also plenty of cases between that, especially when you add operators with (imho) unexpected precedence, like bitwise &.
You'll find, I think, that the second is much easier to read. This is because I'm using multiple types of braces (illegal, but bear me with here). As humans we can identify the different symbols very quickly, but we can't really line up matching symbols all that quickly.
To take this example further, I intentionally line-break as shown because it's easier to edit. I could delete the entire line starting with "||" and I don't leave a dangling operator from the line above.  
If readability is the goal, then I favor more visually explicit formatting, see below. Paired characters are hard to match. The longer the line and/or the deeper the nesting the harder it becomes. For a single logic operator you can argue this example is over-formatting. There is judgement involved. But with line-leading logic operators, the logic & logic structure just pops out with just a glance.
Also, consider math. Mathematics has been around a lot longer then CS and they've adopted precedence rules and get rid of the parenthesis whenever they can.