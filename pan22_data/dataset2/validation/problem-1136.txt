Or instead of creating truly private properties and functions, you can simply prefix them with an underscore to denote they are private and should never be accessed from outside. While nothing really stops you from accessing them, nothing also stops you from redefining the Team class and accessing anything you want.
It's a bit cumbersome. Plus, why should I care that the members are in some array held by TeamClass? In fact, do I need to care about MemberClass at all? Why not further abstract it:
Answering your question, how can you pass some variable that can't change outside of the class. Create a getter method:
Teams have members, so it almost seems natural to put the Member class into the Team class. But projects also have members. How are you going to implement that? You can't nest Member in both classes. Another problem with nested classes is that you have to traverse through Company -> Department -> Team -> Employee hierarchy just to get everyone's name or email.
Of course, it's hard to tell out of context if this is really the best solution to your problem, but it's something to consider.
Ideally, how you choose to represent the members inside TeamClass shouldn't matter to the outside world. Your solution is fine, but I think I'd get tired of accessing the members like this: