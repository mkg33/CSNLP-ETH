It would imply that 3SAT has (non-uniform) circuits of size $n^{O(\log n)}$. Then, every language in $NP$ (and the polynomial time hierarchy) would have quasi-polynomial (i.e., $n^{O(\log^c n)}$) size circuits.
Problem. Fix a function $f:\{0,1\}^n \to \{0,1\}^n$.  Given $y \in \{0,1\}^n$, find $x \in \{0,1\}^n$ such that $f(x)=y$.
So, if your technique can do better than the Hellman time-space tradeoff on some cryptographically secure $f$, it would certainly be news.
In the cryptographic world, the best known algorithm for this problem does a precomputation (depending only upon $f$) that requires $2^n$ time and $2^{2n/3}$ space, and outputs some advice of size $2^{2n/3}$; then, given $x$, it can find $y$ in $2^{2n/3}$ time, using the advice string of size $2^{2n/3}$ from the precomputation.  You can adjust the space vs time tradeoff, to use an advice string of size $S$ and take time $T$, as long as $S \sqrt{T} = 2^n$.  As far as I know, this complexity is believed to be the best possible, for algorithms that do not take into account any of the internal structure of $f$.  In particular, it is likely to be optimal when $f$ is a cryptographically secure hash function.  (This technique is known as the Hellman time-space tradeoff.)
I don't know whether your result -- if valid -- would be a non-trivial advance, but here is one sort of problem you could test it on:
If $f$ can be computed efficiently (say, by a small circuit), your result implies some sort of solution to this problem.
Even if it took $2^{2^n}$ preprocessing time to produce a data structure of size only $2^{O(\log^2 n)}$ which could then correctly answer arbitrary 3SAT queries of size $n$ in $2^{O(\log^2 n)}$ randomized time with high probability, 3SAT would have quasi-polynomial size circuits, using the known translation of randomized algorithms to circuits. This would not improve the known algorithm time bounds because of the preprocessing, but it would still be extremely interesting as a non-uniform result.
What do you mean by "to within an error that can be adjusted to an arbitrary amount"? Is the algorithm randomized? 