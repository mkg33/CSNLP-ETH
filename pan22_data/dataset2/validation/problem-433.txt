This reduces the entire menu to a single call to operator<< because consecutive strings in C++ (and in C, for that matter) are automatically concatenated into a single string by the compiler.
If the user enters the string "My dog has fleas.", the program will report 4 vowels and 13 consonants, but that's not actually correct.  The 'y' in "My" is a vowel in this usage and the spaces and period are not consonants.
There are two reasons not to use system("cls") or system("pause").  The first is that it is not portable to other operating systems which you may or may not care about now.  The second is that it's a security hole, which you absolutely must care about.  Specifically, if some program is defined and named cls or pause, your program will execute that program instead of what you intend, and that other program could be anything.  First, isolate these into a seperate functions cls() and pause() and then modify your code to call those functions instead of system.  Then rewrite the contents of those functions to do what you want using C++.  For example, for pause you might use this:
Clearly, you can apply the same idea for counting consonants (or even implement that in terms of vowel counting, i.e., every character that is not a vowel is a consonant, but this requires you to trust the input to be sane).
The Vowel_count and Consonant_count functions do not (and should not) alter the passed char *, so that parameter should be passed as const.
The difference betweeen std::endl and '\n' is that '\n' just emits a newline character, while std::endl actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to only use std::endl when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using std::endl when '\n' will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.
Each of those is a separate call to operator<< but they don't need to be.  Another way to write that would be like this:
Putting using namespace std at the top of every program is a bad habit that you'd do well to avoid.  Know when to use it and when not to (as when writing include headers).  
That is the correct operation, but it's confusing to the reader.  I recommend using the braces always to avoid ambiguity or confusion.
I suspect that the if statement in the Vowel_count() routine is not what you intended to write.  It's written like this:
The code as posted has inconsistent indentation which makes it hard to read and understand. Pick a style and apply it consistently. 