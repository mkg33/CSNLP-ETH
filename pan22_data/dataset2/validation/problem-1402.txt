(PS: These same three days thinking also made me come with another answer to a problem that may rise: there should be an automated test tool to check if the generated game design is sound, eg, you should have a medieval army having a hard time to defeat a generated fortress)
Only paper dealing with similar issues I could find off-hand is Stachniak and Stuerzlinger's "An Algorithm for Automated Fractal Terrain Deformation". It assumes you create the terrain first and deform it (or rather, let the algorithm pick the parameters to deform it with automatically) to fit your constraints later, so it doesn't answer the question directly. Still, the methods presented therein might prove useful for others with similar problems.
I believe I've been staring back at this question for the last three days, while asking myself how the procedural generation of worlds or even galaxies can, at the same time, be deterministic(such as always generating the same content from the same seed), look natural, and still have unique, interesting, unusual or even beautiful features in its landscape.
I keep going back to the same generic answer that this is going highly dependent on the genre of the game and its own internal consistent history within the story.
That said, I wonder if a story that generates a tree of consistent plot lines, will generate the overall gameplay design you're looking for.
Assuming that roads can only have a certain elevetion change per distance, terrain height would be adapted to the heigth of the road, which would lead to generation of chokepoints whenever a road passes through a hill/ravine/whatever. 
Here's a great example of procedural terrain generation, using parameters like moisture, height etc... 
Lighthouse 3D has a good survey of some simple algorithms for terrain generation.  If you're starting with a map that contains cities or other interesting areas, you could use some of these techniques to generate whatever terrain you would like.  For example, intelligent use of the fault algorithm could be used to create cliffs or valleys around your city that would act as choke points.  Also, using the circle algorithm would be a great way to generate terrian for turret placement.  These are just some examples, but using these simple algorithms would be a fairly easy way to generate interesting terrain around your cities.
So it all goes back to your own answer where you input information into the PCG and it fills the gap, and also to the other answer about generating worlds which match plot lines and the overall story.
Of course, the amount of change in terrain height would need to be limited too, or you'd have roads running straight through the highest peaks.
For example, post-apocalyptic genre, why would anyone build a metropolis with massive walls in the middle of a wasteland, and make everyone inside of it live miserably? Why colonize such planets? In high fantasy, why make a city on top of a floating island? Why do dwarves make cities inside of mountains? And your generic evil enemy comes from fiery land with active volcanoes? Rule of Cool?
Wouldn't such an algorithm automatically generate more 'tactical' terrain when roads are generated between cities?