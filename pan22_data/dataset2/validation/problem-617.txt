At a high level, a player's turn could be the start of a new state, followed by all the possible actions that are allowed during that turn.
Where appropriate, these functions return status messages and/or trigger events so that the GUI can show what happened during the turn or let the player know a computer was destroyed, etc...
My player end turn function will perform functions specific to that player that isn't affected by the order it takes place between players:
I have recently built a turn based strategy game similar to Master of Orion (it's only single player right now, multi-player would be a bit more complex, but a similar idea), here is what my endTurn function logic looks like (in my main Game Controller class):
A turn based game is going to be governed by a state machine.  Basically, you would lay out a series of states that can occur in a logical order.  
Obviously this will balloon quite quickly, as I've only sketched out an extremely limited plan.  Having a good grasp on possible states early on will mean that you should be in a good position to implement.  I'd highly stress sketching out exactly how you want the game to run....a good turn-based game requires a lot of planning IMO.