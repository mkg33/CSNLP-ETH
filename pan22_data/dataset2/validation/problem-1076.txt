In an ideal world, you should be able to publish your root passwords on the internet and it wouldn't matter, even if you gave people access to your machine (but didn't put them in the /etc/sudoers file).  Of course, you shouldn't publish the root password, but the idea is that you protect your systems with concentric layers of protection.  
Disallow remote root access (or at least root access via passwords).  (if you allow root access via keys, carefully control those keys, or better yet use something like kerberos that allows centralized revocation of keys).
sudo also automatically logs every command to syslog and you can define the commands each user can user.
You should disable root access from remote so an attacker can't compromise root without first compromising a user then escalating to root. We enable root access at the console only.
sudosh is a logging shell, and you can replay the whole terminal session at a later date, showing exactly what the user saw on their terminal.
If you want to create an audit trail, and don't want to fall victim to the "sudo su -" or "sudo vim foo.txt" problems mentioned here, you can use "sudosh". Hand out root access via sudo, but make the only allowable command to run "sudosh".
I'd disable su and use sudo.  That way, users use keys (preferably encrypted) to access the system then they use their password only for privilege escalation.  You can restrict which programs people access with sudo, but mostly you just restrict access to who knows the root password.
Good permissions schemes are something even long-time Linux users get wrong, or don't realize the scope they have.
If you are using root on a regular basis then your permissions may be wrong or you may need to grant sudo rights or a new group rights to r/w/x the files or directories.