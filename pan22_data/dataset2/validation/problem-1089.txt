If you only have one IK animation computation happening and it is not happening at every frame, then it should be fine in real-time -- especially if you are using FinalIK or BioIK. However, if you are worried about the performance of your IK solver, you can easily build your own FABRIK IK Solver: Build Your Own IK in Unity3D
Having that said I'm not sure if you approach the problem from the good side or I didn't understand your description. What you wrote seems like you have the current position of hand and the target position, and you want to 'drag' your character by hand from start to end. 
So what can we do with IK? On jump you set simple solver, only for the raised hand. The solver have the task to not to allow the hand to move above brick level. Then when you're movig up and touch the brick then you hand will start to bend, so it never goes above the brick. Given that all the details were done right it should improve the look of you character.
In old Mario game you could jump under the brick to hit it with your fist but because of the character proportions its hand ended at the same level as head so it looked fine. Now let's assume you put a typical human in place of Mario.
So we create a trajectory from initial to final position in realtime and the main character moves accordingly in the trajectory.
As you can see in videos you've provided it is possible even for more characters. In the second video you have more than 10 models, each of them is computed in realtime and I suppose they don't share the same IK results (the reason for this demo is to show it can solve foot and hand contacts for different character proportions, so each character is computed separately).
for example in this video of final IK https://www.youtube.com/watch?v=ZuWvGq3yV44 the characters are following the trajectory in real time I suppose. But what if we were to create the trajectory realtime depending on player positions, would that be a CPU intensive task to NOT work on mobile devices? 
The IK itself doesn't need to be so heavy. There are many levels of IK - you can compute a hand or leg made of just two segments or you can compute entire body at once. The first one is very simple computationally while the second is almost never needed in a game.
This could work but you may end up with other problems like breaking of the rest of the body movement. Instead, I would move the character by his center as always, and IK would just respond to this movement.
Now I can understand this would work fine in editor but if we have exported the game and this computations happen realtime for every object, how much CPU intensive would this be? Do all the existing IK assets provided on store 
I am looking at an implementation as such demonstrated in the video. https://www.youtube.com/watch?v=Gyakxv34404&feature=youtu.be
At some point Mario will touch the brick and you need to decide if it keeps moving or stops - either way may look odd.
Assuming a game of mario, where mario is a 3D Character. And there is a coin placed at a height. So when mario comes into area of effect for the coin, we know the initial position of his arms, and we know the expected final position which is the position of the coin. 