As Draco18s mentions, when you have sensitive update orders, you can control the order in which scripts Start / Update under Edit => Project => Script Execution Order. Though generally it's better practice to have the object fully initialized and ready to use in Awake if you can, to avoid hard-to-diagnose update order bugs sneaking in later.
All you're guaranteed is that it's had Awake (and, if spawned in the enabled state, OnEnable) called, because this happens before the AddComponent / Instantiate methods return for dynamically-spawned instances, or before any Start methods for objects loaded with the scene.
The key word here is "just" - Start is called when Unity is about to run a FixedUpdate or Update on the script that hasn't yet been Start()ed.
Since EnemyManager.SpawnEnemy() isn't called from inside EnemyManager's Update, there's no particular reason to expect EnemyManager's Start() to run first. MyGameManager's Start has as much right to run earlier, if that's what the engine decides to do (and it doesn't have to make the same decision during testing and in a built executable).