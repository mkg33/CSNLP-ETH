Again, for simple turn based games ease of development can easily take priority over format efficiency, so unless you want to develop an efficient binary format - don't.
BlazeDs sounds like an excellent tool for your needs, but rewriting a Java game server from scratch is not that big of an endeavour, using for instance Netty and Protobuf :) 
I'd definetely go with a custom solution : even though you might lose some time in the short term, it'll definetely scale better if you need it to, plus the experience you gain will be massively reusable for your next games.
To sum up - I recommend using an existing solution, if possible. It is likely to save you a lot of time. As for which pre-existing solution, that's up to you.
Take a look at the following netty game server. It supports a binary protocol. Note: Written by me! Has TCP and UDP support, uses jetlang for extremly fast in vm messaging.
This is not a good reason for choosing to implement this functionality on your own. It's just something that's comforting to know, if you decide to follow this path.
Having used both SmartFox and ElectroServer quite extensively, I always recommend ElectroServer. It does all the same stuff as SmartFox, but is just a bit more solid, and includes binary support.
Both for hosting and technical reasons. If your game is not fast paced then that should be a good place to get started and up and running, and have the scope to scale.
You have to weigh how much time you save by developing a custom solution and deploying it fast, versus using an existing solution and possibly doing a longer deployment. Odds are that the development time will offset what little benefits faster/easier deployment gives.