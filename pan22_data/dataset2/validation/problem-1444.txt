If you want different actions, you can now create a simple class that defines the execute method. So, let's say you wanted a Message action that doesn't do anything but print it's message.
Python allows for object oriented programming. Using this would simplify your program immensely. So let's walk through remaking this.
Let's think about what your game consists of. You have locations, options the player can choose from, and actions those options should trigger. In addition, you want to keep track of some state about the player (alive, any items, etc.).
And so on. You can define loads of new locations, actions, etc. as data instead of with functions now.
First, we want to define a game state. The state should keep track of our current location, if we are alive, and a map of locations. A few extra functions are added to make it easier later.
Now we want to define a location. Locations have their description and a list of things you can do there. Simple enough, but let's also give them a name, since we want to map their name to them in the State class. We also define a method for getting user input and executing the action if it was good.
Now what about actions themselves? They need to define an execute method that takes a state object. So lets define an action for moving and killing the player.
Now, what should we put in options? You can see above that I want to be able to get an action from them, and I want to print some text from them, so we define the class like so