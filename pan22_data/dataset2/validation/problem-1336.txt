@DaveRix starts out good by saying "use RAM for caches, not RAM disk".  I very much agree.  But then he goes on to advocate dangerously high values for max_heap_size and tmp_table_size.  Those settings limit the amount of RAM allocated multiple time per connection.  That is, a complex query might allocate N*64MB.  This risks running out of RAM.  I suggest no more than 1% of RAM for them.
Temp is used to store temporary on-disk tables for queries which go over the in-memory tmp tables limit. When MySQL needs to insert to a table and there is not enough space, the query stops - You get disk-full warning and you can either free some space or kill the offending query.
Once tmpdir has room, @Cosi's query should run.  But perhaps not efficiently.  The next thing to do is look at the query, its EXPLAIN SELECT ..., the schema of the table(s), and especially the indexes.  Some common mistakes:
I recently set up a ramdisk tmpfs on our mysql server and the performance improvement has been quite noticeable.  I've allocated 24 out of 32 GB's of ram for the ramdisk.  My only concern is what happens when there's a terrible query that ends up requiring more space than the allocated tmpfs?  I've read in a few places that it depends on the type of query but wanted to confirm that in some instances such a query can effectively shut down mysql.
Grrr.  Neither of the answers so far quite says the right things, so I feel obligated to give yet another Answer.
MySQL works much better when it has more memory allocated to things such as buffers and the innodb cache.
It's better to have plenty of space available for the tmp on disk, as if you do end up filling it, MySQL will stop as described by @jkavalik's answer.
Personally, I'd be allocating more RAM to MySQL itself rather than the RAM disk, and then putting the tmp store on physical media.
Also make sure your max_heap_size and tmp_table_size variables are set to as high as they can be (64Mb), so that the majority of tmp tables are handled within memory, and only those larger than 64Mb end up on disk.