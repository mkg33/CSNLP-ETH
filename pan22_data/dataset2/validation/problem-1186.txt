This is enough for most use cases I've seen. If you want to do something with the textual output itself you'll need to go a bit further as Powershell will store the stderr-originating lines as a RemoteException instead of a string. A brief example of how you might deal with something that needs to log output to the console:
You may be running into Double Hop problem explained here: http://blogs.msdn.com/b/clustering/archive/2009/06/25/9803001.aspx
Unfortunately (at least in my opinon), git outputs a lot of information to stderr even when there isn't any error. For example git checkout -b somenewbranch will output things like modified file lists to stdout but the Switched to new branch somenewbranch message (which I think is the most relevant one) to stderr.
I see this 'error' as well when using Powershell ISE and Git locally. It isn't actually an error; rather, Powershell ISE is incorrectly interpreting Git's console output. If you try the console-based Powershell, you should notice that there is no error information displayed. It seems that this is just a peculiarity of Powershell ISE (and possibly other Powershell hosts that don't handle console application output well).