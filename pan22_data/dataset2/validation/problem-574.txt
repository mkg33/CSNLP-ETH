Now that I typed everything out, it seems clear to me that approach two is the better option. However, are there other suggestions or other possible improvements here?
I am building a system where visitors can buy modules from my website. For now I only have 3 available, but of course this number will keep growing. 
Furthermore, the second option is more powerful because it lets you easily add other information about the purchase of a module by a particular user.  For example you could add purchase_date to your user/module table.  You could also add the actual_purchase_price to that same table.  This would allow you to keep track of things like changes to the price you charge for modules or whether you sold a particular module to a particular user at a promotional price.
Converting repeating columns into rows in another table is perfectly scalable and will help keep your source code more stable because you won't be adding columns to your (option 1) table when you create new modules.
One table called "user_modules" where a column represents each module, and a boolean (1 or 0) corresponds to either they have the module or not.
I'd go with the second approach. That way you can add more modules in the future more easily as you just have to add a new entry in the module table. Whereas, if you go with the first approach and you want to add a new module, you'd have to create a new table.
The second approach conforms to Third Normal Form (3NF) which is always a better place to start than something which is un-normalized (0NF) like your first option.
In order to facilitate this in my MySQL database I am doubting between one of these two architectures, mainly concerning about performance and scalability.