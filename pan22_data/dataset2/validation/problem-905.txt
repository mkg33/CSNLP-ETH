You can make a base Targeting state class/definition that Tree/Combat/etc derives from which can then allow some common code and even sub-states to be shared between tree cutting, combat, whatever since your targeting is likely going to be common.
One option is as Nathan's comment, just identify when and where the values need to be cleaned up and do it manually there.
Another option is to use a hierarchical FSMs.  You could have one "parent" state that is the Tree state or Idle or Combat or whatnot, and then a number of sub-states for Tree including Approaching, Cutting, etc.  Now the variables are only stored in the Tree state so they are cleared/discarded when switching from Tree to Idle.  The substates should have easy access to their parent's shared data.
If you implement callback on the edges of a FSM rather than just the nodes, meaning chunks of code that are run on transition, then you can have a specific implementation of an edge from any of the Tree states to Idle allowing the idle state itself to be unaware of tree-specific details but allowing code to be reused for all of the possible ways into the idle state.