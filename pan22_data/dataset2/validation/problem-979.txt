The only change that has been made recently is to remove a couple of ciphers from their cipher suite; they specifically disabled TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA and TLS_RSA_WITH_AES_128_CBC_SHA on the server side.
I've already confirmed, however, that this is not an SSLv3 problem. The site is PCI-compliant, so it's using very up-to-date SSL settings. openssl reports the following:
What I can't figure out, is why Chrome is complaining about this particular protocol version and cipher suite; it seems perfectly fine to me. The site opens with no issues in recent IE (and the IE page info matches what openssl ios reporting) but fails in Chrome and Firefox.
For one particular web site, which we really need to be able to communicate with, we are starting to get the usual SSL handshake error:
Is there a way to find out what protocol/cipher settings Chrome thinks it got from the server, or why it decided they were invalid?
TLS does not work like this. In TLS the client starts the handshake and includes all the ciphers it is willing to accept from the server. If the server does not find any overlap with its own ciphers then it will in the best case notify the client of this particular problem and in the worst case simply close the connection.
To fix the problem you should configure your server to accept as much as possible secure ciphers. See Recommended configurations at  the Mozilla Wiki. 
It might work with other browsers because these offer different ciphers to the server, i.e IE 11 on Windows 10 supports this specific cipher while Firefox does not support it. Both Chrome and Firefox do offer TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA which were removed from the cipher set of the server and therefore it worked before.
In your case you get ERR_SSL_VERSION_OR_CIPHER_MISMATCH, which means that the server does not support any of the ciphers offered by the client. I don't know which ciphers you have configured at the server but SSLLabs shows you which ciphers are offered by Chrome. And ECDHE-RSA-AES128-SHA256 (TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256) is not one of these.