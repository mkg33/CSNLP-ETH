NTFS-3G (Fuse), was slapped together and is fully functional. The project has the driving commercial force of Tuxera.  This project addresses the original problem of utilizing NTFS from Linux.  Tuxera offers a premium proprietary NTFS kernel driver, which highlights why the community needs to complete Linux-NTFS.  
So with the original problem addressed, the community outcry cooled off.  Which can be unfortunate, as many times the correct implementation never gets completed.  When I think about it, Tuxera actually protected its proprietary kernel NTFS implementation.  Creating an inferior FUSE driver, cooled the push for a solid performing GPL kernel driver.
Linux-NTFS (kernel FS driver), Was created first, and after a while development stalled.  IMO a bad choice, it deserved priority and still does.  This driver has been stable, read only, for as long as I've done Linux (over half a decade).  This only addresses half of the problem, so the community looked anywhere they could.
My question then, is if the NTFS filesystem has been successfully reverse engineered, why have the kernel NTFS team not implemented the changes in their driver? At the moment it is still marked as experimental, and there is a good chance it will destroy your data.
Once the community identifies a significant problem, projects pop up to address it.  In this case, the problem is NTFS FS utilization.  
...that was literally just a conclusion based on one sentence i read. how does that sound to anyone who's actually educated on the subject? =)
Now just to clarify, I am a huge community project supporter/enthusiast.  I just also happen to be a critic, with no kernel programming ability.  FUSE has many merits, especially for specialty FS drivers. The cold hard facts still stand, Kernel FS Drivers provide much stronger performance.  Writing kernel drivers takes much more time/talent, then a comparable FUSE implementation.  Both of which (Time from Talented community Programmers), have always been in short supply.
It's a matter of priority. Choosing to do one thing means that something else won't get done. ntfd-3g works well, so touching the kernel driver is very low priority.
ntfs3g isn't really a driver, it's an application. it uses FUSE (filesystem in userspace) for an interface and is cross-platform. so, while the kernel ntfs driver could possibly implement the methods used by ntfs3g (could they? i'm not sure), it'd be operating in userspace, which isn't the kernel's jurisdiction.
I would ask that the other one be deleted, not this one, as it should not have been migrated in the first place.
i just asked myself this question today, actually. here's my really hazy and non-expert understanding of it.
Captive NTFS (Driver Wrapper for NTFS.SYS), was comparably easier to create.  As much code already existed in other projects.  The main reason the community looked on, was because NTFS.SYS is not Free Software.