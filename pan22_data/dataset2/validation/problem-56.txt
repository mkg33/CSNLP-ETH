If those are deal breakers for you, the ultimate solution is to create JS script file like the one below, that will run your command in hidden window, wait for your command to terminate and return its error code:
Check the "Run whether user is logged on or not" check box and executable will run in the background.
I've got a daemon process that I run on my machine every hour, and even though I've checked the Hidden box, it doesn't work.
Every hour, the task runs, but it shows the black command window, in which my .NET Console app is running.  This stays visible until the task completes, and then disappears.  This is very annoying, because it pops up and interrupts whatever I'm doing:
will prevent the black command window, but be aware of the drawbacks : you won't be able the work with some GUI automation tools like 'AutoIt' or SendKeys in PowerShell, as Windows launch the tasks in a headless style environment.  
I leave the default settings and write short custom programs that spawn the execution without a window showing.  For example, to run a batch file without popping up a command prompt window, use the code below.  Set the task to spawn "RunBatchFile.exe (path_to_batch_file)".