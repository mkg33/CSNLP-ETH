In this case, the script you're accessing to might be sent with one header (like pdf file), but in all actuality it's a php file.
So to deal with HTTP Redirection you just need to loop an HTTP HEAD request until you stop getting responses in the 300's (hopefully getting a 200). Keep in mind it is possible that they will redirect in a loop, which will never end. You can do this with CURL or any HTTP tool.
There are two things that commonly happen. Your link doesn't work anymore, so I am not sure the actual scenario in this case, so I will summarize on another link.
This is what most download sites use. You click the download link and it takes you to a page with a bunch of ads and says "Your download will begin shortly" something similarly. [Example]. With these you can try to parse the actual direct link from the URL, but that would be site specific, and most sites will not include it to prevent you from circumventing it. This is done either via a meta http-equiv="refresh" tag in the header, or JavaScript (most common). The JS usually has a header fallback though.
in conclusion: you can never know how the server & the scripts are configured, so you can never know the real, actual adress, even if it seems like you know.
The site could be scripted, and when it gets a certain command (the URL can pass a command), it might then return a PDF file (or some other file), without redirecting. There it's a server-side thing and depends on how the site is coded. Without actually requesting that link from the server, it's unlikely you could figure out how to get the file. And sometimes even if you knew the direct URL, you might not have permission to access the direct link. Some sites are coded so that direct links won't work.
There is probably a JavaScript block that links to the download as well. It may be obfuscated, or linked from another URL. Your mileage may vary trying to parse that out. There may also be a "direct link" on the page. You could try a few techniques to find that, but again that could be obfuscated via JavaScript or even missing all together.
This is pretty much the "true" URL as for those well-protected websites, you have to submit the complete URL for the server to authenticate your request. You may be directed to another URL afterwards, but it will normally be a one-time one. In other words, these file download websites will never give you a leech-able direct link.
I'm not really sure, but if you are using CUrl, can you not just obtain the URL contents (get_file_contents(url) in PHP) and then check the MIME type?
There is a solution though. If you look at the source on download page you will usually see a <meta http-equiv="refresh"> tag (usually in a <noscript> tag) with an attribute of URL that points to the actual download. So use CURL (or any other HTTP tool) to download the page, parse it out, and grab that value. A site may exclude this though if they want to be really nasty, thus requiring you to have JavaScript to download files.
Server handles the file requests, using some WWW Rewrite (for apache servers, for example), so for example, you could be going to a page www.example.com/13-this-site-has-nice-page-name.html, but in reality you could be accessing some php file, with a parameter, such as: www.example.com/site_handler.php?UID=13
In this particular URL, the parameters, which are protected by a digital signature, clearly list time and IP restrictions of the downloader. For a website with this level of competence, it is unlikely there will be leaked direct links.
This is what you see with Bit.ly and other services. What then do is provide an HTTP redirect response. When you visit http://bit.ly/oH3410 it redirects to the actual URL. Sometimes one URL redirects to another. You can see this happening if you plug the URL into http://web-sniffer.net/ or by using [curl][1] -I http://bit.ly/oH3410 you will see returns a 301 pointing to a new Location. 
For file downloads with handlers, it might be a tad more trickier, as you can go to a page which is just a download handler, for example: www.example.com?file_downloader.php?param1=7683&param2=jld8ijn, etc...