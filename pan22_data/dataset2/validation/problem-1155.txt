People often over estimate what it takes to write the "engine" part of a game. If you only do what you need it won't take that long. The hard part is to not get stuck writing infrastructure and to only write what you absolutely must to solver your problem.
So for example, say you don't have the money to spend on Unity.  Or, you'd rather spend it on new hardware instead.  Or, there are performance issues with the free engines available to you, or you need to have more control at a low level.
Avoid using a library if your primary goal is to learn from the experience of implementing the concepts that are solved by the library. Whenever I develop a game (part time), my goal is purely learning. I don't care how long it takes, thats why I'm doing it all from scratch! Now, you decide.
Don't roll you own engine. Roll you own game. If you happen to write an engine at the same time then good for you, if not you can always refactor whatever parts you might want to reuse to make it more "engine" like.
If you love writing software for the sake of writing software, then you're going to love writing a game engine.  A common trapping of beginning game programmers is to get caught up writing an engine as some kind perpetual project.  I honestly believe that's how all these open source game engines came about -- game programmers who actually didn't 