Note that you do already have bugs of this form: the constructor only sets the annual interest rate, and setAnnualInterestRate only sets the monthly rate.
As it stands, SavingsAccount now has a requirement for being in a valid state: It much be the case that monthlyInterestRate = annualInterestRate\12. 
The problem description requires being able to do things with both the monthly and annual interest rate. However, that does NOT mean you necessarily need a field for both of them.
In this specific case, though, it's not just an invariant but also a DRY violation- you're representing the same knowledge in two different places. It would be easier to just store a single version of the interest rate, and have a private method to translate it into the other version when needed.  This reduces the potential for bugs, since you aren't always having to update two values when you really only want to change one thing.
It's not inherently a problem that your class has a requirement like this. They are referred to as invariants, and as long as you don't publicly expose anything that allows any calling code to break it, it's fine for a class to protect its own invariant.
Also don't automatically add "set" when it's not needed to a name. setDeposit is a strange phrase, and would be more natural as addDeposit or makeDeposit.
The comment isn't adding any information here. The line below is clearly a call to that method, there's no need to say that twice. 
In cases where the code doesn't express enough, maybe it's the code that should change rather than adding a comment. For example:
Is the comment because it's not clear what "balance" alone means? Then change the variable name to accountBalance and lose the comment.
Your naming is generally good, but you switch between camelCase and snake_Case arbitrarily. You should drop the underscores.
I'd also consider renaming calculateMonthlyInterest. calculate implies it's going to give me back the answer to some question, but actually it's changing the underlying state. Something like addInterestForMonth or even advanceMonth might be more expressive.
I don't think the "end of..." comments are all that useful either. These usually only serve any purpose when you have lots of nesting and large blocks, and in that case they're more of a code smell that you're doing something wrong.
Comments should be there to explain something that the code itself can't. Many of your comments just repeat information already expressed just as well by the code you're commenting. For example:
You generally do a really good job of separating out concerns, the only place this falls down is in the displayData method. This should return a string rather than printing to screen. That way your SavingsAccount doesn't care about what kind of IO you're using, and you could just as easily use the same class save that information in a file, send it through a webservice, email it to someone, show it in a GUI, etc.
Comments like this are actually a form of repetition, so it arguably violates the DRY (Don't Repeat Yourself) principle. To see this, imagine you had to change that line to call something else instead. Now you have two places to update rather than one- the line itself and its comment.