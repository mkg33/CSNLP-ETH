ISPs run authoritative servers to host the domains that they manage on behalf of their customers.  The name servers run by the TLDs and ccTLDs are also authoritative servers, as are the root name servers.
In addition to pQd or if you've got a longer commute, listen to the dns-specific episodes of SecurityNow. On first glance episodes 163, 157 and 155, though there have been some additional episodes (after these) with listener Q&A.
The sources you find with Google are either very very technical and so hard to get a proper feel for the whole system or so dumbed down they are not very useful. Anyone have a good source that explains it as a whole but without be having to become an expert in the process of reading it?
This is the server that holds the definitive (authoritative) information about a domain name.  Authoritative answers from such a server have the AA bit set.
The answers from authoritative servers always contain the actual configured TTL from the zone file.  i.e., if the TTL is set to 86400s, that's the value that'll be in the responses.
That server may or may not know the answer, but think "recursion" here.  This process will repeat as necessary, all the way back to the "root" server (called '.' or "dot").  Eventually the answer comes back down the chain, with each DNS in the chain pretending that it knew the answer all along!
A forwarding (or proxy) server doesn't (usually) cache.  They're used to proxy packets between one network and another, typically sitting between a stub resolver and the recursive resolvers.
A recursive resolver only receives requests from stub resolvers.  If the answer is in its cache it will return it immediately.  If the answer is not in the cache it will iteratively ask the relevant authoritative servers for the answer, and then return it to the stub resolver.
There's a "hosts" file on your computer.  You can put entries in there; for instance, you can put names of things on your LAN that translate to their IP address.  The file can be empty, too.
I want to get an understanding of how the DNS system works. How domain names actually get resolved and how admins setup a domain name so it is resolved correctly to a target machine. 
A stub resolver isn't a server in the normal sense, it's typically a library, and calls to gethostbyname() and related functions just invoke the code in that library.
ISPs run recursive resolvers for your PCs talk to, albeit most consumers actually rely on the DNS proxy in their home gateway, which forwards the query to the ISPs resolvers.
That said, as has been mentioned previously, DNS & BIND really is the bible when it comes to DNS; if you're going to be administering your own DNS servers, it's probably worth having your own copy.
Despite it's name, DNS for Rocket Scientists might be what you're looking for? The DNS overview section covers key concepts like domains, zones, record types and delegation. If you're then looking to implement DNS with BIND, it goes on to have more detail about BIND itself.
Similarly answers received from the recursive server show the decreasing value, not the original value from the zone.  Per the example above, if a record was received with a TTL of 7200s exactly an hour ago, the answer from the recursive server will say 3600s.
The stub can't do anything except talk to a recursive resolver, relying on that recursive resolver to obtain all of its answers for it.  All such upstream requests have the RD  (Recursion Desired) bit set.
So failing all the easy answers, this DNS service does the next easy thing.  I looks to see who your ISP said to ask (when you connected you got this info), and so it asks that server.
Caching is a fundamental feature of recursive servers.  The TTL received from the authoritative server continues to tick down, and when it reaches zero the entry is purged from the cache.
First of all, there's a (usually small) DNS server right there in your computer.  And maybe it already looked that address up recently.  So if it's in a cache, you're done.  If not, we dig a little.