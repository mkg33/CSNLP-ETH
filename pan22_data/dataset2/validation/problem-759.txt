Side-Note:  If you are using symlinks, you should make sure both the linked directory and the actual symlink itself have the appropriate ownership / permissions.  To target a symlink with chmod / chown, use the -h flag and, if targeting a directory, make sure the trailing slash is not present (eg. /var/www/html/linked_dir and not /var/www/html/linked_dir/ - be careful if using tab-completion as it will automatically add the trailing slash)
Note: WordPress usually contains a hidden '.htaccess' file, you will need to manually apply the chmod to that, and any other hidden file, as recursive chmod / chown will skip them.
SELinux contexts - These you can check with ls -Z.  To turn off SELinux enforcement you can run setenforce 0 - This is good for debugging whether SELinux is the culprit or not, however you should turn it back on when done testing using setenforce 1.  If SELinux is the problem, then likely what you'll need to do is change the context of the files with something along the lines of chcon -R -t httpd_sys_rw_content_t directoryname 
Permissions - They're listed as rwxrwxrwx.  the middle set of rwx is the important part as it controls access via group (so is what matters for myuser).  You will probably only need read/write permissions so a chmod -R 664 directoryname would probably suffice (read/write for apache user and group, read-only for everyone else).  You can check the permissions with ls -l.  
Ownership - Sounds like you've got this right.  Owner:Group on CentOS7 should be apache:apache.  For your user you will have to add apache as a supplementary group.  You can check this with id myuser, if apache does not show up in the list of groups, then run usermod -a -G apache myuser.