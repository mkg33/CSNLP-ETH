You don't mention what protocol you want to use, i.e. TCP or UDP - and it's also important to realise that "port" isn't quite as granular the system supports to disambiguate sockets. E.g. if your system has multiple IP addresses then port 80 might be in use on all IP addresses (either the application has bound to "0.0.0.0" or "::" or to each IP address in succession), or it might be in use only on a subset of those IP addresses.
Next, to tell if the port is truly "open" as you ask - you need to start looking at potential firewall rules. Again the easiest thing is to try to connect to the port. Use netcat as above, on the server, and from a client use netcat to attempt to the connect to the port you opened.
(make sure you have node installed and that it works with node not just nodejs or change the program accordingly)
will attempt to bind to TCP port NN on (optional, the default will be all addresses) a.b.c.d. Add the -u option to do the same in UDP.
will connect to port NN on a.b.c.d, using UDP if the -u flag is specified. You can then type input into the client end, and it should show up on the server. If it doesn't, you need to look into system and network specific tools. 
A lot ways of doing it gave me issues because they didn't work on linux and osx, and/or because they didn't show the ports used by docker, or processes that were owned by root.  Now I just use this javascript program:
The best, and surest, way to determine if a port/address is free and available is to attempt to bind to it. Netcat is handy for this.