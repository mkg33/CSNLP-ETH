If the answers are "no" and "yes", the way they are in most organizations, then the answer is clear.
No, they shouldn't be responsible for the mail system, unless it ties directly in with the application they work on. But there should be a clear run-book of things to quickly reason about so they can either gather information for the sysadmin, or even solve themselves if simple enough.
For development, if possible supply them with a copy of the live system and provide a way to push database changes back to the development copy at will.  You will find that many of your developers will be more productive with access to "real" data, and you will feel safe knowing that they don't have access to the live system.  
From a DBA standpoint, access to production systems for users should be strictly limited, and this includes developers.  Users should only be able to see the data they need and this would ideally be provided via views, not direct access to tables.
Many companies have one sysadmin who is on call 24/7, even for application issues. Some companies are fortunate and have two. It is completely unreasonable to expect that one person do all the day-to-day operations work and respond to system alerts at all hours of the night.
This doesn't just protect the person (can't be accused of overstepping his/her bounds), but also protects the organization, should the user's account be compromised.
However, many companies have a fair number of developers that are responsible for the application code running on the systems. Many of them may even have experience doing operations.
Apply the Principle of Least Privilege. If they need access to do the job, you give them the access. But you only give the access they need. If they don't need access to do the job, you don't give it to them.
Developers, likewise, should be able to see the data in production, but not alter any tables.  Any changes should be done in test (or dev) first, then scripted and ran on production by the DBA.
I am also of the belief that there is no real reason to store certain sensitive data beyond the transaction.  For example, credit card transactions... grab the data and send it to the merchant processing system... but don't save it in the database, instead just store the last 4 digits of the card and the transaction id from the merchant system.  This way when an exploit is found and a fix generated (I know, like that never happens), you have the confidence that no one could have stolen any of this data from your database.