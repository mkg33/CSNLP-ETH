Disclaimer: As long as we are only talking about 2 small ID columns, 1 of which is the cluster key, the impact will be pretty much zero (0).  
Thinking Ahead: But do now think about the future and how you want to be designing more complex indexes to support a more complex system. 
For What it is Worth:  I have seem code that tried to include pretty much everything in the index.  (I am sure that you are not planning to do that.)  But the big fat index that was generated was, let us say, not optimal.
If you create an index on SchoolID and ID is the clustered index, then your index on SchoolID will include the clustered index as well.  Depending on the distribution of your SchoolID it could be that the SchoolID index could be better used alone in some contexts.  
This could be when you are searching some data set where the SchoolID is the important join to some  data in another table.  This other table will likely have its own clustered index.
You have received good advice for keeping the index as narrow as possible, both for space use and for controlling the amount of I/O.  But you have maneuvering room in your decisions.
If you assume that you will eventually be creating a larger database, with many tables, and many indexes, you should begin thinking about these issues now, so that you are developing a strategy that will stand up well for the future.