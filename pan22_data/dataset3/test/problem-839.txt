This doesn't address the effect of the player changing position or speed after the event occurs, but you could potentially adjust events that had been queued based on player changes.
Interestingly enough, network lag is your friend in this case.
As in you WANT a delay to occur for some data packets, at least if it's about drawing.
So for every event, calculate time delay between event and each player, then queue up that event to not be sent for drawing to that player until the delay time has passed.
Typically the server would send out updates to all clients at the same time, but what you need is for the server to calculate the "light lag" for each event (based on distance of viewer), and then not send out an update until that time.
But instead of a base lag each player would normally have for all data packets impacted by just their network speed, you need to apply specific lag for each event to each player based on the light-speed delay.
A player begins to move closer, move event closer in time.
Doppler shift would be an interesting thing to throw into the mix, based on the movement delta between viewer and event.