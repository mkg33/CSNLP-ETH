You don't need the Ball.velx = Ball.velx line, that doesn't do anything, which mean that you can remove that check.
You have a class paddle (as already noted it should be Paddle), so why not having the draw inside the class?
This is a block of code that is prone to errors, because of the multiple conditions check and the multiple nested ifs.
The comment here is not useful, if you have a variable level1, well... that's level1, right?
You might want to look into loading a text file into a variable.
There's also an issue with checking a strict Paddle.y == Ball.y because if you increase the speed of the ball, there's the chance that it will go past the paddle's y and not be detected, so you should check if the ball's y plus the ball's height is within the paddle's y plus the paddle's height.
If you need them to describe what is happening, most likely you need to refactor something.
Actually, you could go the extra mile and have a list of objects on which you loop to call the draw and maybe a possible update function.
row = posx // 35) are better written as constants, even if you use them only once, to explain their meaning.
https://stackoverflow.com/questions/29640685/how-do-i-detect-collision-in-pygame )
You might have different text files named level1.txt, level2.txt and so on, depending on the level.
You should also look into the integrated collision detection functions from pygame, they can save you a bit of trouble (see e.g.
You should think of comments as a way to describe why you did things that specific way or the meaning of something.
The same goes for all your other comments in the code.
Also, as already pointed out in the other answers, this is a global variable, which in this case would not be terrible except that if it's level1, you probably also expect to have level2 and maybe level3, which would make it quite ugly, especially if you hardcode your levels in the module.
The outer if would also be more readable if you put that in a function and called it with the specific parameters, something like: