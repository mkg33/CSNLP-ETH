Like mentioned above, it really depends on the way you wrote your code.
The problem is now I want to animate the attacks I find they don't conform to a single pattern like the other graphics.
But you may spend more time trying to invent generalization than you would just coding it a dubious way, and there's no way you're accomplishing this without a significant chunk of code.
As you write more visual effects, look for ways to combine them sensibly into a larger structure.
When this updates, it draws the image (cropped/resized).
Create a SpriteSheetManager class that can hold ImageAnimation objects.
This would be useful for large spells that take up the whole screen.
I could override the animation method but that would make the attack class huge and waste memory.
Create an ImageAnimation class derived from AnimationFrame, which has a SpriteSheet variable to hold your image, and possibly a matrix to resize/crop the spritesheet.
Create an AnimationFrame class which only has a duration.
(If you have a baseObject class, make sure this derives from it)
attacks that are like laser beams so an image would grow as it moves across the screen.
It should also super.update() to update the time passed.
You can also enhance the ImageAnimation class (or create a derived class) to handle scrolling images.
But this seems like a general method that woudn't be too hard to implement:
This really depends on how your code is organized, I don't think anyone can give a really good answer to what you should and shouldn't do without knowing your code and style in depth.
When the current ImageAnimation is done (duration has passed), the manager should move on to the next ImageAnimation.
Now if you had a baseObject class and your game objects are stored as an array of baseObjects, then you can add SpriteSheetManager to the game objects so it updates then.
it's silly to write "animate fireball hitting enemy" and "animate energy bolt hitting enemy" classes, just write "animate image hitting enemy" and specify the image based on the spell.)
You would have to manually add in ImageAnimations and specify the image/duration/matrix (or somehow pull it from a data file).
I'd just start coding new visual effects, either via a branch in your animation method, or via inheritance.
I suspect this is one of those things that isn't elegant, just involves a lot of code.
So don't worry too much about memory, worry about making something that you can work with.
When SpriteSheetManager updates, it updates the current ImageAnimation object - ie the current frame.
I'm not saying that this is the best method, this just what I would have done :)
In any case, it doesn't sound like a problem that is prone to consuming problematic amounts of memory.
If you thing of a final fantasy game there is attacks the shoot fire balls so a single image would move across the screen.
Add the SpriteSheetManager to your Player objects, so they update when Players update.
I have an attack class that has the basics like damage and cost and works in the game.
attacks the would have things come from the top of the screen is a variety of manners.
But it could cause problems for you the programmer to manage because it is a lot of code.
I thought of making the class i have now a abstract class with an animation method and deriving several types of attack class from it but im worried about all the extra complexity that would add.
You can try to come up with reasonable building blocks to create attacks.
I asked myself a similar question a while back and here is what I came up with (using a component-based system):
Originally I slapped it together to the the ai targeting algorithm so you choose your attack and you see the enemy take damage.