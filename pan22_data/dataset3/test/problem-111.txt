When using LE, the work you put in is setting up the necessary automation (in this context, to prove domain control).
If you are going for OV or EV levels, you can probably only partially automate the process.
Note that in this case just not using them is the Wrong Thing(TM) you should use CAA to explicitly disable Let's Encrypt for your domains.
But if you can't automate for any reason it's a negative - if you have tools, appliances or whatever that block automation consider any commercial SSL cert costs as part of the ongoing cost of those tools/ appliances/ whatever in cost planning.
Even if you write them into a CSR they're just discarded.
Shorter validity means that certificates have to be updated more often, both server-side, and client-side, alright.
Are there any downsides compared to other, paid certificates e.g.
This is in fact the intent of the service - to herd people towards automating this essential work rather than perversely doing it manually while they automate away many harder tasks.
Let's Encrypt automation means you're constrained exactly by what the automation allows even if there is no other reasons why you can't have something.
Even in the Web PKI, Let's Encrypt offers only "DV" certificates, meaning any details about yourself or your organisation other than FQDNs aren't mentioned in the certificate.
This may be a blocker for some specialist applications.
The other perceived problem is the one about certificate lifetime.
Browsers update certificates all the time, it's no biggie.
But browsers (or other client applications) need to start actually showing this in a useful way before that has any effect for the typical user.
Let's Encrypt only issues certificates for the Web PKI - servers with Internet names which use the SSL/TLS protocol.
This gets the job done for most people, but it isn't the most broadly trusted root in the world.
But it does suggest that your site is "secure" (some browsers even use that exact word).
LE is very much intended to have all processes automated, their service is entirely API-based and the short lifespan also reflects how everything is centered around automation.
If you cannot afford that business-wise, you will have to spend money.
Letsencrypt provides DV level of verification only.
Contrariwise offset savings from not needing to buy commercial certs in pricing of new tools / appliances / etcetera that automate this (with Let's Encrypt or not)
Even if you prove control over example.com, Let's Encrypt won't issue you certificates for some.other.name.in.example.com without seeing that in public DNS.
If ignoring these customers/visitors is a valid possibility, no problem.
Let's Encrypt requires that the exact name, or the (sub-)domain if you're requesting a wildcard, exists in the public Internet DNS.
The chances of messing things up (eg, forgetting to renew or doing the installation incorrectly when renewing) are less with an automated process.
There are two groups of downsides worth considering.
With a person who knows what they are doing, manual steps can obviously also be done securely.
Let's Encrypt certificate lifetimes of 90 days mean you need to automate because ain't nobody got time for that.
There's very slightly more traffic to be had when updating every 3 months instead of every 2 years, but seriously... that is not an issue.
After some research I found out that Let's Encrypt certificates are less compatible with browsers than paid certificates.
The single biggest downside is, for the time being, that your site will show as somewhat inferior, maybe dangerous because it doesn't have the nice green badge that some other sites have.
Nevertheless, for almost everyone, almost always, Let's Encrypt is a good first choice for putting certificates on your TLS servers in a fire-and-forget way.
When buying a cert the DV/OV/EV level will define how much manual work will be required to get the cert.
Simply because revocation is mostly theoretical, in practice it cannot be relied on (big weakness in the public PKI ecosystem).
New types of public key, new X.509 extensions and other additions have to be explicitly enabled by Let's Encrypt on their own timeline, and of course you can't just offer to pay extra to get the features you want although donations are welcome.
Let's Encrypt certificates are trusted by major web browsers today via ISRG (the charity providing the Let's Encrypt service) but older systems trust Let's Encrypt via IdenTrust, a relatively obscure Certificate Authority which controls  "DST Root CA X3".
It is possible to do things incorrectly in ways that expose private keys or similar.
Although the problems are only perceived, as the owner of a website you may have no other choice but to address them (if business interest forbids showing the middle finger).
Buying a cert you get whatever you pay for (starting at DV, with the same level of assertion as with LE).
How much work that is will depend on your environment.
So that's the Web obviously, and your IMAP, SMTP, some types of VPN server, dozens of things, but not everything.
As for server-side, this happens with a cron job, so it's actually less hassle and more reliable than usual.
Let's Encrypt are providing free SSL certificates.
In particular Let's Encrypt doesn't offer certificates at all for S/MIME (a way to encrypt email at rest, rather than just when it's in transit) nor for code signing or document signing.
For DV it typically boils down going through a wizard paying and copy/pasting something or clicking something, for OV and EV you can pretty much count on needing to be contacted separately to do additional steps to confirm your identity.
End-users probably recognize the current EV "green bar" (which is going away), other than that they don't tend to actually look at the certificate contents.
When buying a cert, even with a CA that provides APIs to regular customers (not really the norm at this point) it will be difficult to properly automate anything other than DV and with DV you are paying for essentially the same thing that LE provides.
If you want a "one stop shop" for certificates, this may be enough reason not to use Let's Encrypt.
OV = owner entity (organization) information is verified in addition.
With LE, the provided tooling is set up around reasonable practices.
But it is actually an advantage, not a disadvantage.
One or the other will take your site as not trustworthy (without understanding any of the implications) just because the browser doesn't say it's secure.
End-users are unlikely to have any idea one way or another.
Traditional means of buying certs are particularly useful if you desire OV/EV certs, are not automating certificate management or want certs used in some other context than HTTPS.
For example the abandoned Nintendo WiiU console had a web browser, obviously Nintendo won't be shipping updates for WiiU and so that browser is abandoned, it doesn't trust Let's Encrypt.
Without automation: Longer lifespan is more convenient.
If Let's Encrypt policy refuses you, the only "court of appeal" is to ask in its public forums and hope one of their staff is able to offer a way forward.
EV = more thorough version of OV, which has traditionally been awarded with the "green bar" (but the "green bar" appears to be going away soon).
The machines named needn't have public address records, they can be firewalled off, or even physically disconnected, but the public DNS name needs to exist.
For example if you have employees who're allowed to reconfigure Apache but shouldn't get SSL certs for company domain names then Let's Encrypt is a poor fit.
This may happen if, for example, your site has a DNS name their systems decide is "confusingly similar" to certain famous properties like big banks or Google.
Starting with the assumption that you'll use Let's Encrypt is a sensible way to approach this decision.
Theoretically, though, it is clearly more helpful with a certificate that states information about the controlling entity.
If the installation is done correctly, the end-user will obviously not know how it was done.
LE may not be feasible if you, for whatever reason, cannot automate the certificate management
The Let's Encrypt proof of control automation may not suit your organisation's rules.
For sensible reasons the exact policies of each public CA in this regard are not open to public scrutiny so you may only realise you can't have a Let's Encrypt cert when you request it and get a "Policy forbids..." response.
No way you can forget, no way to be late, no way to accidentially do something wrong, no need to log in with an administrative account (... more than once).
Unless you need a certificate for something other than web, there are no real downsides, but surely perceived ones.