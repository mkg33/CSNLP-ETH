Even better would be to use an array instead of numbered variables.
Then the question is to know if it is faster to make the lookup in the 3 small arrays than computing the 3 % .
Lastly, you're making checks you already know are false.
Bewteen 0 and, say, 1453 there are no integers having a 2 in the first place, plus the 111 ones between 0 and 453.
You're first checking if f1 > 0, then regardless of that result you're checking if f1 and f2 are > 0.
I wouldn't be surprised if this reasoning can be extended to the remaining cases, but I have not tried.
and replace the while loop with (f replaced with tmp):
First, I would tell you to restructure the while into a do-while.
Try this (you may have to define bool; older C++ specs do not have it built-in):
Between 0 and, say, 53 there are ten integers having a 2 in the first place plus the one between 0 and 3.
Similarly, if any digit of f is 1, then the same digit cannot be 2 or 3, so as soon as you know what a digit is, continue to the next digit.
int tab_hold_twos[100] : if x holds two than tab_hold_twos[x] =1 else tab_hold_twos[0] =0
You could start by changing your chained ifs to switch statements and avoid duplicate % computations:
Bewteen 0 and, say, 453 there are one hundred integers having a 2 in the first place plus the 11 ones between 0 and 53.
Instead, try nesting ifs; once you know f1 > 0 you can check if f2 is also > 0, while if f1==0 you don't have to check if f1 > 0 and f2 > 0 because you already know it can't be true.
int tab_hold_ones[100] : if x holds one than tab_hold_ones[x] =1 else tab_hold_ones[0] =0
If b is big enough you will certainly win a the end of the day.
This will allow you to run at least one iteration of your loop (for one-digit numbers), THEN see if you need to repeat.
There are not many numbers which holds 1,2 or 3 between 1 and 99: 1,2,3 10 ... 33
So for each i you will do twice less while(f) iterations.
It should be possible to find closed formulas to express x1, x2... x7 as functions of a and b, avoiding the need to loop on the whole range a..b.
int tab_hold_threes[100] : if x holds two than tab_hold_threes[x] =1 else tab_hold_threes[0] =0
So the number integers between 0 and some number having at least a 2 is of the form 1110101..., with a one or a zero depending on the corresponding digit in the original number.
Between 0 and, say, 3 there is a single integer having a 2.
Use booleans instead of ints: once you know you have a 1, 2, or 3, don't keep checking digits for those values (meaning if you have all three you can exit the loop entirely; for 1000000000000000123, you're done looping through the divide/modulo loop after checking just the first three digits).
YOur algorithm is based on the fact that it's easy to know if a number between 0 and 9 "holds" 1,2, or 3.
One thing you could do is use an array instead of many variables:
That will in turn allow you to avoid the additional double-checks to make sure you weren't ignoring one-digit numbers (which are currently performed unnecessarily on any number > 10 that honestly doesn't have a 1, 2, or 3 in it).
The count between a and b is just the count between 0 and b minus the count between 0 and a-1.