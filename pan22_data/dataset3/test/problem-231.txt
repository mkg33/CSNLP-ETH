Then you just keep the 1000 or so most recently visited areas in memory.
Saving large quantities of data in a non-volatile fashion is literally why hard drives were invented.
One way you could solve this problem is not actually storing state on disk, but just setting up your generation code to use a seed for the random number generator, so it generates the same thing for a given area every time the area is generated, deterministically.
Amazon, Google, and Microsoft Azure all offer it; however, you would have to have a more sophisticated area/zoning mechanism.
We had to use this a long time ago for massive battles with multiple mobs.
Just save it to the your server's hard drive in a text file or something.
If you don't want the rare stuff to always be in the same places, you could mix in the date with your random seed, so that every day each area gets a new default state with different stuff in it.
Additionally, the prices for server costs can also increase.
If you are very invested in keeping multiple mobs with multiple movements then you could move the issue to IT by use elastic servers.
For a project that we worked on, we had utilized grouping.
When areas are evicted from that cache, they will reset to their default state the next time someone goes there, but it will be the same default state every time without you needing to have saved it anywhere.
It was one creature (with a model of many creatures), but had many hitboxes.
You can't game the system to force rare things to appear, but the things that do appear will eventually "recharge" if left alone long enough.
If a player isn't interacting with it anymore, you won't need to rapidly access it, so why keep it in the RAM?
When a hitbox HP became 0, it would divide the creature and create a second or third model.