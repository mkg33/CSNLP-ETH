point is simply a structure containing x and y ints, TILE_WIDTH would be 64 in your case, TILE_DEPTH is kind of badly named (it is actually the height of the tile graphics), but it would be 32 in your case.
Everything else is the same as the previous code example.
Based on your comment, here's the code I'm using to convert tile x,y values to on screen coordinates.
The offsets are if you want your tile map to "start" at a different x,y location (such as if you want tiles to be above another set of tiles).
Now, it doesn't take into account "3d tiles", everything is considered as being on the same plane, so if you're writing a game where that matters, this code will not work.
This will generate a map with 0,0 on top, middle, like this:
Once again, this assumes a flat 2d isometric tile map.
There's some additional work if you want to use a semi-3d view of the map, and this all assumes that you're working in 2d anyway.
I've been looking for a formula to plot (world->screen) and mouse pick (world->screen) isometric tiles in a diamond-shaped world.
In this bit of code, mX and mY are the mouse screen coordinates, which we're combining with the camera values to find out where we are in "world coordinates".