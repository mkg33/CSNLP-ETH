It sounds like your students are pretty savvy, so what better way to show them how awesome a visual editor can be than to have them build their own!
It allows them to rapidly prototype ideas and build complex systems in hours instead of weeks.
The kids themselves already have a pretty substantial background in Java, Python, C and 6502 assembly, and many of them are also familiar with the JS/PHP/SQL stack for web dev.
Visual programming is something relatively new, let them be an early adopter as this new form of programming matures.
First and foremost, don't let your feeling about their feelings affect your judgement.
The system they built is production-ready in most cases.
And planing is easier with a planer than with a claw hammer.
A lot of people are talking about how visual scripting is a higher abstraction, and that's all the difference, and the debate has moved more to a question of "is visual scripting 'real' programming?"
Have your students write a visual programming editor.
To debunk the "Real programmers don't use _____" fallacy, you could discuss what happens when you take that mentality to its logical extreme.
It's not something that will go into a folder and be forgotten.
I have been considering taking a visual programming language, such as Snap!, to my high school students as a way to make some of the concepts we delve into a little more fun.
Different languages make the process easier just like having a screw driver gets a screw in the wood easier than using an awl.
If the cost of time needed to perfectly optimize your game in C is more expensive than the slight loss in efficiency you'll have for a fraction of the development time, it's a foolish business decision to ignore the option which enables you to make more money.
How do I get past the initial hump and persuade them that this is worth their time?
Block-based programming is just a kind of IDE with a slightly different autocomplete mechanism.
Let them decide how they want to spend their time.
The value of visual scripting for people who are experienced programmers is the speed at which you can develop.
They're creating software to make them more efficient at what they already do and love.
Block-based code can be trivially transpiled to textual form.
Every Unity developer and their grandmother uses it, and for good reason.
I have a very strong feeling that they won't consider a block-based language to be a real language, even though it contains typing, parameters, lambdas, etc.
There's a value to higher abstraction that no one seems to be mentioning, and that's the speed of it.
Perhaps instead of convincing them what is better, have them do various exercises and let them choose their own tool set.
The grade should be given on the finished product - not which tool was used to accomplish the goal.
They can use it on their next assignment or in their own personal projects!
When you remove details, you can write more, in the same amount of time.
Time is a very expensive resource in the software industry.
A good example of a visual scripting system is the Playmaker extension for the Unity game engine.
If you have short exercises, have them do them in class and when the visual tool is faster, those students will be done sooner.
We can use different programming 'tools' to accomplish our goals.
Of course the exercises should do something interesting and in some or most cases allow the visual tool to save time.
It seems to me that most kids want to learn new things, they want to be 'beta testers' and on the cutting edge.
After they complete an exercise, you can have them perform that conversion to textual code or pseudocode.
This is an incredibly important factor in development, especially when smaller teams try to produce large, complex software.
It's why we compare Python to C as 1 line for every 6.
Remember the goal - it isn't just to learn a language, it is to teach students how to make good decisions and (hopefully) those lessons carry over into everyday life.
Everyone uses high-level languages these days, and we let compilers do the grunt work.
More importantly though, programming isn't about the process of programming.
The general consensus appears to be that yes, DnD languages are still real languages, and sure, it's a higher abstraction, but what does that mean?