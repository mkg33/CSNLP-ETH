I have used python turtle, it aids learning because it gives immediate feedback.
So this year I'm trying to take a different approach: I'd like to start my course by showing them how to build a GUI program, at first by just asking them to copy and paste, until they have a working program by the end of the first class.
As long as they get to see examples of the more basic stuff.
Yes for graphical programming, but this is not GUI programming.
Students didn't actually program with integers and strings, but with the primitive elements of the simulation.
There might be some ideas you can get from the course, or maybe you could do an inverted classroom?
It could also be used to teach algorithms: First teach basics, then add drawing of data sets, then …
I think something like a calculator would be far too simple and might not be too attractive to young, 18-year old students that own mobile devices and see all kinds of cool applications every day.
By "interesting", I mean that the system was Turing Complete, so that, in theory, any program could be written within the framework.
And every single year I see the same outcome: they get confused, frustrated, and the common question of "what are these exercises for" always arises.
The Java version has been used for APCS courses and in college level courses as well.
We don't even cover OOP and don't teach anything GUI (only CLI programs, just for them to grasp problem solving and creating algorithms).
But something like a minesweeper game might be just too big a project for me to show as an example on the first class, considering they will be watching me build a program and trying to mimic what I do without understanding yet, so if this part of my class lasts for too long it might bore them to death :P
It actually used a very small, Pascal-like, language with only a few primitives.
There is a good class on Coursera for interactive game programming in Python by some professors from Rice University, which I used when I started learning Python.
However, if you teaching Java, GUIs are a compelling use case for the whole inheritance mechanism.
I know my course doesn't cover GUI, but I've noticed young students are not familiar at all with command-line, so maybe I can just tell them there are things on the program I'm showcasing that they will learn in future courses.
Secondly, they need to understand polymorphism and inheritance, as these are vital tools.
I teach programming at a university, at 2 freshmen courses.
https://www.coursera.org/learn/interactive-python-1
To make command line programs make sense, you need to first teach Unix (Or another OS with a workable command line: VMS, Amiga-dos, sorry I can't think of any others that are still relevant).
I don't know of a similar resource for Python, but you could, perhaps tailor some of the ideas there to Python.
backs of cards, white boards, paper, mini-whiteboards, …
The granularity of a good OO program can be very small with the complexity in the interactions between objects rather than in the methods themselves.
For example, when I write an algorithmic program, using good OO techniques, a method of five lines is starting to be too long.
First of all, students need to be good at writing functions and procedural programs.
You can teach algorithms, by having the students be the data, by having a student direct, by having a student explain, by using props e.g.
For Java, there is a special resource called the Greenroom that provides many other teacher-written simulation frameworks in which the students program.
If you are doing this in java11, it is tricky to get set up and configured.
Students wrote programs to make a robot do interesting things.
But GUI programs typically have long and boring methods that are mostly just messages to library code, rather than being interesting in themselves.
It's really good at introducing the ideas very gradually, but eventually creates a pretty sophisticated game.
When one can see the value in a powerful command line, where one can complete tasks much more quickly and with less pain, then it becomes obvious why one would write ones own command line programs.
My students are being introduced to programming for the first time, so we have to teach them about algorithms, variables, control flow, functions, arrays (lists), etc.
This site is aimed at primary school teachers, but most of it can be adapted.
Your library can contain the GUI code and they build the algorithms to fit it.
Unfortunately, GUI programming is sufficiently different from algorithmic programming that if you start with it students can get the wrong idea about what a program should look like.
The thing is, I'm not exactly sure what to show them.
Back in the 1980's the book Karel the Robot by Richard Pattis did a similar thing for structured programming in Pascal.
Karel the Robot has been updated to modern OO standards and versions exist for Java, Python, and Ruby.
But if I show them all the topics "in action" then I can introduce them to the students during the course and review the project we made on our first class.
You provide a library tailored for their education.
On the other hand, with some preparation, you can/should provide a framework in which the students can work, so that they don't start with an empty page and nothing but language features.
Java8 lambdas make the writing of callbacks simpler and more fun.