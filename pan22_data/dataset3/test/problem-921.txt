that us the best way to produce maximum FPS scenes, as only fraction of a mesh is drawn that is only in Cam view.
Basically level streaming is the solution here and there isn’t much out of the box that can help you get there.
Lastly, Is it possible to combine tiles of terrains just manually without using any tools like Terrain Slicing kit or Gaia please I really need your help Thank you for your attention))).
If you imagine your world as a grid and just make several scenes that represent each square then you can just load levels (using the LoadLevelAsync function to not block the main thread) and unload levels as you move closer or farther to different squares.
Unless you can find a way to put in multiple, small terrains and only render those within certain areas, you're going to keep coming up against the same problem.
Also if you are wanting a breath of the wild type thing (where you can see very very far away) you will likely want to have the ability to slow down or stop update cycles on components that are very distant.
Hence well cleverly designed meshes that just don't pop up in  cam view will not get drawn.
Unfortunately, unity’s current component system of using Start/Awake/OnEnable in scripts causes a massive issue when loading levels.
Moreover, another problem that I faced was with light mapping in Unity, that is, the more terrain I add to the scene the more it is difficult to bake the light mapping.
You asked for out of the box or simple code solutions so the best I can provide for you is the built in ability for unity to load multiple levels at one time.
As a professional who has used unity for almost 10 years and has somehow been always working on games that push the engine to it’s limits, I can honestly say this is more of a technical challenge than you might have signed up for.
Usually you want the highest poly and most CPU expensive things happening only where they matter... where they are close to or visible by the player.
I just wanted to ask for advice those being an expert in Unity 3d and overall in game industry about how it is possible to create an open-world game by means of Unity 3D, that is, I already tried to combine several tiles of terrains, 4 to be exact, and their respective size is 500x500.
Method 3- Use the most awesome method- mixing 2D + 3D within the scene, just it is done in Manga Japanese movies, ie the scene in background is 2D, and the mesh items on top of that are either 3D or 2D- as low as 7FPS.
Yes, I heard of chunk loading but is it possible to code it on my own without using ready plugins.
The question is if I am doing correctly by adding terrains to each other and how open-world games are actually created.
Unity is breaking out of that indie and mobile space but lacks some tech that makes things like this easy for developers.
Method 1- Instead of terrain, use well cleverly designed 5, 10, 30, 20000 etc small meshes as terrain, and put imaginary boxes around each mesh, when mesh is out of Cam sight the just don't render them.
You have every single component in there starting up and allocating memory or spending CPU cycles, which usually results in hitching.
I just thought I would share my own experiences and findings with you.
If possible learn coding functionality how not to render out of Cam view meshes.
This is an issue I am personally setting out to solve on my own and hopefully offer up as a unity asset for others.
Method 2- learn how to draw scene on the fly by creating chunks/lots of mesh quads that will be Cam view.
First things first, unity was mainly built on an architecture for indie and mobile games which might explain why this is difficult to accomplish.
However, once I started to add the fifth terrain to those terrains, Unity stopped working.
Once you tell unity to load a level it has to load everything in that scene and then all at once BAM!
This is what is used by titles such as Minecraft, 7 Days to Die and Space Engineers.
A terrain will have a large area and large memory usage to go along with it and an open world will needs lots of these and, as you've already discovered, this is not an option.