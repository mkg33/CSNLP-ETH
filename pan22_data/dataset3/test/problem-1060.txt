I cannot understand how to store the triangle data in a octree structure.
A prime example of this is in Halo Wars, which had a video/slide presentation at GDC now available in the GDC Vault for free, which covers this in great detail.
This allows you to stretch around and reallocate areas of the terrain, creating overhangs and jutting parts of the terrain.
I cannot guess the logic and the algorithm that lays behind a octtree terrain.
Complemented with carefully placed meshes, you can create pretty much anything.
So I thounght that octree should be the right tool.
For instance in one point the terrain might look like this.
Understanding how to store data in a quadtree is easy: you subdivide the region in a lot of squares and you give a coordinate value to each vertex of the squares, then you just connect all the verticies with triangles.
From my understainding with quadtree perfectly vertical terrain is bound to be low quality in the vertical part, as you cannot subdivide it.
http://vterrain.org/Elevation/Caves/ has a collection of papers on modelling caves/terrain with caves.
Aside from that, there's also vector heightfields, which have already been mentionedin another answer.
There are techniques based around traditional heightmaps, but instead of using a purely vertical height value, the textures contain a full 3D vector, indicating the displacement to apply to the vertex.
Which information should you store conceptually in the octree tree?
I would like to create a terrain with vertical cliffs, natural arcades and caves.
I want to discuss about how to store this information about the terrain.