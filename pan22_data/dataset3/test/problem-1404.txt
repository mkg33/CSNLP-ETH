1) How do you deal with documenting the 'deployment' process to tidy things up?
So I have a simple chain when provisioning new servers of
My suggestion is simply to tie the provisioning of the server to the code you're deploying on that server, unless you want to go for a tool like chef or puppet.
I'm ultimately moving to a Chef system to auto scale/discovery, but right now I actually control the server bootstrap process directly from the source code of the thing I need the server to be deployed on.
They're tools that are designed to do exactly what you need.
I've looked at stuff like chef and puppet, but they seem way over-complicated to me right now.
Sometimes I need to re-install 1 or 2 of the "development" servers from scratch.
I have few, relatively small, servers running Linux distros.
2) Do you use some of the popular deployment tools?
That's just a sample of a few things you can do using the 'capture', 'sudo' and 'run' commands that recap provides you.
Not sure if you're on the webstack, or if you're using ruby, but a really nice tool to use if you are is: recap (based on Capistrano)
It allows you to run scripts on any number of remote servers.
forget to install update monitoring script, non-essential but useful packages etc.
Of course, this example assumes the software that you're deploying is tied to the ruby stack, but the point is, there are tools like this for all kinds of languages / frameworks.
If it's the complexity of the client/server setup, for either of them you can skip installing the server component and just run the client in "standalone" or "solo" mode.
Ideally, I would like to have exact setup among all of them.
It works by using a 'Capfile' to define your servers and such, and then has a few built in tasks that you can extend.
Some simple and swinging modularized bash scripts both as rollout method and self contained documentation?