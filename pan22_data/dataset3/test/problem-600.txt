You could create the following helper extension method:
This could probably be added to LINQKit to be handled with their IQueryable/IProvider wrappers.
Now, an IQueryable extension to trigger the expansion:
Finally, the specific extension needed to filter characters from a field expression:
If you need that many replacements for a simple search then I think either the data or the filter is broken.
https://stackoverflow.com/questions/20131632/calling-a-sql-user-defined-function-in-a-linq-query
Now you can use the RemoveAll extension in a query, and process the query with Expand before instantiating it.
I think the trick here is to move the logic in to SQL, and build it out as a SQL function then call the SQL function from your LINQ query.
You could write extension method that combines Replaces and returns new query.
Here's a generic solution I created to solve these sorts of issues, and the specifics for this particular one.
It uses an Attribute class to mark methods (normally extension methods) as needing special processing for LINQ to SQL/EF and an ExpressionVisitor to re-write the queries for each marked method.
have some meaning, usually they have and they look like they have, so try to build the filter according to the rules instead of changing the data to match the invalid filter.