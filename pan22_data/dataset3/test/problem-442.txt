I would say, if every game engine falls on a continuum from "easy to use/learn but limited in what you can do" to "really powerful, but takes a long time to master"... Game Maker is pretty much the definition of the easy-to-use extreme.
And using Flash (or Processing/Java) keeps you from one of the most dangerous pitfalls of prototyping: You can't use the prototype's code on any serious platform.
Not being bound by a framework means not losing any time following its rules, and not being limited by its scope.
I've been prototyping as a job, and my fastest results were when I could just bash in code without having to worry about, or being hampered by, a framework.
A 2D wrapper really needs no more than loading images and being able to display them at x,y - possibly with scale, rotation and if you want to be trippy, shader.
It's the game you want to prototype, not the code.
You will lose zero time figuring out how to use someone's api.
Well, if it's for prototyping you don't really need a slick back-end with resource management and stuff like that.
As long as you can load graphics and display them you're mostly set.
It actually does include a fairly robust scripting language you can use too, once you start getting good... but when you start writing your entire game in their embedded scripting language, maybe it's time to "graduate" to a scripting language like Flash or PyGame.
As Cyclops says, most basic functionality (sprites, creating game objects, movement, collision detection, scorekeeping, etc.)
A simple, modern, bare-bones game engine written in Flash.
If write-your-own is really not an option, DirectX comes with a sample framework that provides most basic services.
I'm going against the grain and propose 'write your own'.
Still, I've had great success with Game Maker as a beginner, no-programming-needed tool for game design students, and can't recommend it enough.
Angel (C++) and AngelXNA (C#) are worth looking at.