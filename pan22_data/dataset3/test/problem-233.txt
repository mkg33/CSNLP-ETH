I'm considering adding a composite index on the "active", "inTutorial", "level", and "league" columns as they don't change often (arranged starting with the least often changed).
Is there any other way I can improve the performance of this query?
I need to ensure all accounts get targeted equally but rand() seems to be a clear performance hit.
Also, I realized that the only index for any of these where conditions is on the account ID column.
Some depend on AUTO_INCREMENT, some based on an extra column.
I read that the rand() sorting may be a serious performance hit and when I ran an explain on it in MySQL Workshop on the query, it did highlight it in red as being a performance hit.
How can I get a random account ID with these conditions without using rand() in an order clause?
I got the slow query logs and the slowest queries by time are like this (the matchmaking system):
There are currently about 1.3 million rows in this table.
It's very fast and because you don't need to sort the table at all:
I have a MySQL database running for a multiplayer game server and I've been trying to identify a performance bottleneck.
There is no good way to do ORDER BY RAND() LIMIT 1, but this has several suggestions.