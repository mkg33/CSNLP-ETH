You at least need a separate class for calculating tax:
Classes should be named in Pascal case (upper camel case).
Your code is very procedural and does not take advantage of the inherent flexibility of object-oriented design.
I think one of the other reasons for saying it isn't very OO is the fact that your CalcTax method (should be CalculateTax) takes a list of parameters when it would be better served by taking a Product object.
We are able to compose together the product with its tax and import fee calculations at runtime, while making it transparent through the IFee interface.
Now let's create our two fee implementations, TaxFee:
(BTW, there is duplication in this code that can easily be factored out.)
We can approach this by looking at this from a decoration viewpoint.
A great pattern to use to layer additional behavior onto a base object is the Decorator Pattern.
We are able to compose together the product with its tax and import fee calculations at runtime, while making it transparent through the IProduct interface.
We can use Dependency Injection to push that behavior into the object.
Now to use the Decorator pattern, we need to extract an interface:
We have encapsulated the varying behavior of taxability and import-status into their own objects, and they can vary independently.
(BTW, there is duplication in this code that can easily be factored out.)
You stuffed everything to do with UI (writing/reading the console) and calculating the tax in the main Program class.
Using objects is not the same as doing object-oriented programming.
There are two approaches to accomplishing this that you could take: decoration or injection.
We can break each concept down and encapsulate it into an object representing that concept.
You created your product class to encapsulate the data but that's where you stopped.
If another type of fee comes along, we can just add a new IFee to encapsulate it.
We have an object with some behavior, and we want to push more behavior into it.
If another type of fee comes along, we can just add a new decorator to encapsulate it.
Since we want to pass an arbitrary number of fees, we can pass an IEnumerable<IFee>:
Now a tax and an import fee are both fees on a product, so let's create an interface to encapsulate the concept of a fee:
Don't mix concatenation and string.Format it kills a puppy.
(My C# may not be completely idiomatic, but it should work and exemplify the concept).
Methods should also be Pascal case customRound should be CustomRound.
A setter that keeps a running total isn't a good idea.
We have a base object that we are then layering on additional behavior to.
We have encapsulated the varying behavior of taxability and import-status into their own objects, and they can vary independently.
Other than that there's some style points that could rely do with some work:
Now, let's create a decorator for a Product that is subject to tax:
We can approach this by looking at this from an injection viewpoint.
The main concept you should be applying here is that you should encapsulate what varies.
We have left out anything to do with taxes or import fees because those are completely separate concepts that vary independently.
We can break each concept down and encapsulate it into an object representing that concept (My C# may not be completely idiomatic, but it should work and exemplify the concept).
We want to inject our behavior into the product class, and the easiest way to do this is to pass parameters via the constructor.
Since we are encapsulating what varies, we know they should be separated.
I think they were probably looking for you to split out the responsibilities into classes.