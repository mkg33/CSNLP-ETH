One more: most probably you should not use names starting with underscore followed by uppercase letter, see here.
I can provide some feedback which I think should allow you to make the code objectively more readable.
Of course if you don't feel like using C++17's std::is_move_constructible_v you can use C++11's std::is_move_constructible<>::value.
A question: is there any use case for explicitly specifying template parameter to get or get_mutable?
I don't want to debate the usefulness of this utility class.
Another minor suggestion (that is my personal preference) is to use std::enable_if in template parameters specification, in my opinion this makes easier to quickly take note of the function signature.
Same can be done for types that are not move constructible.
If you want to preserve the ability for the caller to specify template arguments for those methods you can do this easily as well:
If not, then you can omit adding the template parameter
use: std::enable_if_t<whatever> instead of typename std::enable_if<whatever>::type.