I'm not sure if this is a meaningful question to ask - what is the image plane?
Since the image isn't square, the horizontal angle will be different from this; you could use some trigonometry to calculate it.
The angle between the top and bottom edges of the frustum is the "fovy" parameter you passed to Javadoc, so the angle between the top and the normal will be half that.
If you have a camera in your program, it's a completely made-up concept, and what you're actually doing is moving the entire world the opposite way.
That's assuming I didn't make any math mistakes there.
A real camera has a plane on which an image is formed, but in OpenGL there is no such thing.
If your screen width and height in pixels is sw and sh, your near plane distance is npd, and your vertical FOV is fovy, then:
If you need this for some physics-based calculation, you could possibly use the near clipping plane distance (third argument to gluPerspective, here it's 0.1 units).
Like before, the angle between the normal and one of the edges will be half the FOV, so remove the *2 at the end to calculate that instead.