In life sciences, computing is used for a lot of heavy processing.
The fact that no matter how fast we make computers, there are some problems they can't solve, and we can prove that using math (even if you don't go through the proof itself).
Doctors and researchers are already looking at images on computer screens a lot, and I don't think I'm predicting the future too much by saying that's only going to increase.
With Java, you'll also be spending a lot of time teaching semantics about the language itself rather than CS principles; time you can't afford to waste if you get only a single course with these students.
Currently, they take the same course as CS majors: a typical Java 1 course.
Depending on specialty, they'll be dealing with assorted medical records suites and similar programs.
Both are well-established languages with plenty of documentation and communities available online.
Understanding how lossy compression works, or JPEG format tradeoffs, and why the "zoom in and clean that up" CSI magic from TV doesn't happen in real life could be useful.
Efficiency, then, must be important for researchers to know about.
lack of salting or e-mailing in plaintext) and what makes them important as well as less technical ones such as social engineering, which are often both easier and more effective.
Stuff in genomics and molecular modeling, for example.
The basics of how a computer operates, so that it's not a mysterious magical process between pressing keys or tapping the screen and pixels lighting up.
They should understand principles of cybersecurity, including more technical things like how passwords really work (or, just as important, fail, e.g.
Doctors and vets who are frontline healthcare provider types rather than in-the-lab researcher types are more likely to be users of software than writers of it.
Alternatives: Python seems to be used more in science, and Ruby has a nice learning curve.
Beyond all that, there are some fundamentals that everyone should know, life sciences or not.
What would be a more useful course for students majoring in the life sciences (as almost all of our BS students are)?
I'll say upfront, I'm familiar with both life sciences and CS, but I've never applied one to the other.
The upside that's usually cited is that it's very common, and similar to other languages in industry, but these students aren't going to be professional programmers, so that doesn't really count for much here.
That theory won't be much use if the researcher can't communicate with the computer.
Some of the students hope to become doctors or veterinarians, others medical researchers.
My college requires students earning a bachelor's of science (BS) degree to take a CS course.
The course you're designing should cover Big-O and and related topics in its discussion of algorithms.
Some brief coverage of programming, algorithms and data structures.