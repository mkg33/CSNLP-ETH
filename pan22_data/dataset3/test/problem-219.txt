Here is a opinion: We have tried all of them in our company and we prefere puppet.
Puppet on the other hand has a single rpm (and a couple of dependencies).
You want to speak to the void where the system will be and declare:
To be honest, I think this comes down to simple viewpoint:  Chef seems more of an imperative, programmatic solution, the usage of ruby as the language instantly makes me hope somebody ported it to python, as is the way of the world with all of ruby's ideas.
Infact companies like google uses puppet for their deployment.
I myself have seen cases where managing 1000 hosts with different configs, is much easier with puppet.
"A user should exist, his name should be chiggsy and he should be one of the mighty in the group of wheel,"
That's not what you want for this sort of thing though.
http://slashroot.in/puppet-tutorial-how-does-puppet-work
Although it doesn't include use cases, I hope it provides some useful starting points for people wondering which tool to choose for their infrastructure automation.
For example adding your custom facts for your custom configs etc.
"Upon port 80 summon from the north the daemon named nginx.
I'd have used either one, I had no preference but when it came down to it, declarative suited me better.
The main design architecture of puppet is such that, it works much better than others if you configure it in the right way.
"Raise up a wall of fire, thin in the places 80,443,8080"
Someone had created a yum repo that had all packages needed, but it ended up installing 200 odd packages.
http://slashroot.in/puppet-tutorial-installing-puppet-master-and-puppet-agent
I've written a detailed comparison of Chef vs Puppet here: Puppet vs Chef: 10 reasons why Puppet wins.
And so on, although perhaps in language less flowery.
This may have changed since last time I tried it, but when I was trying chef on RHEL there was no clear way to install it.