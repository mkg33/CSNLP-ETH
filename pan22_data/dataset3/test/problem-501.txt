Are there any sense that they are related or say reverse or dual of each other?
A program which may raise an error of type $E$, takes input of type $A$, and outputs a result of type $B$ has type
A program which runs in environment of type $S$, takes input of type $A$, and outputs a result of type $B$ has type
This came up in a discussion about golang, but I think it applies more generally.
Context in which a function is executed (specially in when we have RPCs) and error returned from a function seem to be kind of special input and return values.
TL;DR: Reader and exception monads are obviously dual.
Let $S$ be the type of environments in which a program might run (you call them contexts, but I'd rather save that word for typing contexts), and let $E$ be a type of errors that a program may raise.
If we imagine that this is all hapenning in some category $\mathcal{C}$, then $X \times A \to B$ in $\mathcal{C}$ is the same thing as $B \to X + A$ in the dual category $\mathcal{C}^\mathrm{op}$.
A duality between exceptions and states was observed and worked out by Jean-Guillaume Dumas, Dominique Duval, Laurent Fousse, and Jean-Claude Reynaud.