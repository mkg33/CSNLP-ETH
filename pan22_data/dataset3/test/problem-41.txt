It's long, it's repetitive, and it's very hard coded - we can't easily change dictionaries.
I will however make some minor variations to reduce risk of typo, allow scores in, and make 'blank' less magical:
A:9:1,B:2:3,C:2:3,D:4:2,E:12:1,F:2:4,G:3:2,H:2:4,I:9:1,J:1:8,K:1:5,L:4:1,M:2:3,N:6:1,O:8:1,P:2:3,Q:1:10,R:6:1,S:4:1,T:6:1,U:4:1,V:2:4,W:2:4,X:1:8,Y:2:4,Z:1:10, :2:0
Now, that's pretty easy to modify change and read (though with more time/space I'd use newline instead of ,, or json/csv to make reading a little cleaner).
This is good - because if we want to change the behaviour of the application, we only have to change a few lines of code - there are no redundancies for us to worry about.
You already have a simple concise way of getting your intent out... so why don't you use that?
Here's a much simpler way of doing this by abstracting the operation.
We just made a huge change to the function of the program, and only had to add a single parameter!
We don't have to keep track of our current index i, the index of each loop j, how many tiles we need to add new Tile[100] or any loop conditionals!
We can immediately then think - imagine if these were values instead of hardcoded?
If only we had a simple way of representing the tiles we want?
However without changing any code at all, we can drastically change the alphabet used - maybe even make it user changeable!
We aren't keeping track of the values well, so let's follow Simon Andr√© Forsberg's lead and also keep track of the score:
One could use a run-length encoded data structure for tileTypes instead, but I don't see any particular benefit.