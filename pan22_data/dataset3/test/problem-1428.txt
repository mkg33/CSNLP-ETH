That will bond objects together instead of copying one object's properties to another.
This has been fixed by switching the helper class to textures.
), but I'm guessing that your draw order may be messed up.
Maybe you are clearing your buffer each time you draw a new sprite or maybe you are drawing your background again over top of the old one.
The problem was with Sprites being referenced through a static helper class and therefore not instantiating properly.
I can't see how rendering (another ship is being rendered) can cause changes in game logic - damage and other ship characteristics, as you said.
Post code that is relevant to your game loop's draw step and shows how you are using SpriteBatch.
It's hard to tell without seeing your code (show some!
Also check SpriteBatch wiki page for code snippets.
Only used SpriteBatch or Texture/Region should point to the same object.
If you inspect your game objects, they should generally have different pointer (the number in parenthesis after the variable name).
There should be no issues in drawing multiple Sprites which share the same Texture.
I'm a couple of days late in answering this, but I thought I'd let you know.
If this was truly a sprite rendering issue, the game objects would be fine and only the graphics would be messed up.
Is it possible that you accidentally use "x = y" instead of "x.set(y)"?
If I am wrong, you should probably edit your question and add some example of your code.