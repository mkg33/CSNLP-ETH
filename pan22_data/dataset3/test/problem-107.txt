I'm pretty sure XNA won't care if the FormBorderStyle changes out from under it.
There is a non-hacky way, by creating your own alternative to the Game class.
For example: An XNA 3 game requires XNA 3 and won't run on XNA 4.
Also - in theory it might fail in unexpected ways - the XNA team hasn't necessarily tested this behaviour at all - let alone extensively.
I think it's worth posting this here as i've never run into any problems at all with this code.
Not that's it's any different, but you can also do this.
But - because this is such a trivial settings change, it's probably completely safe to do in this case.
It depends on internal implementation details of XNA.
Is there a built-in way to do this in XNA that I'm missing?
But then you lose all the helpful stuff that Game and its friends provides (most notably the timing stuff).
Maybe you could add some error-checking/exception handling - but even that's probably not necessary for this specific case.
When looking into making my XNA game's window border-less, I found no properties or methods under Game.Window that would provide this, but I did find a window handle to the form.
So your binary is pretty safe against framework updates - but not necessaraly your code.)
I was able to accomplish what I wanted by doing this:
(Of course, I've seen people pulling out the Form and doing some extremely brazen things with it.
If you need to do anything beyond tweaking a few settings - I recommend going the "WinForms Sample" route.)
I don't know why but this feels like a dirty hack.
Which means it could break in future versions of XNA (there's nothing saying that XNA's Game class needs to use a Form).
And worth the risk, given the alternative is much trickier to implement.