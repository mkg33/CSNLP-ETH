The community on the forums and the Stack Exchange based Unity Answers are incredibly helpful.
Run the demo, then look through the code and see what does what.
You will have plenty of time in your next few years of CS study to engage C++ and other languages.
Try reading some documentation on how XNA does 2D games.
Some people have suggested I start with game maker which has a C-styled scripting language(which should be easy to pick up) as it is probably the simplest and allows me to focus mainly on the game design and how the whole game fits together.
It can be very easy to underestimate how time consuming it is to implement features into a game.
Almost anything you can imagine that would be fun is likely too ambitious for right now.
It's language is an extension/simplification of java and it will be quick to learn.
If you want to be an engine designer, definitely come back and try lower level implementation.
Start small, baby steps, and it'll be much more fun and you'll learn alot more.
I see a lot people recommended XNA, as it has good abstraction of opengl and directX through its APIs.
It's a pretty capable and well-supported platform with a growing community.
I have also considered game programming in Java since I am quite comfortable with it and have been doing extra reading on multi-threading and the 2d graphics APIs.
More importantly, however, using XNA will force you to learn C# and general .NET development.
I wouldn't recommend you use Java, most of the graphics APIs are terrible, there's not a ton of 3d support, and generally Java just runs slow; not a big deal for most java apps, but videogames need LOTS of performance.
It would behoove you to gain experience with this platform regardless of whether you decide to go into game development, as .NET development is growing and has a very healthy job market.
THEN, Pick your favorite, old school, super easy game.
Be careful, as awesome as many of your gaming ideas may be, remember that video games are expensive, take a long development time, and have large development teams.
I don't know if C++ is a good starting point, a lot of the posts I've seen for beginner game devs don't recommend it for a first game project.
It is a great environment for learning graphics programming.
C++ is the way to make videogames, pretty much period.
While not strictly a game-dev tool it has a lot to offer.
If you want to make a game and be the only person who works on it, you're almost going to HAVE to make it a 2D game (though you should start with 2D anyways) and you're going to have to start REALLY, REALLY simple.
Java, on the other hand, has been slowly dying for some time now, and recent events have only served to hasten its demise.
Download the XNA game studio, and the .net framework 4.
I think XNA and Pygame could also be good (since they abstract some of the more tedious stuff away), but I don't have experience with them.
Try to jump into modifying the Quake3 source code in C++ to make a game and you're going to get really frustrated, and even if you make it work, you're not going to learn alot from doing it.
Even if Java does live on, and you decide to pursue a career in Java development, you will likely end up having to integrate with .NET systems anyway.
There are lots of good game engines out there like Ogre, but then you have to spend tons of time learning how to do things with it first, it can feel overly complicated.
Not to mention that most low-level hardcore graphics programming is really C style, not C++, so you're going to do a bunch of pointer arithmetic to try to squeeze out more performance.
I'd appreciate any input, especially from those who got into game dev from a Java background
XNA is really starting to find its "place" in the ecosystem now that the framework is shipping on more platforms than ever (including Windows Phone 7).
I'd like to get my feet wet with some game development but I'm not sure where to start.
XNA is a great solution if you're coming off Java.
Get the free visual studio 2010 express if you don't have it.
If your goal is to develop a game, getting tied up in what is essentially the work of developing an engine is going to take too much time.
You've got enough to worry about with programming and learning a new API that you DO NOT need to bother with game design; it will just distract you.
The XNA framework provides tons of good APIs to work with, and there are lots of free "microsoft permissive licence" open code to get you started on some projects.
Start with a core game mechanic that allows you to get the game in a playable state quickly.
I'm coming to the end of my first year of CS which has been primarily a Java based course.
Finally, a friend has recently shown me pygame which also sounds very good although I don't know all that much about it.
If your CS program, like the one I completed, is heavily Java-centric, then it would serve you well to learn C#/.NET on your own time.
However, going from java -> C++ is going to be pretty jarring.
Coming from Java, I started with Javascript because a lot of the tutorials were written for it, but switched to C# (which was quite an easy switch).
Then, once you've got your mario clone going or whatever you made, you can start to experiment with gameplay and try adding new things.
The Unity engine will allow you to abstract away most of the details so you can focus on gameplay programming.
So, however things turn out, the experience would only help you in the long run.
C# will look and read almost IDENTICALLY to java for you, so you'll be able to jump in really fast without learning new syntax.