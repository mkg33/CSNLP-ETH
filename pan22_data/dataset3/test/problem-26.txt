A good thing to start is to define all your Domain Models.
This comes from the 'We use MVC and cram everything into either a Model, a View or a Controller'.
Domain Models represent state and give us a set of tools to easily access that state.
And now everytime we create a User, we also need a Mailer to pass to the constructor.
A Shareholder and a Representative will probably be special cases of a User:
If you don't want it to be created outside a given context, then don't.
They shouldn't, they are but dum objects that represent state.
You use words like interface, class, protected and that's it.
Some might event argue that there is nothing wrong with this code.
Domain Models are defined by state, and are nearly always stored in some persisting storage (e.g.
A Shareholder is a link (and thus also a Company).
If you don't want multiple instances to be created, then don't create multiple instances.
But the problem you had to solve with that nifty && stuff is that you are extending a Link that extends a Company.
The Email and the User care less about how the email is send.
Somewhere down the road, the USer Object - that was a simple representation of state - learned how to use the MailerInterface.
It knows all, does all and will eventually break all.
One day you will have to stub a Shareholder, and then writing new Shareholder('name'); without the app complaining will be heaven.
In order to be able to do something, you need parts, id_tiers.
Another quick remark: if you need something, ask for it.
In your case, there will be multiple Domain models: