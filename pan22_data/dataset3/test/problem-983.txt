and a "changed" update event is triggered, is about 10x slower than just setting attributes directly.
The most minimal model-like behaviour, in which an attribute is set only when the new value differs from the current,
As much as I prefer the architecture of this code, the framerate was significantly lower.
A view associated with each entity/model would then receive a position changed event,
This would happen independently of the views render method being called in a requestAnimationFrame callback.
What I found though, through a possibly naive implementation, is that setting attributes of a model is simply too slow.
Below, I've included some code to test aspects of setting attributes of an object.
Should I give up on using MVC for frequently updated attributes like position?
I wanted to implement a game in javascript with an MVC design pattern, with each entity's state stored in a model.
In an update loop we iterate over all models and apply the velocity attribute to the position attribute of the model.