When I tried with 0 as an input, I got a RuntimeError: maximum recursion depth exceeded.
You'll find various super efficient way to compute them.
If you just want a particular value (possibly for a large n), the fibonnacci sequence actually has a closed form
I won't dive into testing framework and everything but just adding :
Your code is easy to understand and just works but it can still be improved.
You can combine the first two if-else statements into one statement with:
A nice alternative if you want multiple values out is to create a generator:
Whilst the recursive solution is nice, without memoization you're much better off just using a loop:
Your solution will be slow for any big (or even medium) inputs.
Once you handle all n <= 0, you don't need to handle the cases 1 and 2 individually.
Furthermore, many of those computations would be performed over and over again, so the solution would benefit greatly from memoization.
This is because the recursion calls go deeper and deeper into negative numbers without reaching a stop.
This solution takes a problem of size n and decomposes it into two problems of approximately size n - 1.
Using memoization is the way to go but there's an even easier option involving a simple loop.
You can easily see add a print statement at the beginning of the function to see how many times it gets called and you'll see that we compute the same things many times.
When n is 15, the function gets called that many times with the different inputs :
You sequence actually corresponds to Fibonacci numbers.
The staircase problem actually just generates the Fibonnacci sequence.
It could be nice to add some documentation to tell which values are expected.
gives you a nice way to see if things ever go wrong.
Like @200_success said, you should be caching your results, so that way, when you keeping increasing, you won't have  to recalculate every thing over and over.
By the way, there is 1 way to flight a 0 stair case step.