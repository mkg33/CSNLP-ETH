You can see more of his papers on Dungeon Siege here.
How a software can track a player's position so accurately, being on a such huge world, without loading between zones, and on a multiplayer scale ?
Scott Bilas worked on Dungeon Siege and wrote a paper, "The Continuous World of Dungeon Siege".
But there would also be a zone index associated with the player as well.
All of the battlegrounds, all of the instances, are each with-in their own zone and coordinate space as well.
While Dungeon Siege is not a MMO, it does have a world, and he talks about player positioning in his paper.
(But not part of the location because everything handled by that zone server is in the same zone and hence doesn't need to be in the same data structure.)
In the grand scheme of difficult problems in an MMO, storing position is pretty low on the list.
As for transparent zoning in MMOs, thats a different question altogether.
When you cross the border to each of these chunks you would transform everything to that coordinate system.
Using the LUA API you can get the position of the player GetPlayerMapPosition() returns two floats each from 0 to 1 as a proportion along the entire world map.
For example, this blog pre the latest expansion calculates the entire travel-able area as 41 square miles.
If a big zone is only a mile or two on a side, its not all that big a deal.
I don't think any one of those is more than about 10km on a side.
At least for us we use feet as units so all you need is 3-4 decimal places to be at the point that float noise isn't a problem.
I'd say a for actual location it's a vector of 3 floats.
How is the data formatted when it passes through the netcode ?
For a huge zoneless world I would either go for a double precision vertex, or floating point with smaller chunks dividing the land.
I can understand how vertices are stored into the graphic card's memory, but when it comes to synchronize the multiplayer, I can't imagine what is best.
If you have small zones, I guess float will be enough.