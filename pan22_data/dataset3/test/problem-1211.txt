The goal being I don't want the end user to have to click through and install the ActiveX control in IE.
In the end, I've found that trial-and-error has been the best way to get familiar with the nuances of Windows Installer.
They break down into snapshot-based and non-snapshot-based.
The "how" you do it, basically, is to learn to use an MSI authoring tool, determine where the files need to go on the hard drive, determine what needs to go into the registry, and build an MSI file that does what you want.
I'd be more inclined to configure policies to trust either the site using the control (if you're satisfied that it's safe to do so) or the control itself (which could be a little fiddly) and let the control come down in the normal manner.
There are a lot of third-party graphical MSI builders out there, too.
How do I know get these installed and registered as an ActiveX in IE?
I will sometimes use a snapshot tool to get a "feel" for what an installer does, but I always build my production packages by-hand.
I haven't tried this, but I would have concerns about how an automated deployment of an ActiveX control would interact with Internet Explorer security.
The snapshot-based package builders suffer from the problem of picking up unrelated changes to the snapshot computer during software installation and can create really messy packages.
I have successfully done this a few times using the following steps:
Whtever you do, gaining some knowledge about how the Windows Installer works will give you the best chance of building good packages.
The non-snapshot-based systems are usually just graphical IDEs for the MSI schema (and some general WiX XML source files that are "compiled" with WiX), allowing you to drag and drop, etc, to create packages.
I have a third party ActiveX Control that I want to package up in a msi so it can be deployed and registered via Group Policy.
Personally, I use the Windows Installer XML (WiX) toolkit to build MSI files.
Microsoft's documentation is a bit dense, but there's a lot of good stuff in there.
I have the Cab file which contains (2) ocx files, (1) inf file, and (1) dll.