  fields = vector(length = length(fdfLines),mode= 'character')
where "Field" is the field name and whatever is written within the parenthesis next to /V will become the input for the utility that will fill the form.
Based on that, I came up with this much simpler implementation where I only maintain a stack (last in, first out) of field names.
This file represents the form fields in this pdf file.
        # there is no hierarhcy, just name the line
These fields can be represented as FDF in plain text form, extracted using certain utilities.
            # every time a root closes reduce the nest.
I tried to wrap my head around this file format (what a weird one?!)
      name = stringr::str_extract(fdfLines[i],'(?<=\\().*?
  data.frame(fdfLines,fields,stringsAsFactors = FALSE)
            # if a field is found, append the name of the root to the left
If you know what FDF files are, you can skip this section.
The big picture goal of this is to identify the lines that need to be modified when a user provides a bunch of field names (eg.
            # if another nest stops, that means we are inside another root
        # we will be reading the file backwards trying to
When fields are nested, names that are seen by a user are the components of the hierarchy, separated by .s.
and came to the realization that it is a lot easier to build the tree structure if you read the file from the bottom-up, would you agree?
The output is the same for your example data and I hope I did not miss anything.
        # if the line above the name is >>] the name represents a root
        # if the line before the naming line starts with /V
          } else if(grepl('/Kids \\[',fdfLines[z])){
It includes single and double layered hierarchies as well as a bunch of normal fields.
Since this will end up in CRAN I want to make sure the approach isn't overly convoluted.
It is possible for there to be nested fields of arbitrary depth.
This code reads the FDF file and marks the lines that should be modified to fill a field of a given name.
Here there are two fields node1 and node2 both nested under root.
The way I do it involves iterating every line to detect the tree roots and append the name of the roots to every child.