I haven't done C# in a long time so I'm not sure if this will compile.
You are getting the index of a number by looking for it in the list, but if the number occured earlier in the list you will get the wrong index.
Your first big problem is going to be fighting your design.
Instead of handling the first iteration differently, you can just put the first number in the answer variable and start the loop from 1.
You should be able to use the conditional operator to get it down to 1 switch statement.
You are using the Count() extension method to get the number of items in the list, but you should use the Count property instead.
And replace the List<Operator> with a List<Operation>.
In this case, making this setup polymorphic is going to be your friend...
Multiple case statements like that are asking to be removed either due to polymorphism, or stuck deep in the bowls of some sort of AbstractFactory, and only referred to once (sorry, I've just been going the Clean Code book).
You are casting a lot of values to double, but they are already double values.
You are comparing the answer value to zero to determine if it's the first iteration, but that could occur later in the loop too.
You are using the value of answer in the code where you have determined that it's always zero.
How do people feel about replacing enums with classes and moving the logic into Funcs?
You should use the index in the loop instead of using a foreach.
Otherwise, you're going to have an interesting time later, trying to add, say modulous (%).
This will allow you to add any number of future operations quite simply (including some really complicated stuff) - so long as it only takes 2 arguments... (note - I'm attempting to retain the general concept of your design; there are other possibilities here).
You are casting all enum values to integers, but you can just use the enum values directly.
You then need to implement each operation seperately: