This will shorten your code considerably and make it run a whole lot faster because no extra variables are needed and you arent doing array manipilation, its just a way to iterate over an array
You should be able to implement this without a loop & without any vars.
I am not a swift programmer so i will not be able to give you exact advice on how to improve the quality of your code but rather the algorithm you used to solve this challenge and nitpicks i have with your solution.
This is what I did but still looking for any better answer available for this solution:
First, whenever you see a phrase like "given x, perform y" you should think of the 'x' as inputs into a function that returns the result of 'y'.
why are you creating it and turning it back into a string?
(Read up on the functions dropFirst and dropLast.)
That considered, you can simply perform 2 for loops
It would be better to use the precondition function to make it explicit that this algorithm won't work with a negative count.
Looking for suggestions to improve, please share your thoughts too.
Your solution will crash in the middle of the algorithm.
Looking for feedback on my code or a better solution:
therfor we can simply print out the elements at location
I've tried several variations and appart for a minor improvement on the offset calculation (to allow negatives to rotate to the right), I couldn't find anything meaningful to add:
Lastly, Swift's array class has methods to make this much more elegant.
So you should have something like func rotate(array array: [Int], left distance: Int) -> [Int] somewhere in your code.
1 for loop up until the "break" where the array has overflown, and a second for loop for the rest of the untouched array.
Getting the data from the user and displaying it should be separate from the function that does the work.