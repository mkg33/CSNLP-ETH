It can be ou=john, user=john, unicorn=john, etc; but it is against convention.
There was a PBX system (I think Nortel, but I do not recall now) that when it used LDAP for storing users and phone info it created the users as container objects.
In a generic case, you can modify the schema as you want.
Creating users as container objects (assuming that is really what happened, as opposed to changing the naming attribute from cn= to ou=, which is basically a non-event) does have some interesting advantages.
This allows a different logical grouping than is usually handled.
For one thing, the OU (organizationalUnit) doesn't have the shadowAccount objectClass, for expiring passwords/accounts, etc.
This breaks all sorts of things but the gain is that the User object can contain configuration objects.
Instead of adding attributes for configuration, or assigning the equivalence of group membership to some configuration object, it lets you store the configuration as objects.
I think Citrix has an approach where it does this as well, to store some personalized settings.
Where as, with a regular account, you get all the attributes that go with each of these objectClasses: person ,organizationalPerson, inetOrgPerson, posixAccount, shadowAccount