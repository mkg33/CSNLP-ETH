I'm trying to hex a *.exe file to change the font from Arial to Tahoma.
I already did it, the issue is that the program notices something has changed.
It seems that the exe has a self-protection logic, which is quite normal nowadays.
After doing that, we may take some advanced approaches like in-process memory modification, cracking the detecting routine or hooking Windows API calls to achieve the goal of font replacement, but none of them can be achieved by hexing only.
But I believe the 3rd party one is not your case as usually the modules generated by those tools are compressed and/or encrypted so that you couldn't find the information directly.
You may revert the attributes if you have the original as it does not harm, but probably it won't work.
But please consider legality all the time before taking any action.
To overcome the problem, we need to know what sort of checking is done for modification detecting which must be much more complicated than hexing a module.
I'm relatively newbie to hexing, so I am not sure if whenever you hex an exe, some date also changes (and probably that's how the program notices it).
Perhaps somebody cracked the file already for different purposes such as NO-CD patch and then you may grab it for hexing and probably it will work as the logic will be already deactivated.
However, you're trying to just change the font in use.
However, although it's possible to use that timestamp information to detect modification, it should be pretty rare to use timestamp only for the protection as anybody can change it using this sort of tools.
This looks somewhat legit for me - why don't you ask the application vendor to make an option to change fonts?
Can anybody confirm this and if possible propose a solution?
Some use digital signatures, some use CRC checks, some use 3rd party module protection tools and so on.
However, the ways to achieve this protection are not the same.