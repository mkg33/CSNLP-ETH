What is problematic with this approach is that outs and ins don't necessarily come in nice, tidy pairs.
While this makes good sense in a textbook sample problem, it will just be a nuisance in a real-world application.
Modeling close to the real world generally makes your database schema more future proof.
However, this is very likely going to be a fact in your actual operations.
This approach is also the most useful when it comes time to expand the requirements of your system.
The most useful scenario is the one which treats things that happen in the real world most directly.
In the real world, paperwork sometimes goes missing or people get sloppy with procedures.
Each row in your table records the physical processing of a piece of equipment by someone.
If you build your system along the lines of your option #3, then at some point or another someone is going to ask for a business rule that says "don't check out things that aren't checked in".
You have to decide whether you want your world to be simple for the programmer or useful for the user.
For example, let's say phase 2 of your system is to implement a physical inventory process.
The reason that this scenario is the most like the real-world is that it is modeling inventory events.
In your case that is your second scenario: One table for check-ins and check-outs with different rows for each.
In your option #3 you need either another table or a new column.
In option #2 you just need a new value for your "inventory movement type" column.
Track all of your events as individual records and then build your application logic to interpret the event stream.