People are different, so what's "fun" depends on the person.
But in my experience teaching college students, the most fun programming assignments are games or contests.
Finally, everything is more fun if you're either not supposed to do it or if you've been told it's too hard.
Some students continued working on the assignment at home, to try and defeat the villain.
Maybe even better give his bigger brother/uncle/sister/whatever one and let them play with it together.
Anything to catch a kids interest with should be exciting, like fun and games.
Help him to understand that if used online these things would result on a ban or some punishment but offline the game can represent a fun eveniroment to program for.
They usually see me programming and the excitement and joy I get out of running some code and automating a task (usually it takes me longer to automate the task than doing the task 1000 times over, but I do it for the fun).
I've never seen more laughter and enjoyment in my classes.
(A few hours/days/weeks later) Great we have our ESP but it's picking up a lot of civilians/cars/dust particles - let's build on what we have and make it better.
Let him see you browse through the code, grepping around to find the relevant code.
This also works extremely well if you're doing something they're actually interested in.
For example, you can take a game that has shooting dynamics like an FPS or a scroll shooter (could be 2D to make things easier), and try to modify the shooting dynamics.
Use your knowledge of what the kid enjoys and what he struggles with to fine tune what you teach him.
These people like the idea of being a programmer, not the actual task.
You can make incrementally more complex modifications.
Maybe have the shots fire 3 bullets at a time at different angles.
Now I'd advise you to break #3 into more steps and if the kid isn't confident with maths then help him walk through it; if nothing else he may enjoy maths more as well.
First off there's the friends that want it to be fun, but it isn't for them.
I enjoy the process, and I constantly have to remind myself that the means are not the end.
Besides making a simple game from scratch, like Kevin Workman suggested, you can also look for an open source game and try to modify it together.
Anyways: Give him a computer to play with when he's a kid.
That is how you get kids to like maths or computers or other seemingly very boring/dull subjects.
Having someone's other than you (partner/family friend etc.)
For example, your kid wants to be a game developer, so make a bot or a hack.
Ok kiddo let's make an ESP hack we want to highlight enemies for us to see.
Try out some of the King of the Hill (KoTH) programming concepts here: https://codegolf.stackexchange.com/search?q=KOTH .
After some practice, I reveal an AI villain that will chase students and "eliminate" them.
Explain everything you do, including the thought process as you're doing it.
For example, I have an assignment where students must create HTTP clients to move their characters around a 2D board (which I display on a screen).
scoff at the idea that the kid can program something that sound complex but that you've already helped him understand might give him the drive to prove them wrong - handle it well, make it a good natured bet (if you can program that I'll help you with your chores for a week, if not you have to help me with mine!
Ok kiddo were going to try and predict which pro team will win a game.
That's when you know your assignment is fun, and more importantly, effective.
What about the friends that want to persist but find it a grind.
Right kiddo you go away and try and work out how to do each bit of that task.
They come to programming and want to make something complex and unrealistic and it's both too hard to start with and going to take them forever (because they're a novice and because it's a complicated problem).
I have found myself programming for fun, it is infact my go to past time.
Don't worry too much about teaching him specifics and focus more on the general goal oriented side of programming: I'm writing this program so I get this benefit.
The absolute best way to get around this is to do the breakdown for them of a complex program and let them do the small peices.
But maybe he's juuust into it enough to be a good engineer, without being too into it.
For a more complicated modification make the bullets travel slower, light up like lasers, and curve toward the enemies.
Let's say he's an FPS junkie - csgo, Arma, BF1, CoD etc.
Ok you may not like this answer, (because it could be too late).
I've had a few friends ask me for advice or assistance with learning to program and there are a few things I'd advise.
In my experience, most techno-religious "debates" are perpetrated by people who enjoy the process.