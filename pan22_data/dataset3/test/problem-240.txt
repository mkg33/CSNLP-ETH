n is an upper bound for the primes to be printed, not the number of primes.
Forgive me, I'm a C# developer, I like descriptive terms :)
Here is my Java code to create primes, which should be easily modified to match c++ needs:
The same if you reach 7: 7*3 is already gone as 3*7, and 7*5 as 5*7.
But if you're trying to find every prime up to a certain limit, then do as follows.
Then to expand on this heuristic, you can say that no odd numbers are divisible by even numbers and therefore may skip every other number as your divisible test number.
In addition to everything already mentioned, you're not checking whether the user inputs a valid integer.
In the inner loop, you even may jump in steps of i, because after eliminating multiples of 3*x (3*5, 3*7, 3*11, ...) you don't need to eliminate multiples like 5*3, the 3-times-something are already gone.
Keep a list of each prime you find, then, when checking a new number, only check it against the previously found primes, up to it's square root.
Only multiples higher than 7 should be visited/tested.
As Alexandre mentioned, the sqrt is key to minimize computations.
If you're finding a single prime number, looping through all the numbers up to it's square root is good.
Another heuristic you can use is every other number will not be prime, as it will be divisible by 2.