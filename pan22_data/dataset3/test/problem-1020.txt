Under the hood, it's similar to a generalized additive model (GAM) - more details on the dedicated paper: https://facebookincubator.github.io/prophet/static/prophet_paper_20170113.pdf
It is available as both R & Python packages, and proves to be an interesting solution for someone with little Machine Learning background.
The quick win on this solution is the ease and speed of the model building and testing: you can literally get a descent projection in a matter of minutes.
I think Christopher's answers above are entirely sensible.
Bringing this thread back to life, as this could be useful to others landing here with similar questions.
However, some additional ML knowledge allows to tune and optimize the produced models.
As a different way of taking this on, you might consider starting with a really, really basic model (like OLS).. these often go a long way in generating reasonable predictions.
A better option IMO would be to go for a kernel method such as a Gaussian Process or SVM.
The problem with models like KNN is that they do not take into account seasonality (time-dependent variations in trend).
The vignette is a good resource for the theory behind the tool.
If you haven't already done this, you might try adding a date's month and day of week as features -- if you end up sticking with KNN, this will help the model pick up seasonality.
Facebook recently released and open-sourced one of their internal forecasting tool called Prophet https://facebookincubator.github.io/prophet/
For count data, such as yours, you can use generalized linear auto-regressive moving average models (GLARMA).
To take those into account, you should use Time Series analysis.
It behaves very well on time series, catching the seasonality of the data at hand "naturally".
As an alternate approach (or perhaps just in addition to the advise he's given), I might start by just visualizing the data a bit to try get a rough sense of what's going on.
Fortunately, there is an R package that implements them (glarma).
Finally, the more we know about your data, the easier it will be for us to help generate suggestions -- What time frame are you observing?
I would advice against using a neural network or equivalent as, I assume, you have got such a good prior based on your experience with the store (ie that there are probably day-to-day / seasonal trends and some level of smoothness) and I imagine a relatively small amount of data.