all this slight modifications and special cases have to be tested.
Code with duplication is unmaintainable and untestable.
The stages are reading, cleaning/decoding and interpreting/processing.
Do not repeat yourself, neither code nor regex patterns, nor numeric constants.
Notice I didn't change any of the logic, but just moved things around or removed things.
Get used to thinking of processing endless streams, this is superior in any case.
Assume the reader is familiar with built-in functions like str.split().
In your case, since you're appending b, you can do a += ' ' + b.
You could also try to convert the hex number int(line.split()[0],16) and catch for ValueError.
' '.join([a, b]) can be simplified to a + ' ' + b.
Do not work on buffer in some cases and on line in others.
Thus, # remove \n and other spaces is unnecessary.
However even if you work line by line you should separate the tasks/stages you perform.
1) From your example file one could think that line.startswith('0') is sufficient.
It can be moved to the top as a constant (or even outside the function).
If you cannot avoid to reuse code in other control blocks define functions and patterns outside and use those.
avoid all thes flags and conditional buffer cleanups.
The regex string is a constant and is used multiple times.
But unless there is reason to avoid regex you can stick to it.
2) Logikables answer shows how to correctly use nested if-else instead of combinations of nested conditions in an elif rake.