I've tested everything and all the variables seem to be what they should but after leaving the system work for a minute or two the system the ball passes through one of those points.
Also to handle collisions I've used a method which is somehow different from those I've seen so far.
Computer Science Canada - Perfect Circle-Circle Collision Detection
I've been developing a simple physics engine for my game.
As I said the world consist of very simple objects, so I'm not loosing any performance due to multiple collision checking.
Perhaps you could give us a more complete example?
That mean that a second collision would be reported, resulting in the exact opposite contact normal to the first one, making the object just keep moving.
This looks very similar to a problem I once had when making my own physics hack, although I can't really see from your code if this is the case here.
In the case of any sort of collision detection, I always check for floating point number comparisons.
since the game physics is very simple I've decided to increase accuracy a little bit.
I'm detecting all the collision in the given time frame, stepping the world forward to the nearest collision, resolving it and again check for possible collisions.
They are inaccurate, and often a result is not what you expect it to be when you compare them.
where a is acceleration and v0 is object's previous velocity.
In my case it only occurred when an object moved slowly enough making it very hard to detect.
Here is collision portion of my code, hopefully one of you guys can give me a hint where to look for a potential bug!
If you think this might be the case here, just use one object and set debug breakpoint to hit if you have two collisions with a very short interval.
This site explains a solution (search for 'due to rounding' on the page):
Instead of formal integration methods like fourier or RK4, I'm directly computing the results after delta time "dt".
First I'm checking if the ball collides with any walls around it (which is working perfectly) and then I'm checking if it collides with the edges of the walls (yellow points in the picture).
They can cause both (1) missing collisions and (2) items 'sticking' together for a time.
the algorithm seems to work without any problem except some rare cases, in which the collision with points are ignored.
Looking at your code however, you haven't given us much context, and the above is only a suggestion to try/check.
My problem was that when an object collided at a slow speed my collision handling didn't move it enough away from the collision (so it didn't solve interpenetration).