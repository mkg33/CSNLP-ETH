They need only have meaning within this context and need nothing outside this boundary.
  true  == confirmEnding("He has to give me a new name", "name") &&
This review may sound a bit harsh, but bad habits are hard to break so I point them out.
I would re-arrange it a bit to read more like this:
Using the above points rewriting your function with the same logic we get a smaller cleaner faster and arguably better function
Only make variables (or in this case consts) if they are going to be re-used or if they help clarify the purpose of an expression.
We all can read, but most computer languages have a problem with spaces, soWeEndUpUsingSomeCrazy capitalization to get past this.
  return str.startsWith(target, str.length - target.length);
The first solution, using .startsWith(), should be efficient, but it might be considered "cheating" to use .startsWith() even though only .endsWith() is prohibited.
As a future maintainer, I skim your solution and wonder what subtractLengths is, because it's ambiguous unless you move your eyes up to read more code to get the context.
However there are many tests you have not presented.
  false == confirmEnding("s", "try long target strings") &&
Unit test finds these inconsistencies and prevents a harmless source change become an sleeping disaster.
When naming variables remember the context in which the names are created.
The solution makes sense, but like @dfhwze said, there are too many variables.
  true  == confirmEnding("Open sesame", "same") &&
  true  == confirmEnding("Congratulation", "on") &&
because that's easily parsable in English - the last mention of what you're looking for, plus how long it is, should be the end of the string.
We dont know how much longer we can withstand the nothing", "mountain") &&
Subtle changes to the code layout and style can change the behavior.
As JS is not compiled such errors can hide in code for a very long time.
It's also inefficient, because it uses functions .lastIndexOf() and .includes(), both of which analyze the entire str looking for target, whereas an optimal solution should look only starting at a known position at the end of str.
For example moving the line let lastIndexOfString = str.lastIndexOf(target); to the top of the function will change the type of errors thrown for some input.
Unit tests must cover all behaviors or they are a waste of your time.
  false == confirmEnding("Open sesame", "game") &&
  false == confirmEnding("Walking on water and developing software from a specification are easy if both are frozen", "specification") &&
I would change some things to cover some edge cases you may not have thought of.
The second solution is slightly simpler, but it involves creating a substring, so it would be less efficient.
A function throwing an exception can be normal behavior and pass the unit tests if the exception is the correct type.
  false == confirmEnding("If you want to save our world, you must hurry.
This is part of the reason unit tests must be extensive.
  false == confirmEnding("", "try an empty str") &&
All the other tests are just repeating one of the above.
  return target == str.substring(str.length - target.length);
This makes these names very prone to being miss read and miss typed.
(NOTE I am guessing the expected values so only show my expectation and functions return)