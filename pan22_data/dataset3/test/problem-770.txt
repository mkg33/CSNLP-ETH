But it doesn't make a big difference, it's more of a personal choice actually.
I wouldn't say, mine is better, but I prefer it this way:
What if, let's say, the catch block threw an exception?
Since its contract specifies that it returns null for strings that can't be parsed, it must catch the exception.
What exceptions a method should catch and handle, and how, is entirely dependent on the contract and semantics of that particular method.
Not likely to happen with the e.printStackTrace, nevertheless.
On the other hand, you might have some method that fetches a file on the Internet and writes its content to disk.
If that method fails, it would make sense to throw MalformedURLException, IOException etc depending on what went wrong, so that the client code can act accordingly.
Only when using a variable to return, there will be a return-statement at the end of the method.
I think you should place it inside the catch as it is in the catch that the "error" will be handled when an exception is thrown.
Take for example Google Guava's Ints.tryParse method.