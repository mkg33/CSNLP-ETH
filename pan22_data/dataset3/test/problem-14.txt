3 - Separate out how you are creating your DbClassesDataContext into its own method, so should this need to be changed, it is changed in one place:
1 - Refactor the method to return a boolean result.. the method shouldn't really care about how you report errors, it should care about returning a simple result... true, the password's match, false, they don't:
I know there are already many responses to this question, but here are a few other tweaks:
The naming of a type should be relevant, in terms of data contexts, you might want to name it after the database name.
I have refactored it below which may or may not help.
Otherwise, it returns the value on the right side.
6 - You're not storing the plain text password in the database are you?
Then, as mentionned above, there's always the String.IsNullOrEmpty or String.IsNullOrWhitespace if you want to make sure your string is not made up of only blanks.
5 - Rename your data context type to something more applicable.
operator returns the value on the left side if it is not null.
Importantly the changes above allow you to logically separate out the concerns of the original method, now your validate function should be more streamlined:
I guess it's a matter of taste, but I would write your method like that :
2 - Throw an appropriate exception that represents the exceptional state.
If you know you might be performing a query multiple times, there is little sense in having the query provider generate the sql each time, you might as well take advantage of the CompiledQuery type: