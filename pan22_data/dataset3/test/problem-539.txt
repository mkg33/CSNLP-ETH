This is based on the reply by BillR (Alternative #1).
I'm posting my own somewhat late answer for three reasons.
However, the question is no longer relevant on modern Windows-based systems.
The Dir alias was used to help draw the logical link.
It's not as comprehensive as the various Stack Exchange communities but there is a definite clarity in the presentation once you get comfortable with command line/batch scripting.
This page ss64 has a very good presentation of the use of the dir command, listing all switches, many switch combinations, and showing several useful examples of proper syntax.
(I got the approach using sfk command chaining here)
I realise this requires an extra utlity, but you can achieve this fairly succinctly using the sfk utility:
Once noted, you can compensate by starting deeper into the folder structure to eliminate this error.
However the path remains not fully explored for your target(s).
for /f "tokens=*" %%a in ('dir H:\*.mov H:\*.avi H:\*.wmv H:\*.mp4 /s /b') do echo %%~fa %%~za >> C:\Temp\VideoList.txt
Three, per Don Vince's potentially obscure comment under BrianAdkins' answer, using tokens can bypass problems from file names with spaces in them.
Two, this single line of script worked in multiple settings for me, including across a network.
Below is what I used to locate misc video files that were taking up too much room on a network drive and write the results to a text file on a local PC.
I noticed that very long file-paths/file-names (hundreds of characters) can also cause errors but the search won't hang on those.