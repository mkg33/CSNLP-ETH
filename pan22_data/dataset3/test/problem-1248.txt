This all is application specific, and any in depth treatment should be referred to the application coders.
There are a few interesting permission combinations:
As for stealing PHP code your webserver should automatically serve any file with the handle .php as a PHP script and not display the PHP to a user .
php can be executed by the web server, so it'll need permission 7.
I read that it means read write and execute but what I want to know, can anyone steal php codes depending on these permissions?
Assuming you are logged in as the user that the web server is running under, you get the 7 of the 755.
It's easy to just say "no one can see these files".
777 is usually not a good idea at all, think of it this way.. would you want any other user the ability to edit something on your server?
The "owner" is some user from /etc/passwd, the group is some group from /etc/groups and other represents everything else.
In the old school days, you had to put a die() command somewhere in the page, so if folks were getting to it by splunking rather then as they should be no naughty bits would be displayed.
Either by building this into the code, by setting up the web server to do this, or by doing both you can keep unwanted eyes out.
Each file or folder has a user owner, and a group owner.
Why would I change folder permissions to 755 or 777 for example?
There is a lot more to learn about permissions, check out this link for more info.
Other folks have to be able to determine what file that they want, so they need to be able to see them.
They are essentely what they sound like, read allows you to read the contents of a file, write allows you to edit the file.
Any code can be compromised, so keeping bad users out and keeping good users into the places that they should be is very important.
755 is octal for 111-101-101 in binary, which means...
Execute is needed to run scripts and in the case of folders allow access into them.
There are a few ways that applications secure their code.
A file can have read permissions, write permissions and execute permissions.
You need to give 755 on a folder because a internet user coming to your site will fall into the "other" category and in order to access a folder on your server(and any scripts inside that folder) they need to be able to go into that folder so they need the execute permission.
They also (depending on the app) might need to be able to read the file, so the web server can process it.
777 allows user, group and others to write to this file, which is generally too unrestricted.
However if you name your script anything that is not handled by your webserver then it will be displayed out as text if your webservers user has permission to read it.
Doing ls -l on a file will show who the current owners are.
Of course - if they can read it, then they can "see it".
If you are talking about internal users stealing code via a terminal then you can remove read permissions to anyone other than your webserver.
The three digits in the permission number represent the permissions for the user, group and "other".
However you will need at least your web server to be able to read the files, and, well, serve them.