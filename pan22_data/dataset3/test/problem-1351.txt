The game dev industry is still very heavily steeped in C++ as most of the tools and pipelines that are used to push out big or just well polished small games were written in C++, and as far as I know ALL of the official dev kits you can get for XBox, PS3, and Wii are released only with compatibility for C++ (XBox toolset may be more managed nowadays, anyone know more?)
Like others have said, GC collection pauses are the biggest issue.
I'd say the biggest problems I've encountered writing games in C# has been the lack of decent libraries.
If you want to develop games for consoles right now you pretty much get XNA and C# on the XBox and then only in a side part of the games library called XBox Live Indie Games.
The real problem, I think, is that library developers haven't realized that yet.
is that you will be hard pressed to find a team of good people with the expertise needed to create an equivalent game to what would be fairly easy to find people for in C++ and OpenGL/DirectX.
For C#, using value objects and the "using" statement can alleviate pressure from the GC.
Most I've found are either direct ports, but incomplete, or wrappers over a C++ library that incur a heavy performance penalty for marshaling.
(I'm speaking specifically about MOgre and Axiom for the OGRE library, and BulletSharp for the Bullet physics library)
get picked to port their game to the real XBox Live Arcade.
Managed languages (as distinct from Interpreted - neither Java nor C# are actually interpreted anymore) can be just as fast as native languages if you have a good understanding of what actually makes them slow (marshaling, garbage collection).
Producing too much garbage can lead to "hiccups" in the game, which happen when the GC runs for a considerable long time.
One large pitfall I see from making games with languages like these (or using tools like XNA, TorqueX engine, etc.)
A tipical performance pitfall is not considering the garbage collector in the design/development of the game.