For global variables, especially those globals that have little cause to exist, you should justify their existence with better names.
Rather oddly and inconsistently, getting the top of an empty stack is fine and gives 0.0 but popping from an empty stack is an error, and gives 0.0.
You can, however, use the first, simpler one, and satisfy most input cases as well as the compiler, who is right to warn.
For the other names, I have to think a little bit, to remember where they came from -- this is bad, because it should be explicit and obvious where they came from.
A comment explaining this name would be helpful, or just a better name.
If you had used braces, this would have been avoided:
buf could at least be input_buf, but that's still a little vague for a global.
I've never actually seen this before, but apparently it's not good enough for the real pedants either.
And why does '0' get a name while '+' and the other operators don't?
Futhermore, and perhaps even more extreme, I always use block-style case:
As such, it should be declared const, so that the compiler may make optimizations and assumptions around the fact it will not change:
This is what I'm used to using, but apparently the following is better:
The example oft provided is to suppose that someone, be it you or not, comes along and changes the else branch:
Avoid global variables, as implicit global state should be avoided whenever possible, especially in small programs that have no need of it anyways.
Finally, x is a god awful variable name for any scope or lifetime longer than a couple lines.
Let me take a more thorough look at it, with my compiler options that should be enabled by default:
Well, this is pretty decent code, and a good attempt at making a simple RPN calculator.
It's still a little messy which means the whole flow deserves refactoring, in my opinion.
Additionally, the descriptiveness of a variable name should scale with its scope.
Instead, you need to use an epsilon and compare the difference, like:
See Is it better to use C void arguments “void foo(void)” or not “void foo()”?
main must be declared int except if its return type is omitted, in which case it's inferred to be int by the compiler.
i, j, k, etc are good for loop counters (especially since programmers know i and j will be loop counters); for function scope, depending on the inteded lifetime of the variable, you should use at least a word or two, perhaps shortened.
Fact: you cannot reliably compare floating point values with == or !=.
I'd go with input_buf_ptr (bufp) and stack_ptr (sp).
This does declare and define a function in C99 and C11, which I hope you are using.
It looks better to me, and feels much less haphazard than braceless case.
function declaration isn’t a prototype [-Werror=strict-prototypes]
Since C99, main need not explicitly return int -- if you omit a return value, the compiler will insert return EXIT_SUCCESS; at the end.
With -Werror=maybe-uninitialized for GCC and -Werror=uninitialized for Clang.
I still can't think why those need to be globals, but nevermind that.
These are poor variable names -- you are not limited to 6 characters, like assemblers of old!
A total of eight references are made to names from this translation unit, but only one of these names was declared anywhere near this code.
This code, however, does not compile with a sane configuration.
Use better names, and then use comments for more complex ideas.
I semantically disagree with making an empty stack return 0.0 forever, but that is just personal style.
C is very cool in that you can do this in one line, but that doesn't mean you should do this if you don't have to -- and you don't have to.
Seriously, there's no excuse for these to be named this way.
We'll go over the code and look at what's causing this to not compile.
Well, now the program aborts 100% of the time, and it will take you a couple minutes to figure out why because of the tricky indentation.
I can only guess that type is the determined type of the input, op is the determined resultant operator, and s is the raw input string, but I shouldn't have to guess.
Opinion: omitting braces around control statements like if is dangerous and ugly.
See What Every Programmer Should Know About Floating Point Math, and The Floating Point Guide.