The computer is not producing input for the game as if it were a player.
You are looping over all triplets of possible WINNERS, forming a set from the contents of the state for each tuple in the triplet, and returning True if there is only one unique value in the set ... as long as that value wasn't BLANK.
After TAC moves, we don't care about the possibility of a win by TIC.
Or better, loop while there are still valid moves someone can make.
A value is always explicitly being given; the default just adds noise to the code.
First, you've got duplicated code for TIC and for TAC.
After TIC moves, we don't care about the possibility of a win by TAC.
If you had a player variable, you could start with player = TIC, and toggle between players with player = 1 - player.
But with what is written so far, it would be far, far simpler to simply modify the current state; then you could return something else ... like whether the move was a winning move or not.
You could make one function, and pass in the player as an argument.
You could pass in the player that just made a move and look for a triplet composed of only that player, which is far simpler to express in code:
Finally, using a generator construct, with input dependency injection, which blocks waiting for input from the console?
Then the main program would create an instance and process input like it already does but not worry about much else.
It can only be valid if the tuple exists as a key in the state, so perhaps:
draw(state):  Whenever you see tmp = [] followed by for x in y: wrapping a tmp.append(...), you can almost always replace this with list comprehension, eliminating the costly list.append() operations:
Okay, I understand that you are converting human-centric counting of row/column numbers from 1-3 into 0-2, but why are you using 0-2?
state_generator(get_input):  Oh, where do I start?
If the tuple (123,4.71) is given, is it a valid move, invalid move, or a crash-the-program input?
Then, you could loop over the 9 possible turns, instead of over the 5 pairs of turns.
The only difference (other than the docstring) is the value assigned to state[tup].
You create tuples for all board locations, and use these generated tuples through-out the code.
is_valid_move(state, tup): Is the given move really valid?
Both tic_turn and tac_turn take the current state of the board, duplicate the state dictionary, modify the copy to produce a new state, and return that new state.
If you are coming from a functional programming paradigm, where mutable objects are eschewed, I suppose I could forgive you.
If you are planning on implementing an AI which has to search the game state many moves in the future to find the best move, I suppose I could forgive you.
You could easily replace this with a function with a simple loop, and pass both get_input and draw as arguments to the function.
Slightly better is the above suggestion of looping over 9 turns.
Why not use the "human friendly" tuples values as the keys, and ditch your "machine" versions, like:
get_int(...): You import all sorts of values from logic, but you are checking for data not in range(1,4).
I would create a TTTBoard class with the logic to draw it as text, fill positions and check if the game is won as methods of it.
Interestingly, the the user input is never checked to see if the is_valid_move test passes.
You could define VALID_ROWS and VALID_COLS as range(1,4) in "logic" and import those values, and pass the valid range as an argument to get_int.
What is this human_input verses machine_input all about?
The ugly hard-coded 5th turn-pair special case of a "tie" goes away; if the loop exits after all 9 moves and no winner, then you have a tie.
Then you can experiment with 4x4 tic-tac-toe grids or other variants:
tic_turn(state, tup) and tac_turn(state, tup) share almost all the same code.