factories); I never felt that it made sense to use the pattern with my SessionManager class.
I'd check out the magic setter and getter methods (__set() and __get() respectively).
Using $this->method() was more legible (for me) than using self::method() or SessionManager::method() especially where referencing/calling class members/methods was concerned.
Let me know if you've spotted any mistakes or have any suggestions.
In an effort to learn as much as possible about best development practices and software architecture, I created my own MVC framework using PHP (github: https://github.com/alemmedia/miniMVC).
I'd like to get your critique on one of my least favorite classes (I always feel like there is something off about them):
Because my suggestions would change this code so drastically I will finish the review here.
PHP has made many mistakes, but allowing this syntax is by far the worst.
Adding those braces only increases file size by 2 bits!
Also, if you've found any code in the GitHub repository to be sub-optimal, I'd be happy to hear your comments.
Even if you can't I would just dump all those static methods just for that alone.
I have a similar session manager class in my MVC framework, and while I have absolutely nothing against Singletons (I apply the pattern where it makes sense, e.g.
If its not necessary, and I can't imagine why it would be, it shouldn't be static.
Here is my Session singleton I use to access/manage session data.
I mean, I don't use static methods at all really so correct me if I'm wrong, but from what I understand you can still access the internal instance by just using $this.
I've found that this has resulted in phenomenal improvements in my programming skills, but I'm still limited by my own limited experience when it comes to reviewing my code.
If your goal was to prevent the object instance from being copied/cloned (by design or accidentally) you could opt for a regular ole' class and use private final __clone(){} to prevent the object instance from being cloned.
Instead of calling a set or get method manually you just pass the variable you want.