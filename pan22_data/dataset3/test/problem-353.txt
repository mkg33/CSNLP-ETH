Constructor also is a good way to specify the required object properties
Encapsulation simply says that you have to hide the details of your implementation behind the public interface.
What happens if someone tries to perform an operation on a fraction without setting the numerator and denominator first?
OOP is also about Encapsulation which is often neglected by many.
This has a good side effect which is one of the most important OOP features: it makes you keep your data and routines that operate on that data together in one place.
OOP is not only about Polymorphism and Inheritance towards which you intuitively designed your operation classes, although incompletely and it was pointed out by Simon Andr√© Forsberg.
The constructor will ensure that the newly created fraction is complete and good to go.
This said, a proper OOP-style design would be to convert the operation classes to methods of the Fraction class
If you want to have a set of operations, Enum would be a better choice.
Another thing is that you should make use of a constructor other than the default one.
This will force you to validate fractions before each operation.
Also, I agree with 200_success on that the Fraction class should be immutable
While there are some good points in other answers, I would suggest something completely different.
Encapsulation is what differentiates OOP from Procedural programming.