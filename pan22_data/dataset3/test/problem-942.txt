Maybe have some mock servers and test your client/server interaction code.
sorry for my poor english and sorry for my biased point of view: i am not a game designer but a coder.
There are, however, a lot of things that aren't necessarily unit tests in the traditional sense of the word, but that exists as "tests" for specific features.
There are certain aspects of games that can (and probably should) have unit tests written for them.
Maybe have some tests for initialization of hardware things (3d surfaces, etc).
And if they do, they always change and evolve during the development process.
physics could be tested, optimization algorithms could be tested, singual object behaviours could be tested (with mocks, stubs and dummy as mentioned before)
I admit myself that I rarely use it, except for non-gameplay-related systems that are easy to test.
If TDD is proven to write better code than other methods, then yes.
Because of how tied together a lot of systems are, it's hard to test individual components of that.
fun or usability are materials for other jobs and not for software development like interaction designer, world and level d. in the same way that artistic parts(modelling, texturing, etc) are for artist that use computers as tool for creativity - obviously those jobs could be performed by the same person that write code, but this is not the point.
Industry is well known for producing poor code that is delivered late.
(But then I never heard of it used outside the games industry either - just by individuals.)
BDD is a way to design, a way to do refactor and software design during all the production (see some mottos as KISS, "keep quality in", "test early, test often") and not in a alone phase.
The problem is that no matter what methodology you use, estimating software complexity is quite hard.
It's a bit difficult to work out exactly what you're asking since the title is purely about TDD but you seem to be making Scrum an integral part of the question too - and as I understand it, one does not require the other.
Another point is that automatic tests are for that features that could be tested automatically by a computational machine.
Any kind of generic "file reading" system should be tested.
The absence of examples of major TDD projects that have failed or run late may just be because it's a new approach and few people have actually finished such a project yet.
I think there are some misunderstanding in this discussion.
A lot of things are visual in nature, and aren't obvious (at least to me) as to how to do proper testing.
If my task is to add a new GUI panel, or to fix a bug with the animation, or add a new statistic to characters, then the use of Scrum is not going to speed that up at all, and the use of TDD is going to slow down the task (at the possible benefit of reducing further maintenance tasks later).
Games rarely have exact specifications when started.
It's not impossible, but estimating it accurately is not much to do with the process.
the last think is that, imho, is that not only game design but whole writing code is an art.
TDD doesn't guarantee code correctness, but some people feel it reduces the incorrectness.
Admittedly, this is a small project in Pygame, but it gives the idea of which parts can be tested with a graphical game and which can't.
I've never seen a methodology that didn't encourage meeting due dates, or having actions that weren't time-boxed.
I don't think I've ever heard of it used in practice in the games industry.
Here's a case study from someone who thinks TDD and gamedev mix pretty well:
i'll talk about TDD in more general form, the so called BDD.
No, Test Driven Development is not suited for Game Development.
Sure you can write tests for some parts you do want to test, but the Game Development process is completely different from Test Driven Development which requires having exact specifications before progress is started.
How do you test that your animation system is working correctly?
http://powertwenty.com/kpd/downloads/TestDrivenDevelopmentInPython.pdf
So there is much less emphasis on code correctness.
Things like test levels for AI navigation are pretty common, but aren't necessarily the easiest things to automate.
there is no test for fun in games, and there is no test for usability of a graphical user interface.
It's certainly viable, although a lot of game programmers haven't really gotten on board with the idea yet, or have a good understanding of how to test complicated systems.
BDD is the opposite of some classical software process like waterfall process or some other iterative methodology to make software.
(And the ones that are running late... may still be running.)
Game design is an art, you can't have specific tests to know when art is good or complete.
They're certainly not going to make it easier to estimate the task duration.
Behavior driven development is not a way to test project (the tests are something like side effects).
I was surprised at how much could be done with TDD in this scenario.