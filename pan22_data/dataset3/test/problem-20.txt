If misconfigured, or if incorrect access is given to untrusted users it is a security risk (hole).
With sudo you can safely delegate these task to backup operators, webmasters, etc.
It is possible and correct to provide users access to run tools as other non-root usres.
Any users who have access to run a shell or a command that can give shell access should be the users you would trust with the root password.
sudo is just of way for an administrator for having a quick root access without using a root shell (which can be dangerous).
So no, it's not a security hole if you configure and use it correctly.
Anyone who can run a script or command with root privleges, which they can change has effectively been given root access.
As noted it is possble to limit access to specific comands.
The root configures who has access to it, who has to put in which password, for each user, for each group.
By using sudo it is possible to allow this without giving them the root password.
The security issue that bothers me is that it is not necessary to enter my password for every sudo command; if I enter another few from the same terminal without much time elapsing, it accepts the sudo without the password.
If you don't want your users to have a root shell, think of forbidding commands like $ sudo su.
The other user can be root or it can be someone else, but the default is root.
Also, about the last part: "since users other than root could run with root privilege": That's the whole point of the sudo program.
If you take a look at sudo manpage, you'll find how to limit sudo to some simple commands.
If it were a security hole, sudo would have been taken down already.
The example sudoers has a number of command sets you might want to grant to specific users who need to do task requiring root privileges.
However, not everyone should be in the /etc/sudoers file.
I think it's better for security than being logged in as root, as there isn't convenient to do things as root.
Because only the root can configure it anyways, there's no security hole.
With sudo it is possible to run a system without a root password.
It's intentional, you can configure it to require the user's password, the root's password or no password at all..
However, if not used properly, it can create more problems than it solves.
It's certainly better for accountability, which is part of security.
You need to trust these people, or don't give them the access.
Typically, you limit it to people who would know the root password anyway, although it's possible to get fancier and limit what specific people can do.
I don't know enough to evaluate the risk, personally.
This is presumably to avoid making me continuously entering my password, but it's conceivable that some bad-guy userland software could exploit that.
There are a large number of task which require root access.
All uses of sudo is logged, which is not the case with commands run as root.
The sudo command allows one user to run commands with the privileges of another.
It's not appropriate for all security problems, but used properly, it can be an highly useful tool.
sudo just requires the user to enter his own password and will indeed give him root access (try $ sudo whoami).
It is not a security hole, at least no more than su is.
It was designed for this purpose, has many configuration options to help lock things down in a variety of ways, and has been vetted over many years by a lot of people.
You can for instance, only allow the user bob to execute $ sudo poweroff without allowing him to do $ sudo cat /etc/shadow.