That way when you change your mind later and decide that you want 2 characters on the screen, you can easily just reuse the code.
I would like to have also classes for dialogs, items, quests, etc.
Your example is exactly what is done, there's no magic way to make it go away, only to maybe to hide it.
In case you have too much data or UI elements, let other classes which are responsible for updating them, handle them.
Those systems are usually put in place where there's a lot, and I mean a lot of code that will use it, think of million dollar companies with 100 programmers working on it.
Working with such a many variables is a lot of pain for me trying to manage it only in code.
Reusing variables via managers is also a way to reduce number of variables.
Well I am not sure about good practises or standards here, but I do use Managers(Mostly Singletons) to manage certain aspects of my game.
Example code that is really annoying and feels bad:
For example the life of player will be handled by Player class,  the GUI Text or UILabel(if using NGUI) will still resides in GUIManager and will be accessed via Singleton calls by Player Class.
I'm doing an android game primarily so the performance cost should be get under consideration.
Getting the values is very simple by using C# indexers feature:
I would also suggest that you make your GUI classes not to rely on static vars, but rather take any instance of the class they want to display.
Another solution would be making some automatic code that would extract values from same named fields.
Either way that seems a much more work and maintenance then just adding a single line of code.
Let's say I have a class A with many constants (over 20) and variables (also around 20).
Class C is GUI class and draw interface showing player his stats.
Initializing the dictionary is made using readonly string and float arrays where I store in appropriate order string keys and float values (it can be done by using also enum to avoid some string related problems).
I've decided to use dictionary for storing variables in my Character singleton class where key is string for example "life" and value is float value of the key.
"Run-time" stats changes are made by using events since it fits rpg game mechanism.
It has listener methods for every event, for example when player dies the player script calls OnPlayerDie() method on GUIManager, which pops up the message on screen.
But here you would need to have some kind of strict naming system, or use Attributes to mark fields:
For example, I always have a GUIManager class which takes care of all the GUI related stuff for me.
At those companies it actually can save a lot of time.
Class B represents a character so it has a lot of constants and variables representing various stats.
The change in health is also indicated via OnHealthChange() method.
How is that type of problems managed in game development?
Adding whole bunch of stats can be done in simple for loop.