Raspberry Pi Foundation's "Introduction to Processing" Resource
As with any platform / language, you have to make some choices - Processing lends itself to graphics without GUI support so if you want to really be text or GUI based that could be an issue.
I have no special insight there, I found it by a simple web search.
It's built on top of Java, so it leads to developing "pure Java" or even using Processing as a Java library.
This program will show a window that displays a circle.
And it can be deployed as JavaScript using Processing.js, which leads to developing HTML and JavaScript (which circles back to developing P5.js).
This allows you to pretty easily talk about functions and parameters, as well as pointing them to other functions in the reference.
I am currently designing an intro to programming course for middle school students using Processing.
The first was for rising ninth graders when I designed Google CAPE 2010.
On the other hand, I've never used Processing for a school year class intro experience but there's no reason why it couldn't be used.
In a nutshell: Processing makes it easy to create visual, animated, interactive (read: fun and engaging) programs without all of the boilerplate code that other languages require.
To supplement these resources, I am using videos from Daniel Shiffman's YouTube channel The Coding Train.
Of particular value are his short coding challenges where he completes a programming task in the allotted time while talking through the design process.
As I've said elsewhere on this site, a traditional computer science program, a zero-to-job-ready boot camp, and a short-track for non-majors might have intro courses with very different objectives, and that's as it should be.
However, it is based on plain old Java, which remains one of the most widely used languages today.
Make's Getting Started with Processing: A Hands-On Introduction to Making Interactive Graphics
Processing strips away a bit of the syntax that Java beginners find overwrought while still being basically the popular language that they will be able to use in the real world.
My team and I have used Processing for an intro experience a couple of times.
I find that Processing's power comes from its scale combined with its ease of entry.
1: Pears, A., Seidman, S., Malmi, L., Mannila, L., Adams, E., Bennedsen, J., ... & Paterson, J.
There were a number of reasons for the decision to use processing but the bottom line is, at the end of the day, it worked very well.
A solid official website at processing.org with documentation and tutorials, a relatively small but respectable community on Stack Overflow, a subreddit, and a FOSS culture that has ported Processing to other languages/platforms.
It'll be up to you to design a curriculum that teaches CS concepts using graphics-oriented tools.
According to a semi-recent survey paper by Pears et al.1,
Plus, there's the satisfaction of starting to learn programming with a text-based language instead of something like Scratch which can feel restricting and elementary to some students.
Bret Victor offers some excellent criticism of specifically Processing (and Javascript) as a language/environment for learning to program, in his wonderful (like almost everything he produces) Learnable Programming essay, with respect to things like readability, making computation visible, decomposition and recomposition and more.
We have since used processing for the intro experience for the CSTUY SHIP summer program and again, it works well.
These programs are much more engaging than the typical hello world programs of other languages.
This program shows a 500x500 window, and 60 times per second it draws a circle wherever the mouse is.
For example, here's a full executable Processing program:
Processing also lends itself to "graduating" to other languages pretty easily.
tell the story of RIT dropping Eiffel because students didn't want to learn a language that they couldn't use after graduation, but also note that one big downside of Java is that it come with a lot of syntactic baggage that gets in the way of learning actual computer science (algorithmic thinking, how data structures work, etc.).
Think about all the boilerplate code that you'd need in Java or JavaScript to get a window with a 60 fps draw loop and user input.
A survey of literature on the teaching of introductory programming.
On these criteria, Processing doesn't look too bad.
I would just advise thinking about what you hope to achieve with the course.
We also had some compatibility issues with either the sound or video library (I forget which) but that said, the fact that on supported platforms, it was easy to access these features was a plus.
This leads you to pretty easily talk about stuff like if statements and user input.
In pretty much no time at all, you can have them looking stuff up in the reference to draw a scene or a character.
Make's resource moves all the way from simple, one-line programs like ellipse(50, 50, 80, 80); to OOP, file IO, JSON, data visualization, etc.
In particular, I am using these two resources to focus the curriculum:
Simon Fraser University recently ran an intro course using Processing.
Shameless self-promotion: I've written a series of tutorials on Processing available at HappyCoding.io.
Students can very easily change the parameters to see what happens.
I can confidently say that students will be writing "real" code on day zero and getting instant results on something other than the command line.
Other than that, I love the community built around Processing: it's geared more towards artistic and creative coding, and makes an effort to be inclusive and welcoming to novices.
But if you're interested, maybe you could reach out.
This allows users to "draw" with the trail left by the circles.
And, as Daniel Shiffman's videos show, there's really no stopping how far you can go with it.
In fact, it's sort of a best-of-both worlds situation.
I've never heard of any big companies writing serious enterprise projects in Processing.
Not much to say here beyond what was in the previous section.