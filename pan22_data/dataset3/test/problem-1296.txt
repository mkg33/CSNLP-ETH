These puzzles are great as a fun activity from time to time, and I do think they align with skills needed for computational thinking.
Alternatively memory modification which is a bit too advanced (probably) is an avenue for him to explore as well, potentially via a tool like cheatengine.
When I have a program to write or a concept to think through, I approach it as a puzzle to piece apart and ultimately "solve."
You very quickly get started drawing things on the screen, and the immediacy of instantly seeing something change on the screen is very appealing and engaging - much more so than my early days of back and forth to the console!
Modifying computer games is a great way to learn the basics of code, how files can work with an exe, input and output, logging, processing, (assuming the game has a scripting language or allows its source code to be modified) basic loops, statements, logic structures and variables.
I suggest a slightly different approach: have students solve puzzles.
For me personally, the New York Times crossword is an indispensable part of my daily routine.
(For example, have students speed-solve a sudoku puzzle then have them formalize an algorithm in pseudocode for that process.)
In my time teaching CS, I have seen a strong correlation between students who enjoy and are skilled at programming and students who enjoy the intellectual challenge of solving puzzles.
Some students instantly see puzzles like the ones linked to above as a problem they simply must solve.
If he has a decent computer the easiest way to keep him interested (assuming he enjoys computer games) is to introduce him to 'modding'.
Then show how these same skills (and the same enjoyment) is found in programming.
I'll think you'll get a good sense of a student's potential interest (and potentially aptitude) in CS with puzzle-solving activities.
There's plenty of tools and tutorials for popular games with great modding support like the Total War series or the Elder Scrolls which will be a self learning option for him.
You shouldn't "test" somebody to check whether they're interested in something.
The same skill of logical, ordered thinking is found both in solving these and in solving algorithmic and computational challenges.
A quick search will reveal many puzzle packets to choose from online (here's one).
There are a ton of programming languages designed for novices, including:
They instantly focus and try to break it down from every angle.
Anything that requires critical thinking, analysis, decomposition.
As a teacher of CS50 AP, I use puzzles from CS50's annual Puzzle Day throughout the year.
There are avenues to explore which can become relatively complex; it's no stand in for true regimented education with specific goals in mind (like the program I took) but it's a great way to familiarize him with specific concepts.
Khan Academy has as nicely done intro course using JavaScript in a sandbox in their environment.
You should give them some stuff you think they might enjoy, and you let them decide for themselves.