Any side effects should be explicit — for example, you should call validateData($_POST), if that's what you want to do.
In recoverPassword(), there is one goal, with many conditions that could cause it to fail prematurely.
You have a class whose constructor takes no parameters, and the constructor calls the only method.
In fact, I'd recommend to remove some (if not all), for example these three just clutter the screen and make the code actually harder to read:
(You failed to check $swift->sendMessage() for errors, so it could fail mysteriously with no indication.)
The usage pattern is highly unusual, and it suggests that there really isn't much reason to make the it an object at all.
I am suspicious of the four files included in the constructor.
So, instantiating a RecoverPassword object has the side-effect of sending the password-resetting e-mail for the user named in the email POST parameter.
Incorporating code like that makes it hard to tell what is going on.
A comment usually implies "Sorry the code is not clear.
The require_once statements should be at the top of the file.
Therefore, the flow would be more readable if you inverted the conditions.
In fact, once you instantiate a RecoverPassword object, would you ever call $recoverPassword->doRecoverPassword(…) on it?