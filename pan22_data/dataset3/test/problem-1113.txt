I don't think it would make a good game-language, but it can serve as a source of inspiration.
And you can even allow users to create their own components, by making custom scripts.
It is verbose, but it is easy to write for both programmers and business people and it's easily translatable from visual to textual form.
Stencyl allows users to code in either Actionscript or blocks.
Then they can re-use components they made in a quick and easy interface for fast programming.
If a beginner can "write" their program visually, then read the code it produces they're far more likely to understand it and be able to modify the code produced.
Stencyl is another example of block coding that does something more similar to what you're wanting.
BPEL programming language has visual representation and many tools that work with it.
I apologize for the lack of pictures, I don't have enough reputation to post images yet.
Ideally the visual representation should be compiling a written language script in the background.
It is a workflow language, not a programming language, but it is turing-complete.
The written language allows for advanced users to do advanced things.
It allows users to create their own functions and can get surprisingly complex for a language that was built to teach kids how to code.
The easiest way to do this is to implement a powerful system, that has an additional interface to allow beginners to interact with the system in a intuitive way.
Accessible and powerful are often two ends of a spectrum.
I'm surprised this hasn't been mentioned before, but MIT's Scratch uses a block interface that is fast to code in.
Really, the only way to have all the features is to implement multiple interfaces.
The backbone of the system, of course, is a written language.
Components can be simple things like AND, or OR gates, or more complex like a test for nearby enemies.
So you can have a targeting system connected to a gun system with some logic in between.
BPEL-like language will not feel like programming, more like routing and connecting systems.
This offers a powerful tool for learning the language too.
Allowing for a system that allows beginners to program visually, perhaps something similar to the Lego Mindstorms programming tools:
The visual tools are just to give users a fast way to program something simple, and allow for beginners to get started.
Eventually being able to write more powerful code than the visual tools alone allow.
And given the amount of BPEL engines and tools, it should be possible to reuse some ideas and/or code.
This fulfills the requirement of easing users into programming.
Coding with blocks like these is much more efficient and less time-consuming than visual programming interfaces like those used by Lego NXT.