I will point you to the page, which is one of the best resources in NN-search (Nearest Neighbors).
It lets you adjust desired precision so that you can have a trade off between speed and precision and find what works best.
1) Since speed is a concern, you may want to take a look at approximate nearest neighbor algorithms.
But KD-tree is probably best solution (but there are many variants):
There are so many pitfalls one can fall into while implementing the details.
2) Since your visual occlusion is a black-box one (I'm assuming unpredictable moving obstacles), I'm not sure if you have much of a choice other than doing occlusion tests on the points that the NN algorithm returned.
It seems Cgal and Pastel support dynamic sets, but in terms of insertion/removal of points.
The nearest neighbour search is O(log Npoints) for randomly distributed points and you can easily extend the nearest neighbour search to account for occlusion.
Perhaps the papers here would also provide some insight.
3) I don't believe ANN supports points changing, but I'm not sure since I didn't need that.
I've used ANN in the past and it performed very well for around 12 dimensions.
This may or may not make the kd-tree more expensive than other options depending on how often you need to rebuild it vs how many queries are done.
I don't know if you need this advice, but I found that reusing libraries for such problems almost always is a better idea.
There are great on-topic slides from Data structures of computer graphics course on CTU in Prague, by Vlastimil Havran:
However it's not ideal if lots of points move frequently.