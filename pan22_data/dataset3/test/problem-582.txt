Such abstraction better fits the SOLID principles with a practical result of reducing cut-n-paste code and hence reducing bugs and maintenance costs and allows the creation of reusable algorithms that operate on common data types (e.g., utilities for calculating the distance between points, or rotating points around an origin, or so on).
User-defined types in such languages are always reference types.
There are many many advantages to abstracting tightly-coupled primitive values to a separate type.
If you are in C#, prefer a struct over a class, as structs are value types and classes are reference/boxed types.
Duplicating the data members and algorithms every time you need such a primitive is bad bad coding.
The most serious problem is that you can "leak" references easily from your public interfaces and get very bewildering bugs.
The simple version involves lots of clones but that can result in pretty horrible performance, even for simple 2D games.
Best to just completely shun languages that lack user-defined value types, in my not-so-humble opinion.
In languages with these enforced reference semantics you are required to write more complicated code to ensure that you are avoiding mutating any references.
Since you didn't mention language, I am for the moment going to assume either C++ or C# or D or Rust or some similar low-level language (not Java!
The most frequently-cited but rather least important is that the reference types are always boxed (allocated in the free-store/heap), accessing them incurs a memory indirection, and creating instances increases GC pressure.
When using a language like Python or Java or JavaScript or so on then there is a set of disadvantages with having a separate Location/Point class, though note that the advantages massively outweigh the disadvantages.
Abstracting in this way is a fundamental part of writing good, generic, maintainable code.
Going along with this there should be similar classes for things like AxisAlignedBox or other geometric primitives that you game frequently uses.
That's not even close to the worst problem, even in games.
Quite simply, every single game engine/framework has some kind of Point/Location type.
There are zero advantages to keeping x and y as members of Player rather than abstracting out to a Point/Location type.