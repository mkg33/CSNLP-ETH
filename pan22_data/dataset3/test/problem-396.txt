Doing that with coordinates would always require basically duplicating each calculation.
Compare the function signatures of both RotatePoints versions.
You need to tell the first version if your x and y arrays are interleaved or separate:
Secondly, and this is the most important part, it grants you access to many ways to use or change them.
For instance, getting the length of the vector, normalizing it, adding them together, dot product, cross product in 3d, etc.
Using structures & classes in place of a pile of primitive variables allows us to focus more of our attention on the higher levels of problem solving.
Using a vector class / struct plays to both these points.
Obviously vector addition is an overly simplistic example, but there are more complex vector operations and the same applies to those too.
Apart from having to create a new Vector instead of just 2 variables, you only have to pay attention to using vector.x and vector.y, which shouldn't be that hard and isn't much worse, than vectorX and vectorY
There is now only one place in your code where you have to write, test and debug vector addition, as opposed to tens, hundreds or thousands.
If you have a position, a velocity and an acceleration, that's already 6 variables you have to deal with, 9 in 3d.
That's something with real physical relevance â€“ the space we live in is basically a vector space.
And the more complex the math the messier and hairier it gets if you're not using Vector and Matrix classes;
They depend on a choice of coordinate frame, and generally there is no clear reason why some particular coordinate frame should be used.
Mathematically a vector is a point in a vector space.
Indeed, you'll mostly access individual components in very simple applications like 2D platformers, but in anything with somewhat serious physics handling you'll much more typically have offsets pointing in some direction that's unrelated to the coordinate axes.
It's a lot less messy to just have a Vector2 array and pass that and the inner code is more readable too.
As for slowing you down, I'm not sure why this would do that.
It's possible to do this using separate variables too, but it's much easier using vectors and follows the DRY principle much better.
It's an implementation detail, so it's best encapsulated in an opaque type.