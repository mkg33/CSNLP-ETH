You can easily use a fragment shader to take the interpolated light value at each fragment in the tile's sprite to light each pixel smoothly.
Do line-of-sight tests to each vertex to determine how lit it is (you can either have a block stop all light or decrease light, e.g.
It's been long enough since I've touched GLSL that I wouldn't feel comfortable giving real a code sample, but in pseudo code it would be as simple as:
When rendering a tile, send the light value for each vertex to the GPU.
count how many intersections to each vertex combined with distance to calculate a light value rather than using a pure binary visible/not-visible test).
The vertex shader simply has to pass the input values on to the fragment shader, nothing even remotely complicated.
Blend lighting across each tile based on its four vertices.
You'll get even smoother lighting with more vertices (say, if each tile is rendered as four sub-tiles), but that may not be worth the effort depending on the quality you're going for.
Light vertices (corners between tiles) instead of tiles.