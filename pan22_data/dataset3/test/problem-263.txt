After all, doctors are taught about all the kinds of diseases.
It also introduces the idea of descriptive variable names.
Sure, start with the infinite loop, then teach ending conditions later.
Of the two alternatives listed, I prefer the second, because it Says It Once.
For example, if one teaches to have constants set from the beginning, something like:
Maybe we should simply teach all the kinds of bugs, then get to how to actually think through a problem later.
Note: here I use raw_input, which returns the user input as a string, rather than input, which interprets the  user input as python code (meaning that you have to put "yes" with the quotation marks each time.
Structuring thought and approaching a problem are less important than the initial struggle to grasp the idea that some things in life repeat.
and then if there was a mistake in the text,  (as there is in my example), it's very easy to fix, without needing to copy-paste.
Some programming and coding workflows\patterns make the repetition rather insignificant.
(In this case, it's only a call to input() but it's easy to imagine a case where some computation needs to be done as part of the test).
However, it forces the code to enter  the loop, and when teaching, it's far better to break an example into smaller parts, so as to allow students to understand each component separately, before they tackle the entire thing.
That is kind of how people learn lots of things: eat, later worry about getting overweight.
This is a really good place to introduce boolean variables (or just to use them, if they've already been introduced.
If I were to describe verbally what I'm trying to do, I would say something like "Do some stuff (the body of the loop) at least once, and then keep doing it as long as the user wants to continue".
As for elegance, I agree that the second option is a bit more elegant.