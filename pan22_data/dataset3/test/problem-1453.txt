Of course if you have a gigantic board that is 90% full and everything can move anywhere every turn, that's going to require a lot of searching.
I was wondering if a partial min-max algorithm which limits itself to N board configurations at each depth couldn't be good enough?
terrible performance), and without more background on the game mechanics, I don't see why you think min-max is inapplicable.
One of the reasons Go is so difficult to write AI for is that there is so much freedom of movement, although it is also a very difficult game to write an evaluation function for.
Obviously, trying to apply the min-max algorithm on the complete tree of moves works only for small games (I apologize to all chess enthusiasts, by "small" I do not mean "simplistic").
It's very simple in that all it does is picks a position on the board based on the agent's current knowledge.
Using a genetic algorithm, it might be possible to find a number of board configurations that are good wrt to the evaluation function.
The paper can be found in AI Game Programming Wisdom 3 and has the title Dynamic Tactical Position Evaluation.
The min-max algorithm with pruning is itself very simple to implement, something you can probably do in an hour or two and much of the infrastructure work like board state storage, evaluation, move generation, is likely going to be the same regardless of the search you settle on.
Game tree min-max may be inapplicable overall, but maybe it applies in some areas.
For typical turn-based strategy games where the board is often wider than 100 tiles and all pieces in a side can move simultaneously, the min-max algorithm is inapplicable.
This isn't a minimax algorithm, however the guys responsible for the Killzone AI released a paper based on position evaluation functions which some chess AI also uses.
I'm also not sure why simultaneous movement is inherently a problem.
Hopefully, these configurations might also be good wrt to long-term goals.
I assume you need to have an evaluation function anyway, and regardless of the search you use, the evaluation function is where most of the work is likely to go.
http://www.cgf-ai.com/docs/straatman_remco_killzone_ai.pdf
If your game has a large but sparsely populated area, the number of possible moves from each board state may not be much different than if the board was just large enough to fit all the pieces.
Additionally, assuming the board size itself is an issue may be premature, it is not so much the size of the board as the complexity of the mechanics and how many moves are possible from each board position.
The size of the board is potentially an issue, but with pruning, discarding losing pathways enables a deeper search with the same amount of computation, so perhaps the larger board areas will not be an issue when pruned?
Min-max may apply at a strategic level for which of those locations to control.
As long as you transition from one discreet board state to another, and have an evaluation function, the algorithm ought to apply.
Remember that if your game features infinite resources or something similar, then there may be circles in how it can be played, making exploiting such an AI relatively easy.
Without trying it and deciding it is impractical (i.e.
So if the agent is low on health, then positions further away from its enemy will be awarded a higher score as it is more desirable to be out of the enemy's range.
Choosing the specific N configurations, how many and which ones, would be virtually impossible in something that complex.
I would suggest at least implementing min-max with alpha-beta pruning.
It's common that some locations on a map are strategically important.
At a tactical level, for the x squares around each strategic location, min-max might be used to decide how units deploy to capture and defend it.
I would be surprised if this hasn't been thought of before and tried.