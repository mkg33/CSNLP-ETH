When you type that while in, you're telling him to do something while he runs.
Call your boolean variable whatever makes sense in the context you're working in, whether that is programShouldRun, answerNotFound, fileStillHasLines, etc.
Of course, this isn't formatted for python or anything else, you can modify this to suit whatever coding language you're teaching.
I only ever taught my fellow students but this method was the one that everyone seemed to get.
With this understanding, your students can absorb new structures and languages themselves, knowing that it has to be simple underneath, because circuits are simple, and people are not really able to do vastly complex things without breaking them down in to steps.
Now if we want to tell the runner to run forever, we just have to make the hurdle so low that it can't possibly be false:
Teach that idea first, and then show how it is implemented in all of the various structures as you introduce each one.
All of the IF and Loop structures are based on two fundamental operations: Test and Branch.
(also, see my answer to a different loop-related question about how for loops and while loops are really the same thing)
While your ideal order makes sense, you really should try to plan the course based on the limitations of the language that you're working with.
The runner has to pass this hurdle each time he completes one lap around the track, that's your loop.
Then, once you've finished teaching all the different sytaxes for loops, you can talk about how some loops are equivalent, for example:
In this case, instead of thinking about the different conceptual loops, you should think about the different loop syntaxes that the language provides.
There's a track, and there's a runner, he's running forever.
The runner will stop after all the spectators have stopped watching him at the start of the next loop.
On a flow chart this just knocks you in the nose: the only difference is the arrowhead on one line.
Could you restructure this to something that makes sense to your students in plain English?
In this case, the order in @Bryan R's answer (if/else -> while -> arrays -> for) makes the most sense to me.
When something so varied and complex can be reduced to such simplicity, you know that it is a fundamental idea.
Your loop has to pass this check every single time it starts.
Now your students understand that programming is not magic, it is not about memorizing incantations and syntax: it is about simple, logical analysis of a problem, exactly how people and animals have been breaking down problem solutions in to basic steps all along.
and then show them your ideal loops, because those are a far better way to classify different types of loops than based on syntax alone, but they won't be able to see the importance of that classification until they are comfortable with the syntax for the different loops.
There is nothing new or surprising here, and it need not be confusing.
He will get to the hurdle and notice that nobody is watching him and he will lose all motivation and then fall over.
Then you put a condition near the while, which is almost the same thing as a hurdle that is put in on the track.
The only difference between an IF-Else and a Loop of any kind is whether you branch downward or back to the top.