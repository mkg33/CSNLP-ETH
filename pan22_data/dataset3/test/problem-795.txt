However, to get overhangs/caves/jagged terrain, I have to use multiple octaves with varying amplitudes and/or scale the resulting values to my 'max' height I want of the map.
Additionally, there are less expensive ways to minimize, but not completely remove the floating terrain.
I'm currently using 3D Perlin Noise to generate random terrain in combination with Marching Cubes.
If only one octave is used, all points in relation to the noise are obviously interpolated which results in fairly smooth data.
Make sure you're flagging voxels as connected while you go.
My issue seems to lie in scaling the noise function to get reasonable heights in my terrain.
Likely starting at a known connected point (like the bottom of your world) then doing a breadth first traversal of connected voxels would work pretty well.
Probably the only way to completely get rid of floating terrain is to test for connectivity.
I believe this is a similar issue to what Minecraft has when it has terrain that just floats around in the sky occasionally upon generation.
Any ideas on how I could correct this or if there's other noise functions I might use to get results like I'm describing?
You can do that by picking base point, like the very bottom of your world.
Depending on the size of you map, that might be an option.
No need for floating bits segregated from the rest of the map.
I might be missing something, but by using marching cubes with 3D perlin noise, I regularly get floating bits of terrain.