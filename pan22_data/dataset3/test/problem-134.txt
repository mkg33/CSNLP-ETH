Then, introduce abstractions slowly as systems are mastered.
I normally start out a course with TDD, combined with giving assignments in an already logically decomposed way.
As frustrating as that can be, we muddle by with half-understandings all the time in many domains.
When the system works well, rich and complex ideas get boiled down to very simple underlying mechanisms, so that we ultimately can apply the abstraction readily in many different mental domains.
This distillation takes time, and it requires us to have at least a few well-understood pieces before it really kicks in.
Find a good testing environment for your language and insist on its use: No Code Without a Failing Test.
Therefore, your best bet is to hit the concrete ideas that you want hard.
Even if you show them the abstraction, they aren't mentally positioned to take any real advantage of it.
Even having them apply small modifications seems to me more like a blind trial from their part than some reasoning about the meanings.
Also, with TDD, you can provide some tests initially along with simple requirements.
Of course I may understand where this comes from, but I suspect it's not healthy for their learning.
The programming model, maps well to the theoretical model.
= means =, and assignment has its own symbol/keyword.
(BTW, I am using the word "successful" here as a marker for an abstraction that we can readily utilize.)
Instead of a large program to write (large is relative, of course), I give them the "top down" decomposition initially that, in C they would be able to implement by writing a lot of functions.
Later you can continue this, but making the pieces bigger, requiring some decomposition (helper functions) be developed.
My mantra for a "too big function" is about five lines.
Note that breaking a problem up into parts is how Agile Development (Extreme Programming, Scrum, ...) actually work, with the Customer (in this case you) giving the Team (your students) manageable problems each of which contributes value.
Finite State Machines are wonderful, powerful concepts, but these students who haven't figured out when to utilize a function aren't there yet.
I will add to this, choice of language is also important, learning C (and forget C++) and how to program at the same time is to hard (see zone of proximal development).
What I am doing in younger classes is proposing functions first (as in functional paradigm), to solidify the concept of building a small composable block that has input and output, waiting a bit more in the future to introduce state transitions using the classic drawing turtle of fame with the hope that its visual feedback might make things tangible.
Is there any available scientific literature on these phenomena?
The truth is that abstract ideas are not great starting points for great learning.
Next, I'll note that C is a language with enough pitfalls that many people struggle with it at the detail level, finding it harder to think more globally.
(Keep these kids in your heart when you make your reviews, and the kids who just needed a reminder will be better off for it as well.)
After some work I could test and evaluate them again and it now seems to me that they are actually quite good at reasoning about a sort of "abstract idea" of what they want their algorithms to do: they can use our natural language to say things like scan this, sum that, stop here or there, and they are pretty much correct.
In my beginner experience as a teacher, the thing that's strucking me most is a sensation of my students' inability to express their (valid!)
Don't think it beneath you to briefly run over material again, both to remind those who have forgotten, and to give a hand to those who never quite got it the first time.
My mantra for "too complex function" is nesting more than two levels.
What they seem to have big difficulties in is saying the same thing using a formal language.
There is a lot to unpack here, but first, YES, the teaching methodology can be improved, but that is always true, an unending quest.
An OO or pure functional language, if well taught, makes abstraction easier.
You can break these rules for especially boring code, but not for the interesting logic of a program, or it will be impossible to understand and maintain.
Should state machines be introduced somehow more explicitly, with better examples, showing how do they actually solve problems before throwing them to the poor students with a burden of syntax that they know nothing about?
May be with Unit Testing we can avoid main, but this is just the start.
Is there anything you would do to improve the methodology for next classes?
One last thought for you: it's absolutely normal for kids to come out with only a middling understanding of the material in a prior course.
Anyway they struggled in manually tracing the execution of the code they see, being it mine or theirs.
It seems to me that a possible reason of this observed behaviour might lie in having taught them to build huge state machines without making them have a clue that they are building huge state machines: they can reproduce some they have already seen but are really lost when needing to make a new one.
They moreover have this (to me, crazy) habit of writing huge blocks in main() without splitting anything, and even worse the only way they think about of producing output is writing to the world: they don't contemplate returning from a function.
My preference, perhaps not open to you, is to start with a language at a higher level of abstraction generally and then, later in the curriculum, work both downward toward the machine and upward from where you start.
How would you test them to investigate deeper their difficulties and how would you try to show them a more effective route?
Only after several of these ideas are firmly entrenched and comfortable can we then look at them as system and make successful links between the ideas.
Make sure they have a few of the micro-skills, and provide direct instruction.
A language with contracts: adding pre/post conditions, will give you a clearer idea of what it is you are trying to do.
If I have to push myself a bit more I can say that I suspect all this is a reflection of the non composability of state machines, making their use in teaching to absolute novices not effective, whereas functions are known to be composable and would presumably lead to better results, in terms of being a means for mapping an individual's thoughts to formal language.
Has a simple exception system (these are often overly complex).
Typically, we see some small systems, discover (or learn about) how they actually operate the same way, and then expand on the abstraction through new linked ideas over time.
Teach them to stop programming when the tests pass.
However, the biggest recommendation I'd make to address the problems you state is to introduce (at the beginning) unit testing and test driven development (TDD).
Abstraction is a way of grouping seemingly disparate ideas to allow us to utilize them more readily or more flexibly.
A language with good defaults: data-attributes are private by default, methods are public by default.
Thus, at the beginning, I relieve them of having to face a blank screen with a large problem and nothing but 'main()' to work with.
In addition to Buffy's excellent suggestions, I might suggest reframing your own thinking.
If you don't know what you are trying to do, then how can you do it.
Little phrases like "a means for mapping an individual's thoughts to formal language" and the question "Should state machines be introduced somehow more explicitly, with better examples" hint to me that you're really thinking about how to get them directly to your way of thinking.
They even told me clearly that syntax is the only thing they focused all their energies on in their previous years.
boy once asked me with big amazement after my seemingly strong assertion: "oh, so you mean that strlen() is a function?
I inherited a last year class that was supposed to know C from their previous years.
Theoretical Object-oriented model maps to programming model (this is not true of most OO languages), or functional model maps to programming model.
If we grok this notion of abstraction, then the way to achieve flexible, abstract thinking is to first have fluency with the smaller, disparate concrete ideas.
But the tests are small and simple, usually without internal logic, and the application code needed to make them pass should also be simple function and uses of functions.
As an experienced programmer, I can do Java, but I find it exhausting, the amount of extra work that I have to do, just to express the most simple of ideas.
The building blocks of the language do not play well together in their minds or they are just unable to think about the state transitions in the code.
A language with a clean syntax, no extraneous words (public static void â€¦).