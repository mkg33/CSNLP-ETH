If a processor has 4 cores, but it can run 8 threads in parallel, means that it only has 4 cores (processing units).
As long as the same command doesn’t appear on both instruction streams at (roughly) the same time, CPU execution unit utilization can be improved.
If I add a second instance without any modification to the code
Logical cores are the number of Physical cores times the number of threads that can run on each cores.
The first instance would calculate if each number from 2-10 are prime, and find that 2,3,5,7 are prime, while the second instance would calculate if each number from 2-10 are prime, and find that 2,3,5,7 are prime.
A computer has 2 physical cores, and 4 logical cores (For example, a computer with an i5-3210M processor).
If the program has no way to coordinate separate instances you will almost certainly get no improvement.
You can turn off the HyperThreading in BIOS(something like "Intel ht technology") and see the difference between normal and HyperThreading capabilities as now the throughput will be 100%.
Or they may access the same resource, like the network or a disk or whatever.
My question is, if I run 4 instances of A on 4 logical cores, then the total throughput is 4X, or 2X?
Not necessarily in the task, but the kernel, for example.
That’s because some state is almost always shared.
But it can give hardware support to 8 threads in parallel.
You can see your computers core capabilities by running lscpu command.
Even with many more cores than tasks, they won’t scale perfectly.
If I have a single threaded program that calculates primes from 2-10, a single instance running it would calculate if each number from 2-10 was prime, and find that 2,3,5,7 are prime.
By now you understands that if your computer has 2 physical cores, and can run 2 threads per core, then you have 4 logical processors.
Assuming you have two tasks that only consists of adding numbers with no other CPU instructions, then yes, they will conflict when running on the same physical core, possible leading to significant performance degradation.
If I have a computer that has a 4-core processor, runs two threads per core, then I have a 8 logical processors.
However, most of the time, this isn’t the case and a variety of stuff happens.
Hyper-Threading) may rely on the fact that different tasks use different CPU execution units.
One job running in the core, if by any means stalls for memory or I/O operation then another thread can use that free core.
When a program A runs, htop shows that it uses 100% of 1 core, and other 3 cores are nearly idle.
So you can run only 2 instances as you have 2 physical cores, that means you're using the full capabilities of single physical cores (2 threads at a time).
doing this would result in the same work being done twice leading to no improvement.
But if anytime one thread goes idle, then the core can load up one thread on that core.
As such, so-called “Instruction-level parallelism” can be achieved on superscalar CPUs.
Virtually any modern x86 processor is superscalar.