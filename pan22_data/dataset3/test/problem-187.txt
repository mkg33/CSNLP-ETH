or where it takes time to figure out what is going on?
With this information now I start to calculate how many hours he spent in every area of the company.
The writeup says it returns a random time between start and end.
Instead of using for i in range(0,6) to iterate over the employees, use something like:
It would be better to iterate over the keys and check if the key=='in_orc'.
It's not the most pythonic code you will ever see, but it worked :D
The changes may not be picked up by the interpreter.
Also, similar python functions tend to include the start and exclude the end (e.g.
So, I was working on a dashboard for a potential customer and I needed a fake dataset with employee information to demonstrate.
When you look at the code now, are there places you ask yourself "why did I do that?"
However, it actually returns a random timedelta between start and end + 59 minutes.
I do the same for last swipe but in a range from 5pm to 7pm.
The ORC is the working room, so I want to keep between 50% to 80% of hours worked there and the rest randomly assign to other areas.
The standard library includes the csv module for reading a writting csv and other kinfs of delimited text files.
Mainly, I needed to know when the employee arrived the company (first swipe), when he left (last swipe) and the hours he spent in many other areas of the company (ORC is a room, DSP is another, and so on)
It is common to put the top level code in a function such as main().
You didn't include any specific request, so here are some general comments.
It takes care of escaping characters or enclosing strings in quotes if needed.
The python documentation says the dictionary returned by locals() should NOT be modified.
Basically, I create a random hour between 8am and 10am and assign this to the first swipe.
dicts() are not guaranteed to be ordered until Python 3.7.
Also docstrings could be added to the file and the functions.
I spent a lot of time in this code, and it's been a while since I created it.
Then, I calculate how many hours he worked by subtracting one from another.