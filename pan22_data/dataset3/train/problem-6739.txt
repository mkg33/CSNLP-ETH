Consider renaming the final argument to acc or accumulator.
Please review it for correctness, readability and efficiency.
Start by following Java Code Conventions; 8.2 asks for spaces around binary operators.
Better yet, change the type to boolean to minimize reader surprise.
This code works fine for positive numbers but doesn't for negative.
There's no need for temp variables (though they do have nice self documenting names!)
Another way to do that would be to change the API so currentBitPosition is what's passed in, and then immediately assign mask = 1 << currentBitPosition.
There seems to be a typo - looks like you wanted carry & aBit.... Oh, wait, now I see, carry can be as large as mask.
As far as signed arithmetic goes, you're going to have to declare your word length, and turn the comparison between mask and a into a test of whether mask is about to overflow.
Your algorithm looks good, but the best algorithm (as far as I know) is following:
in sum(); it would be enough to just have it invoke the helper function like this: return doAdd(a, b, 0x1, 0, 0).
Add a unit test with nested loops that compares your results with + results.
Consider renaming doAdd to sum1 to more clearly show how they're related.
Formal tip : as you past zero and do nothing with sum you can remove it :
Adding a comment (or an assert) that points out that mask only has a single bit on would be an aid to the reader.