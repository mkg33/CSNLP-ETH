If you did not follow the standard, now you have to think about the transformation that takes you from your world to the physics world.
You can simply find B's location in A's coordinate frame (Ta^-1 * p_b), look at the vector you get and see if Z(backwards) is negative and X(right) and Y(up) are small, because that vector tells you how much backwards, right and up B is with respect to A.
2) What's the logic behind horizontal movement being X/Z and vertical movement being Y?
I'm pretty new to 3D development of any kind, nonetheless games.
Imagine looking at a piece of paper held out in front of you with a chart on it, the axes are typically labeled X across the bottom and Y up the vertical; this leaves Z to be the outwards axis along the ground.
For example, if your game is set on a 2D height map, it makes sense for Z to be 'up', because then your X and Y coordinates in the 3D world map directly to the X and Y coordinates on the height map.
According to the right hand rule (x->thumb, y->index finger, z->middle finger), Z points towards you.
Now to add to question 2, it is sooo useful to think of X, Y, and Z as not just three letters, but as right, up and backwards.
Every character in the scene has a local coordinate system attached to them, and in their local coordinate frames X is always right, Y is up and Z is backwards.
(b) When you want to share code with someone, or bring someone over to help with development, they have to get used to your convention.
As I read through tutorials and examples, I find that the X/Y/Z coordinates seem a bit backwards than my first guess.
Let's say you have two characters A and B, and you want to do something if one of them is facing the other.
3) It wouldn't be wrong, but it would be a diversion from standards.
3D is new to me and I may not be thinking about things properly.
My assumptions appear to be wrong because walking around a field seems to change X/Z and jumping or going up/down a hill alters the Y.
(c) When using standard 3D models, you always have to have a transformation above them to prevent them from looking sideways.
There are three problems that I can think of at the moment: (a) Let's say one day you want to use a physics library that uses the standard coordinate frame.
In other fields like CAD your version would be more common.
It makes sense to have a coordinate system that is ordered roughly in descending order of importance, so that flattening a representation into fewer dimensions is easier to understand.
On the other hand, if you think primarily in terms of rendering (and many game engine developers do), you're used to X and Y being the screen coordinates, so adding a 3rd axis naturally goes in or out of the screen.
Use what is easiest for you, but be aware that any choice is arbitrary and that you may need to convert between them and use multiple coordinate systems within one program.
Generally speaking X is almost always the East-West axis but whether Y or Z is the Altitude axis tends to vary.
It's merely a convention, but it's used a lot in graphics where we think of Z as the depth into the scene.
2) The standard global XYZ coordinate system makes sense when you think in terms of a first person shooter, when you are looking through the eyes of a character in the scene with a blank(identity) transformation matrix.
Like it would when you draw a coordinate system on a piece of paper, X points to right and Y points upwards.
As I understand it, Quake 3, the Source Engine, and the Torque engine all have Z as up.
I had imagined that if a person were walking around a field, their X/Y position would be changing and if they were to jump or walk up or down a hill, then their Z position would be changing.
Your assumptions aren't wrong: each engine treats these coordinates differently.
3) Would it be so wrong of me to use X/Y as horizontal movement and Z as vertical movement in the XNA Framework?
Once you have this, now you can make sense of vectors that you print out, or write your algorithms in a way that makes sense.