If you look closely, you do not even have to build it; everything can be done in the fly.
Merge data with itself, from both ends, a backward iterator returning target - data[bkwd].
Given a sorted array data you may build another sorted array target_minus_data in linear time.
When s_num[left] + s_num[right] is bigger than target, decrement right; when it's smaller, increment left.
The second step - an actual search for solution - is also happen to be of n*log(n) complexity.
If left becomes equal to right, then we have completed the search, and found no match.
You are correct that the first step is to sort the array.
Of course, you don't have to physically reverse target_minus_data - just iterate it backwards.
We can make use of this property by walking from both ends of the list with two indexes (let's call them left and right).
However, in this case, we're repeatedly finding numbers, and those numbers are related to each other - as we walk through the sorted list, i increases, and so target - i decreases.
Now there are two sorted arrays sharing the same value.
This part of the algorithm obviously scales as O(n) - it will eventually be dominated by the sort, which is O(n log n).
A few basic comments on the code instead of the algorithm.
The key to solution is to realize that the second step can be done in linear time:
The binary-search strategy is great for finding just one number.
It can be found also in linear time by a merge-like algorithm.
What is important, they are very different n*log(n): sorting is implemented in native code, so it is virtually instantaneous comparing to the Python loops.
This means the entire thing can be done in one line.
Note that in the average case this will find a solution in \$O(n)\$ because you don't really need to sort the array to find a solution.
This line is doing exactly what enumerate() does, except it will allocate the entire list at the start.
As explained here and there, if you can use data structures and your goal is to reduce time complexity, then a dictionary works well for this kind of problem and the code is pretty straightforward: