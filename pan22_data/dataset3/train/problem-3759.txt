A suitably privileged user can then decrypt the module by:
Run the RedGate script against the original database and you've removed all stored procedure encryption.
More details and a full code implementation in my article:
The RC4 initialization key is computed from the SHA-1 hash of:
Hovering over the stored procedure will then allow you to see the decrypted creation script.
Itâ€™s a free standalone tool, with an option to integrate it into SSMS, preview original DDL script.
If you want to preview original DDL script or to decrypt an encrypted object, you can check out ApexSQL Decrypt
Find and replace WITH ENCRYPTION with white space.
Then change the CREATE PROCEDURE to ALTER PROCEDURE.
Also, you can decrypt objects located on multiple servers in one turn.
Disclaimers: this tool is commercial (with a 14 day free trial) and I work for Red Gate.
Use RedGate's SQL Compare and compare your database against an empty database (or any database you know will not have the stored procedures).
Another third party tool you could use to decrypt encryted objects on the fly is Red Gate's SQL Prompt:
I had a database with 400+ stored procedures and while SQL Prompt is handy, it was not worth my time to right click, copy, paste against 400+ stored procedures.
One more tool that can help you, is dbForge SQL Decryptor
http://www.red-gate.com/products/sql-development/sql-prompt/features
The module text is encrypted using an RC4 stream cipher.
Using RedGate SQL Compare I was able to remove encryption from my 400+ stored procedures in roughly 10 minutes start to finish.
A method I use often for decrypting several stored procedures at a time...