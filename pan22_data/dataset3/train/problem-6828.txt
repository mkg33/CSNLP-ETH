Read the code and learn to follow what the original coder has done.
Doing so can even increase the re-usability of the original code.
Experiment until the structure of the database is clear to you!
Considering the complexity of the database I'm using and my current skill level, how can I ease into more complex searches while still finding the results I need from the information?
Dozens of tables, some with 20+ columns each and lots of ways to compare the information.
My advice for learning any topic area, particularly to do with computing is to
(Your personal home computer by choice, but a work computer is possible if the learning is sanctioned and supported by the supervisor.)
You don't need to have a program that uses the data, since learning the C# or Perl is not the objective, only the SQL.
Figure out how to rework the existing code to accommodation those changes.
Take what you know, practice it, explore other uses, and practice some more.
Try to figure out other ways it could have been done, and then figure out why they choose the method they did.
Obtain real code from existing projects that use the SQL that you want to learn.
The difficulty I'm having is that proficiency seems to require knowing what searches are "easy" with no actual experience... and then finding out what is even possible to simplify the search I'm trying to write.
You can also ask them to review your searches if you can't decide if they re correct, but this will increase the load on them.
They gave me a great foundation into the basics but when I look at actual SQL searches in the database I'm using, they're much more complex than the ones in these tutorials and use query terminology that's never introduced, to the point that I'm somewhat overwhelmed and confused by just looking at them.
The manuals, for many versions, is available online, or downloadable for local use.
[dba.se] is one that you might find helpful, as well as the usual ones for developers.
Other products can create charts or diagrams too, so find a way.
Highlight columns that are not indexed but might be good for searching on.
Since you have access to people who can help and who are more advanced than yourself, I'd suggest that you ask them, as often as you can, to give you a search task that you can carry out.
It's the long way around, and usually not needed, but a database can hold configuration information and initial state values.
If they start with only moderately difficult ones and work toward the more complex you will probably be able to figure it out with the practice.
Next, develop the requirements for a new dataset to apply to a new problem.
If you have installed one DBMS at home and another at work, then you have two communities to draw from.
The manual includes explicit statements of how MySQL deviates from ANSI/ISO SQL standards.
(Movies: plots, actors, directors, awards, reviews, and your collection could make a useful project.)
If these other people actually work with you then you can begin to be a better contributor.
I would suggest though, that you try to "roll your own" by taking a sticky-note pad and for each table, write the name at the top, then the primary key columns, foreign key columns and maybe a few other useful columns.
There are quirks to every DBMS, yet they mostly try to follow the SQL standards.
It is the single most helpful part of the product!
If you don't have any old code-based projects of your own, which is likely in you case, then you can still use an old "problem" from elsewhere.
MySQL has a developer and user community that is often helpful.
From there, it is a piece of cake to write Select statements.
You can also use some SE communities in your learning.
Stick these down on a big piece of paper or a whiteboard and draw lines to connect the keys.
If you are starting to learn about computing with databases and SQL, congratulations!
(Often the DBA has very limited skills in other languages, but is excellent at the SQL for their system.)
(There are serious syntax differences between ANSI SQL and T-SQL, but the logic behind what you do is what you need to learn more than the syntax, it seems.)
It also doesn't have to be a project that requires a database, only that it could use a database.
This is pretty much the first language I'm learning, so I don't have a CS background to draw on.
Looking behind the syntax to what the DBMS "does" to fulfill commands can help you make more efficient use of the commands.
SQL is not the same kind of 'language' as most programming, but it is so well-suited and understandable that it is a great introduction.
Microsoft Access has a way of showing the database schema with basically one click.
In general, the best way to learn something is to practice it.
If it's useful in your work environment, that can be a plus for later, but it could equally be useful at home.
Having those differences delineated allows you to know what to watch for when developing advanced statements yourself.
Trying to comprehend database structure without a chart is like trying to walk around a room with your eyes closed.
In this case, the Manual includes any community that has developed around the server you're using.
If a local install of a server with T-SQL is not possible, a good choice, in my personal opinion, is MySQL.
The size of the old projects can grow as you work through them, but isn't all that important.
I'm currently learning SQL (specifically T-SQL) and focusing on searching databases, not building/editing them.
Since it is a project you've already done, the algorithm and program logic is something you already have a handle on, and applying the new knowledge to the old problem lets you focus on the new knowledge.
Once you understand visually how a database is designed, try learning a standard diagramming method like UML.
I've worked through the tutorials at Code Academy and SQLBolt.
Take what you know about the SQL so far and rework old projects you've done using your new SQL knowledge.
With a picture of the schema and pile of sticky-notes, you can move the world.
Next, look for things that might change in either the dataset or the use the data is put to.
It does not need to be the same system you have at work, or the same one you want to eventually "know."
Part of this is related to how simplistic the examples are in the tutorials and part is because the database I'm looking at is huge.
It is not for nothing that we have had GUIs and visual programming environments for decades.
you have chosen the very best place to start, because the whole point of computers is to store and manipulate data, usually lots of it.
There are three techniques that should serve you well in this, and future, endeavors to learn practical application of complex subjects:
Often, in the manual proper, or the community around the system, there are tips, tricks, and warnings that can make significant improvements in your understanding of the system once you can fathom the how and why of the given tips, etc.
As a part of "dissecting" what you want to use, learning to use a different system, such as MySQL or Oracle's database, can help by highlighting the differences and similarities.