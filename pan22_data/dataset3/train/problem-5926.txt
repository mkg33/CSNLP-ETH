32-bit processers don't have a 64-bit instruction set though.
A 64 bit OS relies on processor features of a 64 bit processor.
The only thing they really share in common is the bootstrapping code(from the 16bit startup, to get to 64bit you must [usually] go to 32bit first) and the 32-bit compatability mode and the common CPU extensions like SSE.
Most 64-bit processors - especially the ones from Intel and AMD - have the full 32-bit instruction set as well as the 64-bit extensions, so they can run 32-bit software.
A 64bit OS is programmed with 64bit registers in mind.
64 bit CPUs support any word length up to 64 bits, so in theory, any 8, 16, 32 or 64 bit OS will run on them.
Other than that, the processors are really completely different as to how applications are made in machine code.
x86-64 should be considered completely different from x86 because it is vastly different from the kernel and machine code point of view.
Whereas 64 bit processors have everything the 32 bit one has, so it can be done.
32 bit CPUs don't support 64 bit word length, so only <=32 bit software (including 32 bit OSs) can be run on them.
Many were made even before the 64-bit instruction set was defined, so it's not possible they could implement it correctly, even emulated.
There are lots of other reasons for this as well, besides just registers.
You can't tell a 32 bit process to perform an operation on the 64 bit register if it doesn't exist.
I'm assuming we're talking about standard PCs here.