I can't hold out for OpenGL updates forever, and I wont.
And even then that's just to get the application to load a simple 2D triangle on to the screen.
Where OpenGL and DirectX will hold your hand all the way through consuming much more CPU power.
While I don't work with them extensively, especially Vulkan as it's very hard to learn and not as well structured for programming as OpenGl and DirectX.
You are only successful if you have failed, found your mistake(s), fixed them, moved on and got back up and did it all over again!
On the other hand, if you want to understand the inner workings of how Game Engines / Physics Engines / Animation Engines and Simulators are designed and want to build one yourself, then this is where you have a choice between choosing your API such as DirectX, OpenGL or Vulkan.
If we abstract away from the programming aspect of it and just focus on the notion of what kind of techniques are used involving the different levels of math leading into data sets and data structures and algorithms; there is a lot that you have to know and understand first before you can even try to build a 3D Game Engine or to use an existing one effectively.
Another problem I have is with Vulkan's claims is how it claims to be better.
Right now I'm still in High School, and I can tell you I am almost always looking to develop cross platform applications.
OpenGL already supports most hardware, and will continue to do so.
That being said, while I mostly work with OpenGL I understand basic principles of DirectX and Vulkan.
Once you have that background and enough programming experience especially memory management and pointer arithmetic then you can begin to build your Game Engine.
But if you go this route you should at least know everything that I had mentioned above and some!
It's very possible that it will be some time before Apple supports Vulkan, and when they do, Vulkan support may only come to their latest hardware.
Lastly, I'd like to add that specializing in a single field like I mostly use Java and OpenGL isn't amazingly marketable standalone.
If you are doing just 2D graphics then life isn't too hard as you can do that in Python without any of the aforementioned APIs!
I would like to give you my graphics beginner perspective on the subject.
Now this isn't to say that beginners or those that are new to this field shouldn't learn Vulkan, but what I would suggest for them is this: First Learn enough of OpenGL and or DirectX to get your feet wet to see how a basic application is structured just to render a simple triangle or a spinning cube.
DirectX for Windows and Consoles < Which Vulkan can replace in some cases.
Now if you already understand all of the math and theory behind it and you have some programming experience you can use already existing APIs, Libraries and Applications such as Unity or Unreal Engine and just write the source code and scripts you need to make your application work.
So from my own understanding and the way that I see it is this if you are looking to build a quick game just for the sake of building a game; go with already existing frame works that would make your production time much smaller.
While OpenGL certainly isn't updating their website very often.
I have only completed a few basic tutorials to draw a simple triangle or a simple spinning cube with Vulkan.
If you are just getting into 3D Graphics Programming I would say for starters to jump into OpenGL or DirectX 11 since there is plenty of tutorials, resources, examples and already working applications out there.
I don't know if you are a young hobbiest trying to program the new Skyrim or if you are looking for a job in the CG field.
Currently, Vulkan does not work on OSX, and Apple has a competing API called Metal.
I tell you what I think it's the best approach in my opinion to learn computer graphics "like a pro".
If I wanted to get a job at a company that made games, for the most part OpenGL would only be used to make games for Linux and Android development and possibly OSX.
So the thing here is you have to understand all of the aspects of what it takes to make a Game Engine in order to Do Advanced Graphics Programming.
This method would also give you another tool in your tool box, and you could even write your application to support all 3 and have the "User" select which Renderer to choose at application start up.
I would have to say that it depends on the overall environment of the person who is learning.
What I mean by this is if you don't know anything about multi-threading, synchronous vs asynchronous calls, memory fences, data races, semaphores, and parallelism (parallel programming), then I would suggest to stay away from Vulkan and stick with either DirectX 11 or OpenGL versions 3.3 - 4.x.
What can be done in about 100 lines of code in OpenGL or 250 lines of code in DirectX takes almost 1,000 lines of Code in Vulkan!
What I realised (in many years working as an engineer in another field) is that the fundamental concepts are the most important part.
So as you can see Vulkan is not really geared towards beginner programmers in this field.
In the end it is all up to that person to choose which route they want to go down, and from there their success will be determined by their dedication, constant study, hard work, trial and error, and most importantly their failures.
I work with OpenGL in Java and have for over 6 months.
They continue to constantly release updates and I always look forward to new updates that run faster or work better with new hardware.
I have not gotten into DirectX 12 and I've been wanting to try my hand at Vulkan.
As with DirectX 11 and OpenGL 3.3+ I have written fully working 3D Game Engines and even used them Engines to build simple games.
One of the determining factors here would also be your existing programming knowledge.
I mention this because if you don't know how to properly manage your memory along with your threads and access time; Vulkan will bite you in the arse!
Vector Calculus, Linear Algebra, Systems of Linear Equations, Analytical Geometry with Vector Calculus of Multi-variable calculations, Number and Set Theory, Data Sets and Structures, Computational Analysis, Computational and Algorithmic Design.
Now if your level of programming knowledge is decent, and you have the following math backgrounds that involves all levels of Algebra, Geometry, Trigonometry, Boolean Algebra, Probability, Statistics, Vector - Matrix based Algebra, Calculus I,II,.... Infinty(lol).
I'm self taught in C++ without any formal education and throughout the past 15 years I've learned both OpenGL 1.0 up through Modern OpenGL and DirectX 9c, 10 and 11.
Starting to worry about performance before understanding how to draw a line is like worrying about the aerodynamics of your car before getting the driving license.
While learning that you could learn Vulkan on the side in Parallel then this way you can see how each of the three are accomplishing the same task, but know how they do it differently, then you can also compare the results between the different APIs and from there you can then make a choice of which is preferred to you.
This is in fact my number one problem with Vulkan - It isn't developed to work on all platforms.
Then you can get into the concepts of what it takes to make an actual game engine and this is without any Applied Mathematics or any Physics equations which you will need.
I've been "getting in to" graphics programming for a few months now.
You have to have extensive knowledge of all of the math, programming paradigms, all of the different types of data sets and algorithms including threading, memory synchronization, parallel programming.
Once you have a solid understanding of those, learning the last shiny new API is the least difficult part.
Vulkan leaves everything up to you as your are responsible for all aspects of how you are using Vulkan in your application.
But if you want to be serious and design a full fledged power house Game Engine that is robust with many feature sets, then the choice here would be either C or C++ and using either OpenGL, Direct X or Vulkan.
Now if you are building the Engine from Scratch and you are looking for the most "efficient" running Engine with the least amount of resource overhead then you would want to choose Vulkan.
There is no hand holding, it doesn't get in your way, it'll allow you to shoot yourself in the foot or allow you to hang yourself buy a recursive noose!
Get familiar with their APIs and their recurring patterns of their structures.
The primary appeal of OpenGL (at least to me) is that it works on many platforms.
Learning 3D Graphics is by no means an easy subject.