However, when a politician does that, I call it a lie :â€“)
Your solution could be as simple as "Today we are looking at the aspect of Java interfaces that makes it so they guarantee that classes implementing them define certain methods."
If you, depending on the age of your audience, have to hammer it in, then preface your lecture by a picture of an iceberg (maybe together with the Titanic for some added humour...).
So, it is always best to advertise the fact that you are simplifying.
Because when you use a word like "interface", in the one case you will want to discuss the general CS meaning of the concept independent of programming language (let along programming language versions), while in the latter case, students will need at some stage to be aware of the details.
Like "Interfaces: multiple inheritance; abstract method definitions; default code...", if todays session is just about the fact that classes implementing the interfaces have to implement the methods, and that the caller can use the interface as a type if he does not need more information about the concrete classes.
(For those of you unfamiliar with Java, that was true until functional interfaces were added with Java 1.8 in 2014.)
I realize I could put an asterisk on the slide, or visibly cross my fingers, and let students know I'm not telling the full story, but, when I witness other instructors allude to irrelevant advanced material, I view them as pedantic and fear that students find the additional information distracting or confusing.
Also, you could find an exhaustive list of features of your interfaces, and give them a kind of "breadcrumb" somewhere in your presentation (if you are not writing by hand on a board), highlighting the topic of the current session.
When teaching Intro CS in Java, I sometimes tell students things that are not entirely true, such as that, unlike abstract classes, interfaces cannot contain any code.
(or whatever better formulation you can come up with).
In fact, having a software developer who thinks he knows everything about a topic and has no open mind for further stuff is very hurtful in the real world, it can really wreak havoc in software projects.
What I'd like to know is if it's considered better to gloss over details in an introductory class or to always speak the whole truth.
It isn't lying to teach children that the atom is the smallest unit, that atoms form molecules and molecules form everything else.
The problem with simplifying-by-lie is in the consequences it can have when your student faces practical, real world code development or maintenance situations as a beginner:
Did you lie in the first statement because you said, smallest unit?
You are not leaving out stuff to mislead, you are simplifying to teach the subject clearly.
Are you teaching computer science using Java as an exemplar, or are you teaching Java programming skills?
Any student should pretty easily understand that if we look at one part of a puzzle, there are other parts.
Even though you knew full well that the atom is in fact the smallest constituent unit of matter that has the properties of a chemical element?
Later, in physics class, you can tell them about quarks, gluons, spin, color, etc.
Get them into the habit that you never give them the full picture (because, as the Hitchhiker tells us, that would be too humbling for our sanity...).
I don't mean to open a debate on the importance of functional interfaces in Java -- they're just an example.
Later, in chemistry class, you can tell them that an atom has a nucleus which is surrounded by electron clouds and that the nucleus is made of protons and neutrons.
The important point is the "Today we are looking at the aspect of ...", the rest is just part of your irrelevant example.
I don't see why you restrict your choice to either lie or be pedantic, both of which are negatives.
Discussion of the gory detail of Java versions here could detract from your ability to convey the importance of interface definitions in software engineering by isolating components from each other's implementation detail: which I would think is the important thing to be teaching.
It is pretty clear that almost all topics in CS are more complex than they seem at first; there always is a small visible surface, and a huge ice berg below.
Even if you lose no word about the other topics, they will be aware that there are other topics.