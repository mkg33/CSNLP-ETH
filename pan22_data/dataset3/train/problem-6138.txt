Procedural generation is good for creating fresh, riveting new combinations of existing elements.
For instance, add buttons that open doors, cause platforms (that were initially hidden) to appear out of thin air and so forth.
Like DMGregory said, for instance, you need to randomly place platforms within a jumping distance from one another.
To create a concrete solution, you need to understand the movement constraints (or more so, the movement flexibility) in the platformer without the puzzle elements first.
In order to provide a more specific answer, I must say that you could probably generate the platforms for a LIMBO like game but it appears to me the "puzzles" if you can call them that, are obviously hand crafted in that design.
This jump must not be obstructed in later steps by additional platforms or elements.
In that specific case, it appears that it's pretty linear (the combination is not so important) and the puzzles just appear one after the other.
After you have a valid platforming level generator, you can throw in puzzle elements without disrupting the initial constraints.