The problem of fitting a function to the data could be turned into a least squares problem.
The evaluation of the best is then turned into the problem of optimizing (min/max) the fitness function over the set of choices.
The decision problem is then turned into "minimize the cost of moving from A-B".
The optimizing algorithm may approach the problem in different ways, and usually there is some algo that suits the data structures best.
I know this is somewhat vague, but I can't think of a particular example -- that's what I am exactly looking for...
I am looking for a few examples that show how this can be done, and explain this transformation.
Meaning, the algorithm that solves the decision problem could actually turn into a practical algorithm for solving the corresponding optimization problem.
Clearly, given a value t, one can count in time $O(n)$, the number of entries in the matrix smaller than $t$ (hint - find the number of elements smaller than $t$ in the first row, and move to the next row, etc).
If your decision problem for instance is: find the "shortest path from point A to B" in a 3D landscape, you could define the cost function as the distance from A-B.
It is well-known, I believe, that theoretically, in quite a few cases, an algorithm that solves a decision problem can be turned into an algorithm that solves the corresponding optimization problem.
Well the general condition is that you have a fitness function - a way to quantify the set of choices.
The main technique to address such problems is called parametric search - which is a rather non-trivial technique and too painful to explain.
If your decision problem is "best value for money" for some arbitrary definition of value, then your fitness function must evaluate the best according to the constraints.
Another decision problem might be "is a given house prized relatively high or low on a given market".
A natural step would now to do a binary search over the values of t. For example, if you knew the values in the matrix are integers between $1$ and $O(n^3)$, this would yield an efficient algorithm to answering the original problem.
You could then do some sort of linear regression over the data set.
You could do some property analysis and derive a function of cost given house-size [sq-ft], number of rooms, price etc.
I would like, though, examples which are practical.
A classical "easy" example would be the problem of given a sorted matrix of size n by n (rows are sorted, and columns are sorted - say both in increasing order), output the smallest k number in the matrix.