I solve the game using Genetic algorithm and made data for training the net.
It means that there isn't a learning algorithm that solves all the problems.
For categorical data, people often use decision trees.
I trained a decision tree, I get so much better result.
This problem is a learning problem which if you increase the number of training data, you will get better results.
To illustrate an example, once I decided to train a simple MLP to distinguish whether an input pattern is in correct position, to solve 8-queen problem.
I have created a new feature cabin_int from feature Cabin, which is essentially the number of cabins alloted to a passenger.
I have one feature Pclass which I understand is an ordinal variable having values 1,2 and 3.
the reason is that deep nets cares about local patterns but SVM considers all the input pattern simultaneously.
In this case it is not logical to use non-linear SVM because it will be so costly and you may not even get good answers.
I used it and the net was so good for the trained data, but input features similar to training data which were a bit different had bad recall rate.
In these cases neural nets and deep nets are highly recommended.
You as a machine learning practitioner should decide when and how to use which algorithm.
Now this new feature is not ordinal, it is just a continuous variable taking only integer values.
If some more feature engineering needs to be done, please tell.
The data I brought to net was categorical in some extant.
My question is how does Machine Learning algorithm understands the difference between the two, if I pass these two columns (Pclass and cabin_int) as they are during training of my model?
Actually in your case, I guess your data is categorical.
Which algorithm depends on your task and your input features.