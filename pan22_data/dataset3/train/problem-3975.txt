No need to worry about ulimit either in  recent versions of Ubuntu, since Apport is able to circumvent its indication, even if set to 0.
After a full purge and re-install, the problem evaporated.
I've started to notice a pattern: from looking at the traces, the call trace always involves mmap functions.
Apport is Ubuntu's official package for data collection in cases of crashes and bugs, you find a good Intro here.
and add a hash symbol, # at its beginning), and it will produce a full trace of the call that generated the crash.
Whenever one of these happens, the process that it occurred under (Chromium in the trace below) hangs and trying to kill it with SIGKILL only results in the kill command hanging as well.
Question: Is this indicative of a hardware problem?
carries the same or a different address every time, right?
You need to activate it, (edit as sudo /etc/apport/crashdb.conf, find this line,
By and large, the best thing to do is to upload the crash report to Launchpad; Apport does this automatically.
For the last month or so I've been getting seemingly random kernel oopses.
Yet there is some info that may be helpful even to the unexperienced user.
Since you already have run memtest for a sufficient amount of time, the most obvious hardware suspect has been disculpated.
In the past, this has allowed me to pinpoint a program with a bug (VirtualBox) which caused the crashes.
Until a recent kernel update, the computer would just randomly turn off completely.
Mmap failures suggest RAM problems (I ran memcheck for 12+ hours with no errors though).
I cannot help you with this report, but may I suggest you use Apport for collecting info on your crashes?
To return stability to the system I have to completely power off the box and reboot.