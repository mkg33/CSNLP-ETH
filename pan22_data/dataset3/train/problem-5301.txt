You add items one at a time to the top of the stack, then you remove items one at a time from the top.
I used two loops to first create a stack of words and then use the stack to rebuild the sentence.
    const test2 = `‍♂️‍♀️  \u200D❤\u200D \u{1F3C4}\u200D\u2642\uFE0F`;
eg ‍❤‍ is one emoji (on Chrome win10) but contains 6 codepoints or 8 Javascript string Unicode  characters.
If you remove that statement and its content  you can have result hold the last word.
        info.appendChild(Object.assign(document.createElement("div"),{textContent}));
As we can not use many of the Array functions we are limited in how to solve the problem
Using iterators to step over strings and you need  not worry about character sequences.
You should try to avoid adding a variable's type to its name.
Putting all the above into your function we get a much simpler source and fix the bugs at the same time.
These points are independent of the algorithms logic.
The iterator handles all codepoint characters as single items.
The two array function push() and pop() provide a fast way to use JS arrays as a stack.
The rest of the function remains unchanged because we used bracket notation to index the strings.
The first loop goes from last to first creating a reversed string, then the next loop indexes the string created from first to last.
To solve the problem of surrogate characters (within the restriction of the question) we can use a very quick hack that converts the input string to an array.
Shows pass and failure modes when reversing surrogates via string iterator.
Just read the sentence string backward as you process it.
In the second loop you have the statement if(j + 1 == strlen) { to push the last result to the array, then you clear result.
You can do both within the one loop removing the need to use a stack.
Use String.prototype.codePointAt() to locate modifiers, sequences, gruping, etc
You don't need to declare a different variable of each loop.
Emoji modifiers and sequences rely not only on how Javascript handles the string but also how the device OS interprets the string.
Its like writing backward so the when you read forward its backward... LOL
        var word = "", reversed = "", i = sentence.length;
This section looks at how your function solves the problem and possible ways to improve it.
An array becomes a stack only by the way you use it, it is an abstracted stack.
In the following loop result already has the first word so you can add the space then word rather than word an space (trailing space bug)
Names need only fit the context (have semantic meaning) of the scope/function they are declared in.
Surrogates, Codepoints, Emoji, modifiers, sequences
Note: Single emoji can be created from one or more codepoints.
For a full Emoji rundown Unicode Emoji Technical Standard
    log("--------------------------------------");
As a stack the final loop where you create the result string can be simplified as
I see that in the accepted answer  there are comments regarding Emoji (surrogate Unicode characters)