If you depend entirely on your ORM for relation management, what happens if you change to a different framework?
Short answer - yes, you should still use keys and constraints in the database.
If the engine knows that every value in ParentID in the Child table refers to a valid PK in Parents then it won't even look at that table to check.
However, relational constraints are a good idea in general regardless.
), or its only function is to preserve relational integrity?
A Foreign Key constraint is primarily there to preserve integrity, though there are some performance benefits.
The good thing about foreign key constraints is that they are always in force in the database, instead of depending on the ORM to enforce it.
The software platform for your application can change, gaining or losing features, but if the database is enforcing integrity then it safeguards you from platform changes and programming errors.
One philosophy behind constraints in the database is to use them as a last-resort stop for bad data.
does a foreign key have other functions (speed for example?
Object Relational Mapping (take ActiveRecord and Rails, for example) allows a programmer to define relations between models, and callbacks on delete.
So my question is: do I still need to define foreign keys in my database?
What happens if for some reason you need to make changes to your relational model in the ORM and orphaned child records get put in with no parent?
Foreign keys can indeed speed up queries if they are trusted.