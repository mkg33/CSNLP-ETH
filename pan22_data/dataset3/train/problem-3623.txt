Anecdotally, I have found more success with having a simple GameObject hierarchy combined with components than having a "pure" EC set up with only a generic GameObject.
With components, for example, your physics code only needs to know about the object's position, velocity, and collision volume.
Yes there are benefits in entity complexity, yada yada yada, but the real benefit of an entity component system comes not from the ease of creating new entities, or the ease of changing entire sub-systems; it comes from the ability to leverage cache-effecient algorithms.
If you also want the game-design part of the development to be flexible, component-based entity systems would be pretty useful.
Have your game object inheritance hierarchy but if you start having functionality that does not neatly fit within it, factor that functionality out into a component.
Just make it work with the least amount of abstraction possible and when it's done perhaps some sort of "system" will emerge.
Make your components data-only, and enforce this rigorously.
If you choose to implement a CBS, there's two important things you need to ensure:
Unfortunately, these benefits aren't nearly as great in C#.
It doesn't care about the model being displayed, or that it happens to be tinted green, and it doesn't have to waste space in the cache for the entire entity.
Unfortunately, I can't give you a competent answer to your second question.
For reference, http://software.intel.com/en-us/articles/how-to-manipulate-data-structure-to-optimize-memory-use-on-32-bit-intel-architecture/
Define behavior in separate modules that update all like components at once, and separate disparate data into separate components as much as possible.
EC Systems are good for cases where entities can take on functionality unexpectedly like if you have an RTS with flying units and ground units, and you decide you want a Mech type unit that can both fight on the ground and fly.
Do you mean that as only adding new features (better lighting, physics, etc), or also flexibility in terms of game-design?
A question to ask yourself is how deep and tangled do you see your inheritance hierarchy getting?
But don't start by designing a system and then try to fit a game into it.
Based on what you have written I would say that a full on Entity/Component system may be over kill.
This is the approach I have been taking and have found it successful.
If the answer and the benefits arent't obvious to you immediately then it's probably not a good idea.