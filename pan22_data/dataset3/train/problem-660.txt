Both approaches (Haar Cascades and CNNs) basically find patterns of mutually connected and co-located shapes that describe your particular object (be it face, banana, car or UFO) and use these patterns to find objects on a new image.
If you were looking for a car and a monkey then the situation is very different and using common approaches with tools like open CV you would generally train 2 classifiers (one for cars and one for monkeys) the iterate over the image twice.
The question itself is not quite clear, since you don't state that you have a model that can detect one car per run for an image or you are just asking what tools, algorithms or frameworks to use to detect cars (or other objects) in an image.
The more different classes of object you want to detect the more classifiers and iterations you would need.
How can it detect these cars, given that it can detect single car in an image?
Providing you trained the system well enough to recognise both types of car then they should both be detected using standard cascading filter approaches ...
Answering second variant, you should be using developed algorithms for object detection, which are either Haar Cascades (which are embedded into OpenCV and there are clear tutorials of how to train your custom object detector, for example, banana tutorial) or CNNs, which are the choice for object detection using neural networks, personally, I enjoy working with that implementation - simple and comprehensive code and amazing results.
Your question explicitly states that your are only looking for multiple cars rather than multiple objects, so the answer is in the question.
You are not looking for multiple objects, rather multiple occurrences of the same object.
This is like asking how can I detect 2 faces in one photograph?
Mutual inclusion of detected objects (when borders of objects intersect or one is included by another) is used to find best match for every region.