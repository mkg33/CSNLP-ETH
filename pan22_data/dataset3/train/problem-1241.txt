For the record flash applications are rather easy to decompile and hack aswell so most web platforms have this problem.
If a user can actively change public data by hacking with the client-side javascript then you have a vulnerability in your server.
If a user hacks your game and cheats he ruins his own fun.
The same can be done with desktop applications, it's just not as easy.
Mostly this is done by only implementing the user interface, visuals, and sounds on the client-side; everything else in the game is done on your server and communicated between the client and server using AJAX techniques.
This exact same approach applies to Flash games as well, btw.
Any data which a user shouldn't be able to change should either live somewhere the user can't touch it (a server) or have a proper authentication portal in front of it so it can't be changed.
One of the first thing you can do to try to prevent people reusing your source code is to obfuscate it, meaning making it unreadable, thus very difficult to understand.
Design your game in such a way that seeing that code won't matter.
You can't stop people from reading your JavaScript, so consider that part of the game open-source.
Then there's no javascript compiler, as it's interpreted in the browser (so you'd need to compile it to all existing browser).