For clicking the mouse, I know of no nice wrappers, but this code should work:
What you need is to create a system driver for a human interface device, HID.
You may want to start here: enter link description here and then continue looking around MSDN for driver samples to base your work from.
It's accurate and good looking solution, but it will take a lot of time if you're novice in programming.
Well, the best way to do such thing is to create your own keyboard/mouse driver using WDK.
(Just replace x and y with the actual mouse position, perhaps using the Cursor class again)
To move the mouse, the Cursor class is our friend, as Cursor.Position can be used to move the mouse.
You can write down your own script and then use it.
So then you'll need to send message with your applicaton to GlovePIEand it will generate input on Kernel level, so this will work in DirectX games and message loop applications.
The previous advice to create a driver is correct because, as you noticed, you can't simply go stuffing events into higher level systems and get universal coverage.
Well, really I want something like this, but with possibility to run as background process (GlovePIE start with window mode and then you can turn it) or maybe as library.
To simulate key-presses, The Sendkeys class is your friend, with SendKeys.Send() being used to simulate a keyboard press
Alternatively, you can use something like the Global Mouse and Keyboard Library from CodeProject for a simple and clean interface to the whole process