I don't know pygame, but here are some ways to fix some of your issues.
That's why it's always practical to rotate the original image and not a rotated copy.
Ultimately, if you can't achieve what you want with the tools offered by the engine, you could create a spritesheet with the image rotated.
Surfaces in pygame can't actually be rotated; they have a horizontal width and a vertical height.
This would be done in a program like photoshop, and you would change the sprite instead of rotating it in the game.
if you have a scale applied before you do the rotation.
When you rotate your image 45 degrees pygame have to create a new Surface where your original image fits.
When you load your image pygame creates a Surface which has a horizontal width and a vertical height equal to your image.
As you see, the Surface is the biggest when the hypothenuse (the turquoise line) is vertical (or horizontal).
When you're rotating the image using pygame.transform.rotate(), pygame creates a new Surface with your rotated image on.
By doing this your image lose some information and therefore some quality.
To prevent the image from moving I usually position the image by its center.
This would give you a better control on the final quality.
The new Surface's horizontal width and vertical height has to be the images hypothenuse to be able to fit the image.
This is supposed to be, otherwise your image wouldn't fit.
This is typically caused because you have other transformations that are applied, i.e.
So after each rotation I move its new center to its previous center.
If the problem you're having is about collision detection I'd recommend you to try other forms of collision detection like circular, or keep using rectangular but minimize it's size.