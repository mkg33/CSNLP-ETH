Maintaining trust in object states is important and allows you to make assumptions and reduce the code complexity.
Putting a sign up "Do not use" (_ as the metaphoric sign "private") does not stop use.
Even if you put a big sign above it saying "Don't yank this pitifully weak link!"
Coders are lazy they will not put up with complications if there is an easy way.
And just like that all the work put into protecting the state of your apple is out the window.
But a chain is only as strong as its weakest link.
It is also one of the most important methods coders have of controlling our arch nemeses..
you can't trust coders, not even yourself, for one day the convenience is too tempting, and while in a rush to meet a dead line you yank that chain.
Why would you use the possible colors and complicated apple color vetting process when there is no requirement in your code to do so?
If you want to control the color of the apple you must make it impossible to change it without the vetting process, or it is pointless, and pointless code is bad code.
Coders want performant code and they are not going to use getters and setters when there is direct access.
You are using a static list (array) in an effort to protect the state of the Apple, or associated states that rely on apples being specific colors.