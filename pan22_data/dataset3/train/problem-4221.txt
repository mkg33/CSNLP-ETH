The transition there would still be a jarring visual artifact.
I don't know how you are making your game, but if you detect that the view will be partly underwater, you can force the camera to be above water, and only when the entire view would be below water, you can switch to the underwater view.
Create a photo, with a partial transparency and use it as GUI on the entire camera view.
On a separate but related note, I wonder why most underwater scenes are rendered crystal clear...
This means that the deeper you go, the bluer things look (red light has less energy, and is therefore absorbed more easily than blue light).
I have two methods; One uses a shader, the other one could use a GUI.
I've yet to see a non-specialized game that even tries to get underwater environments right...
If you ever put your head underwater, you will notice that your eyes are not designed for underwater sight, and therefore everything seems blurry.
You can then use a graphical effect (splashes or whatever) to hide the camera's transition through the water plane, which it would normally not be able to cross.
You could detect that plane and blur it heavily; this is probably the closest you can get to a real-world analogy of what the view may be through a partially-submerged camera lens.
Alternatively, prevent this from happening entirely: don't let the camera go below the water plane if the player is "above" the water or above the water plane when the player is "below" the water.
You'd have to be wearing goggles to actually see clearly underwater.
Shader will give more realism, you can apply a distortion Like This one
This will only really work if you have discrete player operation modes for above/below water, and works best if there is a physical button or other clear and obvious action the player can take to transition between "swimming on the surface" and "swimming below the surface."
Water absorbs light much faster than air, so the farther light travels, the less light will arrive at your eyes.
If the player approached a ghost, the screen would turn foggy.
Instead of an explicit keystroke to dive, you could interpret forward motion while the camera is pitched down sufficiently to mean "dive."
In fact, at a mere 12 meters underwater, blood looks black, not red.
And additionally, things look (and hear) very different underwater than above water.
You can always choose both methods, or make a shader that would change the colour.
Even if you do bother to detect the clipping case (potentially difficult) and scissor or clip the otherwise full-screen underwater effect so it only applied to the underwater scene (which is a potential solution you could explore), you'd still have the problem of the actual water plane itself.
Although it wasn't used under water it gave a similar effect :)
This has been used in a horror game called Drea D Out.
The problem you are referring to has to do with the camera's view volume clipping through the water plane; typical "underwater effects" are done via full-screen post-process effects, and wouldn't look correct if the view is clipped like this (it would just be the opposite problem).
Depending on how you do it, this could mean that there is an additional delay from the moment where you start diving and when you actually view the scene from beneath the surface.
"Simplified" -  If, Object(Camera) is in 3d Space(Water bounding box/whatever you choose) trigger a shader/GUI.
For the photo you supplied I would try a brown colour.
This may actually be a good thing from a UX perspective, so feel free to experiment.