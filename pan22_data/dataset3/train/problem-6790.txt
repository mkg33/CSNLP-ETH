You can improve efficiency if you removed the inner statement and yielded end after the loop.
The function shouldLoop is called 2 times each iteration, there is no need to do this, on top of this there are cases where the first clause of the inner statement is redundant.
You would also need to change the return condition inside the function shouldLoop to start > end ?
Each time you iterate you test if start > end This is known from the very start of the function and is thus repeating the same logic for no need.
The function is an iterator so this may not be undesired or potentially fatal for the application.
There are situation where the last value can be out of sequence
However some inputs would make one wonder about the callers intent.
This is what I came up with, but I am a bit skeptical that I covered all cases.
I wanted a neat iterator that will always give me neat sequence of step spaced numbers.
Use the condition to assign one  of two functions and avoid the repeated logic.
Thus you can have the same behavior as your original code with
eg numRange(0, 20, 1.01) BTW use strict inequality !== rather than !=