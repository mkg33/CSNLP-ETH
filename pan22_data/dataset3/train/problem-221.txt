You will probably find that it's mostly your lower-level utility code that is amenable to unit testing, in games.
Write new tests for bits of code as it becomes apparent they would be useful to you, for example if you discover a subtle bug you could have detected with a test, you can add one to catch any regressions you may make in the future.
I would encourage you to resurrect your old tests and build them into a test project using one of the available frameworks -- something you can easily run from time-to-time (or automatically as part of a release or integration build) that runs all your tests.
It's important to remember that any (automated) testing is better than no (automated) testing.
Unit testing -- testing in general -- is a tool you learn to use appropriately to help you, not a chore you have to perform for everything.
There are of course many other options: see this list (by the eventual author of UnitTest++) and Wikipedia for example.
If you have to think harder or spend significantly more time writing the tests for a module than it took you to author the module in the first place, you may be wasting your time.
The former is very lightweight and the latter is more featured but somewhat more cumbersome.
Unit testing is about writing focused tests to stress particular isolated independent bits of code ("units") under various scenarios.
That's fine -- that's foundation code that could disturb a lot of higher layers if it breaks.
So you shouldn't stress too much over the fact that your tests aren't "true unit tests" and be proud that you simply have tests.
Unit testing frameworks are usually useful for building looser, "non-unit" tests as well since they include functionality for packaging tests and reporting failures uniformly.
While in some cases you can unit test everything, it's usually not practical to achieve 100% coverage and, especially in games, can be quite difficult -- it's arguable whether or not unit testing your renderer output is in any way meaningful, useful, or a "true" unit test regardless.
It integrates well with Google Mock should you ever need that sort of thing.
You won't go to programmer's purgatory for not having tests for every little function and logical gate in your codebase, so don't spend more time than you need on writing tests.