The change only affects to this, and only this, execution of your program.
To load the shared objects from the same directory as your executable, simply execute:
The dynamic linker will decide where to look for libraries.
This will properly propagate the linker flags for all build types (e.g., Debug, Release, etc...) to look for .so files in the current working directory first.
I have an executable which needs to link with libtest.so dynamically,so I put them in the same directory,then :
How can it be unable to find libtest.so which is already in the same directory as the executable itself?
The loader never checks the current directory for shared objects unless it is explicitly directed to via $LD_LIBRARY_PATH.
For anyone using CMake for their build, you can set the CMAKE_EXE_LINKER_FLAGS to the following:
Note: It will not modify the LD_LIBRARY_PATH variable of your system.
In case of Linux, the dynamic linker usually is GNU ld.so (or an alternative that will usually behave identical for compatibility reasons.