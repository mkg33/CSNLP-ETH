A demo of a game that does this exact thing is here.
In this way we can support multiple reflections on single updates.
Here the red laser shot is moving out of the rectangle, and we detect this by testing intersection on each boundary of our rectangle.
One approach to simplifying this is to spawn new lasers instead of trying to work out reflection points on single beams.
To render, clip all lasers to the boundary object and discard forever any which have moved completely outside.
For clarity in the diagram, our new reflection is green.
We place it such that the correct amount of laser is discarded outside the boundary.
I'd imagine that a variant of this approach could be figured out for solid beams and not the 'shot' type blaster lasers described here.
Since we have detected that it's moving out (And therefore hit a reflective surface) we place a new laser beam at a point that intersects with the reflective surface and the red laser.
Immediately, we test the new laser for intersection on the other boundaries and if it too intersects we spawn a third (Blue in our example) and so on until we have no intersections with new boundaries.