The decision version of that problem is NP-complete.
Acceptance of this machine can be reduced (deterministically) in $O(n^3 \; \text{polylog}\; n)$ time to a SAT instance.
For example, could we find a shortest path faster with a $SAT$ oracle, than without it?
Access to a $SAT$ oracle would provide a major, super-polynomial speed-up for everything in ${\bf NP}-{\bf P}$ (assuming the set is not empty).
It is less clear, however, how much would $\bf P$ benefit from this oracle access.
The main answer I have in mind is an Integer/Linear Programming oracle.
This would give a nearly optimal amortized cost to any problem; the reason it's only amortized is that if you only use this once, then the size of the $\Sigma_2 SAT$ formula you write down is essentially the runtime of your original poly-time algorithm, but after that step you then have an optimal circuit for all instances of size $\leq n$.
For instance, shortest paths and other flow problems, matchings.
But if we go "old school", Pratt gave a nondeterministic TM to decide primality in time $O(n^3 \; \text{polylog}\; n)$.
This question gets more directly at representation and time required to reduce one problem to another....
The 3SUM problem may be another example, as it seems like one can guess a solution and check it in subquadratic time, and then acceptance of such a machine can be reduced to SAT in subquadratic time.
But I don't think ILP is the only one by any means, it's probably more that people haven't thought much about e.g.
To be more concrete, primality testing comes to mind, as the best variant of the AKS algorithm appears to test primality of an $n$-bit number in time $O(n^6 \; \text{polylog}\; n)$.
More generally, if we can pick any problem in ${\bf NP}-{\bf P}$, and use an oracle for it, then which of the problems in $\bf P$ could see a speed-up?
They can be reduced to it in linear time by rewriting the problem as an LP.
But an oracle for linear programming alone (let alone ILP) speeds up many problems that are immediately solvable by linear programming.
There is a trivial "reduction" from linear programming because it is a special case.
On a related note (more of a comment, posting as an answer by request), if instead of a $SAT$ oracle one allows a $\Sigma_2 SAT$ oracle, then it could be used to find minimal circuits for any problem in $\mathsf{P}$ (this follows the same idea as the proof of Karp-Lipton).
Would they (or other natural problems in $\bf P$) benefit from a $SAT$ oracle?
Of course, the speed-up in $\bf P$ cannot be super-polynomial, but it can still be polynomial.
How about some more sophisticated tasks, such as submodular function minimization or linear programming?
Actually, acceptance of nondeterministic Turing machines in time $t$ is $O(t \log t)$-time reducible to SAT (the construction is via oblivious simulation, see Arora-Barak), so typically any time a nondeterministic machine is appreciably faster than a deterministic one, we'll see at least some speedup with a SAT oracle.