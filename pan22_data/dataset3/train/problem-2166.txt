Technically, you have access to a storage space in the user's Google Drive.
To implement authentication on client-side, you can simply make an endpoint called /user/auth, you request with GET, sending the user's credentials, if they are good, you send back the keypair, else you send a 400(Bad Request).
If you use such a data, your application will be listed in something like Google Drive > parameters > Automatic application save > Manage saves (sorry, I don't know the exact words, my phone is not in English).
The goods are then stored in my database, with a POST method coming from client when it makes a valid purchase, sending me the google/iTunes purchase ID to make me able to ensure the purchase isn't a fake one.
On iOS, I don't really know because I never owned a cloud-connected Apple device.
You can save the data on the application user's cloud.
Also, be careful with the total usage space because it's part of the quota of the user.
The user can't interact with that storage space (read/write), but he can delete it (to be confirmed, I can't find that option anymore).
Take a step back, don't treat it as an app or game or whatever.
This answer is basically my comments put in better form.
The authentication is another topic, I think you'll find a lot of things about that on StackExchange, I'm using a private/public key pair for that, creating a hash with private key and timestamp + other data to make sure the request is not a user-forged one and I ship the public key in the request headers to be able to find the user easily.
This process will take milliseconds and is used by a wide range of applications, not just game related.
Then just have the application call the database when they log in, match the user id to the log on id, then get the item id's.
create a database, with fields that include the items *You know, give each user item an id, link that id to a user etc.
Of course, the developer documentation is comprehensive.
But from what I searched, I think you can follow the iCloud Design Guice.
My approach is to have my own server (a little one for now) with a REST API on it, and my game communicates with this API.