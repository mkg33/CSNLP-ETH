Usually this is done by passing a functor that understands the priority (where operator< is the simplest version).
But even in the worst case and it goes linear you are unlikely to break the stack unless you are solving some big data solution and then you already know that and take precautions.
I would have lowercased the first letter on all these.
While identifiers with an initial lowercase letter are objects and function names.
So you need to be able to distinguish types from objects.
You should not define types that are public that you don't want people to use directly.
Also by using this style re-balancing dynamically does not get that much harder.
When this happens you can only call const functions.
There are a lot of situations where pass an object by const reference.
I don't seem any stream types being used in the header file.
The reason is that types are extremely important in C++.
But generally the standard is to use identifiers with an initial uppercase letter as user defined types.
This makes the rest of the code flow more normally (I don;t need to check the end of the function for an else part).
Don't include header files you don't need in header files.
Unlike @vnp I am not worried about recursion when using binary trees.
Its important to get your functions const correct.
To have a priority queue you need to have both an data object and a way to define the order.
Its normal to check pre-conditions and return early if these are not met.
Here your object is your order (there is a sub class of the problem were this holds true) but in the general case it does not.
But this is habit that is good to get into and it makes your code look consistent.
The whole point is that its not going to get that deep anyway (that's why you are using a tree).
Also C++11 introduced nullptr as a replacement to the more error prone NULL.