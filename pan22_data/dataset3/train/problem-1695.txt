If they really want to do the work, I want to take it, no matter how long it takes them to complete it.
When I first started teaching, I thought if they were coding quietly and there were no questions, I should just sit at my desk and ignore them.
I can also gain insight as to how and why they do things, become familiar with their coding style, and nip bad habits in the bud.
Students who don't care weren't going to turn it in anyway, due date or not.
I allow what some might call "late" work because not everyone works at the same pace.
Of course, I allow for personal variation that is not blatantly incorrect.
Some of the things I discuss may not be useful in a university setting.
But the zero is just a place holder, a reminder that something is missing.
Johnnie was missing 10 projects yesterday, but now he has them all, and every folder was created at the same time (when he unzipped his friend's work)?
Not everyone has a wonderfully happy, supportive home life.
I stay engaged and give them my full attention the entire class time.
I clearly communicate what the zeroes mean to both students and parents at the beginning of the semester.
Note:  If I really feel I need it, I already have an electronic copy of students' work because of the way our network is set up.
So I can access each student's work from my own computer.
They deserve it, and it really makes my job much easier in the long run.
The student may, at any time, turn in their missing items, up until exam day.
If I have academic dishonesty suspicions, it is easy enough to compare time stamps or file sizes between or among students and determine if sharing has occurred.
This way I can watch progress, help with errors I see before the student gets completely off track or wastes a bunch of time, or notice a student go from blank screen to complete multi-page solution - still highlighted from the clipboard - within one circulation of the room ("hmmm, where'd that come from"?).
This works for me because a) I'm familiar with the way they do things and can almost immediately tell if they are showing me code they didn't write; b) I'm an extremely fast reader; and c) I make sure I have written a solution myself ahead of time so I know what I'm looking for.
And it must use the structure suggested in the assignment (e.g., a foreach loop instead of a bounded for loop).
When the due date for a particular exercise arrives, I transfer checkmarks from my list to the grade book.
If my students did the work, and they want to give it to me, then I want to take it.
Yes they have a lab computer, but they are restricted from accessing the C:\ drive.
Resubmissions are not a factor for me because I will take anything from any student at any time.
As the students complete exercises, I check them off on a paper checklist.
I create the assignment in the grade book with its due date but leave it blank (we use PowerSchool as well, mentioned in another answer).
Even with this system, I would say 90% of my students turn in their work "on time".
Students who care about their grades will work diligently to get work in no matter when it was "due".
Some students are just going to struggle (and Carol Dweck suggests that the student who struggles may actually learn the material better in the long run than the student who gets it immediately).
Checking code:  I don't ask students to submit code electronically.
I don't know what my students face when they leave my classroom.
Meaning we scroll through it together, with me asking questions as I see fit.
Timing: When I assign an exercise (program), I let my students know when it is due.
My students actually like this method and give me positive feedback about it.
Not everyone feels accepted and affirmed at school.
All student work is maintained on their virtual drive that only they can access when they are logged in at school.
I use zeroes in the grade book because it creates a sense of urgency in most students.
If it is not, I tell them what to fix (or guide them to it), and they call me back again for a re-check.
I check code for assignments with the student at their computer.
I have my lab set up so I can easily roll and achieve maximized, efficient coverage).
In summary, "resubmission" is not an issue for me.
Coding is a creative process and each student develops their own style.
(Honestly, a very good rolling chair helps with this.
Any projects they create (code or otherwise) are saved to the virtual drive.
When not actively teaching, I am circulating the room, interacting with my students, watching what they are doing - not in a hawkish way, but in an interested, encouraging way - "oh, you decided to add graphics to the assignment, that's cool".
Cheating:  My best defense against shared code is my familiarity with each student's coding abilities and style (or lack thereof!).