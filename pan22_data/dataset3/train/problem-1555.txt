:-)  Sick, to most, but I saw this funny graph yesterday that seems so apropos - ah - UNIX poetry:
Vi, especially with the ability to interact with environment filters (some of my favorite being sort, fmt, and grep) - hey, now there's a thought - I usually specify a range of lines for my external filter to process.
But anyway, in my automatic way of marking things (almost disconnected from my brain) - I'll set the range - or use the predefined ranges, like "%", and auto-snag into a range of registers.
In fact, when I'm not adding content, I'm typically interacting with a register in one way, shape, or form.
To me, they are much better than searching through a window of potential paste buffer content.
The thing about vi is that I never have to take my eyes off the screen.
So first off, my mind is 95% thinking in terms of a range of lines.
I want these lines, from "b"(eginning) to "e"(nd) - so I'll mark the beginning of a range of lines with the mark "b" and the end with "e", and I either delete into registers starting in ForTran'ly contrived register ranges, but typically, I'll use like, "I'm grabbing stuff into registers, "a", "b", "c", etc.
So, dealing with the 95% case - the range of lines case - for me personally, I've come up with...
I tend to reserve named registers for macros which I use a lot.
In fact, they (my fingers) are just a lower level protocol that I seldom worry about...
This latter case is usually the isolated case - I usually get the buffer letter name right.
(or "i", "j", "k", ..., or "u", "v", "w", ...) and will eventually paste those registers in somewhere else.
The key is, the registers are accessed in as brief a method as possible - a single letter used in an inferred  key sequence placement with that register name, a single character.
Then - I'll just go to where I want to start pasting, and start yanking out of register buffers - and start with "a", then "b", then "c" - until I run out of things to paste.
And my answer is - I use registers in vi all the time.
I rarely use named registers consciously for yanking/putting but other registers like "0, which contains the last yank, "+ which contains what's in the system's clipboard or "=, the expression register are important parts of my workflow.
Something to think about as I use vi the next time - like about in the next minute or so...
The other 5% of the time, I'll cut a word or two into the yank (inferred) buffer to put somewhere else on the same line - just to move a word or letter around - typically.
And I use a system-wide clipboard manager for accessing older clipboard content in Vim and elsewhere.
I'll say that again in a different way - It is like Spock's "mind meld" from TOS ("The Original Series") - I am in connection with the intent of my buffer edit, and my fingers are on the control keys to the kingdom.
Instead of from "b" to "e", I'll chose from "a" to "z".
Because with vi, if I get it wrong, it's a single "u", and they try another of my conventional buffer letters - until I get the right one.
Then paste the filtered buffer content where I need it.
I've even dabbled with yanking to the command line, but I don't use that enough to remember it.
I need this chunk of data, and typically, I think of a chunk of data as a bunch of lines.
Or, "depending on whether I had pizza last night", I'll use some other ad hoc "convention" that works for me at the time...
I wonder if I can process a buffer through a filter into another buffer?