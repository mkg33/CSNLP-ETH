This still means you will have the virtualization overhead for one of the two OSes.
In addition to the other solutions proposed here, there is also a “cross-virtualization” approach which I once tried:
That way, changes made to the Linux host would also be reflected in the VM and vice versa, the only exceptions being settings tied to a particular hardware device.
While I am not sure about the legal implications, but the product activation procedure might require you to get two licenses.
But you can decide on boot which one gets to be the host and which is the guest.
(Back then, I was on Windows 2000, where all of this was easier.)
You will need to maintain each OS setup twice (the host installation and the VM one)—technically you have four computers, unless you use the shortcut described below.
Since Linux (at least the various flavors of Ubuntu) easily adapts to changing hardware (to the point that I could rip the disk out of my old laptop, install it in the new one and only had the network adapters to reconfigure), you could also have the Linux VM boot the system from a raw partition.
(If you can get Windows to run off a raw partition in a VM, it will probably detect a hardware change and require re-activation each time you switch between host and guest configuration.)
As far as Windows is concerned, you are running it on two different hardware configurations (processor, disk, network adapter).