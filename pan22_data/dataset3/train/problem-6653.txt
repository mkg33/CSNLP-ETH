A nice example is given by Godelization: in lambda calculus, the only thing you can do with a function is to apply it.
I've never found a precise characterization of the set of languages that STLC can recognize, though.
Caveat 1: If second-order logic is inconsistent, it might be possible to write $f$ in System F... and/or it might not be possible to write $f$ in the untyped lambda calculus - you could write something, but it might not always terminate, which is a criteria for "computable."
So let's say that you have natural numbers (or a Church encoding of natural numbers) in your typed lambda calculus.
The simplest answer is given by the fact that typed lambda calculi correspond to logics (simply typed lambda calculus -> predicate logic; system f -> second-order logic) and consistent logics cannot prove their own consistency.
If I understand your question correctly, I think a simple example is the term $\Delta = \lambda x. x x$, which takes a function and applies it to itself.
For example, it can't recognize the regular language $\mathtt{a}^*$.
The simply-typed lambda calculus is actually surprisingly weak.
It's possible to do a GÃ¶del numbering that assigns every term in System F to a unique natural number.
Caveat 2: Sometimes by "simply typed lambda calculus" people mean "simply typed lambda calculus with a fixed-point operator or recursive functions."
Of course, you can always extend the simply-typed $\lambda$-calculus to match the power of $Y$, but then you're changing the rules of the game.
(I am skipping some details on how precisely we represent the natural numbers in each system, but essentially any reasonable approach will do.)
The function $f$ is computable, so it can be computed by the untyped lambda calculus but not the typed lambda calculus (because the latter would amount to a proof of the consistency of second-order logic in second-order logic, which would imply that second-order logic is inconsistent).
Then, there is a function $f$ that takes any natural number (that corresponds to a well-typed term in System F) to another natural number (that corresponds to the normal form of that well-typed System F term) and does something else for any natural number that doesn't correspond to a well-typed term in System F (say, it returns zero).
(Basically, it is a classical fact that every Turing machine halts or not, and there is no computable function that can witness this fact.)
This would be more-or-less PCF, which can compute any computable function, just like the untyped lambda calculus.
You can define and reduce this function in the untyped lambda calculus (and in particular, you have $\Delta \Delta \to_\beta ~\Delta \Delta$, which is not normalizing), but you can't type $\Delta$, because that would mean finding a type $A$ such that $A = A \to A$.
Namely, it is consistent to add it to HA, but not to Peano arithmetic!
As a result, there is no way to write a closed function of type $(\mathbb{N} \to \mathbb{N}) \to \mathbb{N}$, which takes a function argument and returns a Godel code for it.
The untyped $\lambda$-calculus posseses general recursion in the form of the $Y$ combinator.
Adding this as an axiom to Heyting arithmetic is usually called "the constructive Church thesis", and is a strongly anti-classical axiom.
Thus, any function that requires general recursion is a candidate, for example the Ackermann function.