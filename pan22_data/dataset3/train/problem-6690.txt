This may seem complicated or CPU consuming but it's actually just adding and comparing integers.
Then collision will prevent your ship from passing through and force it to stay on screen.
Besides that, have in mind that you can extract this to a common script and use it to both player and/or enemies as well, having no more work than sending the appropiate object's position parameters.
If you wanted to move in 1 axis even if  you can't move in both, you just split X/Y if statements too.
Following this link to the Unity3D forums, you can get an idea of how to get World's position out of screen's.
You just do this for the 4 corners and X/Y coords.
Then, you just compare the next player's position to corners', and you apply the movement if it won't get out of boundaries.
The easiest solution would probably be to put some box colliders at the edges of the screen.
A simple approach through code is to compare player's position to camera boundaries position, so if the next position to move to is out of bounds, you don't apply it.
Although you could use just box colliders as already suggested, it's pretty much killing a fly with a canon.