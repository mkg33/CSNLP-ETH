A non-generic type is used so that my ChatCenter does not have to be generic.
One of the downsides of how I've built it is that my callback's are not strongly typed to the subscribed IMessage implementation, so I can't access any custom properties within each IMessage implementation during a dispatch.
At the moment, they just provide predicates and an Action to invoke.
There are different types of chat messages that can be used.
The interface represents what objects will interact with when they want to subscribe to publications for a specific IMessage type.
The subscription handlers are what are used to define what happens when a publish happens.
There is a wide range of message types that will be sent around, all of which implement IMessage.
Lastly is the IMessage interface and a sample implementation for a chat message.
The ChatCenter is implemented as a singleton and will ultimately end up with the Dictionary being changed to a ConcurrentDictionary for thread-safety.
I adopted the Mediator pattern to facilitate passing the messages around to objects that have subscribed for publications.
I am building out a MUD game engine and want my objects to communicate with each other.