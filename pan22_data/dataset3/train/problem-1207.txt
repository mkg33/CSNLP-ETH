                    console.log(codestr, 'rest', element);
The bordered class just describes the way the element looks, not what it's purpose is.
    var rezPlz = new Function('return ' + codestr)();
I guess its still not perfect but I am happier with this one!
            <button class="col-2" data-type="action">%</button>
            <button class="col-2" data-type="action">*</button>
You don't need to add the button class b-1 to every button in your markup.
    sstring = (codestr.substring(codestr.length - 1));
data-type, data-id or everything that makes the intention clear will work.
I left button class so new types of buttons can be introduced without big effort.
For your if construct you could also use a switch-instruction.
    braceTest = (sstring == "(" || sstring == ")" || rg.test(sstring));
Please have a look at the code below or in this jsfiddle.
It's better to add the class to the parent container and address the button with a css selector >button.
now there is only one action listener and it categorizes buttons in 2 groups, i1 and i2 and they have different behavior.
            <button class="padded" data-type="number">0</button>
I would guess that bt is supposed to be an abbreviation for button, but it doesn't make any sense at all when you see that you're also using an element selector to style all buttons (and the only buttons on the page all have the bt class attached to them).
IDs of elements have to be unique so it's not recommended adding the id i1 to multiple buttons.
    codestr = (codestr.substring(0, codestr.length - 1)) + str
            <button class="col-2 padded" data-type="action">=</button>
document.getElementById('buttons').addEventListener('click', calcEvent);
                codestr = codestr.substring(0, codestr.length - 1);
    document.getElementById('screen').innerHTML = codestr;
I have some points for your updated code that could be changed/improved:
ok, so I have a solution, I am still not happy with all the ifs.
            <button data-type="action">DEL</button>
    document.getElementById('screen').innerHTML = "0";
You have soooo many events being attached to your element when you really only need one.
    document.getElementById('screen').innerHTML = codestr;
What happens when your calculator needs a facelift and the element shouldn't be bordered anymore?
            <button data-type="number">7</button> <!-- ids have to be unique -->
                    console.log('brace detected or digit');
            <button class="col-2" data-type="action">+</button>
            <button data-type="action">AC</button>