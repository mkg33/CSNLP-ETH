This means that you would be able to roughly serve 10.000 (RAM) / 100 (size of worker) users which results in about 100 concurrent users.
Swap is detrimental in any system but particularly for web services.
If you swap, you start accumulating workers (because you will be slow to serve users) and most probably you will auto inflict a DOS (Denial of service) in you system in a matter of minutes.
Let's say (rough estimation) that 2 GBs go away for the stuff I have aforementioned.
Again, there is no gold rule, my calculations are by approximation, just as an example.
Now, let have as per example that each worker takes 100 MBs of RAM (this depends on module you load on Apache and the sizing of PHP you are doing).
Which is not bad considering that there are considerations to be done about the keepalive directive, how long you keep alive a sessions, the speed you have to generate content (and therefore free the worker).
The number of workers you can spawn (that usually is defined by the maxclients directory in the type of MPM in use for PHP) depeneds on the size of each worker and the memory you got available on the machine.
At this point you remain roughly with 10 GB of RAM.
For instance (and here I am doing quick calculation, not pointing to accuracy), if you have 12 GB, you should consider that part of them will be used by the kernel for its own usage, for buffering, other libraries etc.