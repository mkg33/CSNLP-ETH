For example, we can easily say that the memory, time, or power behavior of a program is observable.
Q2: I think usual theoretical definitions don't really distinguish between algorithms and programs, but "algorithm" as commonly used is more like a class of programs.
If you want to  (say) design languages immune to timing channel attacks, or to design space-bounded programming languages, then this is the sort of thing you have to do.
Also, we may choose to judge some of the intermediate states of a computation as observable.
The most common definition in PL research is contextual equivalence.
In contextual equivalence, the idea is that we observe programs by using them as components of larger programs (the context).
So a typical research program in PL is to find compositional reasoning principles which imply contextual equivalence.
In this case, fewer program equivalences hold, since we can distinguish more programs (eg, mergesort is now distinguishable from quicksort).
For me an algorithm is sort of like a program with some subroutines left not fully specified (i.e.
Basically, there is no single notion of program equivalence; it is always relative to the notion of observation you pick, and that depends on the application you have in mind.
But you might want to take this view even for sequential languages --- for example, if you want to ensure that no computations store unencrypted data in main memory, then you have to regard writes to main memory as observable.
For example, the Gaussian elimination algorithm doesn't really specify how integer multiplication is to be performed.
This always happens for concurrent languages, due to the possibility of interference.
This is not an extreme: program equivalence must be defined relative to a notion of observation.
their desired behavior is defined but not their implementation).
However, this is not the only possible notion of observation.
So if two programs compute the same final value for all contexts, then they are judged to be equal.
Since this definition quantifies over all possible program contexts, it is difficult to work with directly.