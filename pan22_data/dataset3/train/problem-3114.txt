Names in all upper-case are constants; variables that never change in value.
The simplest way to get rid of the global variables is to package them into a state that gets passed around to any function that needs it.
While simple and not ideal, this solves the major problem with using globals: You can't just pass in data that you want to be used when testing.
Yes, global names should be in uppercase, but only because globals should also ideally only be constants.
Represent the state of the game as a class (something like a dataclass would work well here, but I'm just going to use a plain class for simplicity).
When using globals, you must modify the global state just to test how a function reacts to some data.
This at the very least allows you to easily pass in exactly the data that you want to test.
Then pass an instance of this object (and alter this object) to change the "globals".
I'd review further, but I started feeling sick about half way through writing this.
This is less-straightforward than just passing the data, and has the potential to lead to situations where another function reads from the global that you set, causing it to change in behavior along with the function that you're testing.
Global mutable state is a pain to deal with and complicates testing and debugging.