Earlier the code used toString(); here it uses String(...) to do the same thing.
This method was working with strings: where does Infinity come into it?
I think it could be simplified by having one variable which tracks whether there's any increase over the previous digit (although the complete rewrite will eliminate this anyway).
This is a bit surprising: you only need to generate one permutation, so why do you need an array with many?
This is a matter where opinions will certainly differ, but I would prefer to instead assign n = n.toString(); as n is never used again, and the real purpose of this line is to coerce the input to the type which you want to receive.
It's unlikely that the smallest digit will coincidentally be the first one.
Although index will always be a number, consistently using === reduces the cognitive load in working out whether == should really have been ===.
I'm not entirely sure what this code does, but it certainly seems too long for the problem.
The question of finding the next permutation in lexicographic order is a classical one (going back 7 centuries) and well documented in the literature.
This should be unreachable, so why not throw an exception to alert you to the fact that if it's reached you have a bug?