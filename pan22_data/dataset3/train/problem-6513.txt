They were declared in A, that automatically makes them a part of all of A's subclasses.
First of all, in init and factory methods, it is good to use instancetype as the return type rather than id.
From here, how you create factory methods should be pretty self-explanatory.
As far as I'm concerned, no class is complete without factory methods.
Now you can simply instantiate your class as such:
I'd advise at least one factory method per init method, and in some cases, more factory methods than init methods.
Part C of the assignment is a little oddly worded and kind of ambiguous.
Second, we shouldn't be using and in method names like this.
Though truly, the variable names should be even better, but this is what the assignment requires, so I'll let it slide.
First of, let's make a small change to A's description method, like so:
There's more available to us then simply [super init];.
We want to make sure the IDE can check us some, and instancetype will help it do that.
My best guess however is that part C is talking about factory methods.
Now rather than assuming this method has been called for ClassA, we just return the name of the class as the first part of the string.
The only other problems I see is that class B doesn't act like a subclass of A at all.
The word and in method names is used to indicate distinct actions happening.
instancetype allows you to still return the correct type when you've subclassed, but it doesn't return the generic id that can be assigned to anything.
Again, we don't make use at all of the fact that we're a subclass.
In this case, the factory methods for class A would look like this:
There's only a single action taking place here, so our method name should look more like this:
Let's let A's initWith... method take care of the parameters it takes care of and let B just handle the parameters that B adds.
You wrap the call to alloc within the method and simply return the result of calling one of your init methods.
Factory methods are class methods you can call which return an instance of the class.
And finally, we can remove the property declarations of a1, a2, and a3 from b's @interface.