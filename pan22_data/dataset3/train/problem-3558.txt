You will then obviously need to accept having a lot of NULL values.
The design and optimisations would depend on this too...
There is no absolute right or wrong way to do it, because it depends on how you use this data afterwards, that is what kind of SELECT queries will you need on it.
But again, I recommend you to think about how you will query this data afterwards to find the model that most suits your needs.
It has the same "likes" as your own (you will just need an extra LEFT OUTER JOIN request_model_other or similar) but not the dislikes.
request: request_id (PK), model_id (FK), model_other_txt, {other non-relevant fields} if you specify in a constraint that either model_id or model_other_txt are NOT NULL (but not both at the same time).
So your schema could be good enough without anything to improve.
As the dislikes, it is another extra table, that has to be taken into account in your requests.
Here is my alternate take that could give you other ideas:
In that way you do not "pollute" your model table with input by users.