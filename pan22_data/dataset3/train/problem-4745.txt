I would then have a situation where some locations have a Name and a null value for the RoomType, or the opposite and have a RoomType value and empty Name value.
So my next thought was to put the major zones and spaces in their own table, so I would have:
Note NumberedRooms has a simple key Name alone, whereas AncillaryRooms has a compound key on (Zone, Name).
The site has 5 major zones labelled Black, Blue, Gold, Green and Red.
My concern here is how best to store all these locations within my database.
I could of course just have a flat table with an ID and Name columns:
This is definitely better, but with certain types of room - toilets, kitchens et al - there is still repetition (no two numbered offices have the same number, i.e.
Part of this application requires fairly specific locations to be linked with where equipment resides.
that attribute Name in table NumberedRooms represents an integer.
These tables will mostly be read with updates and inserts rare once the DB is populated.
However, I recognise that there is a huge amount of repetition.
All three (non-lookup) tables have a key on (RoomType, Zone, Name) throughout, allowing further subtype tables to referencing them and maintain integrity by further testing for valid RoomType values.
I am creating a database driven web application for the management team at the place I work.
The CHECK constraints will not be tested by mySQL e.g.
Along with the offices are rooms such as cleaner's cupboards, toilets and kitchens which have no specific number.
There are also a handful of larger spaces which do not technically come under a specific zone.
have 'helper' procs to add rows to both super- and subtype tables as a single operation and use triggers to ensure it is done.
The idea that every row in the supertype table Rooms will have exactly one row in the union of AncillaryRooms and NumberedRooms.
Is having a small amount of repetition acceptable to keep the tables simple?
Plus if the site changes zone layout, names or office numbering (has happened at least once) it would be a nightmare to fix.
If I had a third table with stuff like "Kitchen", "Toilet", "Lockers" etc I would need a RoomType foreign key in the Location table.
Within each zone are several offices, generally referred to as Blue 57, Gold 155 etc.
Is there a way of doing this that avoids too much redundancy but doesn't increase the complexity massively?