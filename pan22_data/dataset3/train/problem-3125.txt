My advice here is coming from past experience on an RPG project where we used a component system.
It would access the attacking weapon entity's WeaponComponent to perhaps shatter the weapon.
I will say that I hated working in that gameside code because it was spaghetti code.
It would access the player entity's ArmorComponent to get the relevant armor.
As for wasted processing cycles... HandleWeaponHit() should only be triggered when needed (upon detecting the sword hit).
So I'm not offering much of an answer here, just a perspective:
The logic you describe for handling sword damage to a player... it seems one system should be in charge of all of that.
After computing final damage, it would touch the MovementComponent for the player to achieve the speed reduction.
Maybe the point I'm trying to make is: surely you want a place in code where you can put a breakpoint, hit it, and then proceed to step through all the logic that is supposed to run when a sword hit occurs.
In other words, the logic shouldn't be scattered throughout the tick() functions of multiple systems.