Then use the windows raw access APIs to directly access the USB drive and look for special data (that you will have already written) at the end of the physical device.
This is slightly sneakier and slightly less noticeable than an extra partition.
Unfortunately, it's still quite susceptible to whole-drive copying, and may not actually accomplish your goals.
These tools allow you to specify a "partition type" of "hidden FAT".
If your purpose is just to do application keying (it only runs with the special USB drive), then I'd suggest not creating a hidden partition, but instead making the main partition a few K short of the end of the USB drive.
It sounds like you are using this to support an application that you wish to deploy on a flash drive?
This might be a question for stackoverflow, and the Windows API.
It has a portable option for installing also, and you can create a hidden partition on a file
Once you have the second partition, there is probably an API to query the partition table, but I don't know of it, and if your application would need Administrative privileges to run.
You can create a partition through "gparted" for example, from a Linux LiveCD such as openSUSE.
Even if the app did secure Admin privileges, is it likely or possible that a group policy at large (think domain accounts) may be preventing access to the partition table?
The important thing to note is that 'hidden' doesn't really mean 'hidden'.
I suggest elaborating on what you actually want to do, and let us try to help you achieve that end result.
Anyone who can run fdisk will be able to see that there is a partition there, and might get curious as to what it's for.