The result looks rather like my first attempt to build a brick wall, that is to say, a total bodge.
I realize your main method is just for testing, but ignoring the IOException is not helpful.
You've tagged it "XML" so I suppose your intent is to parse anything that conforms to XML 1.0?
The constants of that enum should not have NODE in their names;  the class name already implies that each constant represents a type of node.
Unless you specifically want the library to work with Java versions older than Java 7, use try (BufferedReader br = new BufferedReader(â€¦)) so br is closed automatically and safely.
Asking for criticism is the first sign of a good programmer, so you'll get there in the end.
Frankly, it looks to me as if you have no knowledge at all of parser writing, and are trying to work it out from first principles.
There are StringBuilder.append methods for all reference and primitive types.
Your pareXMLDoc [sic] method, as written, would throw a NullPointerException if the file were not found, because br would still be null.
Javadoc is for packages, classes, methods and fields.
The try-with-resources syntax is the easy way to remove any such concerns.
I would strongly suggest you get some basic computer science textbooks and read them, or enrol on a suitable course.
Calling toString() on an object before passing it to StringBuilder.append is redundant, regardless of the object's type.
At the moment, you're not remotely close to parsing general XML, for example you'll fail to handle "<" in a CDATA section or comment, or " " within an attribute value.
If not, you should say what language you are intending to parse.
Multi-line comments inside code should start with /*, not /**.
Either wrap the IOException in a RuntimeException, or declare main with throws IOException.
If a document can't be parsed, you don't want to continue, you want to stop.