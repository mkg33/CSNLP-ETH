PHP comes to mind as an easy way to increase the memory requirements.
The memory usage really depends on how the server is being used, and the architecture of your overall solution.
If all you're doing is HTTP requests served with static content, really the only way you're going to blow up the memory is to increase the concurrency of the connections during testing.
I don't know what your use case is but if all you're trying to do is increase the memory usage then you might need to use mod_session to have apache save some session data server side.
One way to increase the resource utilization of Apache is to use additional modules.
If there's more than 1 server you'll need to take into account that there may be failures and some of the traffic will then have to be handled by the remaining server(s).
Does the content being served in testing match the content that will be served in production?
To get accurate results you'll need to test typical usage scenarios for your existing solution.
be caused by POSTing (uploading) large files (depending on configuration) or keeping HTTP requests in flight (not finishing the request, having slow clients in proxy mode, ...).
Testing that is generally not very easy as it requires additional resources and use-case-specific scripts / tooling on the test clients.
This will increase the duration and amount of memory consumed / connection server side.
This may not, however, match your real world usage.
If not, then you're not going to get accurate results and your constraints might not be appropriate for your environment.
Other than getting apache to eat up RAM, what exactly is the point of your testing?
If you do not want to use additional modules, increasing the memory can e.g.
I'm a software tester so I can help you, but I need more information in order to give you good advice on what you should be doing.