You should have a good idea of your target machine's specs, and make sure the game runs well on that machine, but anything beyond that is (arguably) wasted time that could be better spent coding or polishing the game.
Once a game is ready to be released (either final or a beta), or it is noticeably slow, that's probably the best time to profile your app.
Of course, you can always run the profiler at any point; but yes, premature optimization is the root of all evil.
As to when to tackle stuff - again, probably best not to leave it too late, lest you have to refactor half your engine.
Even if you're not actively optimising it's good to have an idea on what is limiting your performance at any given time.
Unfounded optimization, too; you need actual data to show that some code is slow, before you should go try to "optimize" it.
You need to know what the budgets are for graphics, physics, etc., as you write.
You will want to optimize when your framerate drops to a point that the game starts to suffer.
Otherwise, if your small game is running at 200 FPS even though it has an inefficient algorithm in it, do you really have a reason to optimize?
On the other hand, don't get too wrapped up in optimising stuff to squeeze out every cycle if you think you might change the algorithm entirely tomorrow, or if you haven't put real game data through it.
Pick off the low hanging fruit as you go along, tackle the big stuff periodically, and you should be fine.
It would be a bad idea to leave performance analysis and optimisation to too late a late stage.
If you've already built the game and you're 200% over your CPU budget and you can't find that through optimisation, you're screwed.
If your code is running slow, then run a profiler and see what exactly is causing it to run slower.
Your most likely culprit will be your CPU being used up too much (100%).
When is the time to optimize to make sure I am not wasting effort.
In 'normal' business programming optimization step is often left until really needed.
Here's a good blog post demonstrating the usefulness of a profiler.
Meaning you should not optmize until it is really needed.
Many games have some kind of overlayable HUD which displays a simple graphical chart (usually just a coloured bar) showing how long various parts of the game loop are taking each frame.
Or you could be proactive and already have a profiler running before you start to notice performance problems.
You can't do that if you have no idea what your performance is going to be, and you can't guess at that without know both what your performance is, and how much slack there might be.
Remember what Donald Knuth said "We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil"