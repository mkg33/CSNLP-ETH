Now, x and y aren't really meaningful names, but an actual meaningful name would be something like "bCalculationNumerator" and "bCalculationDenominator".
Since it's recent(a couple weeks ago), I'll try to add a few bits of information.
First note that I used the idea to name num as sum.
It also makes your code work should you change num to a different value.
However, if you were to use Java's BigInteger for larger values of sum where a, b, and c could be expected to go higher than Integer.MAX, then that's no longer the case.
At the very least, someone reading the code would understand that these are intermediate calculations, and nothing more.
I just gave Euler #9 a shot myself and stumbled on this question.
But using this kind of system also requires meticulous maintenance of the comments as well, which is possible, but it has to be part of your culture and processes; it doesn't happen magically.
Inside of the loop is some math, but since it all uses Java's primitive types, we can consider these operations to be constant-time: O(1).
You only have one loop, which iterates roughly a times, so the complexity of that loop is O(a).
For starters, the suggestion by holroy to use modulo arithmetic would look like this:
It would take a loooong answer to cover this complexity thoroughly, so I'll just say "it's complicated".
Since the above calculation would be present, a programmer who comes along to maintain the code would have no trouble understanding what you're doing.
Putting it all together this would look something like:
This is the kind of thing that fills an entire semester at college, but for a simple system like this, the gist of it is to find the individual complexities of the loops involved, and then multiply nested loops' complexities by each other.
I also didn't use the $$500num$$ I used $$\frac{num^2}{2}$$ I see this as a little bit simpler, and it removes the 500 magic number.
The code would have a comment giving a document number and page number for the calculation, and the document was maintained just like any other business document.
The point of their existence is to make the code easier to read, and those names are too cumbersome to help readability.
Normally when there is a lot of math involved, you would include the steps you've performed, either in a comment or in the documentation in some way.
In one job I've had, we had a system for marking math.
My point here is that we can make the code look a little easier to read if we make the numerator and denominator variables themselves.
You would have to take the time complexities of multiplication, division, and even addition and subtraction into consideration.