I think that this feature list shows that, yes, resource managers can be good!
Since the resource manager holds handles to all the games resources, you can build in a function which causes all the resources to be reloaded from disk and updating the game in real-time, which is extremely useful for artists/designers who work with your game.
I recently wrote a resource manager which works pretty well for my case.
For example, when you call resourceManager.Get("sprite.png"), if "sprite.png" is already loaded, the resource manager can simply return a pointer to the already loaded sprite resource rather than creating a new image and reloading it from disk.
A resource manager can also cache resources, so that although the last reference to a resource has been dropped, the resource manager can choose to keep it in memory in case it gets loaded again in the near future.
One of the reasons for having a resource manager is the sharing of resources.
Finally, I think a very useful feature is the in-game reloading of resources.
The resource manager would be programmed to automatically handle all memory management with your resources.