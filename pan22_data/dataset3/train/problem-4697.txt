I made a button using Photoshop and I put it in my sprite sheet, cropped it and made it my button.
// Resizing my button from 64 pixels to 256 pixels
Here is my problem, usually people make their buttons my drawing rectangles and adds font and makes that their button.
Checking the actual collision of these buttons is trivial, just verify that the mouse coords are within the range of coordinates covered by the sprite, do this by validating that the mouse coordinates are greater that the x and y positions, but not greater than the x and y positions plus the width and height respectively, like this:
now I want to make it that if I click on my 'play' button picture it sends to my GameState and if I click on my 'exit' button picture it closes my window
// coordinates where my buttons are placed in pixels ;)
    g.drawImage(Assets.ExitButton, ExitButtonX, ExitButtonY, ButtonWidth, ButtonHeight, null);
 //PlayButton from my Assets class(this is an image)
    //these 2 commands tells my game to make a red cube and follow my mouse in the MenuScreen
I'm making a Menu for my game and I made the MenuState(class) and made a MouseManager(class, implemented MouseListener and MouseMotionListener) and they are different class in different folder.
    //ExitButton from my Assets class(this is an image)
    g.drawImage(Assets.PlayButton, PlayButtonX, PlayButtonY, ButtonWidth, ButtonHeight, null );
import com.vescorspel.game.MyFirstGame.gfx.Assets;
All you need to do is verify that the mouse is inside the image, if you want to do this properly you should have an array of your own button classes which have methods to check collisions.
 //This If statement tells my game if I LeftClicked anywhere in the MenuScreen, then it send me to my GameState(GameScreen)
    g.fillRect(handler.getMouseManager().getMouseX(), handler.getMouseManager().getMouseY(), 8, 8);
public class MouseManager implements MouseListener, MouseMotionListener{
//My render where i render the button pictures in my MenuScreen