Now we can define key for arbitrary (structural) types by recursing to its members, i.e.
This answer does not directly answer the question since it does not use Eq It offers another solution for the problem of finding collision free keys based on object content, if not a particularly efficient one for complex types resp.
That might even work for nasty things like generics.
This, however, seems to perform poorly after being executed on a large number of objects - linear time and space proportional to the number of unique objects operated on is the best I can do.
My intuition is that there's no purely functional way to do this (where Eq, Id, and F are all stateless), but I've been unable to prove this and would like confirmation.
which is injective since both cantor (in general) and key (by induction hypothesis) are injective.
large object structures (if objects are mutable; if they are immutable, you only have a small overhead for every object creation and that's it).
So, basically, I'm looking for something with the signature:
Note that finite lists can be encoded with this scheme.
For sake of simplicity we call all such mappings by the same name key.
This would be extremely helpful since it would allow indexable key-generation via Id(obj) for arbitrary types without the need to implement a hash function for those types (only an equality function).
A(1,2) != B(1,2)) by enumerating types (known at compile-time), storing objects' types in a designated member and using above scheme.
It is of course possible to achieve this with a stateful Id function that keeps track of all previously Id'd objects and compares them to any input with Eq to determine if an id should be reused.
Is there in fact a purely functional way to achieve this that I'm missing?
I'm wondering if it's possible to go from an arbitrary equality function:
Find injective mappings to Int for all primitive types.
Assume we have a type Int which can take arbitrarily large integers and an injective function cantor that encodes arbitrary tuples of Int values to one Int using some generalized Cantor scheme (exists and is computable).