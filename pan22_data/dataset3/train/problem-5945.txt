You can merge the first check with the second as so:
You can remove the mutation of dice_dict by doing modulo outside of the loop:
Your <= 5 check can then be removed, but if you want to keep it you should throw an error instead of silently giving the wrong result.
if dice_dict.get(1) >= 3 is undefined if there are no 1s in the input; .get will return None and None >= 3 returns an arbitrary result.
You should use dice_dict.get(1, 0) >= 3, which defaults the argument to 0.
With Counter you don't need the if x in check; they will default to 0.
Is it guaranteed that the rolls are of up to 5 die?
This is encapsulated in the Counter class which does the same thing with just Counter(dice).
The call to sorted doesn't help; .count doesn't know the dictionary is sorted and so can't utilize that fact.
Also, count works without the sorting, so you could do directly
However, if using Counter every value is implicitly defaulted to 0, so you can just do dice_dict[1] >= 3.
However, in this cases, it's just better to just go ahead and use the standard python library: