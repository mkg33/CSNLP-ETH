So far it looks like the several calls to Math.random() create very similarly distributed random variables.
For n=2, most values that you get for x will be around 1.
I created the above plots for all n up to 10 with this piece of octave code:
ignoring my mad image editing skills, it looks like both plots are pretty similar now.
Again, for n=1, you get a uniform distribution with everything in [0, 1) equally likely.
I added the density for n=1 to the plot in blue color:
Sure, the first one has a higher peak, but that doesn't make them much different: both probabilities will produce values near their peak with a higher likelyhood, which is in the middle for both of them.
I work in the interval up to 1000, but qualitatively, the plots that plot(plots) yields are the same as what you see in the plot above:
I wouldn't go as far to say it doesn't make a difference what value n has, but considering how little the distribution changes for the cost of another call to Math.random(), I don't think it's worth it.
The X-axis shows what values are possible and the Y-axis shows how the probability is to get this value.1
In general (as you can see from the picture, the peak is at n/2.
Basically speaking, that means it's uniformly distributed between 0 and 1 with every value in between equally likely.
But for the intuitive understanding, it's perfect.
On top of that, you do the normalisation of (x / n), which squishes all the curves in the plot into the interval [0, 1) on the X-axis and does indeed normalise the range of possible values.
I say it's impossible to predict a certain outcome given a certain value for it.
and to normalize them by scaling each one into the interval [0, 1):
1 Strictly mathematically speaking, this is horribly wrong.
Let's start by recaping what Math.random() does by quoting MDN:
It's more like a knob that has to be adjusted by trial and error until desirable values are obtained.
I am worried about if the generated output is actually the desired one.
Now what happens if you add multiple such uniformly distributed variables together as you do with variable x?
Figure 7.6 of this pdf from Section 7.2 (page 15 in the pdf, page 299 in the document) shows the density function of the sum of n such random variables:
This is a rather vague requirement, yet the resulting code is quite specific.