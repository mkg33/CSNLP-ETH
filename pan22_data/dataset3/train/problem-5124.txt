Generally speaking I'd suggest you keep data (constant or otherwise) distinct from code, because then you don't have to go through the process of rebuilding the game (and in some cases repackaging it also) to change some data.
You can make them jump through hoops, but you can not prevent it.
That implies storing it in a file along with the levels or (in the case where sometimes the same set of data is shared between multiple levels) alongside the levels in separate files.
In your case, since your dataset seems very small and simple, it may be more pragmatic at this point to simply keep continuing with the data (a list of strings, as you note in the comments) in code.
And if anyone ever finds your level details and secret items through the regular ingame methods, they will just create a wiki and share it with the whole community.
From a security standpoint, as you note, they're basically equivalent (which is to say not secure at all).
If you want to manage static data in Unity, then you might want to look into ScriptableObjects.
In your case, however, it sounds like the whole question is a bit irrelevant, since you note that one option related to storing it a file is to
ScriptableObjects are a technique which allows you to create custom, data-based assets which you can create and manage in the Unity editor and assign to inspector-exposed fields of your MonoBehaviours.
which implies you already have the data in memory (otherwise you couldn't create a file with anything meaningful in it).
When you want to prevent your players from reverse-engineering your game, you are fighting a battle against windmills.