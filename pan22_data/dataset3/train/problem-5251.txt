Generally speaking, standard stuff here - nothing special about Jenkins in this regard.
Nginx and Apache are the two popular options here.
I think using a reverse proxy like you mentioned is a better choice.
Regarding network-level access control - this highly depends on the infrastructure you're running Jenkins on, but it may consist of host-level firewall rules, network-level ACLs, NATs, AWS security groups, etc.
Regarding client authn/authz - that's pretty straightforward; there are lots of options with Jenkins for that.
The same rules apply to hardening Jenkins as for all other web applications:
Some reasons for choosing one of these reverse proxies: can take advantage of existing tooling/resources for configuration and certificate management; easier and more flexible to configure to allow for common functionality like forwarding all HTTP traffic to HTTPS, rate limiting, or other QoS features; etc.
Besides the transport layer you should first of all enable
Regarding SSL - while it is possible to configure Jenkins to serve content over HTTPS rather than HTTP (documentation here), I don't find that to be the easiest way to configure SSL.
I use a plugin that hooks into my org's Active Directory instance, for example.