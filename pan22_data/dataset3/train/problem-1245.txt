The copy operation shallow copies the std::shared_ptr rather than deep copying the data.
What good is a container if it cannot be used with existing libraries?
Pass-by-value is great when copying data is a cheap operation.
If you want to allow functions to be streamable, consider #include <iosfwd> and reference streams through parameters.
Smart pointers are fine for ownership, but do you really need a std::shared_ptr to represent its structure?
std::unique_ptr coupled with a non-owning pointer (raw pointer, C++17s std::observer_ptr) can represent the ownership abstraction for a doubly linked list.
When defining members with constants by default, prefer default member initializers over the other forms of initialization.
With std::shared_ptr, the destructor recurses \$O(n)\$, which could consume the entire stack.
This also means you should removing the debugging prints that litter your code.
You should implement any missing types, methods, and operators.
You may omit explicitly defining the compiler generated constructor if you have no other constructor defined.
Consider using a logger that can be enabled at compile time with a switch or learn to use a debugger.
The C++ standard requires static construction of the standard streams (std::cin, std::cout, std::cerr, and the wide versions).
Be aware of how smart pointers behave with the compiler generated operations.
If you define any of the five special member functions for classes (destructor, copy/move constructor, copy/move assignment), the compiler is not guaranteed to generate them for you, so you must define them yourself.
Prefer to pass templated variables of unknown cost by const&.