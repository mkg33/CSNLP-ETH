As thread does more work, more time slices it spends and thus CPU time is higher.
If you are thinking CPU Time in sense of what you can see in Task Manager, it is total time scheduler gave to process.
In case there is work to do, it will run until scheduler stops it and gives control to another one.
A ram load/store instruction takes a few clock cycles of a memory resource, time where the processor doesn't necessarily have to be idle.
That slices of time that thread was actually running are cumulated together and this is CPU time.
Other instructions, like ram fetching or floating point divides take multiple CPU cycles.
Ram load/store typically take more than 1 clock cycle.
If there is no work to do, it will return immediately and thus it will not use that time.
CPU "time" is mostly thought of in clock cycles, or the time it takes the processor to execute its smallest instruction (usually integer addition/subtraction).
Instructions can be ordered to make maximum use of all the resources to get maximum speed.
CPU time is not defined in CPU cycles but in "natural" time units (hours, minutes, seconds...).