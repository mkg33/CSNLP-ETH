Now, that tells you which tile you need, but you also need to account for the fact that you may be offset by a partial tile.
You can do that by doing an integer division of the offset by the tile width.
You calculate the indexes and offsets in a similar manner for both the x and y dimensions.
As the player moves to the right, it increases up to the maximum.
To keep everything straight, you'll need to keep track of a pixel offset that tells you how far left or right you are in the world.
To do this in 2 dimensions, you need to keep track of both an x and y pixel offset, and you need to index into a 2D array for your map.
So at any given moment, you'll be showing 1/10th of the world at 320 x 32.
In case it would be tileOffset = pixelOffset % 32 where the % operator is modulus division.
Since the canvas is 320 pixels wide, you'll need the next 10 tiles.
Let's say you have tiles that are 32 x 32 pixels, and you have a screen that's 320 x 32 (remember we're only taking about moving in 1 dimension, so only left and right in this example).
So you can loop over the tiles to draw the visible ones and place them at the right position:
That tells you which element in your array of tiles you need to start at.
To draw the portion of the world that's currently visible in your game, you need to calculate which tiles intersect the canvas.
This value can be calculated by using the remainder of the offset divided by the tile width.
When it's at 2880, it's showing the rightmost 320 pixels in your world.
I recommend starting in 1 dimension to understand it.