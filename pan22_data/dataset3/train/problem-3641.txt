To add to the complexity you can create functions that can be instantiated with or without the new token, commonly known as factory functions.
The convention is to err on the side of type and use the strict version of equality === and inequality !== .
The convention is somewhat ambiguous in this case.
Variables reference Arrays and Objects so unless you are reassigning the reference its is conventional to use const for references.
Good to see appropriate use of var (for function scope) and let (for block scope) variables.
Javascript has the opening { on the same line as the statement
When JS is parsed function scoped variables are automatically moved to the top of their scope (hoisted).
Without the comments and copied code sections the above updateCard function becomes
Unlike C syntax like languages, JavaScript does not capitalize functions (methods).
The function AddDataElement should be named  addDataElement and the same for all the other function you have capitalized
Its a little hard getting used to but you very seldom need to use == or != in JavaScript.
But you have neglected const for constants, which are block scoped.
This presents a problem when using the equality operators as it is often the case that you want to test the type as well.
To solve this JS has 4 types of equality operators.
Rather than list out all the other points I have taken one function and modified it with comments and code to better match best practice
As type coercion in Javascript is a little complex newbies can get caught out using Equality operators.
Only objects that are to be instantiated with the new token should be named with a capital.