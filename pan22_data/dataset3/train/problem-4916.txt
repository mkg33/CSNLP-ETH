This is basically a more general version of VDR's answer.
In my case I edit html locally and ship it to my remote server when a file changes.
There is another answer based on the same strategy using a script here.
Alternately, you can create a phony target and have the rule for it both call your script and touch the phony target (while still depending on your script).
This line will watch a php file my_file.php and run through php interpreter whenever it changes.
Usage: I'm using this to debug and keep an eye on ~/.kde/share/config/plasma-desktop-appletsrc; that for some unknown reason keeps loosing my SwitchTabsOnHover=false
It will also clear the screen and print the time of last execution.
A oneliner answer that I'm using to keep track on a file change:
If your program generates some sort of log/output, you can create a Makefile with a rule for that log/output that depends on your script and do something like
You don't need to initialize BF if you know that the first date is the starting time.
Note: you can make the function more (or less) reactive by changing the number of seconds the function should sleep after each while loop cycle.
This will watch a file for changes and execute whatever command (including further arguments) was given as second statement.
if you have nodemon installed, then you can do this: