The terminal emulator translates the keyboard events into character sequences, and pushes them into the "master" side of a pseudo-terminal or the (usually hidden) "master" side of a virtual console.
They are processed by a terminal emulator — either the one built into the operating system kernel or a GUI one such as xterm, gnome-terminal, lxterminal and so forth.
(Similarly, control and c has already been translated by the terminal into the ASCII ETX character.)
The "lock" and "modifier" keys aren't handled in the line discipline.
Think back to the days of real terminals (rather than "pseudo" and "virtual" termainals) connected over serial lines to understand this.
These pass through the terminal line discipline, and only then does the Z shell see the result, as input read from the "slave" side of the pseudo-terminal/virtual console.
Raw keyboard make/break events come in from the keyboard device.
For the terminal emulator in the kernel that handles the virtual consoles, it will affect every program that takes its input from that virtual console.
caps lock plus a has already been translated into "A" by the terminal, and that's what is sent by the terminal and what arrives at the line discipline.
In your case, you have to adjust whatever terminal emulator you are using.
It won't affect the entire system, but it will affect a great deal more than what you want, which is just to affect the Z shell.
I want to rebind the Caps Lock to escape in z-shell to make better use of the vi-mode in the z-shell line editor.
For a GUI terminal emulator, it will affect every program that you run that takes its input from that pseudo-terminal.
But because this changes the behaviour of your terminal it will affect every program that receives input from that terminal.
So to adjust what caps lock — or indeed any other modifier — does, you have to adjust the terminal.
The characters that pass along the serial line from the terminal to the system have already had the modifiers applied.