      <span>Size: <input id="size" type="number" value="10"></span><br><br>
Surround your code in a self invoking anonymous function
    <meta name="viewport" content="width=device-width">
  var size = parseInt(document.getElementById("size").value);
I wrote a program that animates the Recam√°n sequence.
      <span><button id="zi" disabled="true">&#x1f50d;+</button></span>
  ctx.clearRect(0, 0, canvas.width, canvas.height);
Declare all global variables at the top of your file and within an object wrapper.
      <span>Speed: <input id="spd" type="number" value="10"></span><br><br>
      <span><button id="zo" disabled="true">&#x1f50d;-</button></span>
document.getElementById("stop").onclick = clearAllIntervals;
    <link href="style.css" rel="stylesheet" type="text/css" />
      <span><button id="cls">Clear</button></span><br>
HTML Elements that are called more than once should be stored in their own variable in the global scope of your project.
  var speed = parseInt(document.getElementById("spd").value);
    arcs.push(new Arc(xPos + rad, canvas.height / 2, Math.abs(rad), i / siz % 2 || 0));
    ctx.clearRect(0, 0, canvas.width, canvas.height);
So it does not conflict with any other variables that may have been declared in the same scope.
      <span><button id="anim">Animate</button></span>
      <span><button id="stop">Stop</button></span>
    ctx.arc(this.x - offset.x, this.y - offset.y, this.r, 0, Math.PI, this.ccw);
I was hoping for some feedback on how it could be improved.
It'll be easier to handle them later and know where they are located.
Store your setTimeout's ids in a global store with Set.
Define the 2500 as a global constant, preferable in the data object mentioned before OR (even better) a config object for other such variables (makes it easier if you wish to change those numbers later on)
  ctx.clearRect(0, 0, canvas.width, canvas.height);