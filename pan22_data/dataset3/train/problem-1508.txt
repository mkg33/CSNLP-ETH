You should make sure that as soon as a movement is completed, if a key is currently pressed, the character will immediately start moving in that direction.
However, evaluate your game mechanics and If you're able to develop the three approaches, run a playtest process to each one, see the reactions, ask questions to your players and see the results.
e.g., if a character is animating movement along 12 steps, accepting new input as the animation is completing the last step may be acceptable.
You want to accept new commands in a timely manner but not absurdly early.
However, I would simply ignore input while they are moving, or just ignore the input oof certain keys.
I recommend, for turn-based games, that you take your second approach: use all the keypresses you got, in sequence.
An easy work around to that problem would be to put a cap and simply stop logging input if there is too many logged already.
Also be absolutely sure to communicate the input state to the user via the UI.
Better to just have a clear animation (and a clear UI) so the player knows when to enter more input.
Make it very, very clear when you are ready to accept new input and when you aren't.
In a concept I'm working on, the player can move from one position in a grid to the next.
Once the animation is complete (if it ends abruptly and has a clear point) or nearly complete (if it has a "softer" ending), allow new inputs.
If your game mechanics aren't strictly affected by this, ignoring input would be the best solution in terms of Occam's razor: "the simplest solution is probably the best one".
I recommend trying both to see which feels better.
It all comes down to your very own game/project AND playtest results.
The difference between these two cases is whether a key which is pressed and released before movement becomes possible will still cause another movement.
Even though their movement can't be altered, the player can still press keys (perhaps in anticipation of their next move).
Furthermore, if you have keypresses buffered like this, speed up your animations.
This allows the player to quickly move through parts of the game they're replaying without it getting tedious.
If it is infeasible to speed up the game when there is buffered input, then you should either ignore input or buffer exactly one keypress (first or last doesn't matter much).
Logging all user input for movement could create problems.
I'm not really sure which is the most appropriate or most natural.
This ensures that the game does not require the player to have exact keypress timing to move efficiently, which in my experience is very frustrating.
If a button can't be clicked, draw it differently to signify this.
Start the animation and ignore further input for gameplay-affecting commands (but let the player inspect objects or do other things that aren't gameplay commands).
Once movement starts it can't be changed and takes a predetermined amount of time to finish (about a quarter of a second).