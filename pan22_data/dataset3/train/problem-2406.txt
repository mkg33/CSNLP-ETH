One update from the server per frame is all that is needed, and your server should be running at a fixed frame rate.
What that is is up to you, but there is no need to go overboard.
Regarding traffic concerns - you want to avoid sending more than 20-30 packets per second per peer.
This creates roughly 0.3 to 0.5 KByte/s of traffic at 60fps and the players have no lag in their perception, but only if the ping is below a certain threshold, because the balls new position needs to be transmitted.
TCP might be practical for a peer to peer game, but even then UDP might be a better choice.
The client should be constantly transitioning between server frame snapshots, this could easily be the topic of a separate question though.
Also cheating is easy with this system and there's a high possibility to go out of sync with a very lossy connection, but who cares about cheating in pong?
You definitely don't want to be "spamming" updates in any direction either.
That way, everybody is consistent locally unless there is some conflict due to different players' interactions.
If not, going peer-to-peer will halve your lag, as it's A<->C instead of A<->B<->C.
-One side opens a server, the other one connects automatically
To keep things smooth on the client, you want to make use of interpolation.
Most games, with RTS probably being the only notable exception, are probably using a client/server architecture.
If so, for fairness in synchronization you may want to make response somewhat laggy for the local player, or what most games do - let the player do whatever locally and then snap back if the server's result diverges from the locally simulated.
The first decision to make in the network code for your game is whether you want a client/server setup of a peer to peer arrangement.
The main advantage being that this arrangement is more fault tolerant and provides more control over what data each client receives.
Client updates should be limited as well, though one per frame will likely be far too much if your client is running at a decent frame rate.
-they are both spamming their paddles x position towards each other @ 60fps or less [UDP]
Basically, UDP handles less for you, which means more effort but also more control over how you deal with faults.
If one peer lags or desynchronizes, everyone must either wait for them to recover or they are simply lost.
Peer to peer allows to send far less data, but requires each peer to fully simulate the world precisely as every other peer does.
You definitely don't want to send updates at a speed faster than framerate, as players won't be able to tell the difference -- indeed, if you only send packets 10 times a second and interpolate/extrapolate the results on the receiving end, most players won't notice a difference.
I have programmed a 2-player-local-network-pong game a few weeks ago, here's how I did it:
UDP is generally the correct choice as well, certainly for any client/server model.
This is a pretty broad question, but I'll try to summarize the important aspects.
One thing to note here, even though you say that one player "is the server", you are best off structuring your code such that they are essentially running a local server and connecting to it as a client.
-the ball is getting simulated independently all the time, which suits the simple ball physics of pong
In the general case, if you send smaller, fewer packets, you will experience (slightly) less latency and a lessened chance of dropped packets.
A 50ms frame (20 FPS) is plenty to get nice smooth game play.
A pong clone is actually a bit tricky, because unlike most games you can't (as a developer) cheat by having one side see a hit and the other not.
As for something generalized, one technique I've heard of but haven't found necessary (may be for action games though) is to keep actions with their true timestamps (receive time - ping/2), and have the server roll back (snap) if an earlier-time event comes in, and then reapply later actions.
The only danger is the ability to 'roll back time' if they fake a laggy connection.
-if the ball flies past a paddle, the player who missed it contacts the other one with an increase score message and the ball is reset [TCP]
-if one side hits the ball they decide about the balls new velocity and position and send that to the other one [TCP]
For Pong the choice I would make is client/server, being that it is an action oriented game.