And in windowed mode, pick your ideal ratio and just use that directly.
At which point you can simply experiment with different nominal world sizes (ie: the size of the camera in world units) and simply select the best one.
So this is things like HUD and UI elements, and the player avatar and anything they are interacting with.
Low priority content is stuff that if it's onscreen then that's good, but if it is offscreen it's no big deal.
On the other hand, if you have a more aerial game like Super Smash Brothers, a taller screen (#2 or #4) would be best.
no sneaky bugs which only occur when running in wide-screen.
Laying out UI/HUD elements can be approached in one of two ways:
:Background graphics and things that are reasonably far away from the avatar.
I'd base my decision on what works best for the game.
Users I think are generally accepting of black bars when presented with full screen content.
Have the game code assume that the world is being rendered in 4:3, and only let your rendering code be aware that there is actually more than that being visible.
If you are trying to be adaptive, and detecting the users ratio via screen resolution and showing as much content as possible, then you have to take account of high and low priority content differently.
Low priority items are easy, you just make sure that the 4:3 viewport is centred on the interesting things, then draw as much low priority stuff as you can to the left or right.
They have the advantage that you always know how much content you are rendering: i.e.
don't have your game code zoom the camera in to take advantage of the extra screen real estate, because then you will have game code acting differently in widescreen vs. not.
Select a compromise aspect ratio (16:10 is a good one, or even 16:11).
your character, enemies your character is directly fighting) should always be kept in the 4:3 viewport.
Assuming you have a UI/HUD which is being superimposed over the top of some 'physical' 2D world, then this is straightforward enough.
I believe TV filming is framed in this way, such that widescreen looks ok (everyone isn't crowded into the middle of the scene), whereas cropping for 4:3 isn't quite as drastic and there's minimal panning.
If you have no compelling reason to make your game "wide" (in which case use approach 3) or narrow (in which case use approach 4), go with a combination of 1 and 2 (or possibly 3 and 4 if you want to hide things off-screen).
Castle Crashers seems to use a bit of #2 and a bit of #3 - you get black bars on a 4:3 screen, and also a very slightly smaller visible area - but you should always have a "safe area" around the edges where you don't put anything vital anyway (for screens like CRT TVs that crop the edges)
I agree with other responders that care should be taken with regard to elements that might be visible on one display but not on another.
High priority content is stuff that the user absolutely has to see onscreen, if it is offscreen the game is failing.
You could frame for an intermediate ratio, and do both cropping and expanding (or bordering) on both normal resolutions.
Well, as a basic bit of advice, on PC I'd say "don't assume your user wants to run full screen".
So strategies 3 and 4 are acceptable, if not ideal.
a game which depends on horizontal speed), a wide aspect ratio with black bars (#3) on narrower aspects would be ideal for highlighting lateral movement.
If the user is on 16:9 give them more content to the side, and if they're on 4:3 give them more content at the top and bottom.
In any case - I find it best to implement it with something like this in your camera class: