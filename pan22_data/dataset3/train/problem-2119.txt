People have autoformatters so they can read it more easily, so they will change it (unless you provide autoformatter settings with your code).
In some cases method chaining improves readability (see this article) but you usually pay close attention to build your interface to be fluent and most APIs are not designed that way.
One of the things that helped me in the past is to revisit code I wrote months ago and try to understand it.
If you plan to chain more functions just use whitespace.
One of the challenges to write readable code is the fact that when you write it, you have all the context in your head.
It will also be a lot easier to debug (or to pinpoint the problem in a stack trace).
The challenge is to write code that you (and others) can understand fast when you do not have the context.
Always go for readability, it makes for easier understanding when going back to your old code and it's a lot easier for someone else to understand what is going on.
Every new line you introduce is a place for another bug.
If I struggled with understanding my own code, I tried to improve it to 'tell the story' better.
Oops I guess this is not only about method chaining any more, though I hope it helps :)
Changed variable names, rearranged methods, extracted code into methods with good names, so the code read like a DSL, like a story.
I also prefer the "data = fillImages(data)" if possible.
The steps taken just "leap out" of the code and the method is easier to read.
Creating temporary variables is sometimes a mess because of naming issues which can lead to creepy bugs.
In your case, method chaining did not improve readability, so I prefer the second version.
Most code that you write will make sense the time you write it.
You can always format v1 like this for more readability: