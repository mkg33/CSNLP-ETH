In case of the diagonals, you do need to calculate from both the left and the right.
You need to understand where those exceptions come from: index out of bounds.
But the calculations from left and right will be the same, so it's enough to do one of them: from left only, for example.
You can further simplify this by cutting out the unnecessary local variables:
And since it's enough to sum from left, you can simplify RowValues accordingly, eliminate the bool right parameter.
You can replace the above code with this single line:
You really don't need an int[3] to store the max values of the row, column, diagonal products.
However, as mentioned earlier, you should check the bounds rather than letting the process end in an index out of bounds exception.
The try-catch for summing columns and diagonals are bad too.
because during these operations there may be exceptions.
The right way to handle these is to check boundaries and thereby eliminate index of bounds exceptions.
The purpose of this code is to ignore the sum of a row if an exception is thrown during calculation:
so all the methods and variables with "sum" should be renamed to "product".
Most notably, the program is about calculating products,
You are calculating products from left, and also from right.
Also, column is misspelled as "collumn" at many places.