You might argue that it's also clearer what the code is doing.
I've tried to use if nested statement but it didn't work for me.
Although your example is fairly trivial to implement with some logic (because the output pattern is linked to the button press count) if you wanted to expand the system to have other inputs or break the pattern then changing a state machine can make life easier.
Actual Python experts could probably make it a lot more elegant with lists and interrupts and whatnot...
I'm working on project with single input multiple output logic.
I'm no Python expert so the following might not actually work as intended but gives a rough idea of how you might implement a state machine for your described system, think of it more as pseudo-code.
The project require two or more led controlled by single button (momentary).
When the button pressed for the second time, LED 1 still on, LED 2 turned on
In addition to the answer given by @codermike I'd point out that the general principle you're looking for is known as a state machine.
Say you wanted to add new "state" between stateOne and stateTwo then you'd write the new function; add a check for it in the main loop (note that the value in the state variable does not have to match the logical state order) and then change the value assigned to state at the end of stateOne to "point" to the new state.
i want to use normal rpi.gpio library, not the tkinter lib, can anyone help me?