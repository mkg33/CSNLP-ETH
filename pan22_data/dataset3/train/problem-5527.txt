I am working on an application that requires a number of different services (web application + database + worker queues, XMPP server for messaging, redis, central authentication via LDAP, etc).
I know that one of the answers is "build your own OpenVPN AS".
I don't want to use the big cloud Providers (AWS, Azure, GCP) for matters of cost.
However, (a) I never done it before and (b) I am under the impression this would mean yet more services to add to this infrastructure.
Hetzner Cloud VM instances do not have any sort of private networking.
For my first attempt at designing the thing, I am estimating that I will need ~15 instances of varying sizes: more RAM/SSD for the database, less so for web server and LDAP, more cores for the worker queues, and so on.
Some of these services (web server, xmpp server) should also have a public IP, but ideally all other services should have all ports closed (including SSH)
One thing I did do before was to connect machines via spiped.
So I am wondering how I can ensure that all those machines can be effectively protected from the public internet.
Is Docker Swarm something that could solve this requirement?
I have limited experience with Docker and Kubernetes, but if I went this route it seems I would end up going to the arms of the big providers, not to mention it would still be yet-another thing to learn and take time from my application development.
A similar (in terms of CPU/RAM/SSD) spec in Hetzner cloud would be ~$430/month.
This is something I am still bootstrapping and GCP pricing calculator put this at ~$5800/month.
So my question is: am I missing some alternative to these two above?
Of course, the difference in price also comes with some difference in features.
This does not give you a private network but at least ensures that only those with the key can connect to your public-facing machines.