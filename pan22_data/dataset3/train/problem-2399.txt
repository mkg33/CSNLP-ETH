Now as a developer, what I would recommend is instead of trying to force them out of the db entirely (especially for the cost to the business during deployments) is instead adopt a policy to require all scripts that produce large updates/deletes/inserts to be required to be reviewed by the db team.
We've had three accidents so far, and i'm sure we'll have more as our security lockdown is still some way off.
Just log every DDL command that goes through, looking at who and when.
This idea that restricting developers from the production db offers any security is a fools belief.
I'd always start with monitoring this type of situation first.
The fact DBA's want to restrict us from doing job is idiotic.
I actually found that most of the people were more receptive to this than I thought, but a few things have been key:
Then you should be able to find out who jumps in to hack data often.
Lock it down soon, but start monitoring it now, to get a picture of how big the problem is.
If it's old and slow they will cringe at being forced to use it.
After that, you should be able to tie things down better.
I've also been trying to do this in smaller increments to make it less disruptive.
I've seen three of my colleagues so far cause significant disruption due to rushed SQL or complacency.
You may find that things aren't quite as bad as it seems.
Look at the ApplicationName and/or HostName fields in the trace.
Start by putting a DDL trigger in place to pick up any schema changes that take place.
This will help you get a field for ad-hoc queries.
You need to be prepared to throw them a bone in other areas such as test in order to ease them out of their ways diplomatically.
As Rob said, log all the DDL going into the db and then should any developers break this rule, report this to management and let them deal with the situtation.
Work out who is pushing most changes out, and get them on board.
Also - put a trace on to pick up what's being run from applications which aren't your proper apps.
All I need to do is drop the production connection string in my debug code of visual studio and off I go and can control anything the application can do.
I'm one of a team of developers that has full production access to servers, and I know I shouldn't have it.
The only thing you need to protect the db from with developers is a poorly written join statement that updates an entire table instead of the 100 records it was supposed to because we suck at writing sql because we can't wait for the day databases don't exist in our lives anymore.
I'm assuming they do, but if they don't that should be step one.
"I need to test this, see if it works" - "Say hello to your new virtual test server."
These people are probably very very set in their ways and it's going to take a lot of support from their superiors to get that changed.
Meet with the lead developers and get their reasons for having production access.
I've been working with the same thing in my company.
"we need to implement changes immediately" - "write a script, I'll review it and run it if it's ok."