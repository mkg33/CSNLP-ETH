The fact that it's static is both an indication and also makes it easy to move it out.
getQuirkHtmlSummary is view logic  (and evidently so is modifier.describeToHtml(sb)), and just as serialization logic, should be moved out of the model class.
If a class has grown organically large, it probably has to many responsibilities.
If you keep moving things out, you can change this:
Or you can lookup loadout rendering strategy at runtime for a given loadout.
So you need to refactor in small steps in order not to break everything.
Because it's abstract, it requires different techniques to be removed.
Serialization is an orthogonal concern and should be moved out of a class whenever possible.
Eventually, instead of loadout.getQuirkHtmlSummary() do a quirksRenderer.render(loadout).
Public methods that do not implement a (necessarily) abstract method from a super type, which need not have intimate knowledge of the private fields, but instead interacts with its class through its public interface; namely a low-cohesion method; is a method that exhibits all tenets of a static method but is not made one.
In this case one such component would be StandardHtmlRenderingStrategy or OmniSomethingHtmlRenderingStrategy.
For example, loadoutXstream seems like some sort of serialization method.
You can construct a Loadout in a factory using components.
Take a look at how I started to change canAddModule method:
Keeping with the static topic, some methods are practically static.