Doing a text search I found that words and random are unused later.
If a variable is only read it is invariant (unchanging) during the loop.
Reading the code and doing some string searching, I have determined what the while-loop reads and writes.
Therefore we can break and reorder these variable declarations like so:
And then get an integer from to n (not including n) like this:
There are seven variables in scope (are accessible) for the rest of main.
Also I rename maxGuess to guessesRemaining and introduce a final variable maxGuesses assigned to 7.
One reason is that a later revision may not realise to add braces when adding another statement to the block.
It is necessary to have consistent and correct (as per style convention) white space.
This is my final version of your program after moving a couple more declarations around.
If a variable is only written it has no effect on the loop behaviour.
I found '-' was used as a placeholder letter in both main and isSolved.
I also thought chars was too generic of a name so I renamed it to incompleteWord.
However, I think this is a good place to stop seeing as this is your first substantial program.
Thus we have reduced the number of variables the loop both reads and writes and this can simplify comprehension.
Final variables cannot be changed, so we know automatically the most the while-loop does with this variable is read it, which it does.
While reading I found the method name doesContain does not suggest its purpose well.
There seems to be quite a bit happening in the while-loop so I want to consider that first.
It is best to keep separate what can be kept separate.
Now the program is well formatted and just by looking at dependencies we have improved the organisation (we did not have to know what the program does).
When updating code with magic literals we are not sure where all we need to make the replacement, especially because there may be different reasons for a particular literal.
Convention on braces vary, but often braces are encouraged for single statement blocks.
This includes vertical alignment (such as indentation) and spacing between and around particular syntax.
I am not opposed to having three blank lines between methods, though I did not do that here.
I think counting down to zero from maxGuess makes more sense than counting up to 7, so I will replace counter with maxGuess.
If you want to know how to add some ASCII art to your program then I suggest Stack Overflow.
Rather, this Q&A service is for suggesting improvements to code which is already working and understood.
A "magic literal" is some literal (such as a string, character, or number) which occurs in one or more places and has an non-obvious and unstated reason for being the value it is.
When reading code with magic literals we are not sure what the code does.
I do not think giving advice or answers on how to implement a program from the abstract is on topic.
Further improvements can come from rethinking some of how the program does its task.
This increases the effort to understand a block of code.
For each variable one must wonder "does this matter later?".
I took a look at "x depends on y" written as x â‡’ y and came up with this.
Lets discover the purpose of each variable which is both read and written.
Then looking down a bit further there is a for-loop which only depends on chars, so we can pull that up.
Note that I am not afraid to add extra blank lines to separate structures.