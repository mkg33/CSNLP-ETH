I'm writing some crypto code, and as part of it, we have to implement modular exponentiation.
I have it working, both with the right-to-left binary method and with the Montgomery formula.
I'm almost certain the running time is due to the amount of time the actual modExp functon calls monPro.
Here is the code, if anyone can see anything that would speed it up I'd be delighted to hear it.
I thought it would be faster, so I'm guessing it's my implementation - three different function calls are used to work it out.
This is needed to use the final function, modExp -
First I needed a function to get the values for Extended Euclid -
This works but calculates value I never need - all I use is values[1] but to get it I need to calculate the others, I think?
Euclid is only called once so I can't see that being the huge deal, I could be wrong.
PS - I'm not allowed use the BigInteger function modPow.
This is extremely frustrating, as I worked out the right-to-left in an afternoon, but it's taken me three days solid work to figure out the Montgomery.
Anyway, any tips or pointers much appreciated, this has turned out to be an extremely frustrating exercise (optimize for three days and slow it down by a factor of three....booooooo!)
While they both work, the Montgomery calculations take three times longer than the right-to-left binary method.