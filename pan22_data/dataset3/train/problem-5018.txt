The first is that the current level is completely built on just the level below and nothing else.
(CO2 emissions and all that for the "politically correct" valuation of a programming solution.)
There is little difference between hardware and software.
But, I find a short introduction to digital logic, along with some practice exercises to be useful, provided that the students take away the right lesson.
You might be working in a cross functional team, and need to speak to hardware folks (or worse, trying to interpret a slightly incomplete specification).
Now, you can design state machines implicitly without knowing that you did.
You don't need to think about gates as a C programmer.
I guess you're unlikely to end up implementing CPU architectures, but other people on your course might.
Nor do you need to know how the Java tools were constructed and whether they are expressed in Java, or C, or assembler.
"Agent" or "behavior"--also probably a state machine.
The next level up (perhaps) is machine language (actually microcode these days, but that is just another level).
Some courses might look to be aimed at people who can turn out generic code using whichever language was hot 5 years ago, and it may well be that the digital logic module is unchanged since the 1980's - but that doesn't mean it is irrelevant.
My own preference would be to make it a part of a course unless the entire program is heavy on engineering.
However, the big problem is that without a digital logic course you likely won't understand "state machines" and that's a REALLY big deal.
Well, you would be amazed at the number of times I have reviewed code with a complex condition or nested-if statements where some condition got missed that I flagged by drawing a simple truth table.
The other big idea is that as you go up the stack, the ability to express new abstractions increases.
But some study of digital logic and gates gives you a base on which this is built.
"Parser" or "regular expression"--ayup, state machine.
Once you reach high level languages you get abstractions for things like functions and objects.
You get to define and name complex things and program in terms of those complex things rather than gates.
Assuming your course is generic, there are a wide range of career choices that follow the course.
Assembler language gives abstractions of simple operations, but little else.
Above that is assembler language, then, perhaps something like C. But each level is complete and consistent.
The more a CS student learns a feel for this physical electronic basis, the less likely they might be to waste time and energy (and thus money) when implementing some software solution.
More important, for something like programming languages, is that each level is conceptually complete and completely consistent.
Complete means that in order to program you can think at any given level and don't need to consider other things - even the lower levels.
But, it's often a lot easier to deal with state machines when you know what you built, can name it, communicate about it, and use tools specifically built to deal with it.
If you hear the word "protocol", there is a state machine underneath somewhere.
Digital logic is usually taken as the lowest level in this stack - gates.
And state machines pervade quite a lot of programming.
Gates and machine language have no abstraction facilities.
Developer - Full Stack might be hot in 2019, but there are plenty of other fields which need a different focus, are not electronics or standard cell design, but benefit from closer understanding of the hardware.
If you have "concurrency", there is a state machine.
Adding a bit of physics to that we can build actual machines that act the way the math says the gates should behave.
I hope your course is teaching you skills which will be relevant if you decide to pick up whatever new technology comes along in 10 years time.
You don't say if this is a full course in digital logic or just a part of another course.
You might be making a trade-off between doing work on a CPU, GPU, NN, or FPGA.
The choice of what goes where is a balance between cost and speed, but where ever it goes it is just logic: if you implement it in Python, Câ™¯, assembler, HTML, electronics, or mechanical.
This means that you can, as a Java programmer, write any conceivable program without thinking about how Java was implemented.
From that we can build more complex things - adders.
Each level gives you a mental model that you can work with and the model won't desert you.
Consistent means that you won't find contradictory things at any level.
The level below was sufficient in every way to define the current level.
Those elements use electricity, generate heat, take up volume, and require propagation time to operate and interconnect.
The course developer doesn't usually know in advance what field you will want to work in, and will usually be trying to avoid closing down your future options (unless the course is tightly focused on training a specific work task).
The lesson that I aim for in teaching Programming Languages and Computers Systems is that a complex system can be properly designed as a series of levels (a stack) in which each level has two properties.
The implementation of any realistic software system is based on electronic elements.