(BTW, consider making use of the generics: public <T> void reOrder(List<T> list, T current) {...)
If speed is really a practical problem for you, then another thing you should check, is if you really need to reorder the actual list.
There are ways just to create a "view" of the list in the desired order which would basically take virtually no additional time (especially it would be independently from the length of the list) to create and use.
If you have a "better" or more optimized why to get the index, other than the "left to right" search of indexOf (such as a binary search, or a map), then that would be a better solution.
There is also a Java API function that does this (Collections.rotate), but it requires the index of the "current" element.
In any case, using the current item's index instead of the item itself is something you should consider (depending on the the architecture of your project), because it generally not a good idea to have to search for the index of an item every time you do something with the list.
The first thing you need to do is define what you mean with "best".
The first one unecessarily removes the "current" item und re-adds it, the second one uses indexOf, thus indirectly has two loops, and finally the third one makes a copy of the list, which is even slower.
When using "low level" removing/adding and modification of the original list, I guess I'd do it like this (untested):