This is especially usedful when I started calling some library routines I had and those calls got rather deep.
Using the calls becomes as easy as sprinkling these calls around:
The callCounter lets me keep track of my "updates call stack".
My idea has been to not worry about whether I've call disable/enable, but only to make sure those calls are paired around any code that requires that protection.
In developing applications with multiple modules and classes, I'm often needing to disable screen updates and such but without extremely careful planning I used to always step on my own toes.
So I developed two routines that allow me to disable and enable Excel application level updates and give me enough tracking debug.
You can turn this into a compiler directive flag if you feel you need a (small) runtime performance boost.
I'm uncertain of the efficiencies in a single wrapper like this.
Also, I can go into the Immediate window at any time and type EnableUpdates(forceZero=True) and get back to a known state manually.
As you can see, I have a private module flag to turn on debug messages (DEBUG_MODE) if I need them and turn them off for production.
At the module level, I define a structure and a private variable to hold any previous state information:
Then when I want to disable application updates, I call: