I think it will be more sensible to run the unit tests on the Pi itself.
Here's an example that checks if a certain environment variable is set or not.
In this case, we mock out that functionality to trick the class that setup_gpio() ran correctly, and we get a full blown object, even if not on a RPi.
So mocking is handy for doing things where you can fake out certain calls (typically ones that are called from within other methods).
In the terminal window within intelliJ, SSH (using Putty) to the Pi, and exec your code on the Pi directly.
Very useful when doing Continuous Integration on many systems, such as the CPAN Testers automated testing.
Although I don't use Python on my RPis, I do use techniques such as these in the Perl distributions I write.
So, how can I include this package, or is there a known better concept?
If I try to import RPi.GPIO from GPIOi receive the message No module named GPIO.
Doing things this way also allows you do to some of your coding on a normal workstation that doesn't require the Pi, while being able to run at least a portion of your test suite before you fetch the new code onto the Pi and run it completely there.
This allows you to code in your IDE, but work on and execute code on the Pi itself.
In both cases above, that allows me to have a nice test suite that covers many aspects of the software on non-Pi systems.
To do this, you have to instruct the test to 'skip' if it's only to be run on the Pi, and for ones that don't require specific Pi functionality directly, you can use something like mock to mock out the GPIO calls.
Obviously if you're not on a Pi board, it'll fail horribly.
If not, it skips all tests in the current unit test file:
Now, the above example is useful for cases where you need to perform tests that don't explicitly require a Pi board, but need an object.
During the development process I wanna use some unit tests to keep a good quality of my code.
The time involved in stubbing or simulating the calls would probably be better spent on producing the unit tests.
If it is set, we're on a Pi board, so we can run natively with the original functions:
I often have a whole slew of tests for my code that can run on any platform, then a bunch that can only run on the Pi.
The constructor, new() calls setup_gpio() inherently.
What I often do (from Linux not Windows but the premise is the same), is set up a share (sshfs in my case, but Samba works equally well) that shares the repository/code working directory, and mount that into Windows.
If the env var isn't set, it'll mock out certain functions/methods.
Here's an example that does the same thing, but uses my Mock::Sub Perl distribution (it's equivalent to Python's 'Mock').