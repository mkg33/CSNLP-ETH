Also for better or for worth, Foreign Keys often get removed to speed up systems and can't be used on tables that are loaded in the "wrong" order from file.
Such a tool could also usefully make use of the convention of naming Foreign Keys columns by the “parent” table name and columns with the same name in both the parent/child table etc.
Also a programmer reading the SQL would not necessarily know what foreign keys were currently defined for the two tables, and, would need to examine the database schema to work out what the query was doing.
1 - in theory you can join tables on arbitrary columns from the two tables.
With SQL Server (which lacks support for NATURAL JOIN), I use SQL Prompt in Management Studio: when writing an INNER JOIN its InteliSense suggests ON clauses based on both common attribute names and foreign keys and I find it very useful.
I've no great desire to see a new (standard) SQL join type for this, though.
2 - There are different types of joins (left, righ, inner) - Inner Joins is only 1 of them.
Foreign Keys and Foreign Key constraints came later and are essentially an optimization for "transaction" style applications.
Now if I join these tables, I'll have to do something like this:
Although your suggestion is not quite as worthy, it seems a reasonable one.
Standard SQL already has such a feature, known as NATURAL JOIN, and has been implemented in mySQL.
In summary your suggestion is interesting and could be implemented either as part of the standard or as a stored procedure (it would default to an Inner Join).
mysql, postgres, mssql) use fk and pk combinations only to constrain changes to data, but they are rarely natively used to automatically select columns to join (like natural join does with names).
However, many DBMS don't seem to implement something like this.
Remember that SQL is like a programming language it does not understand what information is inside the columns of course and names, to SQL, don't mean much in this regards.
Relational databases have come a long way since then, and there primary use as the persistence layer for transactional systems was not what CODD et.
However, I already defined using my keys that table1.a references to table2.b, so it seems to me that it shouldn't be to hard to make a DBMS system automatically use table1.a and table2.b as the join columns, such that one can simply use:
SQL and Relational Theory: How to Write Accurate SQL Code By C. J.
The comparison is somewhat clearer if you think of a 4th generation language vs. a 3rd generation language.
If you've already defined a relationship between 2 tables with a pk/fk, why can't the database figure out that if I join those tables I want to join them on the pk/fk columns?
You can the edit the query if the tool got it wrong and save a completely defined query.
table1 one has a foreign key on column a, which references to the primary key on table2, the column b.
However the ANSI standards body for all its conflicting goals  and vendor politics has always striven to preserve "mathematically provable" properties of SQL.
If you allowed the database to infer the join properties from "hidden" foreign key data you would lose this property (consider the ambiguity if there was more than one set of foreign keys defined).
for a given set of data and a given query there is always a single correct answer.
(My wife still can’t understand the difference between Management Studio and Sql Server and talks about starting sql server when she starts up management studio!)
Relational databases were originally conceived as a method of applying complex queries on sets of data in a way that was mathematically provable using relational algebra.
Most database also don’t have a good set of Foreign Keys that cover all possible joins you are likely to want  do.
3 - SQL standard may be guided by the principle of being a lower-level language that allows higher level dialects to form intelligence using it.
In fact, one tool I have used, IEF, allowed you to write something like this:
There are many reasons way the database can’t safely do this, including the fact that add/removing Foreign Keys will change the meaning of pre-written queries including queries in the source code of the application.
However there is no reason why a query design tool or the text editor can’t auto complete a join with the help of Foreign Keys in the same way as they give you intellisense on column name.