Once this is done, the multiple if statements become a bit shorter and easier to read, although at some possible expense in clarity.
If you'd like to reduce the repetition, the way to do that would be to create subfunctions such as this:
With that said, it seems to me that the first fun() version is both clear and effective in that it avoids the needless overhead of computing conditions that don't need to be computed, and is sufficiently clear about the results of each predicate.
If the predicates and functions are dealing solely with integers it doesn't much matter, but if they are dealing with larger items, and particularly objects with constructors and destructors, it would be helpful to use references and const as much as possible to avoid useless object copies.
Your gun() version separates the predicates from the actions using an intermediary Triple and while it produces the same result, it makes the job of interpreting the code (for a human) a little bit harder.
It seems to me that the primary role of the programmer is to write clear and correct code and that it's largely the job of the compiler to turn that into efficient machine code.
After looking in more detail to the assembler output, I think this is one of the very rare cases where the use of goto might actually be warranted (which is what the compiler is reducing the original code to):