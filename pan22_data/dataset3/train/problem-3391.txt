The newest "technology" I teach is actually the math (syntactic methods of semantics popularized around 1995).
Such work may not be rewarded, as universities tend to focus their rewards on research.
I don't have to worry about whether I am teaching the "right" version of Python.
To avoid this trap, I had to do an enormous amount of intellectual work.
Many students are short-term optimizers, and they want something they believe they can use.
A final trap for educators: in the US at least, courses focused on timeless skills are much less popular than courses focused on currently fashionable technology.
I am confident that in thirty years, these things will still be important.
Educators have to agree that's we're teaching skills, not technology.
I don't have to worry about teaching currently fashionable languages like Swift, Rust, or Go.
I know that the important things are functions, types, and objects (maybe also modules).
In my own area, programming languages, I don't have to speculate.
And I can teach these things without using the latest technologies: Scheme, ML, and Smalltalk were all known and usable in 1980.
What are the key questions or skills that have lasting value?
Reaching that agreement is harder than you might think.