since I know what they will be running via command line.
You just need a remote script that forks and writes a PID file.
1) Run a shell script on remote machine 1,2,and 3 (all Linux) from Windows machine.
See also the PS help file info regarding parallel processes and Runspaces.
But there are lots of articles regarding PS and Plink use cases, even for Cisco switches.
That & (ampersand) means - Execute string as command.
plink -i <my_private_key> user@machineX.com -t "bash <script_loc> args &"
If you are in one of the PS consoles, you have to provide a execution command, and for external .exe, you should get into the habit of fully qualifying the exe.
cmd /c start plink -i <my_private_key> user@machineX.com -t ""bash <script_loc> args ""&""""
For example, here it the way I do this successfully to all my Linux boxes.
Basically that same thing you are doing by calling cmd.exe start, but without the additional terminal window.
When I do that, the expected process does not get started.
but that means it will open a new terminal and upon logging off Windows machine, these will be terminated.
If you want stuff to run in the background that is what PS jobs are for.
My goal is to remotely start these scripts and keep them running as background processes or daemons.
This is not a PS issue, but a how to run and exe in PS.
And point of note, PS has an SSH module, so, you don't have to use Plink specifically to interop with Linux clients.
I do plink to Linux boxes daily without issue, but as you've noted in your second command and start command issue.
I confirmed that by remote logging into machineX(1,2,or3) and typing:
2) On my Windows machine I have plink which I am using in the following way:
If you are running plink, then you are not using PS remoting to do this, as you are just running a plink command one of the PS hosts (console / ISE / VSCode).
I haven't tried this exact one, but here's an example that I found by a 0.5-minute Google-session.
What client you use ( plink, putty, ssh, or what ever ) won't matter.