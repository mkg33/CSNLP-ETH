Chroot adds a lot of security benefits and you can only break it if you are root.
If, however, you get an exploitable kernel bug (or just a root hole if not grsec or BSD jails) inside the chroot, then the whole system is owned.
You can't rely on a single method to secure given resource.
So yes, it adds a security layer, if used correctly.
One could argue that if I had been able to do so, I would find great interest in it but I still haven't.
Virtual machines also have the huge advantage of being really easy to backup/migrate which chroots do not have.
Furthermore, chrooting gives you more control over an application you're running.
Not so if you run a real virtualizer (such as VMWare, but NOT BSD jails.
I think that isolating your services in virtual machines (on Xen of course, but VMWare will work too if you insist :-P ) is a much better idea considering the computing power available these days.
Plus, chroot provides an application isolation, while virtualization provide operating system separation.
So you are raising the bar for what an attacker needs to do.
The point is that quite often securing some resources means placing so many obstacles on intruder's way to force him to give up before reaching the target.
You also have comprehensive interface for managing VMs, which you definently don't have for chroots.
They don't help since they use the same kernel for all "systems").
You can restrict file system resources this app have access to.
So you can run, for example, apache inside chroot on a virtual machine.
I find chroots to be way to complicated and have never been able to install one.