However, it is possible to think of very much the same process as a backward deduction.
For a paper describing the technique, see Deductive and inductive synthesis of equational programs (PDF).
Since equational reasoning is often bidirectional, you would see very similar steps in deriving the new program.
While the new facts are quite clearly facts, nothing guarantees that they constitute a program.
However, my efforts to apply domain theory techniques to do these kinds of transformations did not bear fruit.
When you use this "correct" method, you reason about termination while introducing recursion, and always derive a correct program.
We think of the old program as a specification, and derive a new program that satisfies the specification.
The standard presentation of program transformation ideas is unsound, quite unfortunately.
This was done for first-order "equational" programs, but very similar ideas should be applicable to terminating functional programs.
The problem you have spotted is this naive presentation of the program transformation ideas.
However, the meaning of these steps is opposite to what the naive methods imply.
They usually think of program transformation as forward deduction.
It might still be possible, but I haven't seen anything written on it.
If you are interested in non-terminating programs, I think you could use coinduction techniques (an off-the-cuff intuition).
Using equational reasoning, you can deduce new facts from the old program, and lo and behold, it gives a better program!