There must be someone who thought of providing some kind of framework or an abstract solution to this kind of problems.
More specifically, I would like to know how to enforce some logical conditioning on the execution's order, while remembering, that the user's input cannot be foreseen.
What if we add a constraint that only every second click should be executed?
What is the proper way of handling synchronization between GUI animations' execution order and the user's dynamic input?
My point being, these problems can appear in various ways.
I would assume a simple FIFO methodology here where threads would register themselves in some ordered queue and be allowed to enter the critical code only on their turn would be sufficient.
A question: If the Coordinates can be swiped only after the animation is done, meaning each click activates a thread that holds all other threads(clicks that came after) until it is done so it can swipe the coordinates so the next thread's neighbor check is based on correct data, how would it be possible to allow the "shuffle option" without creating an entirely different execution path, i.e., by reusing most of the already written code and leveraging the Java & JavaFX's strengths?