But I'm just throwing this spatial information away.
value of 432 different functions along the circumference of a circle).
I'm attempting to use a neural network as a kind of interpolator for a high-dimensional function.
Rather than trying to predict each value explicitly, you could pick a parametric function that you think might be expressive enough to describe your target function (for example, a polynomial of order 6), and get your network to learn the parameters of that polynomial that give you a minimum loss.
But I'm concerned that with these fully-connected layers, I'm treating the 5184 outputs as unrelated numbers, completely disjointed from one another.
We have a dataset of past runs of this physical model that we can now use as the basis for interpolation.
For this example, it's only sampled with 12 points (though in production we will be sampling it more finely, perhaps 36 points around a circle).
The output we're trying to estimate consists of the shape of 432 periodic functions (i.e.
4) calculate a loss (like mean squared error) based on the difference between the function predictions and the targets.
Is there another kind of layer which could take advantage of this spatial relationship, and thus lend itself better to this kind of regression?
2) output a set of values that you treat as parameters to your function
We're doing this to circumvent the need for a physical model that calculates this function exactly, but is expensive to run.
We know that the output is uniquely determined by the 28 input values; there's no noise.
For example, here is one of these periodic functions.
As illustrated above, this works okay (even before optimizing hyperparameters).
from spatial information to distinct values, I would consider convolution layers (perhaps with a periodic boundary).
Using a function will (1) restrict the space of possible outputs, and (2) make nearby outputs be self-similar.
3) for each target point, compare it to the predicted value from your function
My current neural network Keras implementation is:
Since your function is periodic you might use a more cycle-based basis set, like linear combinations of sine waves.
In reality, there's some spatial relationship between the 12 samples describing each of the 432 underlying functions in the output.