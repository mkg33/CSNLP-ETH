Adjusting the transformation is generally as simple as applying your own corrective transformation on import (or writing your own exporter), so once you know it's there, it's not hard to work with.
So we have a situation here where in one case - 3D modelling programs - one standard was chosen, but in another - 3D APIs - a different standard was chosen, and that's just the way things evolved historically.
: http://docs.autodesk.com/3DSMAX/15/ENU/3ds-Max-Help/index.html?url=files/GUID-99C4C2C1-0971-48E2-8266-B911A3315554.htm,topicNumber=d30e55885
There isn't really a universally standard coordinate system.
3D modelling programs would have evolved from plotting out a floorplan on a sheet of paper, where Z is naturally up; the designers of 3D APIs just chose differently.
The transforms you give in your question just convert the co-ordinate system from that used in 3D APIs (Y up, Z depth) to that used by 3D Studio Max.
I have worked on games and with tools, across all of them, have used almost every possible combination of systems.
Z going up is a standard co-ordinate system for modelling packages since the early days when 3D Studio Max was the de-facto tool used by everyone, and was an originator of this standard.
It's worth adding that there is at least one modelling program that uses a Y-up system, and that this program is documented as causing confusion for users of other programs: SolidWorks.
It's still present and documented in modern versions, e.g.
There's actually no well-defined Cartesian co-ordinate system for 3D; you just get to pick which direction each of the 3 axes represents according to the requirements of your own use case.
I think the only ones I have no worked with in practice are "+X is up" and "-X is up."
So neither standard should be seen as correct or incorrect.
It's pretty much impossible to say why a particular exporter for a particular format for a particular tool operates in the way it does other than to ask the author, since it comes down to that author's preference.
That's an unfortunate state of affairs, but it's inevitable when technology from different sources evolves over an extended period of time and with no "watchdog" body to enforce conformity.
I would say it's a bit odd that the importers for a particular modeling tool like Blender don't all default to exporting in Blender's coordinate system, but it is true that most of Blender's exporters were community-sourced (last time I used it), and so there was not necessarily a lot of design oversight on the functionality of each importer and their relative behavior.