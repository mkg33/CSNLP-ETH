a. verify what you think sshd is supposed to be doing
c. start a verbose 'test' version of the server you can live monitor
d. start a verbose 'test' client connection you can live monitor
c. start a verbose 'test' version of the server you can live monitor
do not disable password authentication until you are sure that the
You should now have enough information in either the server's log files, or the client's connection screen to isolate your problem.
d. start a verbose 'test' client connection you can live monitor
Although your problem may have already been solved by other answeres, I've locked myself out of enough machines from not validating sshd_config changes before signing off so have come up with the below process that might be useful for future debugging of sshd config changes:
This just clears things out so we verify what we think we're changing (not necessarily whether it is correct or not.)
This keeps your existing, working session active, but gives you another instance of sshd to verify your new configuration changes.
Run the ssh client connection in verbose mode to display on your screen more information that might lead you to better debugging your error.
Review the sshd configuration file without all the commentary with something like the below (assuming sshd_config is the correct file and in /etc/ssh)
If your home directory is encrypted sshd will not have access to ~/.ssh/authorized_keys..
a. verify what you think sshd is supposed to be doing
Everything is set up like my other server, but it seems like the server is just ignoring my efforts.
The solution generally comes down to file permissions (as shown by Magnar and setatakahashi)
DO NOT DISCONNECT an active ssh connection until AFTER testing has verified behaviour is as you expect.
SSHD is now running in the foreground to a user-defined port (9999 in our example.)
and pushing a lot of noisy debug information you can track in /var/log/authlog (or possibly /var/log/auth.log depending on your OS.)