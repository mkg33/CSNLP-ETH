operator<< may be simplified and funkyfied a little bit:
Note: std::make_ostream_joiner and std::ostream_joiner<T> are C++17 library additions.
If your intent is to just output a new line character, then be explicit.
When working with templated types, be careful with assumptions.
For in-parameters, pass cheaply-copied types by value and others by reference to const.
So pass the parameter by const reference to avoid the copy.
But sometimes you can move an object into a list and save the cost of a copy.
Spacing may not have a syntactic meaning to the compilers, but they do have syntactic meaning for readers.
Use std::observer_ptr<T> (C++17 library feature) or a raw pointer for non-owning pointers.
Consider having an utility private method that scans from the list and returns the linked list node that contains the given datum.
Same as earlier, prefer passing templated types of unknown size by reference to const.
Prefer in-class initializers to member initializers in constructors for constant initializers.
By defining constants in-class, you make it explicit that members will always default to a value unless assigned to.
The code below is my implementation of Templated Doubly Linked List in C++.
When providing a streaming interface, prefer including <iosfwd> instead of <iostream> to avoid injecting the statically-constructed default streams into every translation unit that includes your library code.
If someone were to pass a buffered stream to this function, the flushing can wreak havoc.
Use std::unique_ptr<T> when you need to represent single-ownership.
So the list always has one node (the sentinel can not be deleted).
Obey the rule of five and be aware how the default behavior interacts with your owned resources.
Also if you add a destructor it will probably crash on a double delete.
const-correctness allows your code to be precisely state the design intent and allows accidental changes to the observable state to be caught at compile time.
If a class has a raw pointer (T*), consider whether it might be owning.
When copying is cheap (doubles), nothing beats the simplicity and safety of passing by value.
But sice this is a templated class the data type can be anything.
I think that printing to standard output from within algorithms/data structures should be omitted.
Thus it will leak unless you manually clean the object.
If a class manages a resource, define a destructor.
std::endl is a stream manipulator that outputs a new line and flushes the stream.
Think what happens if your friend uses your list: when he proceeds to deleting many elements from a large list, he will be overwhelmed with all the output and will waste many CPU cycles while printing to standard output.
Spacing is useful for differentiating and emphasizing constructs.
Apply the container requirements to maximize reusability with existing libraries.
Then you make the list circular so the head points to the tail and the tail points back at the tail.
This makes the code much simpler to read and write.
Users will be able to reuse your container with standard library code (non-member std::begin, std::end, std::empty, std::size, etc).
Don't rely on users manually calling a function to free resources.
Surrounding an operator with spaces is typically seen with binary operators ( +, -, ==, <, etc).
If you define a destructor, you probably need to define or suppress copy/move operations.
When T is a built-in type, what is the value stored by the member data when node is default-constructed?
These methods work well as long as the class does not have "Owned RAW pointers".
Next, you will need another utility method that receives a linked list node and unlinks it from the list:
I would be much obliged if you review my code and give me pointers on where and how I can improve the code.
This is likely the result of dumping your library code and test driver into the same file, but #include <iostream> results in std::cout << std::endl; successfully being compiled when you actually meant out << '\n'.
Note that checking of tail is omitted since it is too nullptr when head is nullptr.
This avoids a copy when you pass the parameter to the function.
When they data type is an integer this is not a problem.
As a result when you pass by value you generate a copy of the object.
Iterators will also allow your code to interface easily with other libraries like the C++ standard library, boost, etc.
As a result when you make copies of the object you will get unexpected results.
It's up to you and this is an opinion, but I would recommend that you be mindful of the spacing.
You can write your own infix iterator if you want to use it now instead of waiting.
When you don't know the size or are not using an optimization technique (like copying inputs), prefer to pass by reference to const.
Use the same method names (in this case empty() instead of is_empty() and type definitions required by the C++ standard.
To put something in the list you still need to copy it into the node.