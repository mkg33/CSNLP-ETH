or using spring configuration xmls, or annotations, or some other DI framework.
I assume you know what you are doing by creating a Future and immediately calling get.
Create your component interface, You can name it according to how it does its work, it that's what sets this implementation apart:
", in general if a property is static it also needs to be final.
Static properties increases the coupling of component.
However, having a single object shared across multiple objects is not a reason (excuse) to use static properties.
Concretely: first write the interface you need, then write an implementation.
For example above component can be constructed as below, (obtained by moving the rest of the code you supplied):
Do not swallow exceptions, printStackTrace is not proper exception handling.
Create your component interface, name it according to what it does, not how it does it:
Return early from a method (getData()), do not contort your method's body to make it have a single return.
Code for using an object does not belong in that object.
In other words; if it is not a constant, it need not be static either.
Spring framework libraries are designed to be used that way.
Do not use local variables unnecessarily, it impedes readability.
Object construction and wire-up is such a case of use.
Especially if you are using Spring you should use dependency injection.
Because an object should not constrain how itself is used.