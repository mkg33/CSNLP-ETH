You'd have to rewrite your code, and for a possible new application you wouldn't be able to copy existing code.
The beauty of prepared statements is that you can also easily execute them repeatedly, with new parameter values.
With prepared, parameterized statements you don't have to worry about escaping the correct characters anymore — PDO (or, if the driver supports it natively, the database driver) will escape the parameter values you supply for you.
Now, I'm sure, for your application, this might (currently) be irrelevant, but your code is not very flexible or portable.
Consider this example (connection handle creation omitted for brevity):
Let me give you a short introductory example of how you could implement SQL-injection prevention with PDO:
and/or perfectly valid characters such as --, " and '.
What you have now, prevents your users from submitting perfectly valid English words such as select, update, etc.
You'd really be wise to implement prepared, parameterized  statements by using PDO, instead of trying to prevent your users from entering possible SQL keywords and characters.
What happens if your current application, or another future application needs to accept these words?
This is not a constructive way to protect your scripts from SQL injection — the objective of SQL-injection prevention should not be to disallow characters or words, but to escape characters.
More importantly though, your current code is probably not elaborate enough to mitigate all possible attack vectors.