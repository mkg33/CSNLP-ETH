and then change the DNS records when one line goes down, and back when it comes up.
Your staff are used to being able to access your servers quickly, and want to keep it that way,  but to eliminate your single point of failure, you need another server.
This would only really work for new connections and people who don't bookmark the www2 or www3 and would be subject to latency, and a million other ifs that makes this a bad solution, although a potentially workable one.
However, as an option because of your high local bandwidth requirements, in many places, you can do point to point metro ethernet.
The term "data center", in my mind, conjures images of server rooms with ample bandwidth coming in from one or more sources.
In a cloud scenario, the redundancy is built in, so you don't have to worry if one or more links go down...
A previous poster is essentially correct: the only way to get true redundancy is to get your own IP block and do your own routing, which a Verizon FIOS connection will not let you do.
I’m also thinking you could pay for hosting somewhere and have extra URLs set up.
The bottom line of the connectivity thing is this: If your application means that much to you, it's worth investing the money in doing it the right way.
If you insist on hosting the servers from your office, you'll need carrier-class IP transit and routing.
Trust me, there's no point doing this over "FiOS" or a jumped-up ADSL line.
You can have any 2 of the three, but not all of them.
When external clients go to www.yoursite.com, you would have an app on your remote hosting site check if www2 was up.
Most of the big players offer it (AT&T, Verizon, etc) and if nothing else it’s at least worth getting pricing on, even if you're not interested.
Though, I can only speculate about this as we do not know more details about the implementation -- where the data lives vs. the application, etc.
I don't know whether your FiOS quote is contended bandwidth, but you're unlikely to get anywhere near 50Mbit.
You could spend a fortune on getting this working in your office, get a transit provider to give you a leased line.
If you attempt to optimize your application, you might find that you can get similar performance over diverse WAN links, and are able to shove the entire application onto a cloud environment, such as Amazon's EC2.
To me, using words like "data center" and "FIOS / T1" in the same sentence is nonsensical.
They can worry about the bandwidth that you can't afford.
This would let you go from your office to a data center and be much cheaper than paying for external bandwidth at the data center.
The other option is to set a low Time to Live (TTL) on your DNS records (maybe 5 mins?)
Gzip everything you can, and install a reverse-proxy to cache as much data as possible.
Like most people have said, the real solution is colocation.
Ecassa makes some relatively inexpensive load balance/failover devices.
You'll need a pair (for true High Availability) of good routers, firewalls, switches to begin with.
The real solution, IMHO, is to put a server somewhere reliable.
And depending on which provider you would choose, it may be cheaper to host the site outside rather than try to bring in the bandwidth / redundancy you desire.
It also sounds like you want cheap, good and reliable.
Ok, so as i'm reading this, you've got an office, which houses your staff, and a server (or 2+).
You can either rent a server from someone who's willing to do this for you, or buy a server and stick it somewhere that will provide this for you.
The connectivity itself might have a high OPEX, but the CAPEX for the routing hardware will be expensive too.
With that said, if said application is of such importance, perhaps it should be hosted in a cloud based solution -- or at least externally?
www.yoursite.com, www2.yoursite.com (fios), www3.yoursite.com (backup T1).
Also shift all the external media, Images, CSS and javascript type stuff to a CDN.
Cost cutting may seem like a bright idea now, but will come back to bite you in the ass.