I then iterated over input array and added elements meeting criteria to ArrayList.
Despite deprecating APIs since version 1.1, they have yet to cut a thing.
I could've used toArray and then function would - instead of having side effect - return an array, which I'd then have to print in main, iterating over it.
I think similar thing can be done with a StringBuffer and were you to process something more text-oriented, that would be better choice.
First... choose the right problem or choose what you want them to learn
So is anything that has decent FP features (JS can be argued so).
FP works on streams and pipelines (data flows, and while it does, we do things).
Then I filter the stream and using forEach I on the fly create an IntConsumer that just prints the value.
So, yes, Scheme (FP language) is awesome for your problem.
Also, the problem you have (filtering data) is VERY FP friendly.
I build a java.util.Stream with Stream.of(input array).
Pure Java, without Apache Commons, Javaslang, Lambdas etc.
It might look simpler and be 1-2 lines terser, but it's less memory efficient.
available in Java 7, so you may be able to show same code with it.
I do so under the premise that you want your students not just learn "pure Java 7" (ain't best idea neither commercially nor academically, nor will it make them greater programmers).
Filtering is FP-concept, FP-friendly languages or strict FP languages are  therefore better.
This is not "for fun", but because there was need for it.
There's a library that tries to make lambdas (and perhaps streams?)
Java at it's inception targeted C++ people, who wrote programs iteratively (for loops, step-by-step instructions to solve problems).
First proposition for you, uses streams, introduced in Java 8.
Among mainstream languages none treat "backward compatibility" so seriously as Java does.
FP languages among first operations have map and filter.
forEach performs an action that you define on every stream element.
If you choose examples like that and want to work with Java, work with Java Collections, libraries geared towards filtering/collections/data pipelines and Java 8 that introduces Lambdas.
Let me first question your assumptions (pure Java 7, no "extra" libraries and array filtering).