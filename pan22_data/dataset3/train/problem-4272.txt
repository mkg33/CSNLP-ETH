the matches for that moment in time and if we got one, we append to the
First of all the quantities global sounds unnecessary.
(Unfortunately there's not much of an explanation of why this function does what it does.)
â€¦ is verbose, and it also happens to be wrong: you swapped hour and day.
Aside from the fact that tuples are immutable and lists are mutable, what's the difference?
The way quantity is updated can be written much more concisely by
Now just another quick suggestion is to use destructuring in the inner
each moment and at the same time updating the numbers for that bucket,
This function definitely needs to have a docstring, as it's not obvious what it does.
For each of those minutes, you reexamine the entire data set!
Given that there's no explanation of what the code is supposed to do I'm
4320 elements long, while the scores list is likely much shorter -
The process is thus: accumulate entries into buckets, one bucket for
That can be written much better in terms of sorting (the timestamps) and
A nitpick I have is that each measurement and result would be more appropriate as a tuple rather than a list.
cleared at the start and the value is returned from the function too,
However it's immediately a concern that the way the iterations are set
normal sort method on a list isn't sufficient to sort the list in a
An n-tuple, on the other hand, consists of a fixed number of elements, possibly of different types, like your (stage, time) inputs and your (day, hour, minute, sleep_per_minute) outputs.
Now if you want, you can still use yield instead of accumulating the
Fundamentally, the task is to group the readings by the minute, then take find the proportion of readings within that minute that are S or R.  You should be using itertools.groupby() and statistics.mean().
(The caller has the option to make a list, if needed.)
That is, it can yield the per-minute summaries rather than building a list of the entire result set.
That means, I think, that you're looking for all timestamps in the list,
then at the end, iterating over all buckets and producing the result
which occur at the same moment, then add up the "type" of the timestamp
Finally, the ordering of hour, day, minute in the result means that the
list in place and use xrange instead of range in Python 2.7.
The number of minutes in a three-day period is 4320.
The description you wrote for this question would make a fine docstring.
That is massively inefficient, and calls for a complete rewrite.
sensible manner - I'd suggest to put it in decreasing order, i.e.
immediately appending a literal list instead of updating a variable:
For reference, I ended up comparing it with the following code:
Edit: Was updated before I ended up posting, but my assumptions still hold I think.
Assuming that the input is in chronological order, this function should be a generator.
that sounds like they should be nested the other way round.
up is less efficient than the other way round: the product list is
Isn't this function taking readings and producing scores?
and append one result for each moment where there were any matches.
list and, since the order is arbitrary, sort them again so it matches
Lists should be used for homogenous data, and may contain an arbitrary (growable) number of elements.
days in one minute steps, checking whether any of the elements in