Then, once you finish the system, the really hard part will begin: documenting your API!
In addition to explaining this system, you will also need to document every single one of your Listeners, Events, and ConcreteObjects along with their various attributes and priorities.
Which, honestly, sounds like a job for a custom Javadoc generator.
The event will traverse the stack of relevant listeners until it comes out the other side, resulting in the final state of the event.
Obviously, the final implementation will only bear a passing resemblance to this, as additional complexities are discovered, but this is where I would start.
Just call the JavaScript implementations as regular Java using the getInterface method to get an instance of the interface.
The method will modify the event as appropriate (reduce HP, remove from inventory, etc.)
You'll also need interfaces for the concrete objects (Item, Character, Building) and for events (ItemEvent, CharacterEvent, BuildingEvent).
Then, the event will act upon its relevant concrete objects.
JavaScript files may be loaded from a ZipInputStream, Jar using getResourceAsStream(), external file or even a socket.
You don't want the listeners acting directly on the objects while the event traverses the listener stack, otherwise you wouldn't be able to override previous listener behaviors.
Using Zip-files make modding quite easy, especially when combining them with JSON as data files for definitions.
The interfaces will have two methods, fireEvent and getPriority.
You can create sub-interfaces for specific interface types (ItemEventListener, BuildingEventListener, CharacterEventListener, etc.)
fireEvent will take one argument, a subtype of Event.
I haven't done this before, but the approach I would take would be to have a mods folder that I put in the classpath.
If you want to get really complex, you can have listeners for different stages (BeforeAttackListener, AttackListener, AfterAttackListener).
that can be shuffled into the appropriate systems.
But you need to identify what type of game objects that you use, and that is unique for each game.
The main game loop update game objects with a certain frequency (x times per second)
Then, create an instance of each implemented concrete class and load it into your event system.
You may use Java 8's builtin JavaScript engine Nashorn for solving this type of problem.
There would be a high level EventListener interface that all listeners must implement, and you can use reflection to find all implemented concrete classes.