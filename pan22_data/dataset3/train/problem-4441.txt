You just have to worry about high level functionality.
My understanding is that you describe the game in Unity and do scripting on the back end to do the logic.
It will write nothing for you, rather help you out in the way it thinks is best and let you write whatever you want.
I'm curious to know the workflow when creating a game in Unity3D?
Unity3D is more of a wrapper/library than a 'drag and drop' game engine.
For example, Unreal has a default first person camera, character controller, collision detection and AI.
It doesn't generate code nor does it come with 'off-the-shelf' scripts.
Unity3D doesn't generate any code for your game, strictly (It does generate code for running your game, to be more accurate, but none for your gameplay)
You create the game through scripting; you write scripts for behaviours, design the level in Unity3D, and assign those behaviours to entities (or game-objects).
Mostly functions that you will need specifically for Game Development in all builds.
It's very flexible, but it still requires effort to write a game.
It may sound redundant to say this , but in my experience , when Unity3D isn't busy crashing or building it's making my life easy by letting me change whatever I want and leave the Quaternion based math to the people that have a master degree in mathematics and still trust me enough to le me change whatever I want.
For example, you still have to code your own first person camera (if you are not using the default one).
However, you do not need to deal with calculating the look-at vectors and such.
Kind of like you use Unity to describe the puppets and you use a scripting language as the puppet master.
If by generate a lot of code for you , you would include pre-built functions that you can use to make your life easy regarding collision detection and rotation calculations (Library) then yes, it takes a lot of coding out of the picture and gives you optimized versions at hand and ready to go.
What you get from Unity3D is a game loop, component-based entity system, a comprehensive math library, means to load media, handling of meshes, camera, immediate mode GUI, shaders, rendering pipeline and other low level functionality.
You can look at the examples that come with Unity3D and re-uses those code; there are a couple of pre-defined scripts, but usually you have to customize those to meet your needs.