This is hyper defensive and, in 15 years of writing code I have never found it to be a necessity.
"process" is a wishy-washy term that doesn't mean anything.
it's a common practice to prefix method names that return a boolean value with is or has.
Ok, yes that is 80686 assembly but you get the point.
First, I would create a reduced method for getting "body" in fixture as such:
You only need to do this if you want to assure yourself (or the compiler) that it won't be reassigned.
This method also knows too much about the internal workings of a Contact object.
This immediately tells the programmer that both bodies must be players.
Since the calculation logic of the "power" is the same for both bodyA and bodyB and you have it repeated twice,
on the same line is both cluttering and unnatural; They are sequential instructions to the CPU:
In this condition you have some redundant parentheses:
And now, a line is gone and your code flows naturally and doesn't abruptly exit the function.
But, in this condition you have no idea if the job was done or not and if not, why not.
That would have the additional positive effect of hiding from this method the logic of calculating power,
so the readers can make a good guess without studying the implementation.
This is pre-condition checking and an ideal case for it
The later ones less so, You can invert the condition and put the markForDestroy call in the then clause.
it would be good to avoid making chained references to contact.getFixtureA().getBody().
I would add some blank lines to break up the function a bit though:
Frankly, 'final' in this case is repetitive and distracting.
Unless you have a need for it (which, from this code, you don't) then ditch it.
It would be better to pass two instances of Body to this method.
it would seem that isSaved would be a better name than save.
Think about it: In the previous case, you 'return' and terminate the function.