When you map the keyboard layout as follows, the human players just need a single key instead of two to enter a coordinate, plus the position on the keyboard matches exactly the position on the board:
Having this constant means that anyone else may later change the 3 into a 5 and can expect that the program still works reasonably well.
Also, it sounds strange to say "to draw the board, given a character array".
When you include other headers like <sys/type.h>, the order is sometimes important.
This changes the wording to "draw the board, given a board", which is a bit redundant, but it focuses on the problem domain instead of the technical level, which makes the code easier to understand, especially if you want to explain programming to laymen.
With this type definition, your code may look like this:
It's a bit more effort to write board->cell[i] instead of the simple board[i] from before, but it's worth it since you can now talk about a tic-tac-toe board, without having to mention that it is implemented as a character array.
Most keyboards have a numeric block, which by coincidence consists of 3Ã—3 keys.
The function signature would sound a lot better like this:
Function signatures in C should not contain arrays since these behave surprisingly in several cases (like multi-dimensional arrays).
You could rename check to checkForWin to tell what it checks.
For more discussion see: https://stackoverflow.com/questions/359732/why-is-it-considered-a-bad-practice-to-omit-curly-braces
Instead of reading a string here, there's a completely different idea.
To make the above function signature valid, you need to declare the tic_tac_toe_board as a type:
You can instead use #ifdef to check the platform and then call the appropriate command to clear the screen.
Since your code is already quite good, it's all I have to say.
One thing I would change besides what has already been suggested by others is your call to system("clear") which creates an OS-specific dependency.
Since all the above headers are from the standard C library, they should be in alphabetical order.
I would also suggest to improve that procedure by declaring the lines as a constant array instad of writing a similar test 8 times:
There's two things I'd change to simplify your code:
Anecdotal evidence suggests that in the game of tic-tac-toe, players familiar with each other will tie 100% of the time due to the limited number of outcomes.
Having this abstraction also means that you can easily extend the board by recording the history of moves, just in case you want to implement an undo feature later:
I would rather say board[pos] != '-', for 3 reasons: it is shorter, it is faster, and when you add a third player someday the code is still correct.
That message is a mistake: xy is not the same as rc since r corresponds to y, not x.
Additionally, this can be wrapped in a function to allow for code that is easy to reuse.
Easy to read and the tasks are nicely splitted into functions.
If your code doesn't provide this guarantee, you should add a small comment explaining that this constant should not be modified.
It's very simple: if SIZE * SIZE moves have been played and there is still no winner, it's a tie.