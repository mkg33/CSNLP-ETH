It simply loops through the values, and for each value it attempts to find a its "inverse" in the remaining array using #index.
Here is my solution, which populates an Hash, were the keys are the numbers and the values are the indexes.
Both are accurate, but, as vnp mentioned in a comment, it's not totally clear which one is "first"
All answers given here are good, but I would like to show the absolute simplest solution to show the power of Ruby:
detect returns the first value that satisfies the given predicate, that in this case is that the sum of the two elements be 0.
The problem can be solved in less than quadratic time.
If I found a key, that is the minus value, I finish the loop.
You can use return also within a loop block to exit the method.
Otherwise if the number is a new one, it is added to the Hash.
In our case for example given x = [1, 4, -1, 5, -4] this returns:
That is if we take the Cartesian product of a list with itself we get all of the pairs.
As seen above, given the same input, [-1, -2, 2, 1], for first method return [0, 3] while the second returns [1, 2].
Sort the elements by absolute value, then search for consecutive elements that sum up to zero.
Now product gives the Cartesian product pairing each number of the first list with each number of the second list,