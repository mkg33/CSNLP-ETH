You'll never be truly stuck, so embarge on the craziest ideas, fail, learn from your mistakes and become more badass with that process.
So improving your soft skills is important as well.
You really need a lot of experience and discipline to start with zero source, and even then it is incredibly hard, and making design decisions over everything is hard the whole time you are working out the design of everything.
It's been said before, but i'll say it again - start with small bits, familiarize yourself with an engine, a framework, a tool or program.
If you already have experience making bad programs you will know the strengths of patterns and use them to your advantage.
I'm self taught too, 4 years I've been introduced to game dev, lot's of barriers come, but nothing that you can't solve googling and reading some texts.
In case of security You really should ask someone experienced if Your code is done well, as security holes don't popup error alerts.
Depending on whether or not you want to make this your profession later on (Im just going to assume you're thinking about it and this isnt just a hobby thing), here's what I found to be extremely effective:
Well, it does for collaborative programming, but then you won't be coding alone anymore, will you?
It is perfectly fine to learn programming without a teacher.
You learn the technologies any way you can, you put your first site together.
While the internet is a great source, getting face-to-face feedback is something you'll have to deal with on the job ALOT.
It also helps to build something with other people - self-taught is great, but game development is a team-based game, so check the forums for hobby project - for example the Epic Forum for UDK projects, Unity forums or even the CryEngine Forums -all three of those engines are widely spread, there's a truckload of talented people working on side-projects there, and they're mostly also keen on learning new stuff.
You obviously do not need to be a Grade A concept artist,designer and Pipeline nerd - but you should be familiar with all the tools of the process, and understand each step of  the creation.
Also, check out the game websites for news and updates in the business - gamasutra.com, kotaku etc all have great articles on both business and technique topics.
The best thing to do would be to take an existing finished engine (either a modable one or some opensource one) and start hacking on it, and do that a few times to several different engines until you find one you like.
The internet is a great source for tutorials,references and help.
If you're implementing a weapon -> design it, concept it, model it, implement it, code it!
This "don't touch it, until you know how to do it perfectly" attitude.
So starting out I would recommend something like the following plans:
Even a simplistic game requires a fairly large amount of programming in a modern OS and language these days.
The attitude that there is a "right way" to do things.
Hardest thing in learning OOP and MVC design is understanding why I should do "this" in "that way".
Hey, a website is a database with an html front end with some javascript.
If your code works*, it doesn't really matter how it was coded.
Also if you start with someone elses code you can learn what works and what doesn't work so well, so working with as many engines as possible is a huge plus as well.
In programming this can fall into 'making an entire game by yourself' starting with zero source code.
I think that's pretty much all the advice I can give.
If you always made good programs by following patterns someone taught you, then You will keep making good (in sense of valid code) programs, but instead of taking advantage of the patterns You will be limited by them, as You won't understand them enough to make useful modifications.
In level design this manifests as trying to make the 'biggest map ever', or using the game system to build the largest most complex thing the game engine is capable of handling.
It also may make your code less readable for you in future, making it hard to use old components or debug new errors, but in the long run all your mistakes will be your strengths.
Yes, not having someone that have been there before to say to you what to do, how to fix, etc etc may be the worst thing you'll pass.
The biggest danger is trying to build something 'too big' or 'epic' out of the gate.
:D), but it'll get only better if you keep on going and NEVER cease to look for ways to improve your work.
You still can read LOTS of blogs of people that have been there, they share their experiences in the industry, how they got into the success, how a previous game failed and why, etc etc.
It isn't going to be fantastical, but after doing things in a sub-optimal way isn't a big freaking deal!!
I have no C# and XNA experience at all, but I think it won't make me wrong in the following statement:
For example, if you starting out at making some music you wouldn't start with trying to make a 50 piece 2 hour symphony.
Knowing the pipeline is key to building things in the most efficient way.
This attitude is what will stop you from ever making anything, because you will always balk at the task and say "I don't know how to do that yet."
Don't limit yourself to just one field of development - soak up ALL the knowledge you can get :)
In the end, it is most important that you practice, not how, so in both cases sooner or later You'll get quite similar experience.
This might seem a bit extreme, but what I mean is learn as much as you can about EVERY aspect of the game development - no matter whether or not you'Re a coder, artist or designer.
This applies to about any discipline related to a creative industry:
If you don't have a mentor yet, or in general dont know too many people working in the industry then you should look around your area for indie dev meet ups, go to conventions,  and check for other events where you can start to build a personal network of knowledge and contacts.
You have to put pixels on the screen, and make sounds when things happen.
You see this attitude among beginning developers of all kinds though - not just games.
If you do it "the long way" the first time around, you can always do it better the second time around.