While there are somewhat safe options in some cases,  LVM provides a safe path to expanding partions (logical volumes) on a running system.
Unde the traditional partioning model, it is extremely difficult to resize or move a partition on a running system.
Accessing a swap file will normally have a higher overhead than accessing a swap partition or logical volume.
LVM also simplifies implementation of RAID which can be easily be done on a per logical volume basis.
In the cases where LVM does increase the overhead, other trade-offs may provide better file system performance.
There are arguments for and against having differnt partions for different sub-directories.
The Answer is, if you cannot identify any operational reasons for using LVM then there is no reason to use it, which in your scenario of hypervisor and storage area network it is easy to dismiss.
In an extreme case, LVM can be used to replace a failing disk on a running system.
There are lots of options for swap, but generally you want to be able to swap quickly.
but LVM is not a protocol like smb or iscsi, nor is it a filesystem like ext4 or ntfs, it's also not JBOD arrray or any kind of RAID, it not a type of disk like SSD or SAS, it's not a storage provider like VMware datastore or Ceph - so, why use LVM?
If you need an extremely storage are, you can use LVM to expand a logical volume across multiple disks.
This is less of a consideraion on systems with sufficient memory to avoid active use of the swap space.
- to present logical volumes to the OS independently of all that.
While in some cases LVM may increase the overhead in finding the location of a block on disk, a contiguous logical volume on a sigle disk should have the same overhead as a partition.
Understanding the trade-offs should be part of the planning process for using a more complicated LVM configuration.
One of the issues that arises is growth of a filesystem beyond the capacity of its partition.
Generally it requires an outage, or risks data loss.
Fortunately, modern memory management relies less on swapping processes and more on paging.