Multiplying the hash code with a prime number (like 23 or 31) should happen before every addition of another value.
I will leave it for you to adapt it to your own class.
If the points are shared, then the Triangle2D objects are the same.
The algorithm for the hashcode could be this one, as also commented above by radarbob.
In this case, for something like a triangle, making it a struct instead of a class might be also suitable.
But what you are doing in the above two lines before the addition is just calculating what could simply be a constant.
Is there some way that I could make the hashCode function have less collisions?
Due to the additive nature of things, I suspect there could be a lot of collisions.
The following piece of code does not make much sense:
The compiler will probably even precompute the -305700999 * -1521134295 part.
This is an inbuilt class with the Unity engine but the simple version of it is that it is a struct with two floats and a couple math functions.
I have a custom class to handle some triangle calculations that I am doing.
The specific thing about this class that is special is that, it shouldn't matter what order points 1, 2 and 3 are in.
It is better to make these private and grant public access to them (if needed) via properties.
Overall this looks good, but I have one question, why don't you write this as
Sort your points locally within your hashcode method, first by their x value, then by their y value.
For the most part I am happy with it, however, there is one aspect that I don't really trust.
I use this object in a lot of hashSets to prevent duplicate triangles from getting listed.
Some quick information about my triangle- it has 3 Vector2 structs that represent points of two floats.
I already added the link to a good implementation of the hash code method above, so I won't go into detail about the algorithm.
My equals function reflects that, but I worry that my hashCode function is not specific enough.