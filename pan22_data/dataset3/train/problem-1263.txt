If you pay attention at how starcraft approaches this problem, you will find that :
In some situations, you can cause oscillations like that awkward thing that happens when you walk directly into someone in the hall and you both try to move out of the way in the same direction, but the papers cover how to avoid that.
Then, instead of moving each unit individually move the center of the formation around.
If all of the agents are running the same algorithm, then they will choose velocities that mutually complement each other and will avoid other agents.
Hey can you make some space for me, you are blocking me.
I do not know how your units works but I assume that they are like a state machine :
It seems like what you're looking for is the Optimal Reciprocal Collision Avoidance algorithm.
One way to do it is to have the units auto-form formations, and have them attempt to stay in a position relative to the center of the formation.
For computing the two stages of the algorithm above, you can use Minkowski Sums to determine what the velocity obstacle is, and then use a linear programming model (such as the Simplex Algorithm) to determine the closest point to v_p that avoids the velocity obstacle.
This bounding volume is likely what you're already using to perform the collision detection and response.
Assume that you already have a simulation (game) with agents (units) that have some sort of bounding volume around them.
I already have an order to move foward but I will accomodate you.
Although the paper may be a bit involved the theory behind the algorithm is fairly straightforward:
This technique has been used at least in Warhammer 40,000: Space Marine, and maybe other games.
Also, code for doing collision avoidance is available for your perusal and has been ported to C# to be used in game engines like Unity.
For each agent, define a preferred velocity v_p that may or may not be based on the agent's goal.
Here's a basic way to do it using a box formation and simple springs to keep the units at their appropriate positions: