For example, AWS Lambda can be scheduled to run every so often.
This way you can have a single server handling active page requests, and then another server to perform calculations or data updates/grooming.
You can setup a Cron job that will call a given URL every so often, or at specific times throughout the day.
This could even be adjusted if the player is doing something that needs more frequent checks, and then extended when they complete that task.
Have your data on a separate server than your PHP scripts.
Second, only bother checking when players request information.
There are also other services that can be setup to call your scripts.
Each time a player makes a request to your page, see if enough time has passed since the last check.
If you find yourself needing to make frequent updates to data, or calculations that aren't based on a players immediate interaction, it may be best to decouple your architecture.
My problem is, I don't know how to go on from there.
Your client could have a simple AJAX call that goes off if the timing is independent per player.
First, call a script at a regular frequency to perform the work.
You control access to the data, they won't know if it was updated exactly and hour later, or three days later when they actually request it.
Then just go with whatever approach seems easiest to you to run that updating code, knowing that if you need to, you can always pull it out and run it somewhere else.
Yes, when something happens like the users buys something, a function gets called with for example "CAR_BOUGHT_BY_PLAYER".
If it has, then calculate if whatever events or timings your worried bout would have happened at that point.
My idea so far was to create quests based on a class and write two functions for every quest: One is checking if its activated, the other will check the progress.
You could easily set something up with that to call your scripts on a regular basis.
Is it possibleto build some kind of an event/push system with PHP?
I recommend start by isolating your updating code from your code that serves information out to the users.
Bonus here is that if something goes wrong with your client or cron job, these should keep working.
Since I have to do this on every page reload, this might be bad performance-wise.