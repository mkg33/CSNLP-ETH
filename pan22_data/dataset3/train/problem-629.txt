There we go, a DateTime?, no coding of a conversion necessary.
Because that seems like a design flaw in my opinion.
Since C# 7 it is now possible to declare the variables within the is clause which can come handy.
operator, I find this even easier to quickly read and understand the intent of however I recognize that is probably just because I'm not used to reading ?
Your method tries to parse the input and returns a default value if this doesn't work.
Because the object I pass as a parameter isn't a DateTime, it's a string.
In which case, I'd encourage you to know and trust your data types and then use existing methods of retrieval.
Your intention seems to be to cast an object to a DateTime, but you actually parse the ToString() of the object.
The question is : In your application, is there a scenario where you don't know if you'll either receive a string or a DateTime?
I like @ChaosPandion's solution however I find the following a bit quicker to read.
This also strikes me as something you might be doing for a database item, for example.
I'd expect ObjectToDateTime to parse my object to a DateTime but that's not exactly what happens, right?
If you prefer the explicit null check, modify the if statement a bit...
For example, if you have a DataTable with a column CreatedDate, you should know it's a date, what you might not know is if it has a value if the column is nullable at the database.
I'd call it ParseDateTimeOrDefault or something like that.
It kind of follows the IEnumerable.SingleOrDefault trend.
On the offhand chance that your object is already a DateTime, you're performing unnecessary conversions to and from strings.
You can even specify a default and type if to DateTime
You parse a string, if it doesn't work, you return a value.
The point is, as a user of your method, I'd expect this to return the default value :