Also makes it easier for other developers to work with.
I'm not worried about showing the code to developers, because the game will be open source, but I'm afraid an inexperienced gamer might break the game or at least ruin the fun.
My advice is to zip it up and rename the file extension.
If players tinker and ruin the fun I would say that's their problem.
You can use something like PhysicsFS to work with the files.
I've read a lot about this lately and yesterday I decided I wanted to store object data in external JSON files, to allow for more flexibility and ease of access.
This will keep out the casual looker but won't be difficult for you to work with.
Then it dawned on me that leaving these files in the game's directory tree would allow the players to modify anything they want very easily.
If they're meddling with the game data, then that is what they consider 'fun'.
I'm working on my first (C++) game, and I want to use a component based design.
I wouldn't do anything more than putting those config files in a zip file (which you should probably do anyway for loading times) and making sure your code can handle corrupted data gracefully.
Most gamers don't even know where to look for this sort of thing, never mind deliberately searching through it or editing it.
It's like getting worried that players would use a god mode cheat code and being worried that the player isn't challenged.
Entity component data is hardly a spoiler, after all.
There is a huge mod community and players like changing/modding games.
What's the policy about hiding game data (in open source games)?
Maybe if you had dialogue or quest data in there, it would be a problem, but probably not.
Is it normal to leave everything plainly accessible to anyone?