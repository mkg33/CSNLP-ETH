I am at a complete lost of ideas how to even accomplish this.
You can certainly implement an interface such as this using Javascript.
This type of system might possibly work if ALL items were 1x1, but for this example its not going to work out.
Id like to use pure JavaScript, and nothing else (even though it might be "reinventing the wheel", I also like to learn).
There are a lot of libraries which might help you with the UI.
One suggestion for the model would see each InventoryItem have an inventory-X,Y-coordinate.
I would be very grateful to get some replies on how you might go about doing this, and will accept answers that can logically explain how you might implement such a system (code is not required).
so lets say you have a storage which is 20x20 squares big, you just create an array or object containing 400 empty positions.
An Inventory-object representing your inventory would contain a list of InventoryItems, and could expose an interface similar to this:
This question may be a bit advanced (or possibly not even allowed).
But I was wondering how you might go about implementing this type of system in a JavaScript game.
In that case you only need to check if there are collisions when you add an Item to the inventory (creating an InventoryItem which references the Item), or when you move an InventoryItem around.
You could use the DOM and Drag & Drop events, but that has a lot of problems with browser-compatibility (particularly MSIE).
When you drag an object from the storage you can immediately remove the object (or hide it) on mousedown and attach to the mouse cursor div containing the "assembled" image of the item.
Do I need to makeshift my own hack system with messy code, or is there some source out there (that I don't know about) that has replicated this type of system in their own game.
You will have to mark each image with some kind of identifier which should tell you that "these" group of images are from one item and "these" are parts from another item.
Although, maybe rendering directly to the canvas and checking mouse cords could work, there would more than likely be A HUGE annoyance when checking if other items are overlapping each other (meaning you cant place the item down, and possibly switching item with the cursor item ).
Then when defining items you have to decide how many squares is going to occupy each item, so you cut the image in smaller images each of them should fit a single square and you define another matrix for each item containing these images and their position relative to each other.
Likewise, you'd need some game logic to determine which items can be equipped in which locations, as such games normally implement a complex system of rules about what can be equipped where.
You can then store the dimensions of individual items to check for (and prohibit) overlapping items in the inventory.
However, I would imagine that most games programmers would simply use canvas and use the same canvas for the inventory screen as for the rest of the game.
Some thoughts of mine for implementing such a system would be to:
The view can be anything you want, but like MarkR I'd suggest you use the canvas if you're using that anyway.
I am going to reference this image of what I want to accomplish in JavaScript.
This is certainly what Diabolo does (Of course, for DirectX software rendering on Windows, originally).
My solution is based on div manipulation, not canvas or anything new and fancy.
Every item and the storage should be separate matrix or two dimensional array if you prefer.
Only talking about the lower part of your image, since that seems to be what your question is about.
After doing this you basically need to drag-drop an item on specific spot, check if the spot is empty, check if the item could fit in nearby squares and if so you read each image from the item`s image array and put it in the storage array (and in the matrix of divs of course).
For example, you can't have someone putting a glove on their head, right?
I would imagine that you have a multi-dimensional array to store the inventory items' position.
Currently to implement such a system in JavaScript escapes me, and I am turning to SO to get some suggestions, ideas, and hopefully some insight in how I could accomplish this without being to costly on the CPU.
I would start with defining the data structure for stuff like "storage" and "items".
It is kind of hacky but i think this is the easiest way to accomplish what you need.
It's arguably more "pure JavaScript" than using HTML (<div>s) with JS (a.k.a.