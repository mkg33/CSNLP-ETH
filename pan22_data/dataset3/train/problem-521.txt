The more complex your abstractions (most likely) the more generalized they are.
The lack of object structures at compile time makes doing a lot of things very difficult and unreliable.
No, chances are it'll be mechanically different in some way (so that people aren't bored of it before you make it).
Okay, that sounds great, just add all these components to the game object and that's it, you have this extra functionality.
Maybe this thing has a collider, a moving component, maybe a rotating component, or maybe even a rigid "RotatingAndMovingPlatformComponent".
On the surface Entity-Component seems like a good way to program games.
You like TBS games and plan on only ever making TBS games.
This is what Unity does since it knows barely anything about the type of game you're going to make until you start providing that information to it (i.e.
Would it make sense when designing and programming your game-state management system to generalize for future potential of RTS games, when you know you're only ever going to make TBS games?
However, I find that this level of complexity is where it's usefulness ends.
The more you know the less you need to generalize.
Everything is a game object and those game objects are made up of components.
Over-generalization can lead to difficult and tedious implementations to do something simple.
I don't see this as a problem ( more like unreal 4's architecture ), but then I wonder what's the point in the Entity-Component architecture.
This doesn't directly answer the question but, from the sounds of it your question and the information you're wanting seem to differ a little (at least to me).
I see very little benefit to programming this way over ordinary inheritance.
So you still need some generalization and abstraction just not to the degree that unity does since you know more.
However with generalization comes the long told saying Too much of anything is a bad thing.
Generalization is a great thing, it allows you to reuse code between games (with little to no changes), and make adjustments when design details change.
Abstractions commonly lead to generalizations so you can prepare for future unknowns.
Too much and too little of generalization can be a bad thing (for begginners and single-game developers it is much better to under-generalize).
Now don't confuse over-generalizing being bad with "don't generalize" because we gain quite a bit of flexibility when doing so.
On top of this, some components will need to rely on game state in some way.
So, obviously a good example might be a platform the character has to jump on.
Try this with menus, complex character movement with multiple states, abstract ideas like game modes or game state, and your flexibility and modularity are destroyed.
No, it doesn't you can cross that bridge if it comes.
Well, do you know what the next TBS game you're going to do needs?
You may know exactly what this game you're making needs 100% (chances are you don't and they'll change), but for sake of the argument lets pretend you do.
Menus involve a lot of specifics, complex character movement often involves many states meaning either communication between these components is needed or there must be a controlling component made just for this type of character.
The attraction is components are very flexible, just requiring you to "add" them to a game object to inherit it's functionality.
I feel the best and easiest way of going about things would be using larger components with more dependencies.