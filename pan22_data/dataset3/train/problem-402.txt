The simplest way, assuming you have a bare bones component/entity/system architecture, is to create a Audio system and an AudioComponent.
As you would likely need more than one audio snippet to be attached to an entity you could log these as a list of pairs; where the pair is a state and audio reference, but the rest still applies.
For example, play a "hurt" sound when the players health drops compared to the last state and a death sound when it's suddenly 0.
The AudioComponent would contain a reference (maybe just a string) to some audio and a corresponding "state" flag.
You could put them in a map as well so there is a simple key lookup.
Create an audio system that reacts to changes in entity states.
If you have a signals/events system later you can update the status of audio based on events; such as a collision.
The other method I can think is to forget the audio component altogether.
As with other systems, the Audio system would scan entities, extract those that have an audio component and deal with the audio based on the state.
Although it might be better for the audio system at that point to just listen for events itself and extract only the audio source reference from the component.