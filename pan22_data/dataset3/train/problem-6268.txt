However with that said, I know for example that calling it builder and build may not be the best thing (it is not the builder pattern).
Basically I have a set of objects that needs to be transformed into similar (but different) objects.
So I have a PartitionedContainersBuilder which deals with the transformation part and I have a PartitionedContainer which represents the transformed query-able.
My main question is if this is a sensible approach to separate the construction phase from the constructed phase.
I would prefer having the constructor in PartitionedContainer do the work rather than a static build - would that be better?
I am sure you can find many weak spots, please let me know about them.
Once transformed I want to be able to query these later.
What I do like with this is that there is no invalid state anywhere and little risk of doing mistakes with member variables.
My gut feeling says yes, but is there a tangible advantage?
Had Java been able to return two values then I would probably have solved it differently.