The running time is O(m n), where m is the average word length and n is the total number of characters.
For efficiency, swapping characters within a char[] array is definitely the way to go.
To implement that, I suggest defining a helper function
You'll do approximately one string concatenation for each character in the input string.
I literally fell asleep with an answer mostly built.... and now that 200_success and palacsint have covered pretty much my complete answer.
Sometimes a simple but inefficient algorithm is preferable.
Your instincts are correct: the current solution is terribly inefficient.
Each such concatenation would involve allocating a new string and copying the previous characters.
Converting your algorithm to use a StringBuilder or StringBuffer would be a slight improvement, but it would still be inefficient, since stringBuilder.insert(0, â€¦) would result in a lot of characters having to be shifted over.
For a short string such as "hi there cow", efficiency doesn't really matter.
The reason this code will be faster is because it converts the input String to a single char array, and it does not create any other objects until the end, when it converts the array back to the output String.
So, I had put together some code which I believe will be much faster than yours, it will handle space and punctuation in a very different way to yours, and it will correctly not reverse surrogate pairs in the text.
That said, your algorithm has the advantage of being easy to understand.
I have to reiterate though that the use of strBuffer = str.charAt(i) + strBuffer; will be your worst performance culprit.
strBuffer is an unfortunately confusing name for a String, as it suggests that it would be a StringBuffer.
Also, (as I learned recently), your code will not handle surrogate Unicode characters well (it will reverse and thus break them).