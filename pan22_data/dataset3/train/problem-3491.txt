The interface is also different: it returns a char instead of just printing the character.
The program is probably not really named program_name so the string that's printed if there aren't enough commmand line arguments should probably instead be:
There is no reason to instantiate the record to "tooth" (or any other value) within readInputFile.
Your function, as it stands, is very hard to test in any kind of automatic way.
For complex objects using operator[] can have performance penalties, but for basic types like characters and integers, this isn't a concern.
This change might seem unimportant, but actually, it's a pretty big difference in at least one area: testing.
It is odd that a function named findNonRepeatedChar() does not actually return anything.
I've reviewed your code and here's what I've found.
Having it return the value instead makes it easier to test (and also adheres better to the single responsibility principle).
Since the task is to find only the first non-repeated character, the algorithm can terminate as soon as it finds a non-repeated character.
The function returns the character in an int, or -1 if no such character exist.
The function named readInputFile does more than simply read the file and as mentioned before, the findNonRepeatedChar() function doesn't return anything but prints as a side effect.
Your findNonRepeatedChar function seems more complex than required.
The code could be clearer if it actually returned the non-repeated letter and left the printing to the calling routine.
I disagree with the algorithm that @Edward posted, as it makes what should be a linear time solution into a quadratic time solution.
Not knowing what has to be done if no such character is found.
Generally you should prefer unordered_map over map unless you absolutely need ordering.
It's not really necessary to iterate through all of the characters in the string, as the current code does.
I'd be inclined to omit readInputFile entirely, and put its contents within main and to change the interface to as previously mentioned.
It's easier to use operator[] here instead of dealing directly with iterators and comparing to end to decide whether to insert or not.