Your function count_div_digits is responsible for three separate things:
This allows count_div_digits to focus on the one thing it needs to do: count and return the number of digits in a number that are divisors of that number.
It would involve a list comprehension, which is a lot like a generator expression above but it creates a full list of the values.
assert count_div_digits(24) == 2 without having to try to access what's getting printed.
Now that we're doing this, I'd personally think it's better to make digits a list of the integers, rather than converting them in your calculation.
You should return a list of the counts, and then you could print that returned list if that's all you want.
If you're printing a result of a calculation, at the very least wrap it in some text or print the input alongside it so the user can parse what the number means:
Python has a style guide that you should follow - removing the unnecessary parentheses and adding the appropriate whitespace gives the code more "room to breathe":
Is it intentional, is converting to str and doing string operations really preferrable to plain old math?
A generator is like a for loop collapsed into a one line expression.
Although I see that in SO Python answers to the same question always do that, contrary to eg.
You can do that by adding an if at the end of your generator expression, and if that condition evaluates as False then Python skips that value.
Though I'd split that over two lines as you should try keep to a 79 character limit.
You could also simplify your loop using the built in sum function with a generator expression.
You just need to turn the integer into a string, then that string into a list and then each element of the list into an integer.
What this does is evaluates each number like your for loop and creates a boolean value.
Python can coerce a boolean to an integer (where False is 0 and True is 1), so you'll get the sum result you want.
It would be better "separation of concerns" to split that up into two functions:
Note also that I've used a more descriptive variable name than l!
I am surprised nobody has noted that all the conversion to/from int is superfluous.
However it also gets the sum result of all of these booleans.
You can also use this to include simple doctests (I have added these so that I could refactor and ensure everything still worked):
Also you should add spaces either side of the arithmetic operators you're using.
How can I further optimize this, make it short or do it differently?
So, here's a program in python to get the count of digits that divide the number.
Single letter names should be used sparingly, especially l as it can be mistaken for uppercase i or the number one.
This gives you the count in one line, and you could condense the function to only a few lines:
Generally speaking, printing the result of a calculation is often throwing away work.
If you give the program a list like [24,10245], you get an output of:
I would be inclined to add a docstring to count_div_digits at least.
This also makes testing much easier, as we can now e.g.
But what if you want to use the count for something?