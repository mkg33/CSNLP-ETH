Spawning a thread and switching between thread contexts are expensive operations for the operating system.
Even a single core on today's machines is vastly more capable than the systems on which you first learned to love fighting games, I'd wager.
These use multithreading "under the hood", but hide the nasty details from you.
Also, keep in mind that creating threads isn't cheap.
If you want to make a "simple 2D fighter," well, remember we had those on the NES and even earlier.
Focus on making an enjoyable game first, and if your early profiling suggests performance problems, use that information to ask a specific question about how to overcome those particular issues.
Use asynchronous APIs with callbacks provided by your platform or a library when you can.
So, have you encountered any trouble that suggests to you that your game might need additional threads to keep up on modern hardware?
So using too much multithreading can even reduce performance.
Generally it's best not to over-engineer, solving problems you may not really have.
But in that case you shouldn't write your own multithreading code.
Rule number one of multithreading: Don't even think about it, unless you really need to use multiple CPU cores for performance reasons*.
You should only use multiple cores when you have tasks which take a long time to complete and don't need to communicate much with other tasks while they are being completed.
*) Exception from this rule: Waiting for I/O of files, network or user input.
If not, it might not be a problem you need to solve just now.
Multithreading opens up a whole can of worms of obscure and impossible to reproduce bugs: