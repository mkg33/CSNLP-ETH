... and then go for a 30... no, 45 minute coffee break :-).
As opposed to Stack Overflow (pre)compiling the entire story into bytecode in your brains, which then executes it - and ofc then it could not change any longer.
The program code need not look like C or Python or xyz - it can be any kind of descriptive data that is suitable for the purpose in question.
If the in-game programming language was only designed for the purpose of the game, then it is a domain specific language.
If you don't mind users doing stuff like opening new windows from within your game or whatever they like, you can use a general purpose language and expose bindings to certain features of your game world.
The compiled executable must contain a parser  that is able to read external program code.
The compiled executable must have an internal API to it's relevant functionality.
The parser can read the external program code at executable's startup, or it can read (parts of) it ad hoc, or it can re-read it per each frame (would be inefficient), or the code can even be hand-typed and posted to the parser as it gets ready (like: "move unit X forward 5 steps"[enter]).
In both examples, while the language is nearly unlimited (only some calls blocked for security reasons) manipulations are limited by API calls that can be made.
sock = Socket.New(AddressFamily.InterNetwork, SocketType.Stream ProtocolType.Tcp) [ENTER]
The word "scripting" has got a somewhat tilted meaning, but so be fine.
You could design a language that makes typical game tasks more easy than in a general purpose language.
The external program code needs to have a syntax, so that the parser understands it as it reads it character by character.
A multitude of them exist, and some of the very oldest ones are interpreted as opposed to compiled.
https://screeps.com/ You can read alot about how it accomplishes this goal at http://support.screeps.com/hc/en-us/articles/205960931-Server-side-architecture-overview
Just running unsanitized user code in a general purpose language (like python or perl) from within your game, could allow the user to mess with things he shouldn't mess with.
Scripting is only the act of creating a deSCRIPTion, or writing.
There is absolutely nothing extraordinary with interpreted languages, and it is in no way a disputable term.
The parser is fixed (compiled) but it works on flexible, external code.
Essentially, the external code is not fixed - it can change any year, day or minute, but still the executable need not be re-compiled.
But you will need a strong foundation in multi-threading, and a general knowledge of how an interpreter works.
In essence, the main game runs an interpreter in a separate thread, then allows that thread to manipulate the game world through API calls.
Usually very little work is required to get something like this started.
Most likely there must be (bi-directional) access to the executable's internal data as well, or the parser must provide some kind of data storage and housekeeping.
Only the resulting behaviour, hosted by the executable, changes.
There is no single branch of programming that handles all these concerns.
The text you are reading right now is (kind of, and even more if it was spoken) interpreted because you "execute" it in your brains while reading it, without knowing what next sentence says (or even if it possibly, sneakily changes right now).
The disadvantage is that the user has to learn a new language.
The syntax may describe (and code may contain) identifiers, numeric values, operators etc.
When returning, "sock" exists and is ready for further use by typing more by hand, or letting the interpreter's automation continue with it.
In an interpreted language one might for example type by hand:
The advantage (and disadvantage) of domain specific languages is that the language itself can limit what the user can do (i.e.
There are two examples that I can think of off the top of my head.
The second is ComputerCraft http://www.computercraft.info/  They don't go into as much detail as to how it works but a little can be seen at their wiki http://www.computercraft.info/wiki/Main_Page
All computer coding is imo scripting - we describe what we want to happen.