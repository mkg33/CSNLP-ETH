Currently, the logic for the slither game as well as its state are tied together with the way that you render the game and handle input.
You should have a Slither class that contains the information about the player position, food positions, and the rules for how the game plays.
You should make variables private and final whenever possible.
Then, each frame the rendering would look at the game model and draw things according to where they are located.
It's not impossible to figure out what these numbers mean when reading through the code, but the code will be more clear and more self documenting if you use explicit variables for each of these magic numbers.
The compiler will warn you when you are not using a field in your code, for example.
There's no good reason not to just call this dots.
I understand why you are doing this, but if you plan on making more games then I would start learning about a fixed time step rather than relying on Thread.sleep() and multiple threads.
You should always try to separate your game model from the way it is rendered.
You also want your classes to expose as little information as possible.
When you do this, it will be very easy for you to port the game to another graphics library, or even port the game logic to another language or game engine.
If you later change this to a Map or another structure, you won't have to go through your code and change the variable name since it would then be misleading.
So things like screenWidth, screenHeight, maxFood, eatDistance, etc.
I found this that talks about specific ways to implement a game loop with Swing http://www.java-gaming.org/index.php?topic=24220.0