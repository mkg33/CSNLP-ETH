Any grid points within view of a building will be fairly static, but things other units see will change every frame, as they are constantly moving.
I have a RTS game I'm working on, with lots of units moving around.
It should be able to take advantage of the player's entire fog of war.
As with combat units, I want it to look around and select the closest scrap it can find.
While scanning the vision radius of a unit is simple, I'm having trouble thinking of an efficient way to determine which grid points to scan in this much larger case.
Every game I look into that uses fog of war tends to have the AI ignore fog of war completely.
The two options I see are to record per-player visibility flags within the grid points themselves, and then (somehow) update those flags each frame, or to just loop through all units and buildings and perform individual searches to build a list of visible scrap.
However, I have another unit type who's job it is to run around the map and collect scrap from destroyed units.
Is there another method I could use to build a list of visible scrap within a player's entire fog of war view, given that that view is constantly changing?
However, unlike combat units, this search isn't limited to it's own vision radius.
All units are on a grid, and I use a predefined search pattern to scan the grid points around the unit to find the nearest target.
If another unit or building has revealed some scrap, it should be available for the unit to go pick up.
The first would be difficult to keep updated without re-scanning the entire map, and the second would be very redundant if there were many units or buildings in a small area.