When you do check four out of range situations you could use std::out_of_range
I'm a novice at C++ in comparison with other languages, so as an exercise I wrote a square Matrix class that doesn't use STL.
To make your matrix easy to use by other maths like people maybe you should implement this (or something close).
Thus forcing a check on each accesses becomes superfluous.
So why is there an un-needed test to see if they are in the correct range.
In this situation you know that both loopX and loopY are guaranteed to be in the correct range.
So you need an intermediate object to do this correctly.
Accessing matrix elements is usually done with [] in maths.
But you have made the biggest beginner mistake in not implementing the rule of three.
As a result you have opened yourself up to a lot of potential problems with deleting the matrix.
But even std::vector has a checked version of member accesses.
The problem here is that [] can only take one index.
You should have the option of having a checked access.
But in most use cases you have already checked the range.
In particular, I'd be happy to get advice on the following:
But its a bit inefficient as it requires a copy of a line.
Though the standard member accesses is not checked.