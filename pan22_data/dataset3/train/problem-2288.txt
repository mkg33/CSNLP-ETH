It would also let me port the game to other media more easily.
It would allow me to prototype something quickly with a simple text interface, and then go pretty it up later.
http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/
Is this sort of compartmentalization common in games?
There is plenty of room for abstraction along the way.
A board game is a good example of a game that could be made using MVC, as the game logic (model) does exist quite independently of the visuals (view).
However if you consider an action game like Gears of War, the geometry of the 3D models is intrinsic to the game logic, so separating out the view as if it were interchangable becomes pointless.
Your Engine and your games specific graphic data could be though of as the View, your gamecode the Model, and the controller would be whatever glue you use to tell your engine which texture to apply to which entity in your gamecode.
You have a base entity class which you add functionality to with components, where one component might handle drawing the entity, one handle game logic etc.
That way you can plug a fake controller that reads a file that contains pre-recorded input events.
Also make a simple view that just logs things on a file.
Unity3D is a great example of a more game-specific way of organising code.
I was contemplating the design of a game (translating a boardgame to the computer, specifically, which I suppose is relevant in this case) and it occurred to me that it might make sense to build the 'game' separate from the 'display.'
Remember to make the model update at a constant rate (fixed time step), and the view and controller as fast as possible (but not too much variable).
That kind of compartmentalization is the split between an Engine and gamecode, and is quite common.