It might be the math types that give this aspect of the job short shrift because they are used to thinking "conceptually."
I also think introducing the idea of readability at the right time is important.
Have the students read (actual) code of varying qualities written by others.
I start regularly discussing readability around the time we introduce functions.
The best motivator for my classes on this has been to conduct a code review of a recent assignment.
Then they should be tasked with reviewing/critiquing/modifying it.
I take one or two student-submitted solutions to an assignment, and as a class we go through and read them, and try to understand what the author intended.
Once they are placed in the readers' shoes, they will better understand the importance of making code readable.
Students won't internalize the idea early on in a first programming course, when they're grappling with new, abstract concepts, and can barely get their programs to work.
Thus, I pull a solution from a previous class, and everybody knows that it is such.
Along the way, we discuss things the author did well, along with things they the author could improve.
Readability is usually the number 1 issue with the reviewed programs, especially early in a course.
Using an actual program from a student in the class can be problematic because that student can feel called-out, while other students may be reluctant to criticize a classmate's code.
Surprisingly, the better students at this are often the English, language, and some liberal arts types, because they are used to working with parsing, declensions, and grammar.