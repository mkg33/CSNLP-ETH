What this means is that instead of showing health as "2/10," show it as "20%."
For example, if you have a game where the player takes non-positive damage and their health didn't drop, you can easily and accurately check this and know that the player cheats.
Won't stop more determined hackers, but will reduce the chance of more casual cheats messing up your leaderboards.
One very effective technique used by some roguelikes (DoomRL, Brogue) is to mask the actual variables.
Why would you prevent players from cheating themselves (which cheating in a single player game amounts to)?
People have successfully created hacks/cheats for much more complex stuff and it just needlessly obfuscates your code or makes your game perform worse.
Somebody who wants to cheat would have to set health and healthComplement correctly, otherwise the game would crash.
Write a ring 0 driver that hooks SSDT and logs / blocks when ReadProcessMemory / WriteProcessMemory is called on your application.
If any are detected, let the player cheat (if offline, it's harmless), but make sure no scores/acheivements will be posted to any online leaderboard/acheivement system - just make it silently fail?
Do something interesting, like spawning some uber enemies around him :)
(Might annoy coders that have dev tools open and minimized for legit purposes and are taking a gaming break, though...)
Research the known cheating tools - and frequently check whether any of the most common ones are detected running (check process names?)
Another possibility (for integer values) is to have a second member-variable which holds a bitwise complement of an existing variable.
In a multiplayer environment, it's the server's task to detect unnatural changes and counter them (typically by either ignoring the input or blocking the culprit out from the server completely), but in a single player environment there's nothing happening except the cheater is doing himself a disservice.
So imagine you got health, you would also have healthComplement.
search for changed/decreased values after the player health drops), albeit it takes much longer to do it that way.
I think it's kinda pointless to try to prevent stuff like this.
Remember, most memory editors work well with specific value searching/filtering.
If you don't know the specific value, you can still track it down (eg.
It'd be better to just log so you can slowly change their game behavior over time rather than just crash.
IOW, unless you're creating a multiplayer game it's a waste of money, and if you are you're thinking of hardening the wrong place.