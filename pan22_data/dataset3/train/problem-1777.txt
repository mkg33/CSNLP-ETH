Think of your log as a database of logged records.
You might have all logged records contain the same number of fields (client#, action, result, etc) and each event decides which fields to fill in when generating the record.
How much information should I put into the log output?
Background: I've never got along with logging too well - probably because I've never had a need to review the non-error level logs.
The first logging option (all records contain the same number of fields, although many may be empty) is preferable, because lots of database tools can then be used.
Feel free to suggest some good reading on a subject in addition to a code review.
For example, if your logging code creates a table of SQLite records, you can use SQLite to conveniently select and report only the logged events of interest.
Or, you might have N different record layouts (connect event record, query event record, setgui event record, etc) and each event creates the record type specific to that event.
In either case, don't worry that you might have too many records or that records contain too much info, because what you also need to create is a log viewer/filter that allows only the records and contents of interest to be displayed or dumped.
But I'm afraid my logs will contain too much information to easily comprehend what is going on.
The class is a persistent connection with the client, and is responsible for receiving (responders) and sending (commands) information from and to the client.
That way, each method only contains the code for its core functionality.
I comply with logging practices on work projects, but I usually don't do any logging in personal projects.
I suggest that you extract the logging and command registration aspects using decorators.