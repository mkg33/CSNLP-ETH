Once your program is written, then ask yourself: Is it not meeting the hard performance requirements I have set?
It's an upper limit for the number of whistles you can make.
This may seem like overkill but it will be much easier to change the code to adapt to changing circumstances.
You want to avoid premature optimizations that both distract you from your real goal and lock you in to a certain implementation that cannot be easily changed if and when it is necessary.
It would actually be much better to capture the knowledge you have about the domain more directly and transparently in the code.
writing a program that say, generates image files, but trying to optimize the code that checks if an output filename string is valid.)
You have some 'magic numbers' embedded in the code which are a really bad idea as they make it difficult to maintain or change.
After you are satisfied with that, then if necessary you can proceed to add further micro-optimizations but only after you have clearly identified where the actual bottlenecks are (e.g.
I want to touch on your comment about making it "more efficient" with just a simple comment: Don't.
Or in pound, and you have to calculate the length?
Document your code, think about others who might view or work with it, and think about yourself in the future coming back to it and not remembering what you were thinking when you wrote it.
Using #define for a numerical constant isn't too bad in C as it doesn't have a const modifier.
so if the spec changes it is much more obvious where in your code you have to make changes.
If you're told making a widget needs an X and a Y then code that.
Is some algorithm here or there taking too long and actually affecting usage of my program in a noticeable and negative way?
Code cleanly and do what makes sense to keep your design straightforward.
It is very common for new programmers to start wanting to make unnecessary micro-optimizations right off the bat; especially in areas that don't really matter (e.g.
What if the spec changes and the amount of steel is entered in meters?
profiling, or measuring function times, not just blind guessing).
The other answers here are very good, especially the accepted one by Brendan.
You should separate out the fixed ratios and give them meaningful names.
I know this is may be general advice and a bit premature, but if you keep this in mind (as well as all the information in the other great answers here) you will be setting yourself up for a smooth and productive experience.
If so, then first concentrate on improving any algorithms or logic on a higher level; perhaps, for example, you are sorting a large amount of data and it is definitively too slow or resource intensive -- first consider a different sorting algorithm.
Do not worry about wasting a few CPU cycles here or there if it leads to clean, maintainable, clear code, especially during initial development where you may be changing things unexpectedly.
Design -> Implement -> Test -> Profile -> Optimize -> Test, and only do the last 3 if your performance requirements aren't met.
A final subtle point is that you've stated a whistle needs an X and a Y and you've added X's and Y's weights (0.75 + 0.35) and implemented a function to divide by 1.1.
The result of dividing steel by 0.5 isn't an amount of steel.