I'd suggest that it would be nice to print a "usage" message if the user enters either an invalid or no argument.
The code fails with an exception if it's invoked with no command line arguments because it attempts to use argv[1] and there isn't any.
and terminate with a non-zero exit status in the case of a failure.
It's possible that you'll produce an output that's reserved for a particular purpose, such as loopback (127.0.0.1 or ::1) or broadcast (255.255.255.255, ff02::1, ff02::2).
It would be easier to compare  the given argument against the
Build in knowledge of such addresses, and if you find you've produced one, then replace it.
Missing or invalid arguments should print a helpful error message.
Most Unix command-line tools print the message to the standard error
And an IPv6 address is a little trickier because we need hex digits.
Use _ as iterator variable if the concrete value is not needed.
As an example, the "IPv4" case can be implemented as
List comprehensions are extremely useful and very Pythonic.
Here's how to use one to generate a random IPv4 address:
strings "4" and "6" instead of converting it to an integer
Use list comprehension instead of appending to an array in a loop.
That works because randint generates a number in the range 0x10000 to 0x20000 and we then pick off the last four hex digits.