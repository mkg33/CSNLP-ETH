Computing with trits instead of bits is like computing with Turing machines that have an alphabet size of 3 instead of an alphabet size of 2.
Bits, trits, etc., are crisply in one state, the end.
Qubits at least appear to have a fundamentally different "character" from bits or trits.
In particular, if Factoring is not in polynomial time, then there exists no ptime algorithm over trits that factor integers, while there does exist a quantum algorithm over qudits that factors integers.
(If you use an intractably large alphabet instead of computing over bits, that's "cheating," because then you are just transferring the hardness from one part of the computation to another.)
Increasing the alphabet size like that (not necessarily 2 to 3, but 2 to larger) can permit a speedup in running time, and a compression in the use of space.
The state of a qubit (or, more generally, a quDit, "quantum digit") is a collection of probability amplitudes that associates the qubit to some extent with each possible state.
(See http://en.wikipedia.org/wiki/Linear_speedup_theorem for some initial discussion.)
Note that these improvements are fairly "minimal" -- they won't make an intractable problem tractable.