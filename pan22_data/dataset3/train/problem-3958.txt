I also kept the translate function for ease of use but the generator is simple enough to use on its own.
As you can see, differences are minimal but generated code feels neater for the second version.
I would also generate code that respect some standard practices: defining a main function and wrapping its call into an if __name__ == '__main__': guard.
Lastly your assertion feels off as they can be turned off at runtime.
Storing generated instructions into a list that is returned at the end feels like your function would benefit from being turned into a generator.
Especially if you plan on writing the generated string to a file, this would help interleaving computation and waiting for I/O.
This would mean starting level at 1 as you would generate code that is inside a def main():.
Since [ and ] are special anyway as they do more than producing a string, I'd rather choose to either:
And since you are using formated strings, you could make directly use of the variable width alignment such as f'{"": >{level*4}}rest of the code'.
You should also take a look at textwrap.dedent to simplify your header (and thus footer too) generation.
The way you define your various functions is inconsistent:
Instead I would raise a real exception such as ValueError with a proper error message.