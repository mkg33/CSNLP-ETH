Now the test code stays small yet your tests are as variably complex as your data object collection.
Looks like your tests are basically the same except for hard coded method parameters.
singleton, twoPairs, SimplePair): it is interesting to test the behavior of the three algorithms on each of those instances.
Test code must be as thoughtfully architected as the target code to avoid all the bad things about poor OO design.
Consider a process composed of three algorithms: makeRuns, meld and traverse (each taking the output of the previous one as input): it is interesting to test each separately.
Build data structures to generate more tests instead of writing more test code.
(I find the result of the tests to be lacking in clarity.)
It strikes me that the amount of test code explodes with the need to test more involved graph complexity.
In the context of unit testing this means that each function is a "unit".
Make the method parameters variables then you can have a single test method.
You have recognized that each of the tree functions can be tested separately.
Is the code below the correct implementation of such a test?
The result can be described as an array of (say) 3*3 tests.