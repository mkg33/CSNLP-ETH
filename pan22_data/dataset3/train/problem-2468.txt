Strictly speaking, the normal component will be ignored if you've turned off lighting.
However, normals and lighting very much can apply to 2D games.
Normals are also useful for quite a range of steering behaviours.
You don't need normals unless you're doing lighting simulations.
There's no reason to give the normals to OpenGL or whatever rendering package you use if it doesn't need it for anything (like the lighting pretty much everyone else has pointed out).
Only you know whether you'll need normals in a 2d game.
They're fairly trivial to add in once you need them, compared to the actual difficulty of writing lighting shaders.
Rather than explicitly defining a 3D normal vector that aligns with your vertex, you can define a normal map that lines up with your 2D graphics.
It may also accelerate wall collision response (knowing the direction to push objects out of the wall).
If you're able to write your own shaders in whatever language/toolkit you're using then you can make absolutely sure they're not used.
One good reason for having normals in a 2d game would be to be able to check whether you're inside or outside some shape.
You don't even need normals for a 3D game if you're not going to bother with lighting.
They may make sense - DOOM, for instance, had normals even though it was a 2d game (yes yes, it looked pretty 3d, but technically it was still a 2d game).
If you have a top-down perspective, normals might come in handy for strafing movement of your characters (you know, shifting position along the normal of the direction the character is facing)
But a link says more than thousand words: http://www.red3d.com/cwr/steer
This lets you have incredibly epic lighting even in a 2D game.