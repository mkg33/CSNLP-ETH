The straightforward way I had thought of was to create a GameObject for each mesh, with a MonoBehaviour subclass attached that generates vertices, normals, and so on for the Mesh object of a MeshFilter component.
Thus, my question is: Is using chunks of combined meshes (as one actual Mesh object per chunk, possibly split into several sub-meshes to support different textures) a viable way to go in my situation, despite the outlined issues with updating individual "inner" meshes?
Based upon these resources, I figure I have various ways to proceed (that are not mutually exclusive):
The Transform of each GameObject can then conveniently be set according to the desired orientation of the mesh.
In my project, there are large numbers (think 4-digit numbers) of 3D meshes that are created or modified one by one, or in groups, at runtime (based upon user interaction).
However, I have read various worrying reports that Unity does not cope well with large numbers of GameObject instances in the scene.