See [2] and references therein for a discussion of some complexity issues related to this.
In quantum computing, Nielsen, Dowling, Gu, and Doherty show that QC can be realized as (if I understand correctly) geodesic flow on a certain manifold - a particular example of the kind of dynamical system you're talking about.
(At some point I saw a cool video of the trajectory of a dynamical system for sorting, but I can't seem to find it...)
Brockett [1] studied a closely related idea, and showed how to construct dynamical systems that solve any linear programming problem in (I believe) the same manner you suggest, as well as dynamical systems to sort a list of numbers and to diagonalize a matrix.
[1] Roger W. Brockett, Dynamical Systems that Sort Lists, Diagonalize Matrices and Solve Linear Programming Problems, Proc.
I won't venture a guess as to whether such dynamical systems formulations could be used to prove something interesting in computability/complexity, but can offer some further references that may be relevant.
You may be able to use this to directly get the dynamics you need to compute the squaring function.
The geometry of quantum computation, arXiv:quant-ph/0701004, 2007.
Finally, although I don't think it's exactly what you're talking about, it would probably also be worth checking out Bernard Chazelle's work on "influence systems" which are a type of dynamical system that is at least as powerful as Markov chains and Turing machines, but can exhibit all kinds of dynamic behavior (including chaos, etc).
[3] B. Chazelle, Natural Algorithms and Influence Systems, Comm.