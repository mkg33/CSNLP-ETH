This allows there to be more than one map object on one tile (e.g.
What I am doing is storing all my map objects (monsters, stairs, traps, the player, other NPCs, etc.)
In short, complex algorithms will only save time if there are a large number of monsters.
This means that if there are a small number of monsters that need to breath fire, the performance will almost certainly be worse.
Although this increases the size of the map considerably, it is unlikely to cause any problems unless your map is extremely large.
For example: Keep monsters in a list/array (Something you are probably already doing) and sort them by x and y.
This is simple and likely to be quick enough in almost all cases.
However, this introduces the need to sort the list once per game tick(Sorting is O(n log n)).
Basically, the size increase is probably irrelevant and this is possibly the best option overall.
I am also working on a (somewhat/partially) roguelike game, though in C# (using Monogame), not C++.
This would enable you to perform a binary search (Which has O(log n) performance) for locating a monster at a given tile.
1: Implement some kind of sorting or data structure.
This system lets you handle both small and large numbers of monsters simply and efficiently.
It also makes rendering the objects easier if the map is larger than the screen.
This would only help performance if they are a very large number of monsters that need to breath fire (Probably somewhere in the hundreds to thousands).
Although that was just an example algorithm, the same general characteristics will hold true.
The last object in the list is almost always the one that will be interacted with by other objects.