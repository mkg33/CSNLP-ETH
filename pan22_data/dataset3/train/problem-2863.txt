I am using a very large canvas ( 1920 x 1080 ), but it doesn't seem like I should be hitting my limit already.
I am guessing that my background should definitely be pre-built into a canvas, but how far should I take this?
Can they be used for animated sprites within a single canvas?
Am I adding a lot of overhead just by adding a translate() call, as opposed to passing in the x,y to drawImage()?
Some people suggest using "transate3d", etc., which are CSS properties, but I'm not sure how to use them within a scene.
Should I maintain an individual canvas for each sprite, to cache all static image data when not animating?
I have just recently started some experiments with game development in Javascript/HTML5, and so far it has been going pretty well.
1) What exactly is done on the CPU vs. the GPU in terms of canvas and drawImage()?
2) I have seen posts here and there with people saying not to use the translate(), rotate(), scale() functions when drawing on the canvas.
I have a simple test scene running with some basic input handling, and a hundred-ish drawImage() calls with a few transforms.
I'm afraid the answer is probably "it depends on the browser", but can anybody give me some rules of thumb?
This all runs great on Chrome, but unfortunately, it already chugs on Firefox.
If you are redrawing the entire canvas several times a second this can be slow on any browser (had the same problem when testing on the g/f's low spec laptop).
So on that note, I was hoping to ask a few questions:
Could you look into only redrawing the areas you need, and therefore reducing the amount of canvas that is redrawn in each frame?
I naively imagined that each drawImage call results in a textured quad on the GPU with the canvas effectively being a render target, but I'm wondering if I'm pretty far off base there...
3) I have also seen a lot of posts with people mentioning that pre-building canvases and then re-using them is a lot faster than issuing all the individual draw calls again.
This is how I got the greatest performance increase in my small demo app.