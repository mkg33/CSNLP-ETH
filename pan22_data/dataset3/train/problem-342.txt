I am 16, but first got exposed to block-coding at the age of 9.
Such systems can keep a structured form of the program (e.g.
What are some advantages and disadvantages of teaching block coding?
This enables students who might have dropped out of an introductory C++ course to get a taste of programming, both to expand their understanding of the world around them (since they use programs every day) and to motivate some of them to learn text-based languages when they hit the limits of block-based languages.
Creating phone apps is hard, so the ability to do that may be of interest to them.
Block based languages need not be especially limited.
I have built and used such systems that create and show a textual version of the program and it can be in a real language or in some subset suitable for beginners.
It is challenging, though not impossible to build such as system that gives complete access to the standard libraries as well as the complete language.
The UI itself serves as a prompt for what might be added to that nasty blank screen.
That said, I'm the head of the programming/computer club at my school and have noticed that students who were first exposed to scratch (A block-coding language developed by MIT which it taught at junior-middle school at my school) pick up "real" programming languages quickly, since all the basic concepts are already known to them.
Not a definitive answer by any means, but thought that I might add what I have learnt...
MIT's App Inventor is based on block-coding, where the user designs the UI and then designs their functionality with block coding.
Block based languages can help with this as they normally have a UI that shows all of the options that are available at a given moment.
a parse tree) as the internal structure and can therefore produce the output in various formats such as text and structure diagrams.
The user can, for example, create Java classes, methods, statements, including structured statements, etc.
They may stare at a blank screen with a blank look.
Disclaimer: I was part of the App Inventor team and am co-author of a book about App Inventor.
I think it's a great way to get students started on learning how to program (basics of coding and how to work out solutions), but I'm afraid it also might be a bit dull for those who already have had some experience with other programming languages.
However, it has so much more potential than traditional drag-and-drop languages as mentioned in an article I found on this website (Placement of App Inventor in high school CS curriculum).
Scratch and MIT App Inventor are very similar, and both are taught to my juniors at school, and students generally appear to enjoy these.
However, it is, indeed boring to those who have already had experiences with programming, and this is a problem to which you really should find a solution if you wish to move ahead with GUI-based programming languages in your curriculum.
This is relatively easy to do as the user enters structures directly.
I'm thinking about teaching App Inventor to students who have just begun their adventures in the programming field.
It also provides things such as correct spelling and correct nesting of elements as well as (possibly) giving error highlighting and correcting as well as pretty-printing.
Additionally, such a tool can be used to storyboard an application, creating the class structure with key methods and then take its output, which can be just text, into a more full featured IDE.
While teaching my juniors JS or C++ I'll often compare a concept to its equivalent in Scratch.
A block-based tool is, in my mind, a sort of intermediate point between the extremes of reading little before writing and reading a lot first, since the available options are visible and it is difficult to make a low-level (lexical or syntactical) mistake.
If they are extremely advanced, you can encourage them to contribute to App Inventor, which is open source.
One of the problems that novices have with learning programming is that, too often, they are asked to write when they have never read any interesting programs.
That said, the obvious disadvantage is that scratch is basic, and doesn't cover advanced concepts (return codes, arguments, etc.)
Don't assume that students who have seen other programming languages will be bored.
Finally, such systems are normally (though not always) built in such a way that the learner can get near immediate feedback from the execution, with compilation, etc.
Once they start typing they may make many errors and become frustrated.
Often beginners don't know where to begin when given an assignment.
While I continued with more advanced forms and still make use of them (notably, LEGO Mindstorms), I grew out of block-coding very soon, and progressed to what one may call "real"-er programming languages.
Reading good programs is a good way to help people understand program structure and good style.
If the program being written is graphical in nature this can be a big motivator.
I have taught App Inventor at the college-level (to non-majors).
The main attraction of block-based programming languages is that they expose users to the fun aspects of programming (creativity and design) without requiring them to deal with the less fun aspects (such as syntax and obscure errors).