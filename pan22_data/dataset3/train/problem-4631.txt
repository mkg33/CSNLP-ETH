However, my impression is that if you need bleeding-edge newness, then update using gem.
The different packaging systems shouldn't be a problem; your system management automation tool should be capable of handling the differences gracefully.
I don't see the same pattern with gems or CPAN packages.
Perhaps there are third party repositories that are more up-to-date, I'm not sure.
In my experience all *nix based package managers like ports, macports, rpms, dpkgs, etc.
Our policy is that we use gems when there's no debs "downstream" in the dependency chain (so usually customer-deployed and managed code), but everything we do ourselves is packaged properly and so we'll roll any dependent gems into debs to satisfy those dependencies.
debgem is a gem-to-deb service with 25k packages, but it seems it didn't take off and lags a few rails releases.
Python, OCaml, Cabal and CPAN packages are straightforward.
Maybe you should define your criteria more precise to get a useful answer.
Example I deploy on hardy, if Ruby 1.8.6 is acceptable, otherwise, the latest released Ubuntu if I need 1.8.7
It's probably one of those questions where you'd see 50/50 divide.
I then install the rubygems tarball as you need the close to latest version for Rails 2.3.4, and then install passenger etc using gems.
Situations such as rmagick where you need to have imagemagick installed, I use the system debs for imagemagick and then install the rmagick gem
I draw the line in the sand at updates quick vs stable is ok
have rather strange inter-dependencies, and often install stuff that you don't want or don't need for your task, or don't install what you do need.
One thing to keep in mind is that updates will happen much faster using gem than they will to the official apt repositories.