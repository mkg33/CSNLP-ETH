Likewise, have a look at the Mutable Sequence Types section and common operations.
So far, you have implemented push, pop, peek and iteration.
There is not a great regard for private data and access control.
I would suggest that you look at Python's Common Sequence Operations to see which you can implement.
Keep in mind that Python is a "consenting adult language."
So, I'd suggest trying to build as transparent and well-integrated a class as possible: allow accessing items on the stack via s[i] notation, support things like .find() and .count(), and inherit from whatever ABCs you support.
I'm glad that it's destructive, but I don't understand why you felt you needed that.
A transparent stack should be able to support in, count, maybe indexing, etc.
Also, check out the Abstract Base Classes for collections, and add whatever parent class(es) you implement.
If you choose not to make the stack transparent, that's okay, but it might limit applicability.
If your stack is iterable, make sure you implement an Iterable abc.
Instead, the expectation is that you will implement as much as you can, and not be surprised if someone wants to peek.
I would rather see you implement the stack using a built-in list, which will improve both memory performance and speed.
In terms of implementation, and making it more efficient, I don't think the linked list adds any particular value.