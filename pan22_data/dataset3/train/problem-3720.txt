I prefer to duck-type for a str-like object using hasattr(item, 'lower'), which tests for the lower method.
Second, I would really put the string-handling function as an option.
For example, if you don't want to flatten a str, you probably don't want to flatten a bytes, either.
You just pass that argument along to the flatten function.
A better approach would be to run the if test, then check if i has been defined.
And I would use a more descriptive name (sep is common).
So it is better to test if it raises an except if you try to make it iterable.
First, your code won't work when an item is an iterator and preserve=True, since it will consume the first sub-item in the iterator, making the next for loop skip the first item.
I personally use a short-circuit continue to avoid nesting too deeply, but this again is personal preference.
Third, this may be a personal thing, but I don't like explicitly testing if something is a str.
Second, you really shouldn't use assert here, you can just use an if test to short-circuit.
How would adding an empty iterable to anything do anything?
Fourth, I think a generator expression is easier to understand than a map.
Fourth, some of your other functions would be easier if you include an option to split strings.
This should really only be present on str-like objects, although I admit it isn't perfect.
If you include the option I mentioned above to flatten strings, this becomes much simpler.
Third, again this won't work if any items are iterators, since it runs through them twice.
There is no way around this other than to convert the items to a list or something like that.
It may have something in the method that raises some except.
Fifth, just because an item has the __iter__ method does not mean it is iterable.
So perhaps if s=False, then you can raise an error since the items cannot be combined.