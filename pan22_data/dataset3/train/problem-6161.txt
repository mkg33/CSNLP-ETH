By checking the rosaly source we see the following inheritance tree
ConstructorDeclarationSyntax -> BaseMethodDeclarationSyntax
EventFieldDeclarationSyntax -> BaseFieldDeclarationSyntax
For completeness all these TryX..() and their generic methods
This method is quite large and could at least be improved for readability and performance.
MethodDeclarationSyntax -> BaseMethodDeclarationSyntax
EventDeclarationSyntax -> BasePropertyDeclarationSyntax
We can add methods for processing the separate base classes in a bool TryGetValue(SyntaxNodeAnalysisContext, out AnalyzeResult) fashion.
By adding generic methods for processing the extending classes in the same fashion like so
DelegateDeclarationSyntax -> MemberDeclarationSyntax
then we will change the former AnalyzeSymbol() method like so
StructDeclarationSyntax -> TypeDeclarationSyntax -> BaseTypeDeclarationSyntax
ClassDeclarationSyntax -> TypeDeclarationSyntax  -> BaseTypeDeclarationSyntax
PropertyDeclarationSyntax -> BasePropertyDeclarationSyntax
private void AnalyzeSymbol(SyntaxNodeAnalysisContext context)
Right now you are checking for each expected type although if a previous check had been successful.
EnumDeclarationSyntax -> BaseTypeDeclarationSyntax
and expect for DelegateDeclarationSyntax -> MemberDeclarationSyntax  each of these base classes share a SyntaxTokenList Modifiers property.
IndexerDeclarationSyntax -> BasePropertyDeclarationSyntax
That beeing said let us see what the different "DeclarationSyntax"'s have in common.
FieldDeclarationSyntax -> BaseFieldDeclarationSyntax
We have a clear chain of execution for each class which extends BaseTypeDeclarationSyntax.
InterfaceDeclarationSyntax -> TypeDeclarationSyntax -> BaseTypeDeclarationSyntax