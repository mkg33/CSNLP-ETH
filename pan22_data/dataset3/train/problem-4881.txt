These directories are also stored directly in the MFT (due to their small size), so even if the process could be stopped and the directories deleted, the MFT is effectively trashed - so large and/or fragmented that the system may need to be restored from backup.
Or is the game already lost if the attacker can execute arbitrary code, regardless of which user account is used?
It's very difficult for an exploit to escape your VM.
Virtualbox is my choice since you could even install it on the same box if you wanted to and make it start with the server, even headless, so it would almost run just like a service.
I've always thought Windows NT descendants make it possible to contain this, but now that I've tried, I'm no longer so sure.
Is it possible to set up a user account for that service such that if a hacker were to exploit this vulnerability successfully, the most damage they could do is read/write this text file, mess up this specific service, and possibly list the files out of C:\Windows, but nothing else?
I'm not a Windows guy, but how would you do this in Windows?
If the process exploit can create directories somewhere on C:, then it is fairly straightforward to disable the system by creating millions or billions of empty directories/subdirectories.
You could certainly try to create a secure user similar to the ones that come with windows that can't be logged into, and only have access to a certain files on the machine.
It'll stop a majority, but there are a lot of exploits that can defeat DEP anyway.
You may not see this in the gui due to you would need to view the Advanced property page or use ICACLS to get a complete list of permissions.
Suppose that one of these services is pretty simple, maintaining a small amount of information in a text file, but as a result of being badly coded, has an (unknown) arbitrary code execution vulnerability.
Suppose you have a Windows Server machine running various sensitive services.
Another thing that would work is using a dedicated sandbox program such as sandboxie that can sandbox any process to make it harder to escape if it gets compromised.
Empty directories are zero bytes, so are not subject to quotas.
One thing you could do to put the service in a sandbox is run it in a VM.
With linux we chroot jail processes and services like this as part of a security mitigation strategy.
The con to this approach is that you would run another whole instance of windows, which would itself need to be kept up to date and would consume resources.
If "execute arbitrary code" means the process can create directories, it may be possible for them to create directories either in the current directory, the service account's user profile directory, the root of the C:\ drive, or simply search for a directory where it can create directories.
The con is that a privilege escalation exploit could work on that user depending on the situation.
Last time I checked, Windows usually conferred the permission to create directories in the root of C:.
Even if the C:\ root directory permission had been hardened, it is trivial to search all directories on C:\ and test for one where permissions allow the service account to create directories.
A naive attempt at doing this immediately runs into a problem: anyone in "Users" can write to C:\Program Files, and removing "Users" from that directory's ACL results in a permission error, making me wonder if, perhaps, it is a very bad idea.