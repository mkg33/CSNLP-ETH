That's unexpected behaviour, so a guard makes sense.
ECMAScript leaves the behaviour of random() to the implementation, so there's no immediate answer; it would be platform dependent.
In that case creating the pool would use so much resources that the first method should be considered.
The first method can definitely go into a very long loop, but that is very unlikely to happen.
Unless the numbers to pick is not very close to the available numbers, the probability that the loop would be so long that it would be noticable is very small.
This version completes in O(nÂ²) time, with limited memory usage and only count random calls.
A rather infamous example of failing to devise a fair algorithm for this - which also did show the browser dependency in Javascript - is the browser ballot that resulted after a judgement against Microsoft regarding anti-competitive practices in the web browser integration for Windows.
Expressed in Python, because it lets me have less fluff around the algorithm, your two algorithms are basically:
As for the random number generation itself, that's a rather complex field.
If you for example pick 5 numbers out of 10, there is still only a probability of 1 in 1267650600228229401496703205376 that it would go as far as 100 iterations when picking the fifth number.
This is getting into the same range of probability as getting two GUID values that would happen to be the same, and that is considered so unlikely that it in practice never happens.
The Linux man page for random(3) suggested a book (Numerical Recipes in C: The Art of Scientific Computing) with a chapter on that topic.
A third algorithm comes to mind which may be useful if random numbers are costly and max is large:
Still, the second method gives a more predictable performance, so that is preferred unless you would have a huge pool of numbers to pick from.
It depends on the proportions of count and max, obviously, but most importantly on the behaviour of the random number generator.
If count>max only the first max elements are randomly ordered; the rest are simply an incrementing series.
Rob Weir's article Doing the Microsoft Shuffle: Algorithm Fail in Browser Ballot covers the details, and is an interesting read.