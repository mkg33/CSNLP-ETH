Other alternative is to convert it to a supervised learning problem with hand-rolled categories as outcome (example: 'laptops with lot of RAM and graphics software', 'laptops for development') and then predict that category.
Replace users -> employees and movies with a unique hardware + software setup.
Let us make the assumption that there are a handful of latent K categories of the setup encoded by a large dimensional vector of size N. To go about finding those, you can take a low dimensional projection of the encoding vector.
This is probably a mathematical way of finding the categories instead of what you'd do manually on the output of clustering/unsupervised approach.
Then for a new employee, predict the nearest matching cluster and use the pre-dominant setup of that cluster.
Unsupervised learning can be a good starting point.
All these approaches are actually variant of low dimensional projection of the encoding vector + similarity calculation with existing users.
But it will reduce the predicted variable space by a large margin.
Use standard recommendation algorithm applied to binary data.
Let us assume that you have an N dimensional one-hot encoded vector representing the hardware and software setup.
Take any standard movie recommendation kind of setting with users and movie ratings.
If you have enough data, you can pose it as 'recommending right setup to a new employee' problem.
The problem is there may be lot of lot of variation in the same cluster, especially on softwares installed.
You will need upfront work and domain knowledge to create the categories.
You can do a clustering (k-means/hierarchical) of existing user-base to find patterns in it (example: cluster 1 contains employees with Windows laptop with 4 GB RAM and photoshop pre-installed , cluster 2 is Mac with 16 GB memory).