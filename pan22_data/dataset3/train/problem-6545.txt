When you run ssh-agent you should save the SSH_AUTH_SOCK and SSH_AGENT_PID environment variables to a file, and use them to see if the agent is already running.
Basically, it does similar things as a Unix script to do the same would.. except that it sets a specific socket file to be used, instead of attempting to parse the ssh-agent output ..
The above setting need to redo again after a machine reboot.
This could probably be setup as a service as well.
This doesn't quite accomplish what you are looking for (running ssh-agent without cygwin), but it works perfectly for storing keys in memory.
I would like to access a SSH service with pass-phrase protected private key in Windows using ssh-agent.exe.
Is there any good way to automate the launching of ssh-agent and setting the SSH_AUTH_SOCK in the context of native Windows session?
100% windows cmd script except for ssh, ssh-agent, and ssh-add.
The environment variable should not set in cmd box or else other process accessing ssh.exe may not recognize the environment variable.
So far I able to utilize ssh-agent.exe by changing environment setting in my home account manually to set an environment variable as follow:
You need to run cygwin once to start the agent, but after that it doesn't have to be running.
To run ssh-agent.exe in the background I have added the following to .bashrc
I've created a pretty involved script for Windows cmd.exe along with a registry hack that can be used to make it autorun in (most) ever command shell launched.