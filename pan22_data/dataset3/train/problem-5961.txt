// combinations : ["a.*?e.*?i","a.*?i.*?e","e.*?a.*?i","e.*?i.*?a","i.*?a.*?e","i.*?e.
I couldn't remove the ifs and the flag , so i thought about a diffrent aproach,
const combinations = perm(letters).map(combo => combo.join('.*?
The code you posted returns only one value if there's more substrings containing those letters, here's a tweak to store all possible shortest combinations in an array :
const originalStr = 'figehaeci', letters = ['a', 'e', 'i'];
    let rest = perm(xs.slice(0, i).concat(xs.slice(i + 1)));
const combinations = perm(letters).map(combo => combo.join('.*?
    let rest = perm(xs.slice(0, i).concat(xs.slice(i + 1)));
const originalStr = 'figehaecizaexi', letters = ['a', 'e', 'i'];
Using regular expressions seem more reasonable aproach, you can have a function that returns all the possible combinations of the letters in the array, create regular expressions from the resulting combinations and match against the orignalStr,
let shortestLength = originalStr.length, result = [];
// combinations : ["a.*?e.*?i","a.*?i.*?e","e.*?a.*?i","e.*?i.*?a","i.*?a.*?e","i.*?e.