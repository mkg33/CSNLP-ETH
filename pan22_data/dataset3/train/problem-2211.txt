Wrong, there's a lot of ways websites profile you.
You are only removing the inline/property handler.
These "widgets" come in a variety of forms, like ads, like buttons, tweet buttons, follow buttons etc.
The best we could do is to clone the node, which doesn't copy over handlers assigned via addEventListener.
A server can then compute a hash and link it to you.
<a href="#foo" onmousedown="foo('inline')">Test</a>
No matter how you block the click-jacked search results, if you end up on a page that happens to have some widget that reports back to their server (with the same hardware, software and network info), consider yourself tracked.
document.body.addEventListener('mousedown', function(){
document.body.addEventListener('mousedown', function(){
Then we prevent delegated handlers by calling stopPropagation.
You're not preventing handlers that are assigned via addEventListener and delegated (handlers assigned to ancestors to listen to a descendant).
One other method is your device fingerprint, the combination of hardware, software and network information that normally gets sent to the server.
Lastly, we replace the original element with the clone.
<a href="#foo" onmousedown="foo('inline')">Test</a>
Then we override the inline onmousedown by defining your own function.
First, we cannot prevent addEventListener handles since removeEventListener requires the reference of the handle function which we normally don't have access to.