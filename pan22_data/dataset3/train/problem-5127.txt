Really though, you cannot update faster then your ping time and only within the limits of your upload and download speeds.
You don't want to send the position every frame as you'll flood your bandwidth.
There are likely to be other ways to deal with network optimization.
How is simply sending a position "not enough anymore?"
You can further save bandwidth by only updating every so often and lerping http://en.wikipedia.org/wiki/Linear_interpolation between the updates.
The data you can send will be less due to losses from header information, packets that arrive out of order, lost/dropped packets, incomplete packets, etc.
http://en.wikipedia.org/wiki/Client-side_prediction There are two kinds.
The client sends this to the server at specified intervals, and then the server sends this to the other clients.
If someone is falling, it's pretty easy to predict what's going to happen - he'll keep falling until he lands on something or falls out of the game world.
Generally you want to do this for everything, because otherwise you'll have to wait for the server to respond before you jump or move.
As such, it's rather difficult to make any such tutorial on this subject.
As such, you can predict his current position before the server can even give it to you and then update as needed.
First is the client doing actions without checking if it's valid by the server.
Since this is a sandbox game, let's assume that messages have to be guaranteed since latency isn't such a big issue and most messages need to arrive safely.
For example, you don't need to send individual particle data across a network, but such an engine may just do that depending on how the game is coded.
There are more advanced techniques to dealing with lag, such as prediction.
The player position packet has PacketID, X, Y, and Z.
You may or may not wish to send an "Ok" packet back from the server to the original client.
We never really can update fast enough, but we can fool people into thinking that it's happening.
This is usually a bad idea for all but the most simplest games due to the amount of data being sent, it quickly faces scaling problems.
Don't forget that the max throughput of a connection is Download/Ping and Upload/Ping.
Note that there are a few game engines that send all object data, and as such require virtually no code for networking.
Let's have a look at what the minecraft protocol says about player position.
A game network protocol is generally unique for every game because only the people making the game knows what needs to be sent and how often to send it.
That's really all there is to it at the basic level of a protocol.
http://mc.kev009.com/Protocol#Player_Position_.280x0B.29
There will always be lag and nothing can be done about that.
The second is predicting what other clients are doing.
I'm still somewhat new on this, and so I may of missed some things.