In your case line 3 return 0 or 1 depends on week-number.
this one will let USB_NN variable equal to one of USB_DRIVES[0] or USB_DRIVES[1] depending on USB_NN_INX value.
Then that number substituted into device name USBx - USB_0 or USB_1.
You can use any implementation in bash to equal one variable to another from following:
"%" - is a MODULO/REMINDER operator, complementary to the "/" that return integer part of division.
This number is used as an index into the USB_NN array.
$WEEK_NO % 2 returns the remainder of the division of $WEEK_NO by 2, so the result is always 0 or 1, depending on the $WEEK_NO (if it's even, result is 0; if it's odd, result is 1).
The relevant information is in the ARITHMETIC EVALUATION and Arrays sections.
USB_DRIVES is an indexed array, and depending on the result of the evaluation on line 3, on line 8 one of its values is retrieved.
On line 3 double parentheses are used in order to make sure that the expression between them is evaluated as arithmetic expression.
It will let USB_NN_IDX equal to the remainder of an integer division operation variable WEEK_NO to 2.
Line 3 ((...)) - is just an integer math embedded into shell.
Seems like backups written on a different flash-drives depends on even/odd week-number.
The (( )) notation is a shorthand for let, read more here.