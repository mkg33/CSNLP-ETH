as the player 1 is behind player 2 we find that we need to take the front vert from the segment from player 1 and the back vert from player 2.
The problem is that it doesn't seem like this will chain very well if the character has to cross over three or more segments at once (maybe it's moving very fast over round-like terrain).
As Stephan says, you have the right idea, just repeat it until you're all out of movement.
So basically at this point I'm looking to see if there's an easier solution I'm missing.
If it is terrain the {x} axis distance between every vert should be constant.
and then we need to find distance between all segments inbetween verts v_start and v_end
Let's say we have function dist whcih finds distance in 2d space
Dividing p1,p2 with spacing we can find on which segment does the players stand.
now what we need to find is a float variable we call: distance
Let's also say player p1 is before p2 in other words he is behind him
So as finding this we can start calculating the distance.
Keep in mind that all terrain is triangles under the hood, so Trig and/or Dot Products may possibly offer some calculation advantages, but still within O(1) domain.
fist of all you must calculate distance between the player 1 and v_start and player 2 and v_end
I handle the single-slope case just by rotating the impending movement vector, but obviously that won't work here.
All of the calculations you describe are O(1) calculations so performance isn't an issue.
If you loop while you have remaining movement left, it wont matter how many segments you have to cross over.
First of all we need to determinate the start and end vertex index v_start v_end
When the character moves, it conforms to the terrain; note how the blue line (its movment per frame) is the same length regardless of the slope.
The issue is the bottom one, where the character is crossing over a change in slope.
For floor collision, it uses a single point (the red X).