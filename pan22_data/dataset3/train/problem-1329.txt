At its core, the OO notion is one of abstraction that takes you further from the way code executes on the underlying system, but while this can be powerful many of those experienced persons discuss the problems that maintaining large abstract object systems can have, the notion of a jungle of Class nomenclature and the difficulties reusing such code when large implicit semantic relationships have been created.
Totally optionally, you might consider avoiding array_key_exists() in this case and using a shorter hand form of test, like is_array().
Certainly, the code would be more concise without it.
In this case, what do you think would happen if we left it out?
I love the idea of this site: I would have killed for it when I started!
I notice that another response already suggested including the verb Shopping before Cart to impart further information about the structure.
As a dubiously useful fringe benefit, switching to is_array() will also make your code self-healing in the event that the structure ever corrupted and a nonsensical non-array value is assigned to a position you wish to access, since the code will then clobber any such non-array value with a new array just as if the array key hadn't existed.
Your assignment statements are pointlessly repetitive.
If performance were actually a concern (hint: it isn't, such tweaks are a waste of programmer time, which is more valuable than CPU time and memory in almost every case) then you could use PHP's 'references' (kind of like 'pointers' in other languages) to maintain the concise syntax but save on the dual memory utilisation.
Due to the way the English language works, the negative notion !is_array() is arguably more readable than !array_key_exists() at some subconscious level... but this is hair-splitting.
I'm actually rusty on this side of PHP and haven't tested this example, but assuming =& is correct then we might create a solution more like this...
I have been programming PHP since the 1990s and am more than happy to help others to think more about their code and grow as programmers.
This saves typing and should be just as clear, though perhaps very slightly slower.
Object oriented methodology is a tool for approaching certain kinds of problems.
Code without comments is bad code, and in many companies you would not get away with this.
This reminds me of both some personal experiences working with people trying to manage scope change on OO code, and comments I read in Peter Seibel's book Coders at Work where we see quite some number of experienced programmers discussing OO with various perspectives.
I would recommend at least adding the following at a bare minimum:
Although performance and memory use are of dubious concern to most web applications, it is good to be aware that the second solution actually creates a second instance of $cart in memory (one for $cart, and one for the part of the $_SESSION structure that it is eventually assigned to.)
(Though, the idea of coding this defensively is pretty useless in most cases and should not really be a huge consideration.)
This is a rookie mistake, and one that is very common to see in PHP codebases.
This solution preserves increased legibility and the code remains concise, whilst avoiding the duplication of our new $cart structure in memory.
You should never use fixed values in your code without explaining their purpose.
Although we see this only in the example code, I don't think it's a good thingâ„¢
In short, have a broad think about whether you want to use OO or not, what it may give you and at what cost.