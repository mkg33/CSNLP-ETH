Most languages come with a good general purpose quicksort implementation.
There are lots of cases where you might need to sort things, depending on what kind of game programming you are doing:
If your objects are large, then sort a list of indices to the objects rather than the objects themselves.
In the latter case, just throw the list through quicksort.
It's knowing the most common and flexible algorithms, not so much the details of how they work, but more the situations where they should not be used.
Yes, you need to know how to sort things in programming game development.
There's lots of sorting goes on, in a wide variety of situations.
In the last dozen or so years I've been developing professionally, I can count the number of times I've needed a more tuned or specific sorting algorithm, and it's probably less than 20.
It's understanding exactly which situation you have (do I need to sort in-place, can I insert items in the list cheaply).
No, you don't need to know the details of how all (or even many) the various sorting algorithms work, it's almost always sufficient to look it up in a reference (online or book) when you need to.
But studying and writing sorting algorithms is good general practice for writing and analyzing algorithms, and your knowledge will come in handy when it comes to picking a good algorithm from a library, or spotting the (rare) cases where the special features of your problem mean that you could improve on the generic library routine.
And finally, it's knowing when sorting performance is important (when you have many, many items and you need to sort them a lot) and when it's not so important (when you have just a few items, and/or you only need to sort when the list changes).
What's important is not the how and why of each algorithm, it's a deeper understanding of why some algorithms work better in some situations.
They don't necessarily come with implementations of stable sorts, sorts that don't compare values directly, sorts that don't suffer when used on pre-sorted data, sorts that work well on disk-based data, sorts that work better if given lots of memory, sorts that work without requiring any extra memory at all, partial sorts that efficiently sort just a subset of the data, partitions that only sort data relative to a pivot threshold, and so on.
I'm going to say yes, to your question as phrased, but with important caveats.
I'll just add a short answer here: HIGHSCORE table...
Think of it as the "wax on, wax off" that you learn before you realize you can use that skill for karate, too :)
It's rare that you'll need to implement your own sort algorithm: generally you'll just pick an appropriate function from a library.
As a more general answer, even if you never actually write your own sorting algorithm "in the field" (after all, as you've no doubt seen on Wikipedia, your average garden-variety sorting is a problem that's already been solved), sorting is one of the core aspects of computer science that helps in the kind of computational thinking that a programmer needs.