For example, if you want to visit a webpage on LocalPC using the SOCKS proxy, you can do in Firefox:
Example of use case: hec.edu has an HTTP server that is only accessible on  http://127.0.0.1:8001, for security reasons.
This answer is similar to kynan, as it involves the use of ProxyCommand.
It's the nearest I can think of to the example you showed in the first place.
Means any packet received by host1:9999 forward it back to localhost:9999
I'm prompted for both passwords, then I can use localhost:9999 for a SOCKS proxy to host2.
The option 2 of the best answer could be used with different ssh users than the current one aka : user@host
Let's assume we have the following network topology:
At that point, the SOCKS proxy is now running on port 9991 of LocalPC.
I came here looking for the original place where I read this trick.
You just need to replace computers' hostnames, usernames and passwords by yours.
Means bind to localhost:9999 and any packet sent to localhost:9999 forward it to host2:80
In this answer I will go through a concrete example.
Goal: we want to set up a SOCKS proxy that listens on port 9991 of LocalPC so that each time a connection on LocalPC is initiated from port  9991 it goes  through mit.edu then hec.edu.
If you have netcat installed in your hop machines you can add this snippet to your ~/.ssh/config:
We would like to be able to visit  http://127.0.0.1:8001 by opening a web browser on LocalPC.
For the sake of concreteness, let's assume we have the following computers' hostnames, usernames and passwords:
It will ask you the password of bob on mit.edu (i.e., dylan123), then it will ask you the password of john on hec.edu (i.e., doe456).