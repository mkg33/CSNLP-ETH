Some may take exception to this partial list off the top of my head, but I save time securing my PC and operating in a lean environment.
I have a hige arsenal of repair tools but only need one app to fix everyone who gets infected and it only takes 10 to 20 minutes not hours or days.
Regular audits to confirm my security are done at night prove my worry free practise is justified.
If exposed, do not run what does not need running.
But, whatever you do, the bad guys are very patient, very creative and very skilled.
It's also mandatory to keep your server software updated and to make sure you have disabled each and every module & daemon you won't use.
Tight firewall policies are a must and in many cases additional security enhancements such as SELinux or grsecurity might stop the attack.
A   hackable lock on a door will not keep the thief out but probably will keep out the wolf.
That will change but I wont change my philosophy of keeping my OS clean, lean & mean.
A bloated machine with a huge security suite often makes mediocre PC's into dinosaurs and quad Cores into ordinary old pcs.
Most results when I stopped looking at comparisons were 90% max on a real world test of thousands of risks, meaning 10% of the infections were undetected or too late.
Do not make yourself a target worthy of a dedicated,targeted attack.
Securing against any such targeted attack possible is often uneconomical/impractical anyway.
I have fixed enough ( thousands) to understand that is mostly true.
Check who could have a serious interest in breaking what and start there.
If you understand nothing is 100% security and the cost of performance drops exponentially as security while probability of infection only drops linear fashion.
OSX has an ideal situation where it essential is no better in security but the risks of attack were smaller due to being smaller targets with only 4% of market-share in non-phone/pad products in 2010.
Grsecurity or SELinux are good in helping to prevent 0 day attacks by hardening the kernel.
Of course, using a complex module like mod_security it's quite possible to also block your actual clients, and on the server side mod_security adds some overhead.
I still have a thousand HJT logs, combofix.txt logs and Runscanner logs to support my opinions of cures and better security/ performance balance.
Considering "minimizing externally available information" and "going away from well known defaults" as nothing more than security by obscurity (often misunderstood as "worthless" as opposed to "a layer that in itself in insufficient") and omitting it is dangerous arrogance.
Have a detailed plan what to do when you get hacked.
If you are using Apache, modules such as mod_security can help you prevent common attack vectors.
Quote from website "Only grsecurity provides protection against zero-day and other advanced threats that buys administrators valuable time while vulnerability fixes make their way out to distributions and production testing. "