As you might see no null, no dirty null-checks just clear exceptions for the user of your Methods.
Another variant is to create an extension method like:
At your example you are expecting CallMethodB to return an Object.
So if nobody throws an exception everything has just worked fine, use the return value, if it is null let the nullReferenceException occur and enjoy writing well code.
I think the concise version is longer and more confusing, and emphasizes the wrong return (assuming the value of SomeProperty is what is really of interest).
Removing Null checks would increase your readability and the reusablility of your code!
Wouldn't it be better to throw an exception, that you can signal that something went terribly wrong?
I don't really like the burgeoning arrow or the fall through else, but it is how I often solve this pattern.
In my opinion returning null is always bad for developers who are using your code, becaus they don't know what went wrong and what to change.
Why does the Methods CallMethodA and CallMethodB return null?
Moreover, I would put return statements in a separate line, so it would be clear that if something is null then null should be returned
Despite the fact that the ConciseVersion looks much more "smarter" I wouldn't sacrifice redability and would vote for VerboseVersion.
Note: the second snippet is untested but I believe it would work as the left TryCall must be resolved to move on to the right TryCall.
If I have the opportunity to modify methods, and expect that the result of a method would return a null, I will rewrite and follow the TryXXX pattern.
For the verbose, I don't like returning the same value more than once, even if it is a constant - so a variation on the verbose: