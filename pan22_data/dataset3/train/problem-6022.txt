I've had this come up a couple of times recently, and each time ended up realising that the arguments being passed in were actually all attributes of the entity being created.
For options, you can provide general setter/getter:
I'd always use the second version, since one could use type-hinting.
I quite like the array approach (not all PHP-specific reasons) because:
Which means that you can force the types of the various attributes, but also validate them further within the set methods, as well as gain a bunch of other benefits such as easier testing etc.
If you really need to set/change some properties after the instantiation, then you can provide some setters, but avoid it to simplify the code if possible.
This way, Class is the single point, where the keys get defined.
The thing to consider is, without looking into what Class actually does, what is easier to understand in the calling code?
My advice is to mix both styles: pass the required and important properties directly as parameters, and keep a hash table for optional properties.
Not sure if "work's best" is appropriate, but I know variations of the array approach (including formatted arg strings) are popular on some C projects, because of the issues with varargs and stack corruption.