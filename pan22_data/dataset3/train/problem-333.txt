more custom engine generally and should result in a game that feels unique.
Studios that build MMOs, for example, generally will need to build that infrastructure themselves because it is critical to their success (and existing middleware is generally inappropriate, at least for larger, "AAA" titles).
my programming teacher told us, only use API's/methods/classes/functions which you know how to build
For others, technology may be the foundation for success.
People write their own engines because ultimately somebody has to write the engine, and today's dedicated engine might become tomorrows licensable middleware.
In general, it does make good sense to own and control the things that are critical to the success of your business, and to outsource those that aren't.
for example if i choose to write a mathematical equation i can write it so many ways i  can represent it with polynomials, or differential calculus or basic geometry or algebra or whatever suits me but sometimes i would write in a certain form/format because i want to be able to manipulate what is easily available , such as if i planed to do alot of vertex manipulation i might write this mathematical model using basic geometry, however if i wanted to change the curve using gradients i might focus on differential calculus to be able to easily manipulate the gradients etc and same goes for whatever it is i plan to have easier access to
For those studios, it makes sense to simply buy technology that will allow their designers to realize the appropriate vision.
Fast forward through several iterations and that engine becomes the Unreal engine we know today.
The point is that this is a chicken-and-egg problem.
There are several reasons a studio may choose to "build" instead of "buy" their technology:
its really easy to play a game and say thats made by.
Every bit of middleware you can license started somewhere, and it often didn't start out as middleware at all (sometimes it wasn't even written with the intention of becoming middleware and it's current status is effectively an accident).
Many of today's licensable engines started out as dedicated engines.
There are very good answers here but they're missing one important additional point.
and game engine dont follow logical code or any other logic when they are built , sure there is some things which can be expected but in reality everything is going to be built based on somebody elses understanding and knowledge of some programming language or how some system works
For some studios, the design or storytelling aspect of their games may be the critical resource they expect to capitalize on for success.
For an starting up company it's not a bad option to use and not build.
anyway i hope i made it clear what i was trying to point out
Note that some of the studios you listed (Crytek and Epic in particular) have basically stopped trying to be dominating forces in the games market directly, and almost certainly make far more as middleware vendors than they do as game developers.
Behind the debug stuff are the documentation & support, no the code, because at the end I didn't want that my building group will touch the code of my own engine.
because they're more custom and 100% fit their task.
And, after getting a critical mass of incomes, may be, just may be, you will want to build your own engine...
Let's take Unreal as an example because it's so ubiquitous.
learning simple things can when compounded result in strange problems, let alone something complex like a game engine especially when you are supposed to use that game engine to run your game which can lead ot many unexpected results and problems
so they make their own to make the development of their own game easier to do.
But that raises the costs: more people, more places, more line phone, more administration...
and sometimes the current game engine might not give me the flexibility of what i intend to do or even maybe it gives you that option but its very hard to do so because the game engine focuses on physics forces as its main source of motion and manipulation of objects in the game
looks unique and works uniquely and it should perform better than a game that was created on a pre-made engine.
and many games that use their own engine just generally.
One solution to this may be outsource... to a middleware company, releasing resources to my business of making games, i.e.
The developers of it decided to build their own engine rather than license an existing one.
for most games that use their own engine created by their developers.
because if you dont know how to build it and are using somebody else's work chances are you dont know how it works and when you dont know how something works then you are alot more prone to error and problems and hitting walls of confusion
Today when you think of Unreal you tend to think of an engine that you license and can use instead of having to build your own, but that wasn't always the case, and once upon a time the Unreal engine didn't even exist as a separate entity.