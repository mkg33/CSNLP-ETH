becomes $\mathsf{NP}$-complete for any fixed $k\ge 8$.
Consider a soccer league championship with $n$ teams: The problem of deciding whether a given team can (still) win the league is in $P$ if in a match, the winning team is awarded 2 points, the losing one 0 and each team is awarded 1 point in a draw match.
For example, if we have N vertices and N colors, the problem can be solved by assigning a different color to each vertex.
The congestion of $G$ in $T$, denoted by $\mathrm{cng}_G(T)$, is the maximum
As mentioned in another answer, 2-COL is solvable in polynomial time while 3-COL is NP-complete.
This answers the question asked in the question-title, but not the one asked in the question.
The following complexity jump is shown in: Bodlaender et al.,
For every fixed $k$ and $d$ the problem is solvable in linear time for graphs of degree at
Let $G$ be a graph and $T$ a spanning tree of $G$.
This was widely thought to be #P-hard, and it is for "most" values of $n$, but if $n$ is a Mersenne integer (for example $n=7$, because 7 is of form $2^3-1$), then the answer can be computed in polynomial time.
This was first discovered by Valiant, in his groundbreaking Holographic Algorithms paper.
So allowing more than one positive literal in each clause makes the problem from P-complete NP-complete.
Parameterized Complexity of the Spanning Tree Congestion Problem,
But if we change the rules so that the winning team gets 3 points, the same problem becomes $NP$-hard.
The Spanning Tree Congestion problem asks whether a given graph has spanning tree
Source: “Complexity Theory” by Ingo Wegener (http://portal.acm.org/citation.cfm?id=1076319)
Here is a nice problem with an interesting complexity jump like Minimum Bandwidth you
In many cases, approximating NP-optimization problems give rise to sharp complexity jumps.
denoted by $\mathrm{cng}_{G,T}(e)$ is the number of detours that contain $e$.
But when increasing the number of colors, after some (unknown?)
The result can be generalized for any $(0, 1, k)$-point rule for every $k > 2$ and even for only three remaining rounds.
A shocking example of jump-in-hardness arises from the question, "How many satisfying assignments does a planar formula have, modulo $n$?"
K-Sat is to find if a set of clauses is satisfiable (each clause can have more than 1 positive literals).
In contrast, if we allow only one vertex of unbounded degree, the problem immediately
$\mathrm{stc}(G)$, is the minimum congestion over all spanning trees of $G$.
One of the more interesting applied examples of hardness jumps can be observed in the following problem:
For example, SET COVER can be approximated within a factor of $\ln n$ in polynomial time (by the Greedy Algorithm), but it is NP-hard to approximate within a factor of $(1-o(1))\ln n$.
Horn-Sat is to find if a set of horn clauses is satisfiable (each clause has at most 1 positive literal).