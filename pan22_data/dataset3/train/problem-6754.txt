When rendering, you just render the tiles from left to right, top to bottom, with the tile's delta (in this example 32 pixels).
At first, my method was to run another loop - after generating the world that replaced stone tiles, depending on directions of empty tiles were, with wall.
While it might not be ideal or the most performant option depending on your actual use case, you could just create a single "3d tile" that is actually bigger than your real tile (due to having the 3d part attached):
This is the place at which i wondered if i chose the right method or if i should change the whole design for the walls, if so - to what?
It basically fails every time there are 3 or more dirt tiles directly next to it.
The method doesn't work so bad up to the point where there are 1 wide walls sticking out, which are impossible for it to convert, check picture:
I can't replace air with walls, as that could possibly obstruct a passage.
I've looked for the answer to my problem, and haven't found it.
While the tile size would be 32 × 32 pixels, this tile image is actually 40 × 40 pixels big (the fake depth is 8 pixels in every direction).
Probably because it's hard for me to word it(sorry for messy post).
Should i create some textures for the 1-wides alone?
My levels are designed as 400x400 squares of proceduraly generated 0's and 1's, 0 representing dirt(walkable by player), 1 represeting stone(impenetrable).
As you can see, in my method, the wall is an another texture, taking one tile itself.
For example, to render a "T", you'd render the tiles in the following order: