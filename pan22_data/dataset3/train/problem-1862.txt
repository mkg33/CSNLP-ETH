boolean playing doesn't have a right to exist (regardless of its volatility).
Then you can schedule multiple songs to be played just by adding an instance to the execution pool for each new song.
By writing your class this way, it is always forced to read a file from disk.
The post asks about something that this code is not doing.
I am wondering if this code can be made more solid without using volatile variables?
There is no context explaining why it is relevant to this piece of code.
Why are the variable names changing when they are all the same thing?
In general, you should decide if you want to use this.
You need a condition variable instead of a simple flag.
The URL at the beginning of the run method is not helpful.
An example of the expanded context would be to create a thread pool of size one.
I have always learned that you should not use the volatile keyword if possible.
To do this I made all the control methods synchronized.
I'm writing an application that will use the JLayer library to play an mp3 file.
I have taken into account what was said in the answers of @unholysampler and @vnp and I have changed my code accordingly.
The general consensus of the post is "there is no reason to do that and I have never seen that done."
This is possible because one can execute play(1) which plays a single frame of the song.
I built the object Mp3Player such that it should be thread safe.
or prefix your member variables with an underscore.
Pausing the play results in a busy-wait: the thread consumes CPU as fast as possible doing just nothing.
Variable shadowing is not a valid excuse as you can use this.
Making it a simple class that implements Runnable would allow you to use it in more contexts and not incur the heavy costs of creating a thread every time an instance is instantiated.
There is no reason Mp3PlayerThread to be a subclass of Thread.
If playing is set to false, this thread will spin and waste cpu time.
A small note on the variable alignment: I use the OCDFormat plugin for that.
What happens if you want to stream the song over a socket?
Since the player does not have any methods to pause the playback - play() does not return until the song is finished - I decided to put it in a thread and simply control that thread.
Putting this in a loop will thus play the entire song smoothly.
Passing the input stream in to the constructor (or even the Player instance) would make your class more flexible and easier to test.