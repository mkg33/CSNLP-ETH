An implementation of this class is the SimpleLineManipulator which influences the position of a sprite over a certain time on a straight line:
This is not about animating individual characters or elements, I'm happy with spritesheets for that.
EDIT: I'm looking at animations such as in World of Goo etc.
It should be easy to implement a rotatory manipulator or manipulators that work on a path (a list of positions).
All you have to do now is call the update() method every frame.
This seems like you want to manipulate the position and rotation of objects over time.
For example my game starts and the logo comes in flying from a random direction, then rotates or something and stops in one position, then a game character (one or more) comes from the side and does some action.
What I've been doing is giving the element an initial and final position and make it move accordingly and using status flags to check its state.
I once built a similar solution for a three dimensional simulation, but it should translate well to a 2D graphical application.
This process is usually done via the help of a sub field of numerical analysis which is called interpolation.
Constantinius already provides a good starting point from where you might start with actual coding, but in case you want to know about what you're doing here in general, I'd like to add a few words.
The Manager watches the state of the Manipulators and updates them every frame.
I haven't done many projects yet, I have written just one complete game, so I don't know whether I've correctly worded the question.
I hope I could outline the architecture in a clear manner.
This is of course only a rough introduction to maybe let you taste a little blood and wake your interest, hence I shall redirect you to Google if you want to know more about it.
As you see, the function is returning a vector, so you can apply it to the position of your object without problems.
AFAIK sfml does not provide this functionality out of the box, but it should be pretty easy and straightforward to implement this on your own.
The interface for the manipulator looks something like that:
Translating objects over time from point A to point B is done by applying a function f(x) to the position of the object, where x can be anything, ranging from simply the current position of the sprite to the amount of time that elapsed between two frames, etc.
And this is how the update method looks like (where the most of the work takes place):
Of course, I can just use the state variables and make it move, but I've been thinking there's got to be an elegant method for it
First of you have two concepts: the Manipulator and the according ManipulatorManager.
The problem is when I want to move it in more than one way.
Manipulator is an abstract base class for all kinds of manipulations of a specific object, for example a sprite.
You can now also combine these manipulators to create combined effects.
What I'm looking for is the animation of elements on screen.
If you know the constant starting point A and end point B, one possible function would simply be f(t) = A + (B - A) * (t_max - t) , where
Manipulated can be all properties like position or rotation, move on a path or anything similar.