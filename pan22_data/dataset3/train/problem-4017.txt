I often use both of these; zsh is especially nice here, as hitting tab will expand the cryptic stuff out to make sure you got it right.
*, which expands to all words of the previous command except the zeroth.
To replace a specific word, you can use !m:n-p to refer to words n through p of the command m (use negative numbers to count back from the current command).
You can omit the -p part to refer to a single word, and omit the :m-p part to refer to an entire command.
I'm not sure if it would actually be faster or not, but see this article, particularly point #.3:
If pressed more than one time will substitute what just pasted with the last argument of the line before...
for !-1, !$ for the last word of the previous command, and !
If you actually had a lot of arguments that you wanted to repeat, and you just wanted to change the first word, you could use !
Ctrl+a to go to the beginning of the line, then Alt+d to delete the first word.
See the "HISTORY EXPANSION" section of the bash man page.
To replace a specific string, ^old^new^extra will take your previous command, replace old with new, and append extra.
There are also so many ways to do this with line editing.
* for the arguments (all but word 0) of the previous command are pretty handy.
Your examples happened to only repeat the last word, so !$ worked fine.
that will paste the last argument taken from the last line of the history.
!$ expands to the last word of your previous command.
^old will replace old with the empty string and append the empty string (essentially deleting old and doing nothing more).
If you need only to repeat the last part of one of the previous commands you can use Alt+.