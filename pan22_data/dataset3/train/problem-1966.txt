But keep in mind that if you are working on a project with multiple programmers at a large company, someone else might use your tuple intending to use std::tuple or vice versa.
I think you'll find that using the standard complex-number class will simplify your code.
In large source files, such small one line declarations can easily be missed if you are scrolling through the code editor very fast.
Of course, with std::complex, you don't need to do this squaring yourself, as the std::abs() function is provided to do that for you.
If they are used to one kind of programming practice in their personal projects, they will do the same things at their job.
There is a kind of philosophy called defensive programming.
Think about what other people will think when they have to manage your code.
You also fully qualified all standard C++ library names with std:: instead of using namespace std, which is also very good.
I see that you did not include the std::tuple, which is good.
You can save some memory allocations by reserving space for the output:
You could have some name collisions and hidden bugs!
Just it is generally frowned upon in the C++ programming community to name your own variables and/or data types with the same name as names defined in the C++ standard library.
It's much more efficient and accurate to square a number by simply multiplying rather than going via the much more general std::pow().
It's strange that you're using vectors instead of std::complex to represent your complex numbers.
These changes make for a much more natural version of the code (it's easier to see how it corresponds to the Mandelbrot algorithm):
If this is just your own project, of course you can do whatever you want.
I don't know if you are aware of this or not, but there is actually a data structure in the C++ standard library called std::tuple.
It's also more efficient to compare the squared magnitude against the square of the bound, rather than to compute the square root of the magnitude (so use std::norm() rather than std::abs()).
I would only like to give you one piece of advice.
Or someone who does not like you might put using std::tuple; somewhere intentionally to make your code fail.