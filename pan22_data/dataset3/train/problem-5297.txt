I know of ways to optimize this solution that require more programming.
With i=0, i++, j=0, j++ and setting the force of object i to fG.
I left quite a lot out for the sake of simplicity.
CirclevCircle && CirclevOrientedRect I would like someone to tell me if I'm doing something drastically wrong.
Then I have my collision resolution or HandleCollision function which goes throuhg all of the collisions in list and resolves them with one iteration (I know its common to do multiple iterations to avoid jitter when multiple objects are colliding.)
That way in the user code you can check if a collision has begun by using if(currentTouch && !previousTouch)
There might be some inconsistencies in variables names or such since I changed a little bit from the original code I had.
I've made a little real time physics simulation that solves some bodies.
But so far is there anything I'm doing that could ruin my performance.
I can use i=0, i++, j=i+1, j++ and set the force of object i to fG and object j to -fG.
So here is were it checks collisions and puts them all into a list.