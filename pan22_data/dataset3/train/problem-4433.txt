I'm not qualified enough to say whether Windows 7 running Windows 95 apps is considered running from another OS, or just runs some ancient code melded into Win7.
Mac OSX could run MacOS 7/8 binaries if they were coded for something called Carbon (a set of compatibility libraries).
Since Linux is a moving target, the emulation needs to be updated when the Linux kernel changes a lot, or it needs new libraries.
In practice it takes work, and it doesn't happen a lot because people don't want to do the work for it.
This made a bit easier since they're both UNIX, a lot of the code can be the same.
But, there is capability for FreeBSD to run Linux binaries.
In theory, you could have an operating system run binaries made for other operating systems.
Since Linux is more common than FreeBSD, there really isn't a need for a lot of people to emulate FreeBSD on Linux.
This ability has been dropped as OS/2 became irrelevant, and people liked NT for NT, not as anything that could run POSIX.
Someone would have to write code for the Linux kernel to realize that when you run a FreeBSD binary, to use a different syscall table.
It would be rare for an app on FreeBSD to not be available on Linux.
As such, the work is done usually only for a unpopular (or too new) OS to run binaries for a more popular or established OS.
So, lets say you want to run an Intel FreeBSD binary on an Intel Linux machine.
In general, will binaries built on FreeBSD run on Linux operating systems, especially Ubuntu?
Initially, Microsoft NT was able to run OS/2 command line apps, and had some theoretical (half-assed) ability to run POSIX apps.
If there were any config file paths, or hard coded output paths, this would have to be dealt with as well.
These could be in theory copied from a FreeBSD distribution, and the dynamic loader would then know this special place for FreeBSD libraries.
They needed emulation for the PowerPC chip as well.