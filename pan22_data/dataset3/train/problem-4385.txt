And since all these strategies are really doing the same thing, they should share an interface, so that your main loop can call any of them, without actually caring which one it's calling.
After you refactor it into shorter routines as @Mat'sMug suggested, post it again and you'll get more reviews.
Actually the first thing to extract is near the beginning of the loop: each match possibility belongs in its own method.
Your code is very procedural, which is rather unusual in the object-oriented paradigm C# is offering.
I would think more in terms of objects here: there's a strategy to adopt depending on the type of message you're receiving - each strategy belongs in its own class.
The very length of your code, and the complexity of the routines, makes it hard to read.
The most obvious improvement would be to first extract methods out of each case in that disastrous switch(type) block... and then to break each if...else block into its own methods too - the idea being to reduce nesting, and come up with small methods that do little.
And then once you've extracted them into their own method, you can extract each one into a strategy pattern, because what you're doing can be stated as follows: