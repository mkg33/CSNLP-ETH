In general, this prompted a nice discussion of definite vs indefinite loops, and particularly the various shades of indefinite.
This could be a mash-up of the inputs generated by the user.
Yes, there are better ways of writing the above, but I wanted to start by emphasizing the use of the while loop, and then modifying it to handle that last word.
However, for now, I'll post what I came up with for class.
Once you have the control, you want to demonstrate iteration with for.
If you were using a micro:bit you could loop through a text string to display the result of some measurements.
Robots are certainly a good idea, but it sounds like you don't have any suitable hardware - I think simple hardware will give you plenty of opportunities and may also provide a different 'hook' for some of your students to become interested.
If you're using a console interface, you need to make up something along the lines of a screen saver (assuming there is no actual processing).
One student pointed out that we could use replaceAll() to figure out the number of spaces in a String (i.e., replace all the spaces with nothing, compare lengths), but others thought that too much work to bother with before writing the loop.
As an abstract level, while is a good fit for a background task as you identified.
Having looked through all the answers thus far the other day, I'm not entirely satisfied with any of them (I'll try to take the time later and go through to leave comments).
The while loop is at its most useful when some indefinite number of iterations is required to perform a task.
For illustrative purposes, we just printed items out to keep it simple, but discussed modifications for finding/replacing characters/patterns, other things you could do with this (we'll extend these tomorrow for nested loops).
When looping through a collection, a for loop is best.
Anyway, I would appreciate critiques of this for next time I teach CS1.
The collections for loops in Java, JavaScript and Python prevent you from accessing indices that are out of bounds.
Most of the time, they are the right choice for traversing a collection.
For a for loop, print each character of a String to its own line.
For example, you might be asking a user for a specific type of output.
I basically tell my students "if you know when it ends, it's a for".
First, I want to emphasize that these students only know what was mentioned above, no arrays/data structures, very little in terms of methods (just some of the ones for String), and little beyond the foundations of OOP (e.g., can't yet actually implement a class).
I went with a general goal of String processing, since they have done a fair amount of that.
For a while loop, print each word of a String to its own line.
Maybe the program can prompt for input, generate bad poetry, or draw some simple snake like animations.
Note that they don't know toCharArray() and split() since we haven't yet discussed arrays, but the below examples replicate much of that functionality.
(Sure, one can construct pathological cases and there is always this for (;;), but for basic understanding this issue is the crucial difference between for and while.)
IF the user fails to enter something valid,  you nag that user with prompts until he does the right thing.
Additionally, we have no hardware (or at least, not enough of it).
You would know beforehand when the for loop would terminate, this is not clear in a while loop.
Alternatively, some experimental data collection if you have suitable I/O hardware.
All you need is a set of data-points collected during the 'while' period.
You might want to force them to convert for to while in an exercise and demostrate that the converse is not always possible.