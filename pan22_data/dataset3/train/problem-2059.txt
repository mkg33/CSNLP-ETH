What is the intended benefits of storing and looking up points in a cache (which takes time and memory) instead of creating multiple instances of points.
Use public final fields for those and set them in a private constructor.
Even though the closest double to the polar-degree object's x coordinate is 1.4142135623730951, the actual x coordinate is closer to 1.4142135623730950488016887242097, so it won't quite match any point whose xy coordinates are specified using a double.
Of these, perhaps the first would be most justifiable if one says that degree-polar objects are unequal to any xy object except when the angle is a multiple of 90 degrees, and radian-polar objects are unequal to any other object except when the angle is zero.
Any possible behavior by the class is apt to be "surprising", since the xy-constructed object will have a radius of 2.0000000000000004; this means that either:
Even if you have other methods which can construct a point for a given radius and angle, or report the radius and angle associated with a point, make it clear that reported values are not inherent properties of the object, but simply calculations based upon its x and y.
Why do you define a static function when the argument is an instance of a Point and thus could be a method?
Consider what happens, for example, if one constructs a point with polar coordinates (angle=45 degrees, radius=2.0) and then constructs another point whose xy coordinates match the first.
The class exposes a hash function so that other classes can use it.
The Math.atan2 function is defined rather strangely (not only in Java, but in every programming language I know) and the correct use is atan2(y, x).
If a class is supposed to serve as a data holder, two instances which report themselves as equal should have the same properties; further, values corresponding to constructor/factory parameters should match the values used in creating the object.
Besides, if you really need caching, this is not the responsability of the Point  class to do it.
If you really want to build PolarPoint with either radians/degrees, maybe your constructor can take an optional unit parameter (e.g.
I don't see any use of Thread t = new Thread()  in toString method.
Unless there's some particular reason for using polar coordinates, I'd suggest having the Point type explicitly encapsulate an x and y, both of type double.
will you create a temporary point just to check whether it already belongs to the set and discard it in order to return the stored instance?
It has already been suggested, but you can define two kind of points, "polar" and "cartesian" ones, both having well-defined public constructors:
Defining how the latter should work, though, could be tricky.
How likely it is that points will be created at the exact same location?
It would be possible to have a polar-coordinate type whose properties were the rho and theta values, or an xy coordinate type, whose properties were x and y, or perhaps even an abstract coordinate type with subtypes that hold degree-polar coordinates, radian-polar coordinates, and xy coordinates (each of which would store a different set of properties).