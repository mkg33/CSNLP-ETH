Jump delay, height and confusion can probably be enough for simple cases (if the goalkeeper jumps with delay or not far enough, then a goal can be achieved).
Also you might want to introduce some kind of randomness... so the rule could be:
The probability to perform a task is then a weighted sum of the attributes of the player related to that task.
There's so much luck involved in saving a penalty-shot, that a realistic simulation/algorithm isn't going to produce much better results than something close to completely random.
Finally, to get some randomness, just simulate a dice and use it to check if the returned value is within the probability threshold.
So if (t - rt) * movement_speed > distance_to_ball, then the ball can be saved.
As stated before, a goalkeeper always looks at the ball - and in real world, a good response is to move so that the goalkeeper will always cover the ball no matter how far it is from the goal if a straight shot is achieved.
I'm assuming you have a skill challenge to do that ("stop the moving needle in the right part of the gauge"-type thing or something similar).
Try to tweak the formula in a way that it rewards skill (eg.
Also instead of using a linear approach like above, you could experiment with another falloff (cubic, exponential etc.
Not all keepers have the same ability to jump, intelligence or reflects.
The delay of this move can be associated with the reflects of the keeper and the how high will it jump with the skills.
You know where the ball will hit the goal, and you know when this will happen.
The "Swerve" could just be some factor that reduces the players actual time to react.
if you practice to land good shots, your chances of scoring are increased) but still allows a complete newcomer to score a goal as well.
As of playing as a goalkeeper, I have to suggest these:
This is more complicated, but more flexible, and more simulation-like.
When a shot is performed, the goalkeeper will "fall" (put his body in the angle of the potential position of the ball when it reaches the goal line) and fall (with animation) after a while.
The keeper will jump (move horizontally, vertically or diagonally up for a while and then fall) if the potential position of the ball on the line is in bigger distance than its body length.
My team is working in a Football MMO and our approach is to attribute goal keepers (and other players) with several attributes, such as JUMP, PHYSIQUE, AGILITY, REACTION, REASON, POSITIONING, to name a few.
), so that shots fired really close to the goalkeeper have a much higher chance of getting caught.
You can also save presets of the skills set and use them depending on the difficulty, for example.
Of course it should become gradually more difficult to catch a ball that's further away from the keeper.
The higher the skill, the less the probability to get confused.
A goal-keeper with a high reaction- and movement-speed will be able to catch most shots, while a goal-keeper with worse stats won't be able to do so.
This is simple, but also a little "cheating"-like.
This is the time he has to move from his position to the position where the ball will hit the goal.
If they are just chosen values, then they shouldn't have such a direct effect, or the player will always choose them to be high.
I think the most important aspect is that the gameplay is fun and diverse.
will read sooner, move faster, and dive later(and further).
You could set a percentage of the time you want the goalkeeper to save (based on the speed and swerve), and simply pick a random number, if it's below that percentage, play the correct animation (diving the right way) for the save, if it's higher, play the wrong one and allow the score.
If so, then you want higher-swerve and higher-speed to equal higher-percentage chance of scoring.
Now, about intelligence, you could set a random indicator of when it will be confused by the curve (and jump in wrong way or with delay).
An idea could be this: the keeper is moving on side based on the ball.
The ways to handle this are different based on how you are assigning speed, swerve etc.
And again this is very generic, and just the way I think of it.
You could set an amount of time for the goalie to read the direction the ball is going, and then start moving him in that direction, and constantly allow him to adjust for the swerve until the last X% of the time it takes the ball to arrive, at which point the goalie can dive for the ball if it's within a range of where he is (and outside "move-to" range).
If you have the ball-travel time t, and the player reaction time rt, then the effective time for the player to react will be t - rt.
Where RAND() would return a random float between 0 and 1.
You can model this as simple or complex as you like, depending on the quantity of skills used.
So you could set up some basic variables such as "reaction speed", "movement speed" and/or "jumping force".