That way, any subclasses of that type will be able to enter the Tile array.
In  order for this to work, all of the movable things would need to inherit from the same class, such as a Moveable or Character class, and the array of the Tile would be an array of this type.
When you want to check whether a tile is attackable or occupied, you could have a method of the Tile class that searches through the array, looking for a Robot or an Obstacle or whatever you need.
So let's assume that it is theoretically possible for more than one object to be on a Tile.
I do not think that this is the best approach for you to take.
In this case, you could give the Tile an array of objects, and when a Robot or Obstacle moves to that tile, it could be added to that array, and removed from the array of the previous tile.
Or if there was a power-up that the player could pick up that gave them that ability?
Right now you have an array of Tiles that has an Occupied boolean value, and previously had an Attackable value.
There are lots of different ways to solve this problem, but since you are concerned about the inflexibility of your current approach, I think this is a valid way to program it.
For example, what if a Robot had the ability to move through walls?
You need to make the decision about whether a Tile can ever have more than one object in it.
You are suggesting that you have multiple arrays of tiles, one to store the Attackable things and another to store the Obstacles.