It is perfectly possible that this opening was a hidden request for context - is the presenter actually familiar with  the code or just doing the PR part of the project?
I agree with the other posters here: using num LoC as an indicator is a very poor assessment of the code.
5) Is the documentation adequate (docstring/header, method docs, comments only where appropriate)
4) is it modular: resusable, logically broken into functions/methods with appropriate names for funcs/methods and variables
Unless the student is some kind of an expert already, lines of code will be a easy way to filter out those who have no idea what they are doing.
Leaving out exceptionally talented students, most students would have at least 30 lines, and if they don't they probably haven't written the code.
The scenario here doesn't really give much context for the evaluator's question.
Most importantly, we have no information about what she did as a result of the opening question.
Faculties will ask you to write 2 pages, but what if the content only merits 1 page or 4?
There is nothing worse when doing an interview than asking an opening question which your student doesn't understand well enough even to be able to guess the answer.
Less lines of code does not always mean more efficient.
Using regular expressions may be pretty cool, but can make it very difficult to read for anyone that has to do maintenance on the code, or even to understand.
By asking a 'harmless' question which has no right answer, it makes the rest of the questions much easier to pitch.
Lets say the lab manual has about 30 lines for the bubble sort implementation.