But there is a nasty trick when reverting a merge commit.
The parent IDs are the ones written in the next line as Merge: parent1 parent2.
In my case, it is the test branch and I'm trying to remove the feature/analytics-v3 branch from it.
git revert <merge commit id> -m 1 (reverts to parent2)
You need to enter the -m flag otherwise it will fail.
git revert <merge commit id> -m 2 (reverts to parent1)
Then Just do the git revert <merge commit id> -m 1 which will open a vi console for entering commit message.
If you want to revert a merge commit, here is what you have to do.
A "safer" approach is to leave the history in tact, so you can show that this feature used to exist, and was purposely removed.
From here on, you need to decide whether you want to revert your branch and make it look like exactly it was on parent1 or parent2 via:
If you want to completely remove it from you history, you could do the following:
This will create an additional patch that undoes the commit you want to get rid of.
git revert is the command which reverts any commit.
The main advantage is that you can edit the commit message, and explain why this feature is being removed.
You can git log these parents to figure out which way you want to go and that's the root of all the confusion.