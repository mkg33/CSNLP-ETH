Python 2's range() would generate every number up front, before you can begin iterating.
I would find the 2.7 implementation of range confusing because a list is not inherently a range, although a range could be implemented as a list with a length of two (beginning and end).
You only have to type eight more keystrokes in the repl:
Recently, I have had to start working with a Python 3-based system rather than a Python 2.7-based one.
For example, you could introduce the concept of fields and methods using range's .start, .stop, and .step attributes and .count(...) and .index(...) methods.
More precisely, it returns an object that actually supports almost the same set of operations Python's list object supports -- the only exceptions are that any methods that allow mutation (such as .append(...)) are missing, and the .copy() method is missing for some reason.
Clearly, this is very wasteful and pointless; it's much easier to work out each number at the end of the iteration, and doesn't require nearly as much memory.
I do mathematical biology curriculum development and design and sometimes teach the associated computer labs.
To new programmers, there is no "change", it is simply how things are.
What this means is that I think it actually is legitimate to teach range(...) as being basically a "list-like" thing.
The zip(...) function genuinely does return an iterator (e.g.
You could even use this as a way of introducing the notion of objects/how everything in Python is an object.
I don't think the concepts behind generators, sequences and iterators are too difficult to grasp if you're clear on what exactly they are.
You ask it to give you a list of numbers from $0$ to $n - 1$, and it gives you a list.
Python3 is not just a bunch of new features added to Python2:  It's a new language.
You shy away from "turning it into something else," but really?
Running list(range(n)) specifically asks for the list of all the integers, but in the vast majority of cases, you don't need the list, so there's no point making it and storing the whole thing in memory.
My perspective is someone who has no practical experience in Python, but decades of OO programming experience.
What this means is that if you're teaching how to use range(...), you can skip having to talk about generators/the whole iterable vs iterator thing entirely, and just introduce range as a special sort of list that's specifically optimized to represent a large range of numbers w/o needing to consume a huge amount of memory.
And range no longer outputs a list -- instead, it outputs something that counts, but again, is quite abstract.
This object will, however, give you the next element of the sequence if you ask for it.
Some of the changes in Python 3 have made basic functions much more abstract.
But given how zip is really more of a convenience feature more then anything, you could perhaps defer talking about it until later once students are comfortable with the notion of iterating over various collection types.
Imagine you wanted to print the numbers 1 to 1000.
A range is exactly that - a definition of a beginning and an end point.
A common misconception many people have is that Python 3's range(...) function returns an iterator of some kind.
If your students know Python 2's xrange, they'll find range simple to understand.
How would you explain these things to total beginners?
I can't have students just type in zip([1,2,3], [4,5,6]) to see what it does.
It's a better language---one where you can do this:
This is actually false: it returns a custom sort of sequence object (which, by definition, is also an iterable).
The 2.7 default behavior made it look as if it were a list, and confused the issue.
The 'old' range(n) function of Python 2 just produces a list of numbers:
(I had them do list(zip([1,2,3], [4,5,6])), but that's really changing the output of zip into something else.)
Instead, it makes an object that knows the start, end and step that you asked for... but it doesn't give you a list!
However, I suppose that the merits of the feature aren't really relevant or important to absolute beginners; it's better that they gain some understanding of how to use the feature before understanding the merits behind it.
This means you still need to introduce a new concept ("oh btw, here's another list-like thing"), but hopefully this shouldn't be as new of a concept if you're also planning on introducing things like tuples or sets.
Only those with prior expectations will be confused.