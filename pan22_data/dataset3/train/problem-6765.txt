Or configure the Service to send an email on failure, using an external program as the recovery mechanism.
Using only the preferences built into Windows you can create a service, automatically recover the service, and implement rudimentary monitoring of the service.
There are many options here, what to do on the first failure, second failure, you can even run another application on failure.
(You can skip this step if there's already a service entry in the Services control panel)
It sounds like you want to spend as little time as possible on this task.
I'm fairly confident I could do it in Perl using Proc::Background, but I'm reluctant to install Perl just for one script, and while I'm sure it can be done using something like PowerShell, it's not really a worthwhile use of my time to learn PowerShell for one small task.
On the Windows server, define a command in NSC.ini:
I need to find a way to check that this application is running, and automatically restart it if it's not.
We're mostly a Linux shop, but we have a print server running Windows Server 2008, and use an application called Print Helper to print invoices.
Either configure the Event Viewer to send an email on the specific event failures for Print Helper (find the event right click on it, Select Attach Task for this event).
On Linux I'd probably do this with a small shell script and a cron job, but I'm not sure how to accomplish this on Windows Server.
In the services control panel right click on your new service select properties and choose the Recovery tab.
If you're using Nagios, you can do it with NSClient++ addon.
Tasklist seems to do some of what I want in that it can let you know if a specific process is running or not, but I'm not sure how I could go from there to automatically restarting the application if it's crashed.
Of course I would recomend using something like nagios or SCOM for a real monitoring solution.