In this case the instructions are executed by a person, not a computer.
A markdown language may use sequencing -- I'm thinking particularly of <head> and <body> in HTML -- yet one could not implement an algorithm (using the above three elements) in HTML or CSS.
They are then compiled, or interpreted, to create machine code that the computer will follow.
There's (maybe) selection in terms of ids and classes with CSS but not in the sense of Booleans.
One is executed to present information, other is executed to make some calculation, logical conclusions.
And the result from programming language can be present or not present at all to the enduser
They only have meaning once someone reads them, if they are in a language the reader understands.
If you have bold in a document, somewhere internally, there's a marker to start and stop the bold.
Most kids know that a word document is not a program and showing the analogy this way helps make the connection.
Selection via conditionals and Boolean operators and iteration via loops are constitutive elements of a program, not a document styled with a markup language.
I think HTML is a great way to get students thinking of a formally specified language, and seeing some immediate effect from their coding, without the additional cognitive load of implementing an algorithmic solution.
How can be different between 'languages', with, for example, HTML and XML using <tags></tags>, Markdown using special characters around text, and $\LaTeX$ using dollar signs ($) around text and key words.
the jam / PBJ / chocolate sandwich thing, or an effective way to play a board or card game).
The AP CS Principles curriculum defines three elements of an algorithm:
Notice that everything is there, but it doesn't help you figure out how to change a flat tire.
Markup text only has 'meaning' when read by a program that understands that language, interprets the tags, or other markup, and then following programmed instructions of what to do with the text the markup has named.
When you type C-b it inserts that invisible marker and then C-b again turns it off.
It has what you need to know to change a flat tire on a car or truck.
I also show them this by loading a simple web page and then showing its source (and sometimes editing it in the developer tools).
There are occasions, particularly in the realm of unplugged approaches to computational thinking, when we'll think about algorithm-like solutions without any intention of automating them (e.g.
I want to add the following as to help the kids understand the limitations of a markup language.
I describe programming as a two-step process, of algorithm + coding.
Using a markup language is the same as using labels under the paintings in the museum.
Once created, the program will follow the instructions it was given, even if that's not what the programmer intended.
There are other occasions when we'll write in a code that a computer understands without their being any actual algorithm to implement - markdown, HTML, XML, json etc, etc.
deciding how to solve a problem, and then implementing that approach in a particular language on a particular system.
Other answers have already talked about the expressive power of a programming language over a markup language.
They all know Google Docs or Word or some other word processor, I tell them that these are basically the same as HTML.
I can offer the difference between html and php and/or javascript in sense of web.
No matter how it's done, all the markup language is doing is giving some kind of name to the thing, usually text, that it is attached to.
Also, the idea that an algorithm solves a computational -- viz.
This can be a point of divergence between a markdown language and a programming language.
An example of using markup could be the following image.
Still, the instructions enable one to change a tire, while the images that have markup on them don't help any on their own.
Programming languages, on the other hand, are instructions to the computer about what to do.
mathematical -- problem allows one to stress the notion of computation itself, which is intrinsic to a programming language and which separates it from the styling of a document.
Programs are written in text, often in the same text editor used for writing markup text.