Because, well, right now I have 3 chunks to render, but basically I have a 8-neighbourhood around the one chunk the player is currently on/in.
For the right chunk I do the same, but only with Chunkwidth...
Each chunk starts at (0,0) which is the lower left corner of the chunk.
Obviously this is just the X-dimension and I'm not sure if there isn't a far better way to do this.
Each block has its sprite attached to it through the box2D body (userData), maybe I should separate them and separate rendering/physics calculation as well?
Every block has it's own Box2D Body (I want a "minecraft"-like 2D world for this project).
I have a 2D world in form of a Block[][]-Array that holds all the blocks of the world.
Naturally I don't want to calculate all the box2D-bodies at the same time and I don't want to render what's not on screen neither (SpriteBatch).
Now in my player-class I do the following (if the player has moved)
I also tried to calculate the nearest chunk (just go left on the x-axis and down on the y-axis until you find a chunk) and calculate the surrounding ones, but that's much more of a performance hit (logically)
Because that way when I'm 3/4 to the right I don't see the left chunk anymore, so I don't need to render it.
As the start point of the x-coordinate in the chunk is on the left side, I go 1 3/4 chunks to left and render it, if still visible.
I fear that I will have to render/calculate (the physics for) far too many bodies the way I'm doing it right now.
Not sure though, because if a player jumps to another chunk I want him to collide with the blocks there immediately not after a delay (so he is stuck in the middle).
Currently I have 12k bodies in memory at any given time and around 45-60fps.