Making changes to clustered indexes can get very tricky very fast.
Partitioning shouldn't be considered unless you are hundreds of millions of rows or more.
Collecting and interpreting that information can lead you to perf tune in the right spot and fixing the right issues, instead of just bumbling around and not knowing where to start and what to do.
And of course - you'll need to establish a baseline first (e.g.
For example, my first thought is to tune clustered indexes first, then nonclustered indexes, and maybe check constraints.
For most systems start with the nonclustered indexes.
I'm asking in regards to an existing database that would I would have little ability to redesign.
You can download and read his seminal white paper from here.
When tuning SQL Server, what generally is the pecking order to use when trying to decide what to tune first?
I expect that I am missing many items that could go on this list.
Partitioning of tables and indexes would be in there somewhere.
have a set of queries - if ever possible a reasonable and realistic "workload" from your system in production - and measure how they perform) and then you need to tweak something (based on the insights from collecting and interpreting the wait stats) and then you need to measure again to see if that tweak help anything at all - or not.
I like to follow the Performance Tuning by Waits and Queues methodology introduced by SQLCAT team member Tom Davidson.
SQLCAT is Microsoft's SQL Customer Advisory Team - the folks who deal with the most demanding, largest SQL Server customers and thus have unique insights into some of the biggest installations and how to make them fly.
Basically, SQL Server collects a lot of statistical data on why and what it waits for.