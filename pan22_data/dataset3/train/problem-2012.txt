In split_odd_and_even, you're creating a tail variable, which you then assign to tmp.
They add nothing but noise to the code and impair readability.
Most of your operations that function on the linked list have LL_ prefixes which groups the methods together.
tail is never used again and tmp is only ever used as an equality check to detect that you've reached the end of the list.
You don't need to cast the returned value from malloc.
Code for review should be presented in as close to its complete state as possible.
With this in mind, commented out print statements that have helped you with your debugging should be removed.
Are you starting methods with capital letters Find_tail_manual, or lower case split_odd_and_even, are you using capitalisation to separate words LL_RemoveNode or underscores LL_Remove_Head.
Two of them don't Find_tail_manual and split_odd_and_even.
Particularly in this case, where you already have a variable that contains the value and has a better name tail.
If these methods are part of the same conceptual block of functionality, they should have the same prefix to complete the grouping.
Adding unnecessary casts, adds noise to the code as well as creating potential problems with future refactoring.
When you mix and match styles, it makes the code harder to read and predict if you're changing it.
Generally, it's better to name things so that they can be recognised, so tmp isn't a great name.
If they aren't, then in the header they should be declared below all of the LL_ methods, not in the middle of them (with LL_RemoveNode below them).
If you're going to add comments, consider using them to explain 'why' you're doing something in preference of 'what' you're doing.
This isn't a complete review, it's just a few thoughts from glancing over the code...
You also want to try to be consistent with your naming for functions.
Doing it manually involves some processing, so there's presumably a reason for it, don't leave the next person to look at the code the task of decoding why you've done it that way, remember they don't have the context that you have when you're recently written the code.