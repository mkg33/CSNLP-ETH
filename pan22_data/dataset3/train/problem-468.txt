Then, inset this perimeter by the radius of your test circle.
For example, if you needed to test dozens or hundreds of candidate positions for the small circle, you can front-load all the hard work into this Minkowski difference, then you only need to do the simpler point-inside-perimeter test for each candidate.
Image below shows left samples is in the area, right is not.
So now you can simply check whether this point is inside the perimeter of any of the islands left by the shrinking.
Whilst these are good ideas, there's the Corner Case of
(If your background circles have radius R and your test circle has radius r, then this changes convex arcs in this perimeter to arcs of radius R - r, and changes corners where two circles intersect into concave arcs of radius r)
This same operation reduces your test circle to a single point.
First, combine all your background circles into a compound shape where they overlap, so you have a single sequence of arcs representing the perimeter of each connected blob.
There are multiple circles with same radius, given another circle in different radius, how to detect the another circle is fully in multiple circles area.
Another trick you can try is exploiting the Minkowski Difference.
Also, don't forget to clamp your variables to prevent Memory Leaks, you don't want to have 5,000,000 variables for GreyRad[]Inner if you only have 30,000 to check against, also useful for breaking accidental infinite loops as you can include an Error Tracker Counter (eg.
While computing these inset compound shapes is not trivial, this technique can be advantageous if you can re-use these shapes after computing them once.
You would need a check for this as well, which from the sounds of things should likely resemble the "Minkowski Difference" mentioned in DMGregory's Post, but you are simply checking for a Smaller Radius.
Which should return True if everything is matched up, False otherwise, now clearly this isn't factoring in for a 2 Radian Pairing, this would only work on a 3 Radian Pairing, as a 2 Radian Pairing would have a smaller Diameter, which would mean you'd want it before the Core but after the 3 in the logical order, but if someone is trying to break the game, chances are you'll want the Core Radian to be called right after the Shell, then you simply work your way in from the Shell, that lowers the Overload chances as the first thing it checks once it recognizes collision is "are they fully within me?