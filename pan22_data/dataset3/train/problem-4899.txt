It normally runs a version of the Linux operating system, and much of the information on the web uses the Raspberry-Pi/Pi 2 that way.
Doing some actual experiments that are likely to work is very helpful for discovering facts and building experience.
http://www.dorkbotpdx.org/blog/paul/maker_faire_2013
I strongly recommend you go to the Raspberry-Pi web site and start searching around there instead of youtube.
The only examples they have are for Arduino UNO and Mega.
It has 8KiBytes RAM, which is enough for 12 bit colour for 2048 LEDs.
The YouTube videos don't seem to be communicating effectively.
Programs that run on Raspberry-Pi/Pi 2 can be developed in many different programming languages.
He has several projects, including playing real-time video.
Further, comments like "in theory you can chain these together", suggests they haven't tried, though it is exactly what you say you want to do, would not make me feel confident.
That works for 2048 LEDs, has the potential to drive more, and can be experimented with at a low initial cost.
However, these are the specifications from the factory", even from Adafruit, unless I really knew exactly how to use them.
Add a monitor+keyboard+mouse, and it can be used to write programs, to run on itself, or other compuers (like MCUs).
Python is popular because it is easy to learn, but you could use C/C++, or many other programming languages.
Otherwise I'd probably use different LED technology.
A BeagleBone Black has two 'real time' processors called PRU's, which could be used to drive the LEDs.
That is about 8 frames/second, so unusable for live video.
There is much less information about using it this way (maybe 1%?
The only instructions which come with a Raspberry-Pi are about going to the Raspberry-Pi web site, and learning from there.
I think trying to drive 64x64 (4096) RGB LEDs directly from a Raspberry-Pi/Pi 2, is not the way I'd go.
The Raspberry-Pi 2 can run programs without being connected to another computer.
I think it will be hard to drive 4 displays unless you did use the R-Pi bare metal, where everything will become much harder.
I would tend to avoid anything which says Technical Details "We don't have a spec or datasheet at this time.
I like Paul Stoffrgren's approach because, not only it works, and he has proved it, but also because the hard real-time task of driving the LEDs (which would be hard to debug, or more precisely harder to fix if it doesn't work) is handled with a piece of hardware which is capable of the job, and easier to debug and fix.
Given your original question, which I interpret as an indication that you are not very experienced, I would suggest you investigate Paul Stoffregren's approach first.
I would probably search the net for working code for more powerful processors, and base my choices on the that.
You do not need to do 'bare metal' programming if all you want to do is light an LED when you push a button.
They would be better driven as 4 independent displays.
The refresh rate of the WS2812 LEDs is about 800kbits/second, and it is very time sensitive, so
However, they might be quite complex to use, with very little help available.
Each of the 4096 LEDs will need 24 data bits to update the picture
He uses a small Cortex-M MCU to drive 1000 LEDs, and a BeagleBone Black for controlling many of the Cortex-M boards.
If you want to drive an LED display 'wall' I recommend you look at Paul Stoffregren's work.
It normally runs it's own programs, and talks to other computers for similar reasons to any other PC or laptop.