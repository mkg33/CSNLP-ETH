Another aproach may be that both the contenders choose a random strategy and the match of this couple generates the direct fights to compute through another random number.
In any case what you do is to choose a granularity between a model for the battle and the success of a dice trown and keep it secret.
This approach has the benefit of being precise and if it is an option to 'skip' the battle, it is also reusing game code with an AI replacing the player.
He also needs to feel that he is not cheated out of an easy win.
Notthing is more boring that know how the battle will finish because you know the dynamics.
It is a fine balance between simulation and randomness when the only data the player has is the starting state and the end state.
To be generic, you should use a model for the battle and put some order of randomness on it.
The random may be the weighted dice trown to se who wins a direct fight (as in Risk or D&D) where your model computes the direct fights.
corollary: who designs a game hardly finds it enjoyable as is for the rest of the world.
The idea of doing the battle "normally" (usually multiplying any time deltas to make it go faster) is a simulation approach, like used in Football Managers, etc.
The strategy can be choosed by each army unit accounting the unit's nature or personality, a Markov chain can be used to move the army or each army unit from a strategy to the next taking into account the current overall result.
You need to balance it so that the player doesn't have an advantage in skipping battles if it is optional because he will prefer not to play.
You could couple this generator with simple calculations dependant on player stats (wins/losses, strength, etc.)
A random number generator can work, it all depends on your needs.