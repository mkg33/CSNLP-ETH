a proxy, accepting requests on the port, looking at the requests, then shunting requests around accordingly.
"yourdomain/directory1" should be thrown to another webserver, and the responses from that webserver thrown back to the original client.
that they may need to have settings changed as their externally facing URL will be different.
This isn't possible with standard TCP/IP, by the way.
You also need to make sure this VM can reach your other VMs on your "virtual network."
You may have to tell a PHP application that it lives at "yourdomain/directory1" instead of "yourdomain" so it can generate links correctly.
A reverse proxy tells Apache that requests for a certain web path, i.e.
Beware, however, that if you have applications running on this webserver (PHP, etc.)
Applications that generate links with Javascript can be especially problematic, so not all web applications are easily "reverse proxyable."
It's possible to tell Apache to rewrite traffic from the backend server before it gives it back to the client but this is difficult and you want to avoid it if possible.
Apache and other web servers have a "reverse proxy" feature that can be used to "split" your incoming traffic.
Then, on your "front end" VM, you can set up a separate reverse proxy for each website.
Here is the relevant Apache configuration details, using the ProxyPass and ProxyPassReverse directives.
You can also get elaborate and implement caching, which would help performance.
So install Apache on a fourth "front end" VM - forward your incoming TCP 80 to this VM.