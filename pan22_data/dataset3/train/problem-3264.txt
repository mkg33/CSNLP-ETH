throw ash/dash/sh in /bin in an initramfs and set init=/bin/sh on the kernel command line
The DistroWatch site has a lot of linux distribution references.
This article at linuxdevices and the follow up articles are a good intro.
Though slightly out-of-date you could also grab a copy of "Understanding the Linux Kernel" to get a more inside glimpse at the kernel architecture including the boot process.
/dev should fall back to being mounted as dev instead of devtmpfs if you plan to use a static /dev tree (included at the link along with minimal .config and filesystem tarball to make our BUILTIN initramfs )  You should mostly only need to add stuff to the kernel you want to support and not remove much at all - that .config was a bare minimum to boot to an X environment with terminal emulator support.
simple init.c to go to desktop from my experiment here: http://murga-linux.com/puppy/viewtopic.php?p=590822#590822
Notes: /sys /proc and /devpts are not absolutely necessary unless you need mdev, top/ps and a terminal respectively.
You seem to be interested in a light-weight (less stuff loading) installation to study.
It may be more appropriate to exit cleanly instead of looping - I was trying to minimize resource usage, but a fork exec wait for jwm (or your favorite wm) and then an execvp of "sh" would be sufficient.
For more information on the booting process of computers in general and linux in particular have a look at these posts by Gustavo Duartes-
"...Linux to Boot" (you may need to clarify this - Linux can "boot" with no userland tools at all)