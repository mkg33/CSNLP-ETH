Here's some info on a related use case: You want to redirect the output inside the container, which is running on Docker Cloud.
HOWEVER, if I docker attach to the container I can see the app generating output in the console.
Each container is supposed to write its own results file.
In my case, I'm executing a long-running data analysis script (Java) on Docker Cloud.
to run the alpine image and execute the UNIX command cat in the contained environment:
As you can see on the last line I redirect stderr and stdout to a file.
Why do you need to redirect stderr/stdout to a log file in the container?
How do I properly redirect stdout/err to a file when using Docker?
By using bash's $RANDOM variable, I can scale up the number of containers in Docker Cloud as much as I want, while still collecting the results individually.
Merged stderr and stdout are available outside the container using "docker logs", and they can be redirected to a file (outside of the container.)
To use docker run in a shell pipeline or under shell redirection, making run accept stdin and output to stdout and stderr appropriately, use this incantation:
I'm using the java:8-jre image and overwrite the 'Run command' with the following line:
I want to do some simple logging for my server which is a small Flask app running in a Docker container.