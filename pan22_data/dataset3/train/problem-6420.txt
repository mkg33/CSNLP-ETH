Furthermore, diagrams are great for communicating and documenting your design, either to non-technical people or people who are new to your project - and remember, in 6-months time you are practically new to the project too!
It may be worth pointing out a few design diagram talks from the Game Developers Conference 2013.
Object diagrams when things like instantiation of objects becomes something bordering on the creation of a Frankenstein monster from disparate parts - especially useful in kitchen sink vertex and pixel shader users, to make sure all of the requisite bits are pushed through the pipe
Diagrams are a great way to visualise the problem and help your design, especially for visual thinkers (which is most of us on gamedev I'd imagine).
Diagrams are a great way to communicate, document and aid your design, and design is the most significant part of software development.
I certainly do -  both structural and behavioral - my rule of thumb is that I make diagrams when the cost of making the diagram is less than trying to remember what the hell I was thinking a month later - or when I need to clearly explain myself to some other developer
Rather than attempt to paraphrase, here's how the wiki describes the system:
When navigating in a new city, do you actually stop and look at a map, rather than just continue and follow signs?
(Here's a paywalled GDC Vault video from GDC EU 2012; samples from GDC 2013 on Dormans' wiki.)
Noah Falstein gave a talk called "The Arcane Art of Puzzle Dependency Diagrams" (paywalled GDC Vault video).
A lot of problems become trivial, defects become obvious, when it's clearly mapped on a diagram.
As for myself, I use diagrams all the time - simple notepad drawings for personal projects, simple UML diagrams at work.
Try to include the details of API calls, message types, directions of dependencies.
No-one uses the full set of UML features anyway, plus it is very useful as a set of standardised notation that many people understand - whereas my napkin doodles may be incomprehensible to you and vice versa.
Joris Dormans and Ernest Adams discussed the Machinations game design/balance diagramming system.
Use whatever notation you are most comfortable with.
Class diagrams when the inheritance hierarchy becomes sufficiently complex
I can't find any non-paywalled link here, but various folks have discussed or posted their notes on-line.
How you use UML should be driven from these considerations.
Sequence diagrams when the detailed interactions between a set of objects become complex - this is extremely useful in modeling complex render flows where previously computed information is needed at barely related downstream locations
Both talks discussed when they created and how they maintained these diagrams, to one extent or another.
When things are unfamiliar, when the problem is complex, when you feel lost, that's when thinking about design is most helpful, and it's better to do it earlier than later.
UML has a lot of features but you are not meant to use them all at the same time, only the ones that are useful.
(The other answers have done an admirable job of demonstrating why and how design-focused diagrams can be tremendously helpful in planning, building, growing, and maintaining a codebase, so I'll leave that aspect alone, and trust these resources might be useful to anyone visiting the question.)
It's much easier to change your design before you've implemented anything.
This UML diagram is what I'd consider too complex, and one that I'd never make because the cost of producing and maintaining it outweighs its benefit, but of course YMMV.
These are some very practical and road-tested examples -- and it seems they've been presented at many conferences across the years.