The continued use of is_int() to differentiate between a pointer and a memory-block is due to the fact that there are no established naming conventions for the pointers, and they could be anything from ptr to _dif94tdifj_fgjd.
                node_pointers.append([split_line[0], int(split_line[1])])
    # the input_file, then runs the simluated mark/sweep
            node_dict[int(item[SOURCE])].references.append(node_dict[item[TARGET]])
    # variables as strings that start with either a letter or an underscore '_'
    # The contents of the input file are then used to determine all references
    # be marked since RootMemoryBlock only references pointers which
In this answer I'm going to discuss the general design of the garbage collection algorithm.
Ideally this is something I should be able to determine on my own, but I don't trust myself 100% on this.
Is my solution for store the RootMemoryBlock, the normal memory blocks, the named pointer-variables, and all their reference links still needlessly inelegant, unintuitive, or "hackey"?
    # Each object's reference list is stored in its <MemoryObject>::references
Here's an illustration of the alternative approach, which maintains an extenal table of marked objects, and operated in breadth-first rather than depth-first order:
    # memory-blocks (not variables, or the RootBlock) is copied into it.
I don't think I made this very clear in the original post.
    # as it's starting point, which garuntees only accessible memory will
    # of the file garuntees that memory_blocks are listed as integers, and
    # Each node traversed is marked, and the function returns
    # each element therin containing its list of references
This is especially in regards to the code that populates the reference lists for the elements in the  dictionary, though I tried pretty hard to make it as readable as possible without any inline comments.
    # This function assumed the inital call was passed the RootMemoryBlock
            node_dict[root_node_key].references.append(node_dict[item[SOURCE]])
    # The format of the input file garuntees that each item will
            node_dict_final[element] = node_dict[element]
    # is_int is therefor used to determing if an object is a variable or a
Specifically I moved inline comments to a larger Documentation Block at the top of each function (though I'm not sure if those became too verbose), cleaned up my formatting, and restructured the storage of the Memory-blocks and pointer-variables to allow for a more efficient algorithm.
            node_dict[item[SOURCE]].references.append(node_dict[item[TARGET]])
        if is_int(element) and element != root_node_key:
                split_line = re.split(r'[,]', split_line)
    # Determines if the given string contains only an integer value
    # Primarily used to distinguish memory-blocks from named
            if item[SOURCE] not in node_dict.keys():
    # Displays the results of the mark/sweep algorithm
    # pointer-variables ncluding a "RootMemoryBlock" that hold the
The code overall is much cleaner and the functionality is improved.
    # referencing named-variables being the RootMemoryBlock.
        self.references = []  # list of <MemoryObject> references
    # Finally a new dictionary is created and JUST the info for the
                node_dict[item[SOURCE]] = MemoryObject()
    parser = argparse.ArgumentParser(description='Some description')
    # This function creates a dictionary of memory-blocks and named
    # RootMemoryBlock <MemoryObject> which recursively performs the
    # The dictionary is then passed into the node_trace function along with the
    parser.add_argument('filename', help='Filename parameter for input file')
Of course what you have here is just an exercise, not a real collector, so this is kind of academic, but I think the points here are worth knowing about.
    # between variables->blocks and blocks->blocks, with the only object
    node_trace(node_dict[root_node_key], node_dict)
    # memory-block when populating the reference lists for the elements
    # This function recursively simulates the "mark" phase of
    # in turn, by definition, only reference chains of accessible memory
    # Each object is stored in the dictionary as a <MemoryObject>
    # That dictionary is then returned to the calling function.
    # It then displays the returned results of the mark/sweep
Here is the revised program, if it looks significantly longer, that's just the added documentation:
    # describe a link of the form [source, target]
Here I have incorporated the excellent feedback from this question to improve a small program that simulates a Mark/Sweep G.C.
    # Sets up a parser object for handling arguments passed to the program
    # determined by the contents of the input file.