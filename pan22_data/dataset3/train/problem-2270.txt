This worked for me when my device didn't finish booting at 1000MHz.
This makes bootloader code to almost ignore content of config.txt (except from avoid_safe_mode option) using default values and try to boot with kernel_emergency.img (or kernel.img if it's not available).
So I just have to insert the card in my laptop, edit the file, et voil√†...
The raspi-config tool, at least in recent Raspbian releases (September 19th, 2012), allows you to hold the Shift key during boot to return to a non-overclocked state.
More informations (including photo) on this thread.
At this point, I want to come back to the latest known good settings for the /boot/config.txt file.
What worked for me was to power up with pins 5 & 6 on the GPIO shorted.
There is "safe mode" boot option in raspberry Pi firmware for some time now.
It mounts /boot/ by default so you can easily edit it and restore your RaspberryPi to normal boot.
This will override the over clock settings in the boot config.
From http://www.raspberrypi-spy.co.uk/2012/06/overclocking-benchmarking-the-raspberry-pi/, I learned that the /boot directory actually resides in a specific partition that is readable directly from Windows (and probably many other OSes...).
Be sure to not short any of the other pins, as you can do permanent damage.
By default kernel_emergency.img boots to minimalistic busybox based initramfs.
If I try to overclock my Pi, I want to go up to the point where the Pi won't boot anymore, or won't be stable enough.
To enable it, you have to use a jumper to do short between pins 5 and 6 on P1 header.