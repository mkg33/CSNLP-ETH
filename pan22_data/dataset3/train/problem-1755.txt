What would be the advantages and disadvantage of using Apache + PHP for a game like this?
Firstly, the game is a multiplayer(player vs player) game, for example, like an online chess game.
I will warn you - I have limited experience in the area, so you can take my answer for what it is worth.
The platform is going to be Android (and perhaps extend to iOS in the future)
(We are both programmers and we are familiar with Java C++ Obj-C Apache PHP Tomcat JSP Javascript)
However it is real time, so the latency cannot be too high.
So I am starting a game with a friend as a small project, and we are considering what game servers would we need.
The players basically take turns, but in a real time fashion.
BUT - they are designed for making active webpages and will most probably not be the best tool for the job.
If that seems to be a bad choice, I would be grateful if you can share your experience with me.
Make your server application Fork for each connection, read the current state of the game off MySQL and apply the rules (storing changes to the MySQL datastore, so any other players who connect will see the relevant data), provide accept the players input and output etc.
Use the relevant sockets library, and code it directly.
This would also minimize the problems related to multithreading.
The server would need to synchronize the players' moves to each other devices.
You would be probably better off writing a server in the language of your choice - out of your familiarities, I would suggest Java or C++.
However, using Forks as well as C++ (or, to a lesser extent, Java) will ensure scalability.
If it is a real time, though turn based game, I would use MySQL as a datastore, as it can interact with Java or C++ (or PHP if that is what you eventually decided to use).
I don't really need anything large scale and I am thinking of using PHP since the volume of data isn't really that big, this is like a web-based game with a requirement of a slightly lower latency.