It shows a "stupid" personality tree that I can evaluate from left to right when needed.
The AIState is modified by each behavior, as needed.
And, more accurately, only a few nodes have the POSSIBILITY of depending on the node before them.
So, a "gambit" with the personality of "Healer" may look something like this:
These conditions would be priority ordered, and the first one that returns true would be the action I take.
Each of these personalities would have a set of conditions it would check on each event (Turn start, time to react, etc).
What I like about this approach is it makes sense in my head.
If all 3 methods return true, I can continue onto the next node (or, if the last node, I'm done).
If that was, say, "UseAttackSkill on Enemy Any", I could execute that node without regard for it's current location in the behavior tree.
I can also pre-evaluate a node based on where the entity will be in X seconds.
I've experimented with FSM, HFSMs, and Behavior Trees.
Each method also takes in the current BattleState and the current AIState.
It is heavily influenced by Rule Based systems, but also has some features from STRIPs, Behavior Trees, and Finite State Machines.
None of them felt "right" to me and all felt either too limiting or too generic / big.
Does anyone have any experience with AIs in Turn Based games that could maybe provide me some insight into this approach.. or suggest a different approach?
I could represent all these decisions in the tree but I didn't see the need for that... yet.
Each node has a bit of smarts in it that are not represented in the editor.
The BattleState is NOT changed by the AI, but instead by the battle system as a result of the AI.
The game is a turn based one, in the vein of Final Fantasy but also has a set of things that happen in real time (reactions).
They all also have a Precondition and Postcondition step, which let me evaluate if I should even run that action or if that action was successful.
Each one of these nodes are also executable independently (mostly).
For instance, the "ChooseTarget" action has a bunch of smarts about which target should be chosen: Who has the highest threat, who has the lowest health, etc.
This is maybe a question that's been asked 100 times 1,000 different ways.
I'm in the process of building the AI for a game I'm working on.
Sort of a mix of FSM/HFSM and a Utility Function approach.
Each "node" in my AI has a method I call depending on the type (Decision, Condition, or Action).
What I'm worried about is.. would it be too limiting?
For example, "UseAttackSkill on Target" depends on the node before it because it needs a target set in the AIState.
Only certain nodes depend on the nodes before them.
These conditions can also point to a "choice" action, which is just an action that will make a choice based on some Utility function.
I decided that I would build a system that is a mix of the various different AI systems out there.
The idea I'm toying with now is something like a "Rules engine" that could be likened to the Gambit system from Final Fantasy 12.
It also would be extremely easy to build an "AI Editor" with an approach like this.
I just felt that was the best approach for my game.
Likewise, a "gambit" with the personality of "Agressor" may look like this: