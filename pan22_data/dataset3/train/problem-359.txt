Take this method (not pulled from source, just based on):
You're going to start having to code in multiple places.
All blocks can be broken, picked up, placed, stacked, stored in chests, and crafted together.
BlockStone would check to make sure that harvest is true and the put cobblestone in the list.
The same goes for items, some of which (like sticks) don't even have a derived class of their own because they do nothing special.
... look how the code only has to be written once, and the properties only have to be defined once.
Finally, the Video (MovingImageFileInfo) doesn't rewrite the wheel - it takes all the stuff inside the ImageFileInfo class, and simply tacks on a durationInSeconds property.
The framework of the exercise can be adjusted, but here's a short example:
Yeah, you could write these out into four completely separate classes.
The List and Node can both be inherited as you expand from array-based lists to linked lists, and into doubly linked lists.
There are roughly 100 different methods in the block class to handle all of the possible functionality.
1Well, except Minecraft Forge, who maintain the official unofficial mod API.
Grass, when broken, drops a completely different block.
The default implementation puts a single item (the block itself) into a list and returns it.
Stone doesn't drop anything at all unless dug out with a pickaxe.
Down a level from there is the ImageFileInfo class, which adds a Dimensions property and a check whether those dimensions are too large.
If you haven't, I suggest taking a few minutes to find some introductory "Lets Play" videos on YouTube first.
If you had those four classes as four distinct entities?
All Content Management files have to have a 'who created', a 'description', a 'file size', and a way to check whether that size is too great.
Part of the "teach OOP" problem is that OOP (and modularity, and top-down design, and variable-naming discipline, and consistent code layout, and...) is practically useful for large programs with a long life, and in the time allotted you write tiny throwaway programs.
On the other hand, if you are looking for a more practical use-case, then you can use lists.
I'm not as familiar with Python as I am with other languages, but I'm sure your students have played Minecraft.
There are several things that I like about this exercise:
Minecraft can do this because of all of those basic methods that subclasses inherit and override.
There is the Node, which in its simplest form is nothing more than a data encapsulation, and the List which implements the process of accessing the nodes.
Most of them are blank and do nothing, entirely up to the derived class to add to, if it needs it.
But Forge is a special kind of magic that isn't important here
My coding school gave one particular (weeks-long) project that I felt nailed the concept of inheritance, and why it could be useful:
The problem is, you're already going to have to write all those properties each and every time for every single class - and you're going to end up with code duplication along the way as functionality gets added.
), hopefully modifying/extending, programs written in OOP style.
Another user, G. Ann - SonarSource Team, gave a good break down you could follow in answer to another question.
This is why the are so many mods for Minecraft that add so many new things: no one1 has to implement anything special in order for everything to Just Work.
Imagine you're writing a Content Management system - this system will store four types of documents (and the Meta/Index information for them)
BlockDiamondOre checks harvest and fortune, putting a different number of diamond items into the list, even determining how many based on the Random supplied.
If the students are still needing real "objects" to connect metally with the concept of object you could resort to using transportation as a system.
Then you can switch to stacks and queues, maybe even moving into binary, and n-ary, trees.
I've got one that might help, modified/simplified from an actual problem I had to solve at my current job.
Update ticks (crops), neighbor updates (observer, torches), interaction (doors, chest, furnace, crafting bench), whether or not a block has a tile entity (chest, furnace), and on and on and on.