Is there an engine that plays pre-existing sounds but modifies them based on physical information such as distance from microphone to simulate a "surround sound experience"?
The question to answer is how fully do you need to simulate, and how much can you fake?
World of Goo: simulates mass, tensile strength, and elasticity.
For audio just having some kind of realtime modulation of sound in a reasonably convincing manner gets you a lot without having to model acoustic vibrations down to the molecule.
I think this does not need to be an impossibly cpu-expensive undertaking,  The problem stated is entirely deterministic and should be achievable on modern hardware.
(at least to a level suitable for an entertainment/learning product.)
Does the engine provide a predefined set of environments(how many?)
Now assume for a moment such true physics sound engine existed.
But I doubt it would be worth the effort unless the whole game mechanic revolved around thrown and spinning flutes.
I would suggest having a repeating sound effect of a spinning flute.
Finally directional sound is implemented using HRTF per each soundpath.
Not sure what the latest is, the last site update is over year ago now.
It is not so much geared to modeling resonance of air in a volume, but could perhaps be a good example of how to drive real-time audio synthesis from physics.
Developed library utilizes beamtracing to provide user with realistic audio auralization.
Lets imagine a near perfect physics based sound engine.
The sound changes dynamically along with movement of the game character and sound sources.
Input the player position and the flute's position/velocity.
When reading your question, I can translate it two ways.
Ballons pull up with a constant force and goo balls under water experience a constant upward force as well.
Does the player have directional ears (ala human) or just ear holes (ala dolphin or alien) or multidirectional like an animal?
It would however break down if you tried to make a space elevator using World of Goo's physics engine.
How can I simulate the sound a flute when it flies past the player?
Sound path creation algorithm supports phenomena like specular reflections, diffuse reflections and edge diffraction, whilst audio processing supports signal filtering (modelling air dumping,
Phya is a "physical sampling" based collision audio synthesis library which can be driven by a game physics engine.
reflection/diffraction impact and so on), Doppler effect modelling and spatial effects.
You could record the sound that comes from each end of a flute as the air flows by and have the flute use two sound sources.
How long would it take you to define the sound of flute flying through the air.
How many parameter do you have to get just right (100's?
You're making the mistake many new game programmers make.
Games are not perfect simulations, they aren't even close.
The rest is faked because it doesn't add the feel of the game.
or does it figure it out by calculating the actual physical topography(yeah right)?
All audio effects are computed based on the actual geometry of a given game level as well as its acoustic properties (acoustic materials, air attenuation).
they are called "3D sound engines" a well-known one is OpenAL.