Your overall method of sorting the list would be good if the program called for finding the kth largest number in a list of size n where k and n were unspecified beforehand.
However, if we know (or can assume) that k << n then there is a faster method that just requires using more memory.
Sorting a list of n elements takes O(n log n) time.
Think about how you could solve this problem without storing all of the numbers.
Another issue is that your ArrayList takes O(n) space to store n numbers.
A one-element list cannot possibly have a second-largest element.
It is conventional to put a space before and after binary operators.
A further complication is that if the ArrayList grows beyond the original capacity, the list needs to internally reallocate its internal array and copy all of its contents to the expanded array.
Now try to extend that approach to get the second-largest.
There's no point in storing Long values if you cast the final display back to an int.
If you had to find the largest entry, how would you do it?
There are several inefficiencies that prevent your program from scaling to handle large inputs.
If you had a stack of papers with number grades and needed to find the second highest grade would you sort all of the papers first or could you use your memory to help you solve the problem faster?
It's often nice to think of how you would perform the task yourself in problems like this.