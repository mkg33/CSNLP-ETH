To make it stable, the merge should prefer to take items from lst1 rather than lst2 in case of a tie.
That is, you need to change if lst1[0] < lst2[0] to if lst1[0] <= lst2[0].
You have a correctness problem and an efficiency problem.
The merge is inefficient because you keep slicing off the first item of a list.
The only issue with this bottom-up iterative approach is that it may lead to a last very unbalanced merge.
I am not a sorting expert, but I can make a few suggestions based on general Python style:
That would require all of the subsequent items to be copied over by one position.
This merge is not quite correct because it is not stable.
With an in-place merge function like the above, the recursive approach is very simple to code:
That increases your running time from O(n) to O(n2), which is generally considered unacceptably slow.
This means that, as a general rule, you don't get to pop or append items from the lists you are merging.
Sorting algorithms are typically defined to sort their input in-place, and the canonical definition of mergesort is not different.
Making an iterative mergesort that behaves exactly as the recursive one is a little involved, but if we do things a little differently, it is simple:
One of the nice properties of mergesort is that it is stable: items that have the same value in the input will appear in the same relative order in the output.
Also, in the merging step, rather than doing the merging into an auxiliary list, you copy into auxiliary storage data that could be overwritten, and merge directly into the original list: