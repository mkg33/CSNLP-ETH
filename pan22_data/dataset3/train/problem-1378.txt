Your calculateTileCount() function appears to implement the bulk of the counting work.
It's not obvious what "calculate" means, or that the tiles is a list of tiles to be removed from the initial set.
Functions are usually short enough that it's obvious you haven't reassigned the variable.
The ScrabbleTileCounter doesn't act like an object, the way its name would suggest.
I don't think that you need to define a NoRemainingTilesException.
I would find an interface like this more intuitive:
The final adds noise, and it gives the false impression that the object is immutable, when in fact there is no such guarantee.
The standard NoSuchElementException is close enough to do the job.
I find it to be an unnatural interface design, though.
I don't recommend marking function parameters as final.
The tiles are mostly in consecutive ASCIIbetical order (except for the characters [, \, ], and ^ that we would consider as junk between Z and _).
You do not need the second outputTileCount.put(entry.getValue(), scrabbleTiles as scrabbleTiles is a reference to the existing map entry.
A simple array, serving as a lookup table, would do the job:
For enum types, you can use EnumMap over a HashMap as a more efficient Map implementation.
Both EnumMap (see above) and HashMap lets you copy an existing Map's entries using the constructor too.
It's much easier just to work with chars and ints directly.