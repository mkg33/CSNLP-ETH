Apache is not required; you may use another Web server or none at all, depending on what your Java application is doing.
This also gives you much more fine grained access controls that come with Apache.
I prefer using varnish in front of tomcat instead of Apache, because Apache's tomcat connector is quite b0rken.
If your site has a mix of static and dynamic content then you should consider running Apache (on port 80) and use the connector to integrate tomcat.
You don't have to use apache..  You could allow access directly to Tomcat, but beware, the HTTP Auth support is pretty appalling if you don't have a server as proxy for Tomcat.
You don't need to buy any books, you can do pretty well with the available documentation for both Apache Server, and Tomcat.
http://wiki.nginx.org/NginxJavaServers (I've not tried this)
You could use a number of other servers, for example nginx can act as a proxy server for Tomcat.
http://tomcat.apache.org/connectors-doc/webserver_howto/apache.html
Varnish is a very efficient reverse proxy and cache and speeds up delivery of tomcat's HTML output.
However, it's not very efficient at serving static HTML.
If I am running the tomcat java container on a server, does it require me to use apache?