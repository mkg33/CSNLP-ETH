This removes the need to worry about casing, lets IntelliSense prompt you for valid values, and throwing an exception on an unexpected value ensures that you catch it during testing the moment it occurs, instead of the subtle "hey, this just keeps failing to validate" of always returning false.
After all you need only one validation method which is IsInRange that you can use for both numbers and strings.
That said, sometimes doing that isn't an option, so I want to point out an alternative to passing the "magic values" of "string" and "integer" into your function.
One of my pet hates is passing in a string of the type your are dealing with.
That enforces the limitation when you're writing code, and helps avoid typos and other subtle gotchas.
Just try to parse it as int and if this doesn't work assume it's a string.
Heslacher is correct in that you should split this into two separate methods.
When you have a function argument that only takes a very limited number of values, you're usually better off replacing it with an enum.
Use the .net provided "Type" class and then evaluate it against type you wish to deal with at the appropriate time.
In conjunction with the answers provided above about the violation of the single point of responsibility and keeping the code as "Flat" as possible.