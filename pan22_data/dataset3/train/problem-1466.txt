In the upcomming dialog select the id ror in the list of parameters ad click remove.
Tho change that we first avoid the use of this parameter in our new method by directly returning the return value of TypeUser::getId()
Next you can use your IDE's refactoring inline to combine the two lines in the switch to one line:
This is a factory method Therefor you cannot avoid branching here.
To enable that your method should not return an I but a TypeUser object so that the rest of the code can call a method defined in the TypeUser interface not needing to know what concrete type of user actually is given.
Then place the cursor on the method name and invoke your IDE's refactoring change method signature.
To stress the good advice of Ankit Soni again throughout your program you should replace branching with polymorphism.
Since after the switch you do nothing else then returning the value of id you can directly return the outcome of the new method extracted() and get rid of the extra break line:
This removes thisparameter vrom the method declaration as well as from anny usage of that method:
You can select this two lines in one of the case blocks and invoke your IDE's automated refactoring extract method.
This will replace all the occurences of the repeated identical code with a call to the new method create by this refactoring:
now you have two lines of identical code in each case block.
Obviously it is not meaningfull to pass the null reference stored in variable id to the method.
As suggested by Ankit Soni you should have an interface that all your different user classes implement:
Then in your method you could store all different UserType-objects in a variable of same type having the same name:
Of cause you should give the new methid a carefully chosen name but I keep the name suggested by my IDE on purpose.