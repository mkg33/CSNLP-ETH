Here is a link to the live public spreadsheet that has the implementation of this solution and here is a screenshot for reference.
C-G - Re-arranges the names randomly [Not sure why]
Now add those together and divide by the number of times the L name shows up to get the average
If this L name shows up in D's Top 10, find the row it is in, Else 0. etc.
I - Count the B values that are equal to the adjacent H value
H - Filter out all values greater than the previous max, and then find the max of B
J - If this L name's value (x) is less than the previous (y), find the row of the first match of x in B, Else find the first match of y in the range found in K and offset by the value of the previous J
N - If this L name shows up in C's Top 10, find the row it is in, Else 0.
Given a list of names with 5 re-arrangements of those names, sort the names by (the number of times the name shows up in the Top 10 [ascending]) then by (the average of the name's Top 10 placements [descending]).
O-Q - Sort L-N by M ascending and then N descending
L-M - Sort A1 through B27, by B in descending order