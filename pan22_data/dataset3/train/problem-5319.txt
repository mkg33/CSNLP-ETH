Besides, this is inconsistent with the rest of your code.
The $errors property is private and I don't see any method unsetting values from this array, therefore, if the $field index is set, the value should be as well.
But the difference might be trivial, depending on the type of traffic you are expecting.
Perhaps a better way to parse your rules would be to use array functions rather than explicitly declaring each array element.
I don't see any in the code you posted, but that doesn't mean its not being done somewhere else.
$fields should only be protected if it is being shared, either by a parent or child class.
This will make your nested if statements completely unnecessary.
Also, an easier way to determine if an array is empty is to use the empty() function.
PHP inherently requires them, otherwise you wouldn't have to add them if your statements extend more than one line.
Then the above could be rewritten so that you only have one return statement.
For instance, say you parsed a JSON file and wanted to verify it before using it, this class would be the perfect candidate, but because you have limited it to using only POST values you will either have to create a new class just for JSON, or you will have to modify this one to use both POST and JSON, and the cycle will continue the more things you add.
Be careful of variable-functions, or in this case variable-methods.
It puts less strain on your server and keeps unnecessary transfers from occurring.
The following statement will always be true, at least partially.
Do it once outside of the loop and use that instead.
You are saying that if one parameter is required, they all are?
Correct me if I'm wrong, but I'm not sure your usage tests works.
You can abstract some of those statements to make this a bit easier to read.
Alright the next statement I sort of get, you don't want to overwrite any existing messages, but why not instead just log them all using a multidimensional array?
As Corbin has said, you should pass in the POST array instead of explicitly calling for it in your class.
Also, an empty string translates to a FALSE state, so explicitly checking it should be unnecessary; and those parenthesis are also unnecessary.
If you are like me and are unlucky enough not to be able to use short ternary yet, then the following ternary statement is fine, but, if your PHP version is >= 5.3, then know that you can change it.
This would be different if that wasn't the case, but it is and it can cause issues.
You should just wait to inject the validation class until you add everything you need to first.
This holds true for anywhere you are comparing the size of an array to zero.
I understand what you are trying to do, but I'm almost tempted to tell you to do it manually.
This will also mean that verifying that the POST array was set will become unnecessary, at least here.
Since the Validation class isn't extending anything I think its safe to say that no parent classes are using it.
Well, first off, I think using client side cookies, instead of session cookies, might be a little better here.
Just know that protected means a property is to be shared but not available outside of a parent/child relationship, otherwise it should be public or private, depending on how you are planning on using it.
This means that calling for the errors from the form class is pointless.
It can make debugging hard, besides, the only way this function would return false is if you passed it an empty string.
Additionally, try not to define variables in your statements.
If you use array_filter() in your setRules() method before setting this value to the fields array then all such elements will automatically be removed from your array.
Though typically public properties are avoided in favor of setters/getters.
Each element of the $errors property is an array, so it will never be equal to an empty string.
At least in as far as you are checking if a field exists in your array on every iteration.
This would throw an error automatically if some other form of variable was used, meaning you don't have to explicitly check it anymore, except for empty of course, you can just assume its an array and work from there.
Did you instead mean to check if $rule == 'required'?
You pass your validation class to the form class, but because nothing has been done to it yet it will not reflect in the form class.
Since it appears obvious that you only want an array to be passed as your ruleset, perhaps a better way of passing the $rules parameter would be to use type hinting in addition to a default value.
Though this ternary statement is getting a bit long and complicated, so this might be unwise.
Its a little harder to tell if it has any children that might use it.
Corbin touched on a few good points, +1 to him, below are some that I found.
Maybe you meant to use an empty() check here, but even that should be impossible.
Typically most people will glare at you and call you dirty names for doing this.
No need to explicitly define a TRUE/FALSE state for the return value.
Just return the count, or empty() check, either one would result in the same thing, though I would use the latter as it does not require the added negation.