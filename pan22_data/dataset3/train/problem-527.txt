If you want to separate the Web app from your network i suggest you create another DMZ and place your DB there.
I can also send network communication originating from this webserver.
I will attack the webserver using a zeroday exploit.
If I do this, the network of the database sever is compromised.
I can now use an exploit in the Windows File Sharing service to gain administrator access to this server.
I can exploit any service available on the database server.
You shall not allow any traffic from DMZ into the internal network.
The application database and all other databases are now impacted.
If someone may gain control over your web app the dmz, then it will be possible to open a connection to a server inside your internal network and gain full controll over your entire network.
I have seen some terrible firewall designs, and this is one of them.
I now have administrator access to the web server and can fully access the local filesystem.
This would limit the exposure of customer data to what's in the queue.
I would just like to point out that as a first step you should find out what the legal requirements are in your part of the world, as they vary considerably.
If I gain administrator access, the full internal network is compromised.
If the database server is on a different machine in the same DMZ, I can fully communicate with the database server.
Any other communication is filtered by a firewall.
I can read and write to all tables in the database, create new ones and listen in on all other communication with this database server.
I suppose you have configured the MySQL account to have only READ/WRITE access to the tables specific to the application.
If the database server is on the same machine, I now also have direct and full access to the database.
The credentials for accessing the MySQL database will be in the web app code somewhere and the machine in the DMZ will have to have access to it so firewalls won't keep your data safe in this instance.
I would put the DB in the internal network (behind a second firewall).
Evaluation: I can access the database server using the web application account, but this may only give me limited rights.
If the database server is in an entirely different network, I can only access the database port.
This means I can only use an exploit in the database program to gain administrator access.
The only traffic allowed to the other DMZ i from your web server.
I need a different exploit to gain full access to the database server.
I can only exploit the database port to gain full access.
Senior DBA and former owner of a security company.
So even if your DMZ is compromized there is still protection for your DB.
If the machine is compromised then it wouldn't matter if the MySQL server were in the DMZ or not.
Evaluation: I can access the database server using the web application account, but this may only give me limited rights.
Let us evaluate the two scenarios and see which one is better.
Quite possibly that will determine your configuration.
This may not work or be practical for your particular app.
A better design may be to have the web app write a queue which is then pulled into a MySQL database inside your protected network.
I think the MySQL part has been adequately covered and I certainly agree with what has already been said.
I have gained access to the credentials required to access the application database.
This vastly reduces the attack surface of the DB because you set the firewall rules for the second firewall (DMZ to Internal) to ONLY allow connections on port XXXX (the DB port) from the webserver.