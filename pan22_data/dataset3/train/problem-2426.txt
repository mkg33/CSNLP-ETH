So increasing the number of prints would slow it down in 2 ways, 1 it would fail the test more often but the extra time spent printing is far more significant.
It would depend largly on your definition of fast.
But lets say a worst case scenario of one instruction per cycle for this fairly straightforward task.
Processors are designed and optimised to do as much as possible during a single cycle.
A 3Ghz processor has three billion cycles per second.
The question then becomes "why does it take a full .85 seconds just to count to 300 million?
I assume they use some special manner to count (or is it how gcc compiles it?
I am going through a book on C and it said "Write a program that counts from 1 to 300 million, printing the number only if it is a multiple of 100 million.
The amount of instructions that can be carried out per cycle is dependent on many things, include the instruction set, cores, architecture, and what task is being carried out.
I wasn't exactly intent on timing it, but without any optimization with GCC time is around .85 seconds and with optimization about half of that.
The amount of code needed to output a simple number is orders of magnitude greater than the counter, and must interact with subsystems off the CPU in order to get the information to the screen.
Input/output operations are the bottleneck here, and are generally.
A 1 GHz Processor is capable of executing 1 billion instructions every second (Ignoring Hyperthreading Pipelining multicore and other cpu features to allow multiple instructions to be executed at once.
The instruction to increment your counter is only 1 instruction, depending on how your check for 100 million and how gcc optimizes it the check could get down to a few instructions, that is probably also insignificant as modern compilers have look ahead / branch prediction which means that your CPU will presume the number is not a multiple of 100 million and will keep on incrementing your counter until it gets the result of the actual comparison and in the case of being a multiple of 100 million it will roll itself back to the check and execute your print statement which will be quite slow comparatively as it needs to deal with hardware outside of the CPU.
After all it is a simple increment with a test for completion.