However I have a hard time justifying where to let the components do their thing.
So my question is, where do I update the components, what is a clean way of getting them to the managers?
I could also walk over the scene tree and then gather the different components into lists using some sort of observer pattern but that seems a bit wasteful to do every frame.
For example a component that makes an entity collidable must be managed by something that can oversee all collidable components.
Say I have a simple entity that has a list of components.
But some components might need a little bit more management.
Instead of my usual inheritance heavy game engines I'm toying with a more component based approach.
Of course the entity does not know what these components are.
I have thought about using a singleton manager object for each of the components types but that has the usual drawbacks of using a singleton, a way to alleviate this is a bit is by using dependency injection but that sounds like overkill for this problem.
In order for these components to work they have to updated every frame, the easiest way to do this is to walk over the scene tree and then for each entity update each component.
There might be a component present that gives the entity a position on screen, another one might be there to draw the entity on screen.
A component that makes an entity drawable needs someone to oversee all other drawable components to figure out the draw order, etc...