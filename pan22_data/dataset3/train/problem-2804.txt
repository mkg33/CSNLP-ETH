Since my C++ code that sets these per model parameters is called by the CPU, doesn't it have to bus all that data to the GPU a ridiculous amount of times.
So for each of these models I have to loop through set the diffuse, specular, etc and then a draw call.
So I have a bunch of models that need to be rendered.
Each model most likely has various "sub meshes" with their own diffuse, specular, etc textures.
Even if it doesn't and the GPU is caching, wouldn't the CPU still need to make several inquires to make sure the correct resources are cached?
Now lets say I do this a couple times for each model, and I have 100 models in a scene.
I am asking because I have a, single, high res model I am rendering and once textures are applied I drop from 1000 FPS to 70.
Look into "Shader Constants Buffers" on DirectX and "Uniform Buffers" on OpenGL.
These allow sending shader parameters all at once to the GPU and possibly reusing them every frames without having to resend them over the bus.
This model has about 20 different textures, and isn't something that will be used in a game, solely using it to stress test and locate bottlenecks.