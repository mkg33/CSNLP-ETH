Here, I am taking the example of ExecuteReturnScalar method now.
Right now, Exception handling applied for both Private and Public methods.
Can delete the below properties and methods from the code
Microsoft Entity framework also follows the same logic.
https://msdn.microsoft.com/en-us/library/system.data.entity.database.executesqlcommand(v=vs.113).aspx#M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])?
•   If there is no additional logic in Public method(Apart from calling the Private method) then Move the logic from Private method to Public method and Delete Private method.
Create a DbQuery with the Parameterless constructor and read the connection string from web.config.
•   Remove the exception handling in public method
Allows to call the methods parallelly and supports async calls too.
Add any number of SqlParameters with comma separated list
This way, No need to pass the connection string as a parameter to all the DbQuery Constructor.
Maintenance wise, if we need to change the connection string related code, then change is at one place instead of multiple places.
As method calls are not depending on the SqlParameter member variable.
SqlParameters: The below logic applies to all the methods depends on the Sql Parameters.