If you really care about speed you can add a flag insecure so that when the user wants full speed and knows what he's doing the check can be skipped.
This will prevent an arithmetic overflow and possible getting mid < 0 in case your array's length exceeds a half of the int type maximum value.
but humans make errors all the time and giving a random result if the user forgets to enter a sorted input is not nice.
Are you allowed to use java.util.Arrays.binarySearch ?
I would also consider caching a[mid] and a[mid+1] into well named variables.
At the cost of some performance I would add (should be easy to translate into Java):
If you don't need to detect whether or not the array is sorted, this will give you the one or two closest elements quickly.
A minor thing to consider is caching values you lookup, for example, in each step of your while you calculate a.length - 1, since this value does not change you could have create a int last = a.length - 1; which would make the following fractionally faster and more readable: