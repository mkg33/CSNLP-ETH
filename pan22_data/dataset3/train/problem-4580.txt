Choosing NoSQL over a relational database has a lot more to do with business reasons like:
Can you even configure a computer in your budget range that holds 64TB?
For instance, if your application needs to store large amounts of XML or JSON data, or if every entity you save might be slightly different, you might be better off with NoSQL.
Let's say you will be inserting data at a rate of, say, 1000 rows per second.
And that does not give you much bandwidth to read or process the data.
But if you need to model relationships and enforce constraints, referential integrity, etc, then you would likely be better off with a relational DB.
1K rows/sec * 100 bytes/row * 30M seconds/year = 3TB/year.
At these extremes, any kind of datastore will be creaking and groaning.
At least not before you melt down the network feeding the computer, or the CPUs in it or whatever.
Do you really plan to come anywhere near to the limits you mentioned?
Not many of the Questions ask how to deal with some "limit".
My point is that all db limits are probably so high that you will probably never hit them.
And those that do are usually answered by providing some workaround (after hinting that the developer was doing something stupid).
Now calculate how long it would take to fill up a 64TB table.
It also has a lot to do with the types of data you're storing, and your data modeling requirements.