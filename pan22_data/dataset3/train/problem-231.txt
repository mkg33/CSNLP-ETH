I now have to again add the globals of gameA to gameB which is extra work.
It is also true that I won't even care about their implementation as long as they have a common interface.
On the PC I want a content loader that can also open a 'open file' dialog.
I don't think everyone agrees that service locators are bad.
Service locators also provide a way to swap services at run time.
Also I don't think it's true that you need to pass around the service locator around everywhere.
Also it becomes hard to configure the type of content loader I want.
And even what kind of services are there can be different all the time.
Service Locators provide a way to decouple important functionality that everyone needs from their actual implementation.
Now in my next game I don't want to use the gameA class but create a new gameB class.
To make the difference between the service locator and an class with globals a bit more clear consider the following example:
I'm making a game and use a gameA class object that has a global variable: the content loader.
I've created a small helper class around game services so that you can do quite a bit less casting all the time: http://roy-t.nl/index.php/2010/08/25/xna-accessing-contentmanager-and-graphicsdevice-anywhere-anytime-the-gameservicecontainer/ I use it quite a lot.
While a game class with globals would need to be passed around a thousand times per frame (which would cause bad performance).
Anyway I think you will find the game services pretty handy.
By having a config file I can even halfway trough the game easily change the content loader, even from somewhere else than the gameA class, without just making the globals in gameA all public.
Say I have a game that runs both on the PC and on the XBOX.
(Although I could use that in a gamA like class aswell).