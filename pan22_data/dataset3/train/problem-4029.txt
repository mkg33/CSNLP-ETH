If you still want to do it with collision however I would suggest keeping track of the upcoming obstacle and checking whenever you have received a point from it already.
When the player jumps over it, detect if there is an overlap between the two rectangles.
Your "long thin line" object is basically a funny shaped coin.
If there is, first, check if the state of the flag is 'untouched' if it is, set the flag to 'overlapping' and increment the score counter.
I am developing a very simple game in libGDX for android devices.
For each of your obstacles, have a two-state flag:
When you create the obstacle, have the flag set to 'untouched'.
I am currently detecting the character jumping over the obstacles by creating two Rectangle objects (invisible) - one small one for the center of the character and the second is a long thin line from the center of the obstacle.
This issue I am having is that because I am calling to check on the overlap in my update method, it is called many times in a second and hence sometimes adds two points to the score as the small rectangles are still overlapping on the second round of checking.
I use the 'overlaps()' command to check whether or not the character has passed said line.
I have got the sizes down to a near perfect size with the occurrence of incorrect scores at a minimum, however they do still happen.
Make the "long thin line" object wider (to avoid missing it), and simply delete it after it's collected rather than needing it to be as small as possible.
Simply, the game is a character who runs and jumps over obstacles, every time the character jumps over one of said obstacles, a counter increments and the score is displayed.
So my question is what would a better way be to detect a line crossing / collision?
To me, your basic idea of checking overlapping rectangle is workable; you only miss a small part:
I would suggest that you keep track of the position of the obstacle until you have passed it and added a point.
I would also suggest against trying to make a perfect size object for a collision, this is because frame rate can vary a lot so for you it might be perfect but for somebody with higher frame rate it can still cause unwanted behaviour.
This way you won't get multiple point for one obstacle because of multiple collision detections.