In the above example you can see that I didn't mask out the red channel, this was to reveal that when the bounds of an "interior" container went outside the edge of he exterior container, the whole stencil doesn't work as planned.
Sorry for the bad title; I don't know how else to explain this.
This Container is therefore like a window through which you can view it's contents.
So, I would like to use a Stencil buffer for this.
An instance of Container has other elements "inside" it.
The problem I'm having arises when one of the things that are visible through the window, are also another window.
Here's some screen shots with the above code (again, note that the red it to show the different bounds being drawn by the m_screenQuad objects).
These elements have independent positions that are relative to the position of the container.
As you can see, the bounding m_screenQuad being drawn in the same way by the internal Container overlaps with the external Containers m_screenQuad and effectively extends the Stencil Mask further than it should.
Consider that the internal Container may be smaller than the external one, so it would need to truncate/cut it's internal contents as well.
How do I separate these two different Stencil tests so that they don't affect each other?
Each calls the same code above, with the second one being called at the // draw the things that are visible through this window.
Here's another image where the object inside the first Container is a subsequent Container.
So if I move the container, the elements inside of it are moved along with it; but keep their distance relative to each other.