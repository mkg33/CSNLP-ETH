I suspect in practice it'd be easier to texture it though.
Their textures are almost universally either a flat black with a thick, colored border, or a simple Perlin noise texture.
Otherwise you may be looking at a two-pass solution, drawing translucent polygons (again, set the vertex colors to a solid color with a medium alpha value), then setting glPolygonMode(GL_LINE) and tweak glLineWidth as desired (perhaps based on the object distance) and draw the polygons again.
I would highly recommend using textures, as Dave said.
Then your pixel shader will have the information it needs about where on a polygon the current pixel is - near a vertex, near an edge, or in the middle...
It may be something of a pain, but it would provide much better performance, I think.
Perhaps something like barycentric coordinates (store different RGB at the vertices and the rasteriser will do most of the work for you).
You could try some kind of simple distance function in the pixel shader.
You could try searching for edge detection algorithms.
It wouldn't be quite the same, but you might like it even more; or maybe not.
It's a little late and I'm having a hard time reading through this, but a forum discussion points to this PDF: Single-pass Wireframe Rendering.
I know it's probably not what you're after, but it looks like Vector Tanks just uses textured models.
The only way I've seen it done is with high-resolution, mostly-black textures, such as the ones in Tron 2.0.
I'm searching for a method, possibly a GLSL shader that would produce that retro-style wireframe look for objects.
They applied some simple post-processing to achieve the glow effect.
Preferably the solution should work on OpenGL ES 2.0 also.
If you create your meshes using vertex coloring with solid colors and medium alpha values (for slight transparency), and then use an edge detection shader, it might look good enough.
The texture gives the wire frame look, it runs on my iPod touch which doesn't support shaders.
Any hints and pointers (as long as not NULL) appreciated!