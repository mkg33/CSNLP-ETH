That's because you may find yourself wanting to store more data about your players that you also want to report on in-game as well out-of-game for your own personal metrics of the games progression.
The best option is to use a database to store your player data.
I heard that it can be achieved by analytics services like Flurry / Google Analytics.
Inputting that data into a database should be easy for these two metrics simply because you're only talking about tracking the login date and timestamps of your players.
This could be done continuously or whenever it is needed.
Then simply put, you could query your player log data to return a result to Unity that displays in game as the TSQL query example below:
What database to use is ultimately in your court and what seems relevant based on your own research.
Older records could be aggregated and deleted from the database to free up space.
I would recommend this as opposed to trying to find a quick-fix or possibly licensing someone elses analytical reporting system.
I did some research but I am not getting anywhere by myself.
Of course, if the user is currently playing, then you can alter the query to use GETDATE() functions depending on the RDBMS you are using to get the time difference between the log-on-time and the database server time for live players and ETC.
Those timestamps will have to be stored every time they log into the game and when they log out.
Another option that is easier to implement but a little bit more resource intensive is to have all players "fire" a http request every 10 seconds (or similar) to the server that creates a record in the database that signifies they have now been playing for 10 seconds straight.
Then this would result in the time difference between the log on time and log off time.
Then to sum up the amount of time that has been played you simply do a count on such records from the past day and sum up the total and multiply by 10 seconds.