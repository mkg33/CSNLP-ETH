The angle ϕ equates to the angle between the targeted point and the target's edge.
Like I said before, the error function is quite expensive, but its argument ϕ sqrt(a), doesn't vary all that much for any sensible shooter scenario.
The result still falls off with r^-2, but with a small constant.
In terms of target size s and distance r: p(r) = erf(arctan(s/2r) sqrt(a)).
Gajet has already given a number of good reasons why some of these assumptions fall flat, but holds on to the same inaccuracy model: a bounded error in angle.
He has a chance of firing between a 0° and 1° error, but the area of the ring between 4° and 5° is much larger than the area of the ring/circle between 0° and 1°.
Note that we can always assume all of target surface is inside cone of fire.
Plotted below is the real error function, compared to the first three non-zero terms of its Taylor series.
This function is plotted below for a target of size 1 and accuracy values of a=2 and a=10.
We know that h/l = cos(theta/2) and r/l = sin(theta/2) => r/h = sin(theta/2)/cos(theta/2) = tan(theta/2) => r = h*tan(theta/2) => edge length = h*tan(theta/2)*2
assume that they have h1, h2 and h3 distance from the corner.
First, we map x = arctan(s/2r) sqrt(a), then evaluate: 2 x - (2/3) x^3 + (1/5) x^5 ....
Since it's a cone we are talking about the bullet will always pass through a circle of certain diameter when passing the target.
as I said it's a function of h^2 but since tan^2(5) is very small, it takes a long time before that probability falls very low.
Larger errors have a larger probability of occuring.
Based on these values and the angle, we can calculate how much the distance is at those state.
Let't do a simple math, and for the ease of calculation I shall first go with a 2D shooting which will result in 1D error in shooting.
Any shooting AI defines the perfect path first, and then adds aiming inaccuracy.
The target always has a same width, for example we know that target has a width of one meter.
A more accurate representation would be to have a guassian distribution of angular error, i.e.
The probability certainly is a function of 1/r^2 but does not fall off as fast as 1/r^2 itself.
This inaccuracy is entirely defined by you, and that definition is necessary before any probability can be computed.
To get from the probability function to the actual probability of hitting a target, we integrate the function A and end up with an expensive error function - which is actually called the error function: p(ϕ) = erf(ϕ sqrt(a)).
Your approximation basically dictates shots are landing on a part of the surface of a sphere, determined by angle; the target area within that surface is a constant; the probability distribution is constant within the surface and zero elsewhere.
The variable a can be used to include the shooter's skill etc.
it's doesn't really affect game-play that much but ease calculations very much!
Increase the error any further, and the probability suddenly drops to zero, because we're out of the five degree limit.
Alternatively, you can run the calculation twice and multiply the result, assuming the target is roughly rectangular.
For this, you need a defined concept of "inaccuracy".
And in the end we know probability is "target area"/"circle area" = 1 / h^2*tan^2(10/2)*4 * pi.
Note that unlike a falloff of r^-2, the probabilty neatly stays below one, no matter how close the target is.
Omit or add as many terms as deemed necessary, but keep in mind an even number of terms will cause unwanted behavior for low distances.
after that part it has a probability of "target surface"/"hit area" which is equal to 1 / (h*tan(10/2)*2).
If you code an AI which shoots and it computes the exact path every time, then obviously the inaccuracy is 0 over any distance.
We can do a lot better by evaluating part of the Taylor series instead and capping the result.
And we also know that while shooting the gun can miss the target with at most 5 degrees.
At other hand we know the target itself is 1 meter wide, so as long as that value is less than one meter we will always hit.
As I've explained before we can use r=h*tan(10/2)*2 and hence the surface area is pi*r^2 = h^2*tan^2(10/2)*4 * pi.
If your target is very tall compared to its width, you might omit the vertical error altogether and just assume the shot landed at the correct elevation.
again we need to compute it's radius, then the area of that circle.
In fact, even a target at exactly zero distance can be missed, due to the extremely small probability the error is more than 90°.
Throw in a couple of sine functions, random coefficients and logarithms and your game might be equally fun.
It's calculated as simple as h*tan(10/2)*2 (as shown in figure 2).