I know there are stateful and monadic lens out there, there is EitherT transformer and also StateStack monad.
I believe most of this code is actually unnecessary.
I wrote this code to learn how to work with State monad.
As you can see, I also added a few convenience methods.
How can I go about incorporating those libraries into this example?
I don't really see how lens will help you at all here, but you can certainly take advantage of monad transformers to handle part of your calculations, and make it so that you can layer you stack operation language on top of any monad.
For example, I imagine that it is possible to replace safely with %= or mapMOf from lens library once appropriate EitherT monad stack is constructed but I'm not sure how to get there.
Then I added Either result to gracefully handle error condition (stack underflow).
Note that the way this is set up, the StackMT monad transformer has to be the outermost in the stack; that is, if you attempt to apply ListT or ReaderT to something of the form StackMT s m, then in the resulting monad push and pop won't work.
(so that you can, as I show below, print out the stack in the middle of the calculation)