The term "commercial" doesn't indicate how much load your game will put on the CPU.
If you design your game in a way that respects these constraints, I see no problem in a Flash game on a mobile device.
First off, it might be tempting to think that an iOS device is just a slower version of a PC.
But it looks like Flash Player 11, which is said to utilise the GPU, will do the trick of running such applications without a glitch.
I'm currently using Flash to prototype a game for iOS and performance is decent.
I use Flash to build game prototypes, and you can get some great performance out of the packager, but you have to be aware of certain things.
It's nowhere near the speed of a native implementation and is also slower than flash running on the desktop.
Also there is always Elips Studio as well, they have emulated the Flex SDK so you can build your apps in their flavor of mxml and as3 and it compiles down to native code...
If you are making something rather simple, REALLY simple then you should be fine.
So until Flash Player 11 comes out as bummzack stated things will be very slow assuming what you are doing has a lot of moving parts.
Also "fast-moving" isn't a problem if your logic is simple and you're not overly excessive with graphics and animations.
Its like the difference between optimizing Ruby vs C++.
You can develop small games in Flash that does not do much of processing and run it smoothly on your device.
The SDK is free now and you will feel just like you were coding in Flash Builder.
When you are talking about flash, the actionscript is getting precompiled and executed.
Its being dynamically interpreted by the flash player and executed.
I haven't had a chance to get my hands on a flash 11 compiler for iOS, so I have no idea what the new molehill api will look like on an iOS device, or what other internal compiler optimization they have done between releases.
You might think that if you make your code run fast on a desktop, then it'll run decently on iOS.
The biggest difference is on the desktop, when running flash, your actionscript is being JIT-compiled.
Since flash code all runs on the CPU (unless you make use of the new 3D APIs), you're limited to what the CPU at hand can offer and this is much less than any modern desktop CPU.
But with all that said, iOS apps built by the flash compiler aren't inherently slow.
Understanding that your actionscript is going to be compiled down to the iOS instruction set and not interpreted on the fly means that performance bottlenecks and bugs will be different (sometimes very different) between deployment platforms.
But since Flash utilises the CPU and not the GPU, you cannot expect much of fluidity in your app that uses lot of artwork and does a good amount of processing.