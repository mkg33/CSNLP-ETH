I have a public server that I can configure for any need.
You need to ensure the ssh server on ps allows no commands except authentication and reverse port forward, to disallow S clients to do things on the server (if this is desired).
A simple use case is this: I want to download a file from Storage to my phone over the internet.
The RPi has an external HDD connected to it (through USB).
If you want to take a step further, you can use a hole-punching library to try to do a direct connection (but this is much harder than the above solution).
Also, are the two alternative I described above even viable?
How can I implement this (third party tools like Weaved is excluded) and what other possibilities are there?
When someone connects to port Z on PS and authenticates (or whatever you need to do) stream data between that new connection and PS:127.0.0.1:Y.
Connect via ssh to PS, and create a reverse port forward, from PS:127.0.0.1:Y (port Y on PS) to S:x
I want to build an application for Raspberry Pi (C++, Boost, OpenSSL) that handles file download/upload requests (and other custom actions).
Programmatically, what is the optimal way to communicate between a client (web browser / mobile application) and Storage through the public server?
The overall sistem architecture looks like the one below.
I know that this is a more general question, but I don't know how to approach my particular case.
The problem is that the Storage is behind a router that I don't have access to configure (port forwarding is excluded), so, the public server cannot connect to Stroage directly.