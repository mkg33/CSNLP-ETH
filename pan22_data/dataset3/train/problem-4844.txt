The essence of real-time is that things happen so quickly that it's easy to accept that the other person acted just milliseconds more quickly than you, and so an arbitrarily sequential order of execution is almost never a problem for the player.
Generally speaking the only actions that need to be sequential are the ones where the character being changed is the same character that's being examined, because each action needs to perform the whole read-then-write atomically for the system to make sense.
Or, just randomise the order of logic processing so that nobody gets a persistent advantage.
That way the buffs all get resolved fairly and only once that's done are effects like manaburn executed.
If, for some reason, everybody does tend to use abilities on the same tick, you could just use some system to spread them out so that this is a much rarer occurrence.
But if you really want to 'solve' the problem, one way is to split the system up into phases, one for evaluating simultaneous actions, one for applying the results, and one for evaluating AND applying sequential ones.
First, though: the phrase "I am working on a realtime dungeon crawler" implies that this sort of problem really shouldn't happen often enough to be a problem.
Make the ticks shorter and more frequent, or have characters act on different ticks based on a speed or initiative value.
Your 2 examples are obviously incompatible by design - either the effects of previous actions are available when calculating results of the current action, or they're not.