This is quite helpful, because it reminds me to check my filesystem for e.g.
I have a session running with the following entries in rtorrent.rc:
Obviously this requires keeping a history of everything that has been downloaded, and a check before starting each download, along with a user dialog or two.
its hash) and prevent me from downloading it twice?
I am now using rtorrent for the BitTorrent protocol and I have yet to find a way to prevent me from downloading a file twice.
By having external scripts that keep track of what you have downloaded (e.g.
rtorrent does do that for files that it is still downloading or seeding, but not for anything that has been removed from its view.
As you can see, external scripts are executed and their return values are caught by rtorrent.
writing hash or file name to a log file/database for finished downloads) and check new downloads against this list (grep or DB utility) and act on this, you can achieve what you want.
I have used a couple of peer-to-peer clients that have an option to prevent the user from downloading a file twice, either by gently asking for confirmation, or by refusing to add a new download unless forced.
I haven't done exactly what you are asking for myself, but similar things.
A complete run-down of rtorrent's scripting abilities is far too comprehensive - see the manual and online resources.
You can use rtorrent's triggers and scripting abilities.
Is there a way to have rtorrent keep track of the actual download (e.g.
As you can see those are quite complex conditions, it's just a matter of adding the custom (Python) code.
the PlaneShift installer before downloading it again.
I thought about keeping track of which .torrent files I download, but things get more complex with Magnet links and multiple .torrent files for the same download.
Or, perhaps, some external tool that will do that for me?
This moves finished downloads to a path $d.get_custom1 that is set as the downloads are started (ignore $d.get_custom2 - used for a different purpose, but I keep it as an example).
See https://code.google.com/p/pyroscope/wiki/QueueManager#Configuration for an example where:
I'm not saying it is self-evident or easy - certainly not - but it is possible :-) .