If you are happy with a number starting from 1 you can use row_number().
Populate each row in the table using the default constraint.
How you do this depends on what is involved in populating the values.
IMO, a unique required column should never be added without planning how to populate the existing rows first.
try this to update using a sequence... You have to do the TOP because of the order by clause in the update statement.
For Methods 1 and 2, this can be done within the single statement or within a user transaction (not shown), and should be done within the user transaction in Method 3.
This case would occur when, for example, there was a value from another part of your application that needs to be added to the table, or you need to specify an exact order for the unique values.
Therefore, I will provide the methods to do this starting from zero.
After whichever method you use, add an unique constraint on the column to ensure data integrity.
How to update the existing records with sequecely or random unique data?
This column "cn" has to be unique and mandatory, but old data don't have any value.
There are probably a few other obscure ways of doing this, but I think I've covered the most common.
This will populate all rows in the table with integer values starting with the seed value (1), increasing by the increment value (2) for every row.
For SQL Server 2012, you can populate a column using values generated by a SEQUENCE object -- I haven't worked with this at all yet, so I will refer to a MSDN article for completeness.
While this example uses a uniqueidentifier column, it works just as well with any data type and default constraint.
Even though I think you've created the column already, in this answer I'm going on the assumption that the column does not yet exist.
I believe the order the values get populated is undefined (if you have to specify an order, use Method 3).