I have no idea what a six-dimensional hex map looks like, or why there are 9+2(5+6+7+8) cells involved, but the best result for your situation - and indeed most situations in game programming - is to code in whatever gets you the correct result most quickly.
The first way makes sense if you think you might change the map shape or size in future.
However, they don't necessarily need to be 'hard-coded':
It's very convenient to code movement and relationship logic in terms of traversing links, which is independent of the size or topology of the board.
The second way makes sense if calculating the static values is a bit tricky.
Regardless how you define the board, represent it at runtime with explicit links.
If the values will never change, they may as well be static.
You can generalise it to an algorithm later if you need to.
A: Then obviously you should try to be flexible wherever it doesn't cost you a lot of extra effort.
Why waste CPU time recalculating something that will be the same as last time?