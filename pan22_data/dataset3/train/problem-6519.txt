Here's one I made a long time back: http://sites.google.com/site/williamedwardscoder/spinning-voxels-in-flash
The technique varies somewhat, but generally relies on generating and processing the hull of points (sparse voxels) which are visible or may be visible, given the resolution and size of the screen.
If you terrain has a small number of overhangs or caves or other features that cannot be represented by a heightmap, then you can have holes in your heightmap and have an alternative representation e.g.
A SVO  is a 3D computer graphics rendering technique using a raycasting or sometimes a ray tracing approach into an octree data representation.
Sparse voxel representations are worth it when you have large true voxel worlds.
I was thinking about an octree but I'm wondering if there's something else that I never heard about.
This can be very cheaply and efficiently voxelised at runtime.
But you can use SVO (Sparse Voxel Octree), id Tech 6 uses SVO.
According to the Wikipedia page about voxels, "[...] the position of a voxel is inferred based upon its position relative to other voxels (i.e., its position in the data structure that makes up a single volumetric image)."
John Carmack has been talking them up for the past few years now...
It usually pays (in my experience) to track the minimum height you need to render in each column and also sometimes start-stop-top angles so you can cull backface columns too.
true 3D voxel objects that fill just those localised places where the runtime expense is warranted.
Generally you can avoid a 3D data-structure for terrain.