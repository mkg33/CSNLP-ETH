  identify that both IP addresses belong to the same host.
The alias hostB specifies the first address, and the aliases hostC and host-C specify the second address.
In this example, hostA has 2 IP addresses and 3 aliases.
If you update the DNS record (also with automatic ip checking system) when an IP/server is down, you can have an high-availability system.
So it works well and I'm able to get samba working through VNP using hostname so it's fine for me to have my connected drives in windows in both case (LAN or VPN connected).
The browser will eventually get to the good address and will connect.
In this example, hostA has 2 IP addresses and 3 aliases.
Yes, you can do this, I've used it to test round-robin DNS scenarios without having to actually enter the hosts in a DNS.
You can verify this with the following experiment:
Open a browser and try to connect to the hostname.
From http://www.unc.edu/atn/lsf/docs/7.0.5/lsf_config_ref/index.htm?hosts.5.html~main
  hostB specifies the first address, and the aliases hostC and host-C
Slight clarification here, at least in the Windows world:  You CAN have two IP addresses for a single name in a hosts file.
My suggestion is to use an internal DNS server with DNS round-robin and TTL=0.
(This is a common misunderstanding as many people believe it will only try the "first" address.)
Where hostA is the hostname of a server I intend to reach from both internal network (192.168.y.x) and VPN (10.8.z.x).
browser) will attempt to connect to each in turn until a connection is made.
When an application calls gethostbyname, it gets back the full list of IP addresses (possibly in random order - depending on the libraries / OS).
You should see connection attempts to the fake address.
Add two or more addresses for a host in the hosts file, one real and the others fake.
LSF uses the official host name, hostA, to identify that both IP addresses belong to the same host.