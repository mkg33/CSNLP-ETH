The basic idea is to determine whether there is a matrix $A$ with $A_{i, j} = 0$ and one with $A_{i, j} = 1$.
You should run this algorithm $2nm$ times to find whether each $A_{i, j}$ can be $0$ or $1$.
If you want to find whether there is solution with $A_{i, j} = v$, you can change the upper and lower bound to $v$.
We can also construct a network $N$ as above and change the upper and lower bound of corresponding $E_{i, j}$.
PS: The first problem can also be solved by a theorem called "Gale-Ryser Theorem".
All edges form source are full iff there is a binary matrix A whose row sum is $r$ and column sum is $c$.
And flow in $E_{i, j}$ equals to the value of $A_{i, j}$.
Imagine a bipartite graph $G$ whose two disjoint vertex sets are $S$ and $T$.
This problem can be solved by network flow algorithm.
Each vertex in $S$ corresponds to a row in $A$ (so $|S| = n$), and each vertex in $T$ corresponds to a column in $A$ (so $|T| = m$).
But I've no idea how to modify it to solve the second one.
If both answers are yes, then $A_{i, j}$ cannot be determined.