Almost acting as a round robin to distribute users data among a shards.
As serial columns simply select a nextval from a sequence do they not?
It's just an extra step of reseting a sequence once it reaches n. Or am I barking up the wrong tree?
So would a function similar to the following be a valid approach.
But it got me curious around whether if you could just assign a shard to a particular user rather than every item and how performant it would be.
Assuming a users table on a dedicated database purely for users.
I've was recently reading an article around how Instgram used to shard their IDs and they use a unique function to generate ids on their servers https://instagram-engineering.com/sharding-ids-at-instagram-1cf5a71e5a5c
Where shardId is calculated via a function that starts at 1, and for every new insert it would increment - upto a max of n (say 2048) for this example.
Would there be serious performance implications to such a function, especially during high load?
Not even an extra step because cycling is a built-in functionality of sequences,