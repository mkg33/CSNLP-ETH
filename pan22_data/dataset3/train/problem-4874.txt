The key to the presentation is to begin with solving it using an iterative approach.
It's obvious (to us instructors) that in a purely functional language, recursion is the only way to create nested structures.
Turning those rules into an actual no-fail algorithm, with decisions mapped out, is not so simple after all.
For me, it was a simple way to see the idea of recursion as a real physical thing, without having to deal with the mathematical abstractions that things like the Fibonacci Sequence require.
The triangular formation makes that easier to visualize than the linear formation.
Then the magic happens when the un-coded recursive solution is written into pseudo code, or live code in the chosen language.
It is commonly displayed, or presented, with the posts being in a straight line.
Perhaps you can walk the class through developing one or two of the decisions within the algorithm to give them a sense of the work involved.
It wasn't the typical use-case for recursion, but it was enough to jump start my thinking.
The given rules offer no guidance for the next move, and computers must have rules to follow.
Re-address the Hanoi puzzle to show that is can be reduced to a collection of smaller sub-problems that are the same as the original problem, except for size.
It has a setup rule, a movement rule and a cycle to repeat.
With the Tower of Hanoi example, adding in the "legend" of the back story can help with interest, but it can also be a waste of classroom time.
With that in mind, I'm not sure if you should task the students with converting the above rules into a formal algorithm or not.
This rules out all the factorial and other similarly silly recursion examples much better written as for-loops.
I'm going to speculate that the reason is that when presented properly it motivates the students to think about using recursion for other purposes.
Solving the subset sum problem in an integer array is another great example of branching recursion that is only three lines of code using recursion, and a lot more without it.
He got a strange look on his face, and asked me to show him what I was doing.
I took advantage of a few of the patterns inherent in the puzzle solution, and stated the "tricks" used in the comments.
There is another iterative approach, which does work for creating an algorithm.
Operating on the key word, motivate, I do believe that Andrew T. had the best choice with Tower of Hanoi.
He explained a little bit about what was actually happening, and told me that what I was doing actually had a name.
In spite of that, this is the final version of a tested, and timed, version of the Hanoi puzzle using an iterative approach:
In my first programming class, I "discovered" the concept of recursion on my own, before it was introduced by the instructor.
Before trying to code it, however, give it a try physically.
Still, it took me the better part of a day to be confident in my algorithm and put it into code.
And immutable data is imperative (pun intended) for proper semantical reasoning about values.
The puzzle usually does not give the arrangement of the posts, only that there are three of them.
The rules for the iterative solution are oh, so simple.
I have used this example for about 15 years in intro to Java course, and think it is the best way to show the usefulness of recursion in a first year course.
Any solution that works for the main problem also works for the smaller sub-problems, and any solution that works for the smaller sub-problems also works for the main problem.
Using that two-move cycle, following the movement rule, will solve the puzzle in the smallest possible set of moves.
Hopefully, the amount of time spent finding the (un-coded) recursive solution is nearly the same as was spent finding the (un-coded) iterative solution, showing that finding the basics for the solution is pretty much the same for either approach.
Preferably even before you raise the idea of recursion, leaving the alternative as a way out of the maze later.
Now, you have the students primed to learn the power of recursion.
Performing that in class with a 6-disk set shouldn't take very long (about 90 seconds without commentary, 2 or 3 minutes with decision commentary).
(I have encountered at least three versions of the legend, and I am partial to the version that mentions the walls of the temple crumbling into dust and the world vanishing.)
As humans, we can see, instantly, where the smallest disk is, which disks are able to move, and almost instantly reject the illegal moves when there are two open disks at the same time.
This is also a case where the recursive solution is faster, significantly, than the iterative solution.
Especially true if you have previously labeled the disks with their numbers, and marked them in some fashion to show which way they move so that you don't get confused during the demonstration.
That sounds good, and you can present it, just as given, in the classroom.
So what kind of examples lend themselves to an intuitive recursive approach where an imperative approach is much harder?
(Overheads, projector, or animation on screen works as well, but physical objects may have an enhanced long-term effect.)
Having not dealt with Hanoi since the middle 1980s, I think I can consider myself as having an almost fresh perspective on the problem.
Granted, my code is in Perl, and most of your classes are in Java, C++, or a functional language, so it would have to be converted for use in your languages.
If we consider the top-left as post "A" (the source post), the top-right as post "B" (the target post), and the bottom-center as post "C" (the working post), then the setup rule is:
Using that rule-set with 5 disks I get the following:
The main objective of the presentation up to this point is to help them to see, or experience, how much effort goes into creating the solution using the coding skills they have.
Then they are ready to see the power that recursion can give them when the situation is right.
Once they see the benefits of recursion, you can also deliver the caveats (with examples if you have them) which includes:
He said that it would be covered in a lot more detail in a few weeks.
Reduced lines, with simpler logic means less typing, less chance for bugs and errors, and less work for them.
I didn't want to duplicate the grass drawing code again for the tree Tile, and after thinking about it for a while, I thought "Hey, I could just call the drawing function again, and tell it to draw the Grass tile at the current coordinates, then draw the tree over top of it."
That suggests that the motivation comes from the presentation, not from the example used.
Yes, it's an old one, and it does not lead to anything useful once it's done, (the code is not reusable for some other "real world" problem.)
I asked the teacher if a function was allowed to call its self.
If you have a coded version of the iterative solution to present, and then they write, or are shown, the recursive solution, they will see that dozens of lines have been reduced to about a dozen (depending on the language used).
Trying to codify the algorithm for the above rules took up quite a bit of my spare time.
I did not, however, try for serious optimization or other forms of code cleaning.
It can, however, be presented as an arrangement of three posts in a triangular formation, like the image below.
I had already implemented grass (ID 1), by simply drawing a green rectangle, with a few pixels of off-green.
I was creating a really simple 2D tile based game, and was working on the graphics.
Have your students write a function that, given an open tile in Minesweeper whose value is zero, opens all the tiles in the neighbourhood that are safe to open.
Use that recognition to design a recursive approach to the solution.
In a comment, Eric Lippert states that it is easier to solve with an iterative algorithm using these steps and rules: "number the disks in order of size; never move a larger disk onto a smaller disk, never move an odd disk onto an odd disk or an even disk onto an even disk, and never move the same disk twice in a row."
Using the legend, or not, is a judgment call for your class and your style.
Running a series of time trials, with the output comment out and disk count set to 25 (33,554,431 moves), the iterative solution averaged 1m22.4s and the recursive solution averaged 0m28.4s.
When teaching recursion, it is important to emphasize that the true power of recursion comes from its ability to branch.
I cannot put an amount of clock time to it since it was a "between-times" progress when other issues weren't pressing.
In this case I've removed the comments, just as a visual enhancement of the difference between the two versions:
I had a function that took an ID number that represented what kind of tile to draw, and the X,Y coords to draw it.
Setting all that human ability into formal codified logic that can be followed blindly and achieve the desired result turns out to be much more difficult than it sounds.
Who doesn't like the idea of getting something done fast and easy, preferring instead to do it the long and hard way while getting the exact same results?
In either case, working this iterative approach needs to treat the set of posts as a wrap-around collection, being able to move between the posts infinitely in either direction.
To balance that out, and to show the difference, here is the recursive version, also tested and timed.
When I went to draw a Tree (ID 2), the tree was supposed to have a grassy background behind it.