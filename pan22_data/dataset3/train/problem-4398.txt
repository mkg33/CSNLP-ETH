total runs = 24 outs = 4  bowler's  strike rate 4 batsman's average = 6 Run Rate=1.5
I truncates the value(4.2 and 4.8 both round to 4).
You can get away without randomness in this part if you want to:
Set the threshold based on skill and mode of play.
increase the run rate & strike rate simultaneously by reducing the number of dot balls per over.
Now if all batsmen were of equal quality, you could choose between grid a) grid b) and grid c) based on the strike rate of the bowler, if the bowler has an average of 16 then always use grid a), if the bowler has an average 12 then half the time chose a) and half the time b)  etc.
total runs = 16 outs= 1  bowler's  strike rate 16 batsman's average = 16  Run Rate=1
You can work your way backwards by creating a series of grids and calculating the stats for each grid.
One option is to calculate a positive number based on the chance of each event happening, for each ball bowled.
Or each way to go out has a baseline threshold which is multiplied by another set of multipliers.
total runs = 16  outs = 2   bowler's  strike rate 8  batsman's average = 8  Run Rate=1
total runs 24  outs= 2  bowler's strike rate is 8 - batsman's average = 12 Run Rate=1.5
Compiling several multipliers may be tricky (5 * .8 * 1.2 != 5).
total runs = 24  outs = 1  bowler's strike rate is 16 - batsman's average = 24 Run Rate=1.5
total runs = 16 outs= 4  bowler's  strike rate 4 batsman's average = 4  Run Rate = 1
Going out may been a true/false state with a threshold.
Once you have all the numbers, you can then randomly pick between them based on their weights:
Also don't use (int) double for converting from a decimal value to an integer.
If you are using real people, you could find a way to convert their season stats to these multipliers.
The tricky bit comes in tuning the numbers to make the game play well.
You can change the quality of the batsman in the same way, e.g.
Imagine for example 16 balls being bowled at a player (4 down the leg side, 4 down the off side and eight on target and the expected outcome for each one  (ignoring dot balls where no runs are scored or wickets taken):
Here's some examples, with some randomness and weightings thrown in.
Multiply your randomly generated number by values based on player skill and mode of play.
They are multiple ways to round in Java; the most common is Math.round().