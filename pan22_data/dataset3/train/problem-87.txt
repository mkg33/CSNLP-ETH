There are a couple of other approaches you might consider to find what works best for your application's needs:
The trait would be used in the class similarly to the first example.
Use magic methods defined in a trait or base class to provide immutability to classes that use/extend on this functionality.
Finally, I don't like change* naming convention as you are doing a simple set operation here.
Another thing I might suggest is to think about your Organization entity and how it interacts in your system.
I think set* would be more standard nomenclature for what is happening here.
With regards to the question around whether to write getters/setters, I think your approach is fine.
Another approach might also use a trait which presents a standard accessor like $class->get('key').
That is, if you needed to change one of these on the Organization object, you would simply discard the old reference for a new one.
As you rightfully stated, using these classes makes it much easier to simplify code where these dependencies are being used, as you can enforce the dependency via type-hinting, and skip all the guarding clauses.
I like that you are considering your Address, Email, and Phone objects as being immutable.
This would allow property-style access to callers (i.e.