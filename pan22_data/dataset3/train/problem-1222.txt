Is there a way to simulate or declare the functions in a local context to get around this problem.
If the functions are just doing SELECT statements then you can simulate them with an inline view ...
If you're stuck to using pure SQL then I don't think what you want to do is possible.
I have access to an environment where I can run SELECT statements but cannot call functions.
If you're programmatically accessing the database (ex: using high level language like Java, Python, Ruby, etc) then you can use an anonymous block like the one above and register the output parameters to retrieve back the results.
--- or even a simple join (using ANSI syntax for variety!)
You can use DUAL if the function does something computational (rather than a data lookup) but you may need to pfaff around with nested views to simulate passing parameters.
You can't use them in SQL executed within the anonymous PL/SQL block either.
The functions are merely lookups (SELECTs and not INSERTs or UPDATEs)
Yes you can declare functions in anonymous PL/SQL blocks but they're only usable within the same block and you can't use them in regular SQL.
Only pre-declared PL/SQL functions can be used in regular SQL.
This will most likely be a pain (and probably less efficient) compared to direct SQL usage but it is possible to execute anything and return back any value.
Here's an example of declaring an anonymous function: