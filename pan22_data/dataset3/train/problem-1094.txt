Then activate the CPU_Hyperthreading_Disable token:
Linux kernel information and controls can be accessed as files in /sys directory on modern linux distributions.
Used the thread_siblings value (common to hyperthreaded CPUs) as a key for enable/disable:
I think the benefits of hyperthreading is outweight by the complexity of making cpu schedulers that know how to use it.
Try the command w/o the final sudo sh to verify correct.
I have the impression that is better, but it may not.
Together with the token list, you can then try something like this:
Blender rendering in cheap computers and clusters (to sketch my future house).
Lukas' answer is nice but does not really work for disabling HT because core ID cannot serve for identification of HT siblings.
will show the core number this logical cpu belongs to.
The kernel boot parameters do not work on current Linux distributions.
I guess that has to do with per-cpu caches, per-cpu memory allocation, cpu scheduler allocation and process priorities complex iterations.
I do not know exactly why... but the system become more responsive with hyperthreading off (on my i5 notebook and massive Xeon servers with 60+ cores).
It is not exaclty clean, but is easy to install, independent of cpu architecture and should work on any modern linux distribution.
In the libsmbios-bin package (Debian, Ubuntu, etc), you have the binaries isCmosTokenActive and activateCmosToken.
It is like they are realtime performace (nice -20).
On the other hand, if I start as many cpu-intensive threads as I have physical cores I will have no context switches to those tasks and fast context switches for the background tasks.
First, I am not at all certain that disabling the (slightly fake) CPUs at runtime is truly equivalent to disabling Hyperthreading at boot.
I had to wait until I could get into the ILO/Drac.
In the first scenario the hyperthreading is uselles, the background tasks will use expensive context switches because I maxed out hyperthreading with the normal processing.
The "cpu-intensive" tasks I am talking about are artificial intelligence data mining and authorization servers (my work).
The second is unaceptable because up to 50% of my cpu power gets prioritized to the background tasks.
Now, the big question is whether or not you simply need a reboot for this to take effect, or if a full power cycle is required.
A script to disable hyperthreading in the machine startup...
Seems good, but the background tasks will found free logical processors and will run almost imediatedly.
To disable hyperthreading I include a script on machine /etc/rc.local.
For me, the problem with hyperthreading is: If I start as many cpu-intensive threads as I have logical cores, I will have fast context switches for the cpu intensive tasks, but expensive ones for the background tasks since the hyperthreading totally consumed by the cpu intensive tasks.
That said, I did see a small performance boost in our application.
contains the kernel information and controls for logical cpu 3.