I realize this is personal preference, but there is almost never a good reason to remove the ability of the user to resize the window.
The most glaring violation is using capitalized function names.
In general the code mirrors the MVC-concept reasonable good.
Also, you aren't calling rowconfigure or columnconfigure to set row and column weights.
From a common sense perspective, the code does not look very messy at all.
CaesarCipher could be a good alternative to consider.
To answer the question whether or not it is legitimate to put encrypt and decrypt in the Model, I would say absolutely yes.
Remove root.resizable(width = False, height = False)
You need to change Encrypt and Decrypt to encrypt and decrypt.
If for no other reason, it makes it possible to do unit testing by importing the file and interacting with the classes individually.
It's a good idea to follow them unless you really, really need to do something your own way for a very specific reason.
Wikipedia agrees on this and tells us that "[t]he model directly manages the data, logic and rules of the application."
The class Model should also have a more descriptive name, that tells more what it is really doing.
My main point of criticism would be that there are no class and/or method/function docstrings (PEP257 at your service here).
It's always a good idea to hide your main code under __main__.
and de-/encryption is undeniably the core of your application logic.
At least, all of the statements for widgets that are in a group:
In my opinion this makes it much easier to visualize the layout.
The first character in a text widget is the string "1.0", not "0.0" which is what you're using.
In general one could argue that a design pattern might be a little over the top for such a small program, but as you said, it is for the sake of exercise.
Always include explicit options for fill and expand.
The main window would serve as combined View and Controller, whereas the Model (I still don't like the name too well) would clearly be, surprise surprise, the Model.
As a rule of thumb, every container widget that uses grid must define at least one row and one column with a positive weight.
PEP8 is a set of conventions for writing python code.
Without it, your GUI may not look right if the user resizes, or if they have different fonts or a different resolution from you.
If one wants to be nit-picky in the sense of Python code conventions (for a full reading, see PEP8), there are a some aspects that might need a little attention.
This is somewhat personal preference, but I've found that code is easier to understand if you group all of your grid statements together.