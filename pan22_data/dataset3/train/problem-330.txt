My suggestion though, is to use a different (the right?)
Then it's clear that an initial 'g' is treated as one that has no neighboring 'g' to its left, and a final 'g' is treated as one that has no right neighbor.
In this case, the logic requires checking that all 'g' chars are happy for the check to return true.
Regular expressions are not always the solution, but in this case, the result would be simpler to read (for someone familiar with them).
Other answers have good input on a number of factors I agree with, especially about the early-return logic, the bugs that were pointed out, and the bracing strategies.
That expression says "Match any 'g' that has no 'g' before it, and no 'g' after it.
Alternatively, to make sure there are no unhappy 'g' chars.
There is an even nicer solution with i = str.indexOf('g', i);.
In your code boundary cases were handled (empty string, length 1), partly even wrong.
After all, you return true for an empty string â€” why not also return true for "x"?
That the string is unhappy if there is any g-sequence of 1 g. A g-sequence being a maximal substring "ggg...ggg".
I'll make a few remarks before addressing the algorithm:
The expression to check for unhappy 'g' chars will be:
This is a typical "mathematical" approach, but as you see above often not needed.
In fact, I would say that one of them (if(str.length()==1) return false;) is not correct, if the string consists of just a single letter other than 'g'.
Regular expressions are a tool that are designed for text processing, and a well-crafted expression is typically faster and more concise than the hand-coded alternative.
I agree that having all of those special cases is messy.
Then fix the crashes by checking for out-of-bounds indexes just before trying to call .charAt().
Here is how one can do it without lookahead/lookbehind and without additional steps:
Then the original presentation of the problem had that devious "if left or right is also g" which can easily lead to double work, or at most considering one to the right, instead of all to the right.
Interpretation of the regex is intuitive -to me- : str consists of any mix of either a run of gs of length at least two or non-g characters.
I agree with @rofl and @janos that regex is an option to be considered.