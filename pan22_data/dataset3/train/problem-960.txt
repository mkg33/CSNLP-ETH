If you are iterating over files and parameters, bash is easiest to get going b/c you can prototype in the shell, then copy into a script and add some arrays and loops with minimal overhead.
It can be done, but it cannot fully replace the native shell environment.
This answer is about use of command-line programs and also large chains of them.
For running chains of CLI programs, and perhaps many chains in sequence, bash is the easiest.
If shells had a better language this would all be avoided.
Perl, hands down, if only for the incredible resource of CPAN (http://search.cpan.org/).
This is very nice as you can re-use your scripts easily and means your knowledge is a good investment even if you change your platform.
The differences among the scripting languages alone aren't severe enough to pick a clear winner, but you should primarily look at how easy it will be for you to find information on topics you care about.
Perl can do the same but the language is much harder to learn and is far more complex, and as many have pointed out, it's easy to write intelligible Perl.
---imagine 30 sets of commands (a few lines each) for thirty different data plots---
[for general scripting advice, see the other answers]
Compare to python, it is consistency, one edition, one package manager.
Perl and Python could be better for large scripts because they have cleaner syntax for looping and variables, but the bash commands must be generated as strings, run as subprocesses, and stdin,stdout captured.
Compare to Perl, a little bit of old-school and the syntax is too complex for me.
However, the code becomes hard to read once the script is more than a few tens of lines.
Perl also has the benefit of being as complex as you need for the current situation.
In bash, it is easy to wrap that in a few loops over some of those parameters.
If you look back at your code from 4 months ago and can't understand it, you're doing something wrong.
And for naysayers on the readability front: you can write hard to read code in any language.
The benefit of using a scripting language with such a massive contributing community is that you are unlikely to ever need to invent something yourself.
You can treat it as a simple scripting language for quick administration or single purpose scripts, but you can use object oriented concepts or extensive meta object systems when you want to create larger, easy to maintain applications (like daemons, servers, clients).
Python (if you don't use specific APIs and other platform dependent things) has a rich "standard library" which is available on all platforms where you get the python version in use.
Perl syntax can also be strikingly close to C, as long as you can get around the lack of typing and the sigils; advanced perl use would come naturally as you eventually learn the strengths of the language.
This post was filled with links to various administration friendly modules on CPAN, but apparently new users can only post one link, so use that CPAN link to search for things like 'CVS' 'SVN' 'Cron' and 'Moose' (an extensive object system)
In our company we use python for all scripting, monitoring, ... and java for The application, and we're well off in heterogeneous environment.
awk for small jobs, python for more-than-oneliners.