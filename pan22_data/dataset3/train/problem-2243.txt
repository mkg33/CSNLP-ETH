I am moving from (0, 0) to (10, 0) so I'm activating the "right" input all the way until I reach the (10, 0) position.
I have different entities that can be possessed either by the player or the AI.
Let's say that I'm in 2D space and that I'm moving the AI horizontally.
In a similar way, my AIController comes up with that same input through logic functions.
My PlayerController class is driving that component by reading inputs from either the keyboard or the gamepad.
I would like to try and keep it simple and modular at the same time.
Now I've hit a wall with this kind of approach when dealing with movement.
But if the speed of my entity is high, I might actually go over the position and trigger a movement back, and then again forward and so on as it can't actually settle.
I know that I could just check if the previous movement was in the same direction and that if I went through the target I could just force the position to be in the exact spot that I want to reach.
(and wasRight, wasLeft, wasUp, wasDown, wasFire to perform checks on whether the input was just triggered or not).
Those entities have an "Input" component that holds the states of the actual inputs, like right, left, up, down, fire.