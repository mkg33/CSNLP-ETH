A process is essentially a container for memory, and has an identity (a token) associated with it, and one or more threads.
An IIS application is a set of related pages that shares the same state - Application and Session variables are shared, for example.
If the thread "loses" its token, it acts as the process identity.
A thread is a "thread of execution" - a distinct set of CPU state and an operation chain that runs on the memory within a process.
An AppDomain is like a lightweight process-within-a-process, but it's a .Net-specific concept; ASP apps don't have AppDomains, ASP.Net apps do.
An IIS Application may have zero or more AppDomains.
The book you should read is called "Windows Internals" http://technet.microsoft.com/en-us/sysinternals/bb963901.aspx by Solomon, Russinovich and Ionescu.
Threads can have a token associated with them (when they impersonate a user, for example), which overrides the process identity for operations by that thread, until the thread stops impersonating.
An App Pool runs in one or more Worker Processes (w3wp.exe).
An App Pool can contain multiple IIS Applications.