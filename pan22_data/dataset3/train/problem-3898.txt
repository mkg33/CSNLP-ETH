Sharing code on *nix was always sharing the source due to that variety.
One is implementing POSIX on Windows, and the other is implementing Windows API on *nix.
Why is it necessary to recompile binaries to run on Windows with Cygwin, while you can run Windows applications using Wine without recompilation?
Because there is one Windows (albeit in different versions) on one platform (x86) but gazillions of *nixes (SysV, BSD, Linux, Dec, ...) multiplied by their platforms multiplied by their supported CPUs.
Windows can be execute only on x86 or x64 (now ARM too) and Linux can be execute on multiples.
There isn't really a good answer to this question other than "they're different".
It would, in theory, be possible to produce a Cygwin-like layer for *nix which would enable you to recompile Windows applications on *nix and a Wine-like layer for Windows which would enable you to run *nix applications without recompilation - but that isn't what people did.
Cygwin provides a Linux enviroment on a computer with a special arquitechture, is a simulator of a computer.
By the other hand, Wine provides a enviroment where the Windows instructions are transformed to Linux instructions through libraries.