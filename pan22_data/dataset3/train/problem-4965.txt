A new server may or may not improve your performance by much.
If you can't really fix the application (or it seems fine) for whatever reason or all optimizations have been done, and network seems ok then your only choice is to upgrade hardware for which you need to see your resource usage for a page load.
These days people are more likely to recommend a hardware upgrade (cheaper and easier way out) which is quite all right.
There is a huge additional benefit - say the availability for your server is 99% - assuming no shared dependencies, then the availabilty for 2 nodes is 100-100*(0.01*0.01) = 99.99% - its nearly a hundred times more reliable.
So going out and spending, say $4k on 2 servers will give you a significantly faster solution than spending even quite a lot more on a single server.
Buying a new server right away may be shooting yourself in the foot.
Its possible that other applications are competing for resources, can you start the resource/performance monitor and see the pattern?
It doesn't seem to me you have a high enough load due to traffic.
Having said that, sometimes upgrading (or preferably adding) hardware is the only solution - and often it can be the most cost-effective solution long before you've exhausted the tuning effort.
Web serving (unlike database serving) gets much more benefit from adding lots of small servers in place of one large server - and since you're already running a lot of long-polling over HTTP, this is especially true.
A minute of response usually indicates a long execution time.
If you can move to a new 6 core or more server, with say 12GB of modern memory, new disks,  a newer 64-bit server OS and the latest versions of all your code requirements you should see around a 2-to-20 times speed increase overall, perhaps more in fact.
While its possible that you could speed up your current system massively by tuning it we'd need to know a LOT more about the nature of the workload and the current config - and even then it would require a lot of work and testing to get an optimal solution - there are a few good books on the topic - go read some of them.
I would first see if there is anything I can do to improve the code behind or find out whats really slowing things down.
Post this information for better feedback from others.
However it's important to see if we have done everything else right so a hardware upgrade would benefit more.
I would also check your connection to the server if you are testing remotely and not over a LAN/Localhost and getting such response times.
Increasingly the problems become those of the number of open connections, the number of running processes, the size of the network buffers, the rate at which the system can switch contexts....