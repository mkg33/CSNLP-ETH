That will show you each of the zip and rm commands that it would do if you removed the echos, so you can make sure it's doing the right thing.
This assumes that 'zipcommand' is your commandline zip tool and that it takes 3 arguments, 'a' for archive, the file to archive and the archive name.
If there's a nice way to do this with common Windows utilities, I'm not aware of it.
Google for VBScript + FileSystemObject + Recursive to find a suitable vbscript script.
You can use a VBScript along with a decent command line zip program.
You can the modify the code to execute command line zip tool.
Note that the above will not remove the original file.
Another nice thing to do to test your line before running it is to echo the command, rather than executing it.
May not be what you're looking for, but I'd use Cygwin and the *nix find utility:
It outputs a list of matches, which is piped to "while read i", which reads each line (a matching path) into the variable "i".
I could have added "rm $i" after the zip command to do that, but it's better to create the archives in one step, and then use:
"find" starts at "dir1" and recurses, matching everything with a name of the form "*.ext".
For each different value of i, the "zip" command is executed, compressing the file into a zip archive of the same name (and path), but with ".zip" appended.