Large physics systems can behave quite chaotically (small changes in variables create drastically different outcomes).
When you use two different physics engines, it will be almost impossible that they will always come to the exact same results.
How well this works will depend on your game (how much physics interaction you have and how chaotic it will be) and how well you can get the two physics engines to behave nearly the same.
But that will affect the game experience negatively because players will notice the lag.
So you will have to use the client-sided physics engine to estimate what the server-sided physics-engine will do and then correct any differences as soon as possible.
You could have the server send the physics-state of all game-objects to the client at regular intervals and then have the client correct all physical attributes as soon as they receive them.
So considerable desynchronization will become inevitable.
The most obvious solution would be to keep the physics completely under the authority of the server: Nothing moves until the server says it does.