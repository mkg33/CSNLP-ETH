// Function takes time in ms and returns true if holiday else false
Once you are working in ms all date calculations are easy.
function remainingWeekDayForWeeksStartingThisMonth(time) {
  return new Date(year, month - 1, day).valueOf();
// Gets the month that the week starts in using the WEEK_START day
So that you can start the week on any day, the example uses Monday as the start day.
In this case you want days of the weeks that start in the current month, a inner loop iterated the week days (day 0 to 6) only while the outer loop has the week's starting month the same as the current week's staring month.
To get the month a week starts on using the starting day
The best way to deal with dates is time in milliseconds.
const isHoliday = time => holidays.some(start => time >= start && time < start + DAY);
const holidays = ["11/30/2018", "4/23/2018", "2/6/2018", "1/26/2018"].map(date => {
Using ms it is then just a matter of stepping over each day until the conditions of the search are met.
The function uses some constants and function that are detailed in the snippet below and explained in the answer.
The value is milliseconds since midnight January 1, 1970, UTC.
Convert the holidays to start of holiday's day, so you dont have to convert it each time you check the value.
        remaining.push(new Date(time)); // add the day to the remaining array
The start of the week can be different for different people.
        // just for the example to show weekends and holidays
const remainingDays = remainingWeekDayForWeeksStartingThisMonth(currentTime);
Your question is "Getting the remaining days of the current week" but the functions you call is getDaysInMonth yet the function does something completely different from both the question and the function name.
  } while (currentMonth === weekStartMonth(time));  // Do while in weeks starting this month.
  const [month, day, year] = date.split("/").map(num => Number(num));
The results are just pushed to the array as they are found.
const WEEK_START_OFFSET = 4;      // Offset to start of week (Sunday) or use
//===========================================================================
To simplify the code you can set the start of the week (week day 0) to any day.
const WEEK = DAY * 7;             // Length of a Week
const DAY = 1000 * 60 * 60 * 24;  // Length of a dat
                                  // monday = 1 <-> saturday  = 6 sunday = 0
The example uses LOCALE to convert the date string to the correct format "World" or "US".
// holidays are stored as the time in ms that the holiday starts on
  var weekday = (new Date(time).getDay() + (7 - WEEK_START)) % 7;
      if (weekday < 5 && !holiday) { // and is not a holiday
  // Using the week starting day get the month of the current week
                                  // new Date(0).getDay(); if you cant remember
This is how JavaScript and most other languages deal with time, and is how a date is stored in Javascript.
const weekStartMonth = time => new Date(time - ((time + DAY * (WEEK_START_OFFSET - WEEK_START)) % WEEK)).getMonth();
    while (weekday < 7) { // do all days of the week
const WEEK_START = 1;             // Day to start week on
I will go by what I think you want and that is a list of week days left in weeks that start in this month, excluding weekends, and holidays.
With the holidays stored as start of day in ms it is then trivial to check if a time is on a holiday
I have also included a way to set the week starting day.