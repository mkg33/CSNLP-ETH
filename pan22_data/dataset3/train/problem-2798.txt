In physics at this stage you would also multiply this by the coefficient of restitution (bounce factor).
If you want more accuracy, calculate how far the sphere has penetrated the plane, and adjust your calculation.
Calculate the collision point between the sphere and plane.
Now calculate the relative velocity along the normal.
When adjusting Vball, divide the force by mass again and you have the final acceleration, so just add this to the velocity and you have your final post collision velocity.
You'll have to apply an impulse to your object, which is an immediate change in it's velocity.
Make sure to calculate Ft before applying any linear effects, or the friction won't be accurate.
For more info, I'll refer you to Chris Hecker's articles on Rigid Body Dynamics.
You can then alter this to calculate distance and if the distance is less that radius( which mean the object is overlapping) shift the balls position and then carry out the collision reaction.
Multiply this scalar by N and you have your force.
For a sphere and a plane, it's pretty straightforward.
If you haven't heard of Chris Hecker before, he's well known for game physics as well as his work on the procedural character generation and animation in Spore.
I would suggest calculating you distance from plane first; and then when the distance <= to the radius carry out the collision reaction.
In the real world, a powerful force would be applied to the object over a very short timestep, reversing its acceleration and causing its velocity to change.
Vball Dot N. Then Multiply VballDotN by -1, and multiply by mass.
From there, you can add some damping (multiply by some coefficient, like 0.9) to account for energy lost to heat or friction.
If you want to get angular velocity involved (perhaps your sphere is rotating), then the equations get a little more complicated.
If you want even more accuracy, you will want to take friction into account, which will cause the ball to spin, but I don't know if you want that in your game.
However, since we're working in a discrete world, we have to cheat a bit to simulate this abrupt change in direction.
This method is accurate to the formulae of collision response.
The most basic collision response is to reflect the sphere's velocity around the plane's normal, and then the result is the sphere's new velocity.
This is largely optional of course, unless you want really accurate physics.
In case you do, this is how you calculate the tangential force: