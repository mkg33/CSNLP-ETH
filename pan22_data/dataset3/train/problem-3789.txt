Let the views and controllers take care of that kind of output.
getOnStart() is a function that doesn't make sense.
You should either add that enforcement or eliminate the method.
If you do throw an exception, use a more informative message than "Error".
This code, being part of a model, shouldn't write anything to System.err.
You can write this.currentJob = currentJob; just fine.
It is a convention that predicates (functions that return a boolean) should be named with a prefix like is… or has… or can….
Furthermore, it's a private function that isn't called, so it's dead code.
You don't need to mangle parameter names like _currentJob.
The suspend(), resume() and cancel() methods should either…
The name of the setSpooler() method suggests that a printer can only belong to one spooler at a time.
However, the indentation is inconsistent, and the error handling that you perform using the if statements seems wrong.
In operations research, "availability" means the time during which a piece of equipment is not broken.
In contrast, print(Job) should throw an exception if the printer is busy, because the printer has declined to accept the job, and throwing an exception would make it hard for the caller to neglect to check the return code and accidentally discard a job.
The boolean return values for start() and stop() aren't useful; those should return void instead.