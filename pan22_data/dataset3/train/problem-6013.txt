If you decide to build RPMs, and build with Maven, then I can recommend the JDeb and RVM maven plugins, they're great.
Given your three options, I would personally go for your option 2 and build a deployable package.
Generally, I tend to deploy on ubuntu-based systems so I'm usually building DEBs not RPMs.
Since you use Apache Tomcat, you could look at those tarballs as good examples of straightforward packaging.
The advantage of a package here is that you would only have to ship the dependencies of your application, not the entire OS.
Given that  you mention RPM, I'm assuming that your client runs a flavour of Linux that can install RPM packages, but if you don't know the target architecture then distributing a tarball might make more sense.
FPM is also a handy tool for working with package managers.
For instance, you could face a licensing issue since one interpretation of the GPL would be that distributing a Linux 'live CD' or Vagrant image would require you to release all your code under the GPL (which I'm guessing you wouldn't want to do).
Security of the runtime server should ideally remain the responsibility of your client, not you.
Additionally, you wouldn't want to become responsible for ensuring that the system libraries on your disk image were updated with all the relevant security patches.
A few years back I looked into shipping a solution as a Virtual Appliance but in the end decided that the licensing headache of packaging the entire OS was more hassle than the benefit.
The pre-baked image approach sounds really nice in principle, especially if you're trying to build a simple demonstration for a client to play with.