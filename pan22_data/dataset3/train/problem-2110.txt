So, a more efficient way would be to pop out the edges once they entered the if-condition so that in the function-call, there are lesser no.
This is quite inefficient (when it comes to large no.
bfs() doesn't actually do anything with the nodes.
So, preprocess the edge list to create data structure that lets you access the neighbors more efficiently.
Is there a way to implement an user-defined iterator function to improve the performance since reverse-iterators (i.e., _next__() exists but not _reverse__() ) don't exist?
Then bfs can be done like this (using one of the neighbors() above):
If the nodes have strings for labels, or you don;t know in advance how many there are, neighbors() can be modified like so:
of edges) since in the neighbour function, it iterates through the entire edge-list every time even when many of the vertices in the edges are already visited in the previous function call.
The input graph to the bfs function is in the form of edge list representation.
It just returns a list of the nodes in the order they were visited.
If you know how many nodes there are in advance, you can do something like this:
But the iterator tends to just skip over to the next item in the list after removing a particular edge.