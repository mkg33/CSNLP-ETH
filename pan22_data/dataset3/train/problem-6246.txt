The docker-compose.yml file will spin up your environment.
When you onboard a new developer, you can just tell them to git clone your repo and to fire up their development environment by running:
Then when you want to deploy, when you build your Dockerfile it will copy your code into your image so everything is packaged up nicely and easily moved around.
When you push new code, we automatically build an image from your Dockerfile.
Every time I onboard a new person on my team I have to go through the same routine of installing everything, figuring out what changed since last time we onboarded someone etc.
Every project/application (if you have multiple) should be able to run separately and each project/application should have it's own codebase.
I've heard about people maintaining docker containers with the development environment, but I'm not sure how to accomplish this.
Personally I wouldn't bother worrying about IDE integration because people might prefer to use different IDEs.
The most simple and easy is, get the docker image and create environment in it and save it for later, so when the member joins, you just need to start that image and whole environment is created
   There are several ways to achieve it, depend on which one, you like.
NOTE: These links are for PHP you need to figure out for other languages that you prefer.
In the root of each project add a Dockerfile and a docker-compose.yml file.
We use the same approach for apps on Codemason, my service for building, managing and scaling container-based applications.
The onboarding experience should be almost as simple as telling your new developer to just clone the repo and run docker-compose up.
It will define all the services Docker should start for your application
The Dockerfile will build your application into an image, installing and dependencies your application needs to run.
That's a concept from The Twelve-Factor App methodology.
If you are open to try other things than IntelliJ, there is for example Eclipse Che which runs in container.
It'd be cool if a new dev would just get a container with all the necessary dev stuff installed.
Ideally there will be plugins for other components of your DevOps toolchains.
Let's say you work on a repository containing a React webapp.
Since that image contains everything your app needs to run, it can be easily launched on any server and scaled up/down across multiple servers.
The advantage of this approach when you are developing locally, running docker-compose up will mount your code as a volume.