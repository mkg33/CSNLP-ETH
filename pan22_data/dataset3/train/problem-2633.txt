In doing so, you can cause class invariant guarantees to be violated, which in turn means the assumptions the MonoGame authors were able to write their code under may no longer be true and the code may behave unexpectedly.
Of course, in some cases you might absolutely have to circumvent the API, perhaps to work around a bug in shipping software for which the official patch will not be released in time.
Your own code can really no longer rely on the abstraction's invariant guarantees, either, since you've broken them.
In most cases these problems would fall into the category of "undefined behavior" (not in the C++ sense, but in a more broad understanding).
This unexpected behavior will include, potentially, the entire gamut of such behavior from simple rendering artifacts to crashes or memory corruption.
Ideally you'll avoid this kind of thing entirely, though.
If you absolutely have to do this, you should take the soft approach: try to scope your direct access as narrowly as possible, and make sure you try to leave the state of the underlying API as unchanged as possible when you are finished with your meddling.
What you'd be doing is essentially circumventing the abstraction provided by MonoGame (as an example, this of course applies to basically any such higher-level API).