Still curious as to why which would return me the correct executable but it wouldn't be called though, if anyone can explain that.
I'm encountering a really weird issue when I try to use the latest version of git I just installed via homebrew.
Shells maintain a cache of the paths where executables were found in the $PATH variable.
/usr/local/bin/git was pointing to the app's version of git, not the Homebrew version.
My problem was that I had the Mac GitHub app installed.
Uninstalling the GitHub app fixed the issue for me.
which git is pointing me to the homebrew install, but calling git returns the original version installed with OS X.
When using homebrew to update git on your machine, follow the following steps:
Running hash -r in Bash from your current terminal will clear this cache, then the first instance found in $PATH should be the one that executes.
brew update if there is a newer version of homebrew available
Then I went to homebrew to install the latest version.
I checked first to see the original version I was on.
So it cached /usr/bin/git rather than /usr/local/bin/git, because the latter didn't exist when your shell started.
brew install git to download and install git's latest version
brew link --overwrite git to overwrite the symlink and point to the git brew installed.