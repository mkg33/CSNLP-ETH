In (Sniedovich 2006) "Dijkstra's algorithm revisited: the dynamic programming connexion", Sniedovich provides us another interpretation of Dijkstra's algorithm as a dynamic programming implementation.
If the answer is no, what are the main differences between them?
Greedy makes the "optimal" current decision given a local or immediate measure of what's best.
The main difference, in my view, is that DP solves subproblems optimally, then makes the optimal current decision given those sub-solutions.
By curiosity, I found the historical book of Bellman 1954: "Dynamic Programming", in which Bellman bases Dynamic Programming on the following Principle of optimality (page 84):
But then it might run into a barrier and have to travel all the way around, resulting in a bad solution.
A DP solution to an optimization problem gives an optimal solution whereas a greedy solution might not.
Greedy doesn't reason about the subsequent choices to be made, so its measure of what's best is shortsighted and might be wrong.
It just embodies notions of recursive optimality (Bellman's quote in your question).
For example, a greedy pathfinding algorithm might always advance directly toward the target, since at each step this decreases the distance left to be traveled the most.
This is the core of dynamic programming while my feeling is that it's exactly the same as the "Principle of Greed".
So the question is, are DP and Greedy algorithms just two different views of exactly the same thing?