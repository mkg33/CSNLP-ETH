This makes publishing a Docker image in the build pipeline a breeze.
My company leverages this by pushing our images to repos based on the branch, tagged with their commit.
You can still apply this same 'multiple docker repo' logic to any Docker registry.
Or if you have multiple Docker images being build for a particular branch (like a front-end Angular app and it's back-end API that it talks to), you can scope it even further, like so:
This allows you to create a new Docker repo for each branch, or each commit, each environment, or anything you need.
If you want a beautiful integration between Docker and SCM, GitLab provides it's own built-in Docker registry.
We prefer the specificity of which image is deployed where.
You'll have to look up that specific system's capabilities for creating new repos on the fly, and how easy it is to integrate with your CI/CD pipeline.
Here is an example: project-name/branch-name:commit-SHA
The other big advantage of GitLab Docker registry is that it supports multiple Docker repositories for each GitLab repo.
For this reason, my company almost never uses the generic 'latest' tag.
There are no limits to the number of slashes (/) you can use for scoping.
This makes it very easy to tell the exact commit of an image when it's deployed.