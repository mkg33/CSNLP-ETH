When one breaks, instead of sending in an admin to fix it, you throw it away and auto-build a replacement.
From a business practice standpoint there is a set of simple solutions.
with a specific "project" directory on the drive that is the only directory users are allowed to put their projects in.
Their systems should not have burning capabilities and should be using a security program to prevent the use of USB flash drives to transfer data without authorization.
Also, make sure the working place is such that screen is easily visible for both people (maybe large TV screen with the big fonts).
say you have 4 admins, and 8 pieces of information.
My personal design would be something along the lines of... Split your data into however many pieces, lets say for the sake of having a number 8, you have 8 git servers, each with their own set of redundant hardware, each administrated by a different set of admins.
Hire a sysadmin, they have to sign an NDA, if they break their promise, take them to court.
The admins will always work together, observing each other activities.
The only practical way is restricting who can do what with sudo.
All laptops/workstations should have encrypted hard drives, and each employee should have a personal locker they are required to lock the drives/laptops in at the end of the night to ensure that no one comes in early/leaves late and gains access to something they aren't supposed to.
While tools like PowerBroker attempt to do this, the cost is adding both something else that can break AND adding barriers to attempts at fixing it.
You should have multiple admins, and NONE of them should be an admin on enough systems to put together the complete picture.
If done poorly, it can create some significant security problems, so get experienced help if you go that route.
Next there is a practice that can either hurt/help.
One technique the military uses as well is the limitation of moving data.
Your system availability WILL drop when you implement something like this so set that expectation early as the cost of protecting things.
Your network admins who control the fire walls have no access to the systems that they are routing, so they cant specifically get access to information, and your server/workstation admins ensure that all data to and from a system is configured to be encrypted, so that your network admins cant tap the network and gain access to the data.
Without putting yourself into an insane technical mind twist to try and come up with a way to give a sysadmin power without giving them power(its likely doable, but would ultimately be flawed in some way).
It is very very hard to secure hosts against those with administrative access.
Each bit of the project has a different admin assigned to it, so a user would only interact with the workstation admin they are assigned to, if their project assignment changes, their data is wiped, they are assigned a new admin.
Along the same token, you ensure that network traffic between different systems is limited by hardware firewalls.
If you think you can pay enough to keep attracting new talent, the option of only keeping an each admin for a pre-determined set of time (IE 6 months, 1 year, 2 years) would allow you to limit how long someone would have to attempt to put together all the pieces of your IP.
You may also video record activities in that room mostly for making more sure that nobody works alone (that much is easily visible).
It should be the only machine containing the private key to login as root.
This will require quite a lot of work on the application side to make them that run in this model, but it can solve a lot of operational and security issues.
Encrypted hardrives for all workstations that will touch the IP.
http://software.dell.com/solutions/privileged-management/ (I do not work for Dell and other similar solution are available) are very effective in enforcing sysadmin accountability.
You mentioned that the pieces of IP you are concerned about are divided and only people at the top have the power to see them.
Another possibility is to see if your app can run on disposable hosts via a cloud provider or in a locally hosted private cloud.
This may not prevent them from stealing secrets, but any damages they cause by doing it are recoverable in court.
And the ability to use that system is extremely limited and requires specific documented approval by higher ups before anyone is allowed to put any data on anything that could lead to information spillage.
admin 1 can access systems that have piece 1 and 2, admin 2 can get to pieces 2 and 3, admin 3 can get to 3 and 4, and admin 4 can get to 4 and 1.
Each server should in the very least be in its own locked rack, if not its own locked room, so that only the admins responsible for each server have access to it, since at the end of the day physical access trumps all.
The idea being that someone who can obtain a clearance is less likely to steal or cheat.
Each system has a backup admin, but no admin is able to compromise the complete picture.
Some activities may need no root rights, so only part of the work would require to go to that room for "pair programming"
At the end of each night they are required to sanatize their project directories with a secure deletion tool, then hard drives are removed and locked up(just to be safe).
In a sensitive area there may only be a single system that is capable of burning a disk, or using a USB flash drive, all other systems are restricted.
Military and government sysadmins have to obtain security clearances of different grades depending on how sensitive the material is.
You could potentially also do most of what you want with selinux but it would probably take forever to figure out the correct configuration which may make it impractical.
You of course would need at least 2 or 3 admins for each piece, in case an admin is sick or in a car accident or something.
Place the root administration machine into the room locked with two keys, and give only one for each of the two admins.