The analysis - will be - I assume of calculus in nature.
The users are wanting to run their own code on the data for the purposes of ad-hoc analysis - within their own schemas.
Having said that I think we owe it to our customers to try and provide a product that they can use.
Make sure you have separated tasks and don't give privs to update the source data.
Albeit, SAS runs on its own dataset - extracted from Oracle or elsewhere.
Resource manager is your friend to prevent runaway queries.
In my opinion this is a dangerous set-up - but without answering my own question - what are the pitfalls?
As a DBA - assuming my users are knowledgeable with PLSQL and SQL - why would I not grant my users privileges to compile and run their own PLSQL code.
give them resources that they need, make sure other users don't get pushed out.
I think thats enough devils advocate but I guess in summary my answer would be:
For example, you can grant them privileges to create tables and procedures for their needs in theirs schemas, and privileges to select data from another schemas, but not to grant privileges on insert/update/delete.
The tables contain a large numbers of rows but not necessarily large rows in size.
If you want to run code you write it you support it and then you package it in a deployable format so I can push it out.
There are dangers and pitfalls of even read-only access that any DBA should be aware of:
Be happy that your users seem to be going to use SQL to do the analysis, instead of pumping to excel.
They come from a SAS background which from my understanding has allowed them to write and run their own analysis of data.
If you want to act like a developer I'm going to treat you like one."
If they don't have privileges on update and delete data in main tables, everything will be OK.
I think as a DBA you will inevitably lose the fight to keep hands out of your database.
We have an MI database environment where the data has undergone ETL.
I think there is no problem, but you need to take care about data.