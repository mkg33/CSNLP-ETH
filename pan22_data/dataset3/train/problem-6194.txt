while actually using your application), and analyze it with WireShark, looking for the delay between some data sent and the corresponding ACK packet.
That gives you the round trip time (RTT) for your traffic.
In Windows, you should turn on Compound TCP if you can, in Linux you should probably be using Westwood for this application.
What I would try is to capture some real traffic (ie.
NetPIPE can tell you throughput, and the latency of a two-way communication.
If you're using Linux, and it's your own application, you can use the getsockopt(fd,.. ,TCP_INFO,...) the data returned includes all this internal parameters.
If you want to know how much time it takes for a packet to reach point B from point A, then I think it can't be done without sub-millisecond accurate clock synchronization.
Most TCPs will stall if they see three consecutive packet losses.
However, are you sure you're seeing a non-functional link and not TCP stalls in your users connections?
And only when Data is rare, use active test (ICMP ping, TCP ping).
I'm not sure if you're looking for a long-running monitor, or an application like ping for a one-off test.
You could peek at this data every second and pipe to a display app.
Are you using the best TCP congestion control your system has?
How do you define "how fast the packets get delivered" ?
(it's used to optimize packet transmission and manage window size).
and mean channel status as Ok when most Data has corresponding ACK.
If you want to profile the TCP performance of a link, the classic tool is NetPIPE.
The TCP stack has to keep track of the RTT for each connection.
For lowest latency, but less error correction, UDP is a better option than TCP (for example with Linux the jackd sound server has a backend that can stream audio over UDP for this very reason - jackd is more oriented to perfect sound quality / pro audio production though).