Coding examples are usually too large to put up there, all of my intricate diagrams are clarified with (judicious!)
I like to give the example of creating a span with some text inside, so I draw on the board:
For those who do not know what the box model is, here is a graphic:
The blackboard may be dying, but it ain't dead yet.
appears sequentially in time at a slow enough rate to talk through each step or component.
Working through problems and proofs at the blackboard keeps the pace slower than a PowerPoint and gives the students that much more time to absorb the material, and asking students to write up the answers to in-class questions allows us to have class discussions around the results.
I find that there is no real way to explain it without drawing it out.
animations in PowerPoint, and my debugging gets demonstrated live on the projector screen.
The whiteboard on the front of my room gets used sometimes when I want to write over examples.
I'll also point out that the browser draws a box around the entire element:
And pulling a struggling kid up to the board (during individual work time, not as some form of humiliation) can give us space, both mental and physical, to work through a conceptual problem together.
Then I'll explain that the browser need to how much space to give the element on the outside and how much space it needs to give the content, which introduces padding and margin, and finally I'll add a border, finishing my explanation.
Improvised diagrams go up there, such as when a student asks an unexpected question about a linked list.
The humble blackboard has seen its role reduced in CS classrooms as the years have gone by.
My poor blackboard1 only gets light use nowadays, I'm afraid.
The last time I used a whiteboard as a whiteboard was to describe a maze building algorithm.
It was a small-ish board that I put on the ground and drew a grid.
Of course, my handwriting is terrible and my classroom is large enough that it's tough to see anything I write from the back.
And there's one more place where the board comes in handy: harder labs, especially the kind that kids have a hand in designing themselves.
Of course, in more advanced CS coursework, we start veering back towards the mathematical, where the blackboard is still king.
An alternative would be to use presentation software to animate the projection so that the code (or algorithms, etc.)
When I interviewed, before I saw the classroom, the AP that was interviewing me was very apologetic that there wasn't a Smartboard in the classroom.
But I get my choice here and now, in this very answer, and blackboard, I choose you.
I then stepped in a square and we walked (literally and algorithmically) through the algorithm where I built the maze.
Something about having all that space to think and try frees the mind.
Usually, when I teach this, I've already covered basic HTML and CSS syntax, including a few properties (e.g.
I've found that my students naturally gravitate to the board when they need to brainstorm or work through a particularly tricky problem.
I'd prefer a blackboard, but I don't get that choice in real life.
I'll then explain that the browser sees that as the "content" of the element, and draws a box around it, so I draw a box around it:
One example is the front end web development concept of the box model.
1 Okay, technically I use a whiteboard in my classroom.
Well, maybe not the king anymore, but at least a Marquess or an Earl.
It's almost floor to ceiling and covers probably 80% of the width of my room.
But that's rare, and it's usually covered up with a large projector screen.
They had just gone through a rebuild and reconfigured most of the classrooms, and most had a Smartboard.
There may be a psychological-physiological learning advantage to having students see solutions or code presented at nearly the same rate as the student would write or type in the code themselves.
Having N steps appear (especially if it exceeds 7+-2 cognitive units), all at once, might overload a student's short term memory, and thus can result in some of the information being nearly invisible, and thus harder to learn from that projection.