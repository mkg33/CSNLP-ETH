How do we solve the problem of "figure out what objects are close enough to collide with other objects?"
A good general purpose solution is to use Zomorodian and Edelsbrunner's collision detection algorithm, which I implemented here:
The theory is simple: would a bullet in the top-left corner of the screen need to check against the ship, in the bottom-middle of the screen?
For more details, look up 2d spatial partitioning.
In 3D, since we're dealing with a cube, it's sometimes called "octree partitioning" (imagine the space as a 2x2x2 or NxNxN grid of cubes).
Not really; they're too far apart to possibly collide this frame.
I'm relatively new to game development and have been trying to learn how collision detection is coded.
I mostly work with Actionscript 3, but I'm learning C++ on the side.
There should be an available implementation for Flash that you can probably reuse.
You can read more about it and related approaches on the following pages:
They usually handle this through spatial partitioning.
There are lots of different solutions to this problem, and the best answer depends on what sort of data you are using.
I've been wondering how "bullet hell" and top-down shooters optimize their collision detection with so many objects.
This is called "spatial partitioning" in 2D There are a lot of details depending on your target language.