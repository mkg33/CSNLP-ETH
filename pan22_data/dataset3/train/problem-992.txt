While trying to optimize a few queries to not do with PHP something I could bring ready-to-use from database, I tried to convert two routines originally created in PHP to encode an integer in its AlphaID representation and then back, from string to integer.
If not something built-in, and maybe this could be considered as off-topic, how could I fix the implementations I made?
So, that said, is there a way to represent integer as AlphaID with MSQL?
The easiest way to do this with built-in functions would be to just convert the number into base 36:
And, of course, being able to do such conversion straight in the database would allow me to change INT for BIGINT and have up to 9,223,372,036,854,775,807 records.
Or something similar then, I'm open to suggestions.
I also had suggestions to use hashing functions and I tested MD5(), SHA1() and all combinations of SHA2() but all of them result in very long strings which would be difficult to display on web environment.
Let's take a deep breath before this can be considered as a Stack Overflow question, I asked before posting
This allows use of 0-9 A-Z, and is the largest base supported by CONV().
I tried to port them by myself but there were a few problems:
I've got suggestions to use AES_ENCRYPT() and its counterpart to decrypt, but that's not the purpose because what I really need, as a requirement of the project, is to display something better characterized as a PRIMARY KEY in a textual representation of letters and number (only!)