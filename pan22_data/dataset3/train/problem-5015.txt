But I don't want to use something like sysbench or oltp tests, because we have some heavy stored-procedures logic.
I haven't used the jdbc functionality before, so I don't know if it will handle your complex queries.
We build something like this for MS SQL in the past
If test fails, test procedure should raise an error.
I could ask my developers to creates some custom java interface and use Siege for it, bot don't want to add overhead or affect numbers.
1) We write unit testing procedures and give them the same name prefixes like "test_".
I then ramped up the number of concurrent connections until it died.
I would like to run some tests to compare our mysql application in several configurations.
3) The results of test execution are stored in a table.
I ended up using SQLIO  to stress the disks, and then wrote some custom queries to generate quite a bit of data and then do various calculations on large tables and simulate a heavily loaded, but poorly optimized database.
2) We write a procedure/script that opens a cursor, selects from catalog all procedure names that starts "test_" and execute each of them in EXEC (@procedure_name) statement.
In MS SQL we also used extended properties as meta information to describe some specific parameters of out tests (the same like in NUnit one can use different test attributes)
Is there any test application/framework which we can use to run custom queries (as option - in parallel) and see statistics?
You can follow the general principles of most unit test engines to build a simple mySQL unit testing engine.
What I already found usually use their own generated database schemas and  scenarios.
4) In order to run test over the same data and get predictable results, we have a sample test database that we backuped once and restored from backup before each tests execution
Jmeter can do database load testing using JDBC: http://jakarta.apache.org/jmeter/usermanual/build-db-test-plan.html