Because of one of the options (trial and error - can't remember which), it decrypts the packets, and directs the HTTPS request to the correct VM.
Sorry for such a long question, but its a very specific issue I have been having, and I tried to give as much info as possible.
I could visit https:// www.domain2.com and it would say the connection was partially encrypted, and would show a cert error, that the cert was for www.domain1.com
s1.myserver.com, s2.myserver.com, certificate for *.myserver.com).
In Centos 6 openssl and httpd versions support SNI.
I have been trying to implement SSL certs for two of the three domains.
The VM already had the SSL cert installed, so would recognise HTTPS requests, and the whole pageload from start to finish was encrypted.
However, today, this was really interfering with the HTTP connection to domain1, and my browser was saying the page was being redirected in a way that will never complete.
Are there any ways I can get https:// www.domain1.com to read cert domain1.crt and direct to domain1's VM, and https:// www.domain2.com to read cert domain2.crt and direct to domain2's VM ?
It would be better if you had servers on subdomains of a domain for which you have a wildcard certificate (e.g.
I have since removed the whole SSL connection config from the config file, and I am running standard HTTP only.
My squid proxy is on a CentOS 6 VM, and currently running alongside my pre-existent apache proxy - so I still have the squid running on port 3128.
Last night I managed to get some successful config for a fully working HTTPS connection to one of my domains.
I have been upgrading my network from using an apache reverse proxy (Not quite powerful enough) to a Squid proxy configured just for reverse use.
But such simple case is much easier to do with httpd and Name-based Virtual Hosts.