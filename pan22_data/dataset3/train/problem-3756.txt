Mathematically, your approach is already correct for all lines.
Check your implementation with this case and make sure it gives the output that you want it to.
One case to consider is when both the coordinates are identical.
That is, the end points have the same x coordinate and the same y coordinate.
I have a line segment defined by two coordinate values and I need to check if the line segment is parallel to the x-axis or y-axis.
In some cases lines near to parallel may satisfy your purpose, and in other cases it may be essential to accept lines near to parallel, if for example there is the possibility of small inaccuracies in the coordinates.
However, for use in a practical setting, it's worth asking yourself about near-parallel cases and any odd exceptions.
Depending on your purpose, you may want to detect only exactly parallel lines, or you may want to detect lines that are sufficiently near to parallel.
It will correctly identify all lines parallel to either axis, and it will not incorrectly identify any lines that are not parallel to an axis.
Consider all this before even thinking about optimisation, otherwise you may have to repeat all the optimisation later if something you have to change for correctness breaks your initial optimisation.
When it comes to test for parallelism against x-axis, we just need to check if the both the end points of the line segments has the equivalent y-value, whereas parallelism test against y-axis can be found if both the coordinate point ends have the same x-value.
Make sure everything is correct and working first, and then profile to decide where to optimise (if optimisation turns out to be necessary).
This is a  degenerate case that doesn't define a line (it could have any direction).
It is not generally useful to try to optimise small parts of a program before you have profiled the program to see where the most benefit can be gained by optimisation.