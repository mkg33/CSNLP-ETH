When you log into a box via SSH, sshd spawns new processes to handle the session.
All other sshd: user@pts/0 records are user sessions.
You want this behaviour because it makes life a lot easier when you're working with headless servers in distant datacenters!
I would recomend to do all this in GNU screen session, so if you make a mistake, you will be able to reconnect and reattach this screen session.
All sessions already open remain running with old configuration.
So if I wanted to kill the session from my MacBook I'd 'kill -9 2522'.
Invoking the init.d script should still restart the service:
Here is a script I wrote that will terminate all SSH sessions but the current one (the one running the script):
Look for appropriate session by username and kill the process to terminate this session.
I'm SSHed in from two locations o I have five processes.
You will get one /usr/sbin/sshd with PPID 1 and UID root.
Many thanks to David Newcomb and patrik for the assistance in creating this script.
To learn, which of ssh sessions is yours, try to execute:
If you want to know which of the sshds belongs to you, it's really easy:
It's worth noting that restarting sshd won't kill existing SSH sessions.
This probably accounts for the three sshd processes you're seeing - one for the main sshd daemon and then two (root parent, dermot child) per session.
the listening daemon restarts with new configuration options (I assume, you restart it for the new config take effect).
Restarting sshd will kill the main sshd daemon process (and start it again, obviously) but leave other spawned instances of sshd untouched.
How do I tell which is my instance, and kill the others?
The pts/X bit relates to the virtual terminal that the session is attached so...