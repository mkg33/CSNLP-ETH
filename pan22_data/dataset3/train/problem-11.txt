Artificial Intelligence - foundations of computational agents Chapter 3 - States and Searching
Then it's only necessary to calculate the distance between 1 and 4.
Whether or not it is useful to cache the distances at all depends on how often they are changing.
You should tell a function what it needs to know in order to do it's job, the method should not ask the outside world about this information.
This little piece of code violates the principle of Tell, don't ask.
As you are considering caching it, I assume that it does not change too often.
In A*, there is a famous calculation of \$f = g + h\$.
Let's say that you have calculated the distance between 4 to 7, and you're currently calculating 1 to 7.
Then you know how far the remaining distance is as well.
As your points is not in a grid system from what I can understand, making a useful heuristic function is significantly harder.
The \$g\$ is the cost for all the steps taken so far (in your case this cost function would simply return \$1\$), while the \$h\$ is pretty much the key: It's a heuristic function to estimate how much is left.
I managed to greatly increase performance by avoiding array resizing and memory reallocation.
By allocating all array space I need by start and reusing those arrays instead of recreating and resizing them, the performance of the code has dramatically changed from one search every couple seconds to almost a hundred searches per second.
It would be much better to pass the $points variable to the function, just like the other ones.
The general approach of the algorithm howover is still the same.