Upgrades are then  as simple as checking out the latest module version, or a specific commit ID or tag into the module directory.
You should then make it the responsibility of the respective development teams for managing a module for their application - just like they should be managing their installers.
This will allow your project managers, customers, ops team, whatever to manage some things at the organizational level/domain and some developers or teams to manage some things at the individual level/domain.
For certain things (eg, time source) you can use an NTP module that applies to all hosts instead of just a specific host.
The configuration code for the management system can then be managed in git or some other version control system just like your existing code.
I am a particular fan of the Key Value store, because it allows me to have separate configurations for my micro-services and back-end services (written in C#/.Net Core and Java respectively) in all three environments (Dev, Beta, Prod).
Whenever I add a new service or application, the configuration for each environment is added to the Key Value store and a simple config client downloads the configuration during the application's bootstrap/loading routines.
Consider using something like Puppet, Salt Stack or Chef - all of which can be installed on Linux or Windows.
This can even work for your networking team who can use these configuration management system to manage firewalls and switches using SDN (Software Defined Networking) technology.
I highly recommend Consul for configuration management as it is a high reliability, distributed system that provides quite a few and easy to use features with a simple Rest API.
Also the community edition is free :), although for a large enterprises there is an enterprise offering.