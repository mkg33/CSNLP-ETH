For example, if your automation code is for testing/monitoring your Iaas I would put those together in the same repository.
You really want to take down barriers between Devs and Ops.
There is a slight general trend toward mono-repos.
If things go well your developers follow through with code for months after it has already been in production and have hand in all aspects of the deployment.
What is the visibility of ops into product runtime code and devs into product management code?
As for your lambda functions, could they potentially be reused for other types of Iaas?
How easy it is to make commits that contain both product and deployment changes?
Are you expecting to do such deployment through syncing repository or do you have other established deployment mechanisms.
The operation and deployment of code, standing up environments, setting up services, it should all be in reach of developers and with explicit expectations to develop such code in coordination with the ops team, not being dependent on someone doing it for them.
Does any of the code need to be present on machines that you deploy to?
Choices like this tend to be hard to change in practice (even though they shouldn't - in theory).
In the first case, will other code creep in during the deployments that does not need to be there?
If Dev and Ops are supposed to work together, why would Ops and Ops be separated?
When considering mono-repo vs many-repos you might look at the following questions, which should also affect the composition of the code directory tree structure.
My advice would be to not separate these repositories as it introduces unnecessary risks in terms of repositories not being available due to access control, availabilty or billing issues at some point when you need 2 or more of them working together.
The tests verify the validity of your infrastructure.
Looking at your company roadmap, how will whatever you do fare 6m, 2y, 5y down the road?
As a sys admin you could split up repositories by defining logically what each of your components are responsible for.
How long it will take to grep code in certain place?
Are you a one product shop, but maybe in your future there are new products?
Also ask yourself if someone new started today, could they understand your repo and submit a pull request?
Sure there might be some more configuration to do (hooks, permissions etc.
It also reads contrary to the term "DevOps" where Software developers and System admins are supposed to work together and get a grasp of each others domain instead of traditional "over the wall" responsibilities.
Less complex repositories enable other users to be able to make meaningful contributions in less time.
Will the concept you are using stand the test of time?
They split them up logically based on interfaces or APIs.
Are there generic lib/ directories where devs and ops end up sharing libraries that create new unexpected inexplicit dependencies?
As you mentioned, programmers use different repositories when implementing micro services.
Are new repos automatically linked as submodules into correct location?
How easy it is for developers and ops people to discover the code for some feature.
So even just having separate mono-repo for ops could create such barrier.
), but understanding a repository with 5 files in it is a lot easier than understanding one with 5 folders.
Does the build or deploy process depend on the tree structure making sure people need to put it there in order for it to be even noticed?