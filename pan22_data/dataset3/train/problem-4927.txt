Contrast this with the variable holding the edge count.
My personal preference is to leave it off unless necessary.
Looking for comments / suggestions on my approach, particularly whether or not it's worth implementing a map to replace an adjacency list, or if I'm writing my DFS / BFS methods correctly.
That variable has actual impact, as it saves having to count the number of edges, which is stored in many collections.
I've used a modified adjacency-list mechanic to utilize a map instead of a list for quicker lookup times.
Both because you specify the implementation in fewer places and because this forces you to code to the interface.
This makes it easier to change implementations in the future.
This change in pattern almost always works when containsKey is immediately followed by get.
In this case, you have a simple scalar variable and I would give it a singular name.
As a general rule, it is preferred to use the interface as the type rather than the implementation.
Either way, you only have edges in the graph between two vertices in the graph.
with object fields in Java unless there is a conflict between a local variable/parameter and an object field.
But here, the vertex count is already tracked exactly by the number of keys in the adjacencyMap.
Then you don't have to manually maintain an extra variable that tracks information that you already have.
Then you don't need to specify a constructor at all.
In several places, you enforce that for there to be a path between two vertices, both vertices must be in the graph.
This is of course a personal preference rather than a standard.
Similarly, we now check if the add did anything after calling it rather than checking if it will work and then calling it.
Here I've attached my java implementation of a directed graph.
Because the && operator short circuits, this has the same effect as if the second condition were in a second if inside the first.
Some find that it makes the code more readable in that it indicates that a particular variable is an object field and not something local.
Now, rather than always checking for presence, we assume that things will be there until told that they aren't.
Adding an extra variable means that there is one more thing to maintain.
vertex count) for singular variables and plural names for collections.