While tail -f somefile.txt keeps scrolling with new data, I sometimes prefer less +G somefile.txt as well to look at a patch of latest data in the file.
This way you can also watch for things like "open", "close" or "access".
But if you're simply want to get appended lines to stdout i agree on tail.
inotifywait from inotify-tools is useful if you want to run a command every time a file (or any files in a directory) change.
I'm editing a LaTeX file and wanted to monitor it also for changes somewhere in the middle.
If you want the command only to be run if actual modification takes place, you can use `md5sum "$FILE"` instead of `ls -l "$FILE"`.
Tail is the standard, traditional, available everywhere unix tool.
I whipped up the following little shell script that proved useful to me.
A little more sophisticated tool is multitail which can monitor several files simultaneously and does syntax highlighting.
You can also use inotifywatch/inotifywait which hook into the kernels inotify subsystem.