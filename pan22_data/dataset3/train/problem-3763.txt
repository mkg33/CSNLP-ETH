In this case it is very important to index enough fields in multi-page tables.
In this model, indexes are often necessary but the planner has more freedom when to use an index, and the implications of not using one are often less severe.
InnoDB tables are basically a b-tree index of the primary key which are extended to include the row information in the index entry.
PostgreSQL uses heap files, one table per file (some tables may be many files) where tuples are allocated from that heap's free space.
I want to add here that different databases require different strategies.
UNIQUE constraints are done using implicit indexes, and several other index types are supported with different operations possible in the index.
The tables are more generally optimized (rather than specializing in pkey lookups) and so fewer indexes are required.
Physical order scans are not supported and all scans happen in logical order.
The typical rule is index everything you want to filter by.
Primary keys in PostgreSQL are basically a subset of unique indexes where no values may be NULL.
Let's compare MySQL w/InnoDB and PostgreSQL for example.
For a logical order scan to work, an index must be added.