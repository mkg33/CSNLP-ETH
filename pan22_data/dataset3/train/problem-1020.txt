Once you get used to the keyboard shortcuts, and start creating your own triggers, vi will be like second nature to you.
Read the man page, and then run the following commands on each machine, and copy the results into your documentation:
This will get you into the habit of documenting as you go, and may save your hide 9 months down the road.
Grep through your logs and search for "error" or "failed".
It's a great overview of nearly every aspect of system administration and should cover almost everything you need to know about maintaining a small set of systems like these.
Technologies will come and go (and can be easily Googled as required), but the information in that book is timeless (and priceless).
Hopefully, this will help you get your feet wet, and get you off to a good start.
What does load average really mean on a Unix system?
What's the typical boot-up process for a machine (that one alone, if you follow it from beginning to end, will provide a wealth of knowledge).
That will give you an idea of what's not working as it should.
Most Linux distros log to /var/log/messages, although I've seen a couple log to /var/log/syslog.
In 3-4 years you will have enough knowledge and many things come from itself :)
If you're just getting started, and especially since you have some Debian (Ubuntu is Debian at its core) systems, I highly recommend the Debian Reference.
What's the sequence of events in a typical network connection?
That will serve as the beginnings of your documentation.
A well maintained Linux server can run for years without problems.
Those commands let you know your environment, and can help narrow down problems later on.
Double-check your applications, find out if any of them log somewhere ridiculous, outside of syslog.
I'll tell you the greatest non-secret of system and network administration.
Your users will give you their opinion on whats wrong, listen closely to what they have to say.
You can just type help, to get in the documentaion.
One last thing, always make a copy of a config file you intend to change, and always copy the line you are changing, and comment out the original, adding your reason for changing it.
When you have a problem, check things in this order:
But if you start at the top, and try to learn specific bits of software without knowing what goes on underneath, that will make you... just another high-tech janitor, basically.
If you want to be a good sys/net admin, learn the under-the-hood stuff.
We just shut one down that had been running for 748 days, and we only shut it down because we had migrated the application over to new hardware.
Once you understand the fundamentals, and understand them really well, laying knowledge on top of a good foundation is much easier.
They don't understand the system, but they see it in a different way than you do.
What's the difference between a frame and a packet?
At my organization we use Trac, but any wiki engine should do, just make sure it has a nice way to display source code since that's useful for tiny scripts and command listings.
Nano might be what all the cool kids are using these days, but experience has taught me that vi is the only text editor that is guaranteed to be on the system.
If something is wrong, most likely there will be some relevant information in the logs.
Also, if you are dealing with email at all, don't forget /var/log/mail.
The Practice of System and Network Administration, by Limoncelli, et al, is where you should start.
Anyone (or just about) can learn what this or that particular software does, and how to push this button on that tool to make x, y, or z work.
I also agree with all the points pQd made, and more specifically I think it would be a good idea for you to set up a wiki to document all your processes and configurations.
learn pipes "|" to get the output from one command to the input of a second command.