You're unlikely to venture into the file except for debugging.
Meanwhile, an ascii fbx parser is pretty significant code size.
already have been done using the intermediate format, so those advantages don't apply.
The advantages of binary FBX over ASCII FBX are most immediately; speed of reading and the size of the file.
Likewise you're only going to be fixing the reading side, since the exporter is proprietary.
I would also challenge the degree of advantage ASCII FBX has over binary FBX in a few areas.
This approach requires no parsing whatsoever, it loads directly into the final buffer (or other container) from which it's going to be used, it's friendlier for content streaming approaches, and all the hard work of debugging/etc will (hopefully!)
a model format that you can load fast and directly; e.g.
Not that it'll take too long for a small model, but there is a speed advantage there.
and in OpenGL, you'd want to be able to do something like this:
While ASCII is considerably more readable than binary, it may not be practically relevant.
The binary format has never been (officially) publically documented.
It's fine to add code for loading them, and to use them as an intermediate format for development, but for production you don't really go down that route.
As for production workflows my answer would only echo MFAHs response above.
This is more likely if you're building your own parser but otherwise considering how mature the format is, I don't see there is much call to poke around in it.
Process them into a binary format well suited to your title, which may include raw buffers and the like.
In general you don't use any such format directly as an asset in production.
Many exported models are large and complex to read even as ASCII text.
Another significant advantage would be that it is possible to build your own parser and asset importer for the ASCII flavour.
Because of the way the text is organised in an ASCII FBX, anything but the smallest changes cause merge conflicts to rival the problems you face in using the binary form.