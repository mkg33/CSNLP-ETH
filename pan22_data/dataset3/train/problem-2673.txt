Even if you fix the other line, this may multiply the wrong three numbers.
In particular, consider if it matters if those three values are positive.
will give a different result than checking every x.
To what else could you initialize pos other than 0?
You can simplify a building of "pos" and "neg" lists:
Now we do at most four comparisons and may do as few as two.
If all the numbers are negative, then max_product is negative when
We can actually reduce that and keep the same behavior
I'll leave it up to you to think through the ramifications of possible fixes.
Also, how do you tell when pos[0] * pos[1] * pos[2] should and should not be zero?
Your code is not readable at all, due to the use of the fairly non-descriptive variables pos and neg and in general how dense it is, with pos[foo] and neg[bar] everywhere.
Something that would assist in the readability, and make it more idiomatic would be to use combinations from the itertools module to generate the 3-integer sublists of the list_of_ints, and then process the sublists (that part is fairly simple btw).
This incorrect answer will hide any possible correct answer.
The original also did at least two and could do as many as eight (if greater than 0 but smaller than the three largest positive values).
But it does produce the same result as your original code, so the bug is in the original code.
The neg variable would hold -6 and -2 (the two smallest negative numbers).
I'm trying to copy the style that you used with minor algorithmic differences.
This is because you initialize the arrays to 0, but you don't verify that there are non-negative members of the array.
Still the same minimum of two, but the maximum drops to three.
We get the same behavior because both values are initialized to 0 and only move in one direction from there.
0 will be greater than the product of any three negative numbers.
The x > 0 and x < 0 will have the same result throughout.
But the actual answer should be -2 * -1 * -1 = -2, which is the product of the three largest numbers.
I don't know how this more readable algorithm would perform, but the complexity of operations being done are simple enough that the difference between more time-efficient algorithms and it are miniscule.
First, I'm not a Python guy, so please don't use anything I say to suggest style.