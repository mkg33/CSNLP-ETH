A request can be executed by any ONE handler, but can be worked upon by multiple modules.
Since only one handler can execute the request and in this case it should be the MVC handler SiteMinder login page never comes up.
When a request comes in the URLRoutingModule routes the requests to the handler for MVC (if a map for it exists in the routing table as defined in the Application_Start event of the Global.asax), and the SiteMinder handler is never invoked.
Alternately, if you do this directly from applicationHost.config, set the resourceType to "Unspecified".
iii)    The login page responsible for authentication should not be in the MVC routing table.
ii) If the cookie is not there, then redirect to another SSO login page.
As this time we have the SSO session cookie, so the request will not be redirected in the AuthenticateRequest and would be responded to by MVC.
You can do this from IIS Manager by editing the handler for Siteminder, clicking on Request Restrictions and make sure that the Mapping checkbox is unchecked.
Upgrade to the latest version of Siteminder, remove all the ISAPI, move from ClassicMode to IntegratedMode as MVC / WEB API needed then use just CASiteMinderWebagentModule
i)  In the AuthenticateRequest method in Global.asax check to see if the SSO session cookie is there in the request.
I had the same problem on my MVC-2 site even though the virtual folder was protected by siteminder.
Here is the explanation and workaround from Microsoft on ASP.Net MVC with Siteminder.
Changed the Application Pool mode to Classic from Integrated and voila!
One handler executing a request is a by design behavior.
v)  On this page, after authentication, the user can be redirected to the main URL that was requested earlier.
This will cause the handler to process all requests, whether or not the file or folder exists.
iv) If a request for a page that is not in the MVC routing table comes in, the SiteMinder will come into action as the URLMappingsModule will not route this to the MVC handler as expected.
and forget about the whole stupidity around hacking MVC/Webapi because ISAPi and siteminder, MVC/Webapi was never designed to run under ClassicMode.
This must be implemented with caution as there is a chance that the Siteminder cookie could be invalidated but not checked by siteminder as the request wont go thru siteminder for MVC requests.