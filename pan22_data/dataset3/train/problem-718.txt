The results were compared successfully via unit tests, against my dummy classes and dummy data, so hopefully you can verify that with yours.
Is there someway to reduce or rewrite this query using joins or something else?
Those names are probably awful, but not knowing the context, I did the best I could.
I broke it down into its component parts, and concluded that I'd concentrate on making it more reusable and readable.
Personally, I find lambda joins too verbose, so created two extension methods instead:
Your original query looks pretty optimal, but it took a while to see why.
I can supply the dummy classes and data I used if needed, but as mentioned in the comments, I'd much prefer those supplied next time please!
You'll notice I needed to create two extra classes to enable this, ItemTag and ItemDerivedTagItem, that replace the anonymous classes.
As ever, the proof is in the profiling, and for me at least, the extension method query is 4 times faster.
The IsInteresting and CreateDerivedTag methods were made static member methods of their classes, too.
I have the following query which works adequately.