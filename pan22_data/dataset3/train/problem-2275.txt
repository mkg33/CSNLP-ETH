I include the JS file and call recordFilter() with the first argument being the location of a JSON file which is used 1) to build the list in the first place and 2) to rebuild it when the user enters something into the input.
Instead you should use the data directly in the AJAX onload event.
One thing that falls into my eye, is that you have a possible race condition: You use the data you load via AJAX in the window.onload event handler.
The result can be seen here: vlau.me (Content is German, but the functionality is easy to figure out).
I use an external Fuzzy Search implementation which is put into the compressed file but excluded from below code.
A note on how the list is populated in the first place: I use a static site generator (Jekyll) where I use the JSON file to build the list when generating the site.
window.onload = ... overwrites any other handler assigned to it (e.g.
Also you should consider using the event DOMContentLoaded instead load.
The second argument is the ID of the container holding the components like the input element.
Maybe I'll have more time later to have another look.
It does not interfer with the default behavior of tabbing.
It basically served as a central place for all the links we needed to get access to lecture and exercise scripts, etc.
by another script), and accordingly can be overwritten itself.
However window.onload doesn't wait for AJAX calls, so it theoretically could happen, that the window.onload event handler runs before the data is loaded.
Tabbing through links on the page also moves the active class (used for styling with CSS) if the to be focused element is a link of the list.
You use several newer DOM features such as classList and getElementsByClassName.
It may be a good idea to check for support before using them, so that older browsers don't trip over them.
You shouldn't be assigning event handlers directly to the element properties.
This is done to ensure users with disabled JavaScript get the list although they cannot filter it.
To step it up a bit, I decided to throw some JavaScript at it so folks could filter the list.
Arrow keys are used to navigate the links in the list while up/down are used to go from item (an item is a block containing links) vertically, left/right keys are used to go from link to link.
In any case it could do with some more comments, and possibly a better separation of logic and output.
When the user navigates to a link, I set focus() which 1) scrolls the element into view by default and 2) allows the user to open the link with enter or Ctrl+enter.
As with the actual functionality, I'm not quite sure I understand yet what is happening.
Now this is the first time I used JavaScript, so bear with the code.
Instead use addEventListener just like you do for the over events.
For my fellow Computer Science and Media students at my university, I build a link collection which soon a lot of people used.