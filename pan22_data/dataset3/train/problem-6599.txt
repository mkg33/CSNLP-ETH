But with graphical objects, I will have to upload them to the GPU, and that can (usually) only be done on the main thread.
Unfortunately, this requires a way to estimate the amount of time it takes to load a given resource, and as far as I know, there are usually no ways to do this.
However, if there are many big resources to load, this could cause me to miss a frame deadline and eventually get dropped frames.
This way, I would only load a resource if I can do it within the time I have for that frame.
How do many games get to load all their stuff completely asynchronous and without dropped frames or extremely long loading times?
Let's think platform-agnostic: I want to load some graphical resources while the rest of the game is running.
However, if there are many small resources to load, loading all of them will take many frames, and there will be a lot of wasted time.
while having a separate thread load resources from disk to RAM.
In principle, I can load the actual files on a separate thread, or using async I/O.
I can change my game loop to look something like this:
Optimally, I would like to time my loading in the following manner: