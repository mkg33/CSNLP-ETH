If a domain has opted in to using wildcards, every time you make a typo in the subdomain, you no longer get an actual error message saying that you messed up the name – instead it quietly goes to somewhere completely different than you wanted.
This is actually used for many website hosting systems; e.g.
/etc/hosts entries are not DNS; I think they actually predate DNS and the concept of multi-level dotted names.
If you create a DNS entry for *.example.com (at any level), then all unknown subdomains at the same level (e.g.
Note that DNS actually does have this as an opt-in feature.
Why don't abc.www.domain.com or a.b.c.d.domain.com resolve to the next lower available N part name by default?
Given www.example.com the www is a hostname in the example.com zone.
Before inventing DNS, most systems just used single-word names and a.b.c.machine wasn't really a thing.
But in practice, it does make things annoying in many cases (outside of the web).
Yes, there is a computer at example.com serving that zone but the DNS system is explicitly configured to say "www is a host here" and not "there is a subzone named www".
Because there is a difference between a host name in a zone and a delegated zone or sub-zone.
So when you see www.example.com resolve to some address, that's because the domain's owner actually added the individual subdomain "www" to their DNS zone – not because DNS automatically duplicates it.
As for DNS itself, it's simply a choice that its inventors made that only explicitly created names would be resolvable by default, with no 'magic' features like automatic expansion.
GitHub has a *.github.io entry to automatically catch all usernames.
Of course, some DNS server software supports the use of wildcards so they could be configured to have a zone at www.example.com and then use a wildcard at *.www.example.com and have it all point to the same IP.
And of course, nothign stops anyone from creating their own DNS server software that responds in any way they want, as long as it "speaks" the DNS protocol.
foo.example.com) will automatically be resolved to the same data as the * entry.