EDIT: This is specific to C, other languages may function differently but it's usually like this
A child process is created that is destroyed when the command has executed.
However, in general, what they'll do is fork a new process running a shell and then run your command in that.
These function calls can be implemented differently depending on what language you're using.
http://pubs.opengroup.org/onlinepubs/009604499/functions/system.html
If I run system("ls") Does it run a bash interpreter on the string?
Once the process completes, it terminates and your program will receive whatever it is that the language defines the return value to be (usually it's either a return code, or the standard output of the program that was run).
Since it forks a new process to run the command, its behavior will not affect the runtime environment of your own program.
Some programming languages have system() exec() calls where I can run commands.
So yes it does invoke a bash interpreter, providing that this is the command processor determined by the C standard library implementation on that system.
What happens when it's a program like top that modifies the terminal screen instead of constantly dumping?