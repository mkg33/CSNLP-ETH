But I don't want to make it public or internal in the actual state.
I would like to write a UnitTest for the GetQuery method.
The model contains a number of properties, which each represent a URL parameter of the webservice.
I could make the method public If I would remove the "CreatePDF" method and let the user make direkt calls to MakeByteRequest / GetQuery and so on - which would require the users to have some knowledge about the webservice itself (knowledge about return types, web method names and so on).
As you can see, you only need to call the CreatePDF method with a parameters object.
Currently I try to create some unit tests for a project, which provides access to some webservice methods.
I have a class "WebService" which offers methods like "CreatePDF".
The models provide a method "GetParameterDictionary", which delivers a dictionary with key == url parameter name and value == url parameter value.
Would you prefer a more simple "interface" over unit tests in this case?
The method itself calls a methods, which creates the query and calls a method, which makes the actual request (It calls directly the ByteRequest method, there are methods like StringRequest (delivers a string as return value) too).