TL;DR: I want to create a system of classes/interfaces that enable the following:
I'm also assuming that if I moved the IDamageable interface to each item that inherited from Entity it would then be called on the subclasses?
The key components of this is that I need to be able to trigger something to take damage from another script, be it a collision with a projectile or a blast radius trigger, etc.
Please note, I am struggling with how to represent this best, let me know if it needs clarity in an area.
This underlying issue (calling specific subclass methods through cast parent class/interface) is most noticeable in the Projectile collision script.
The two approaches I see involve interfaces or inheritance (or maybe a mix).
entity death or environment destruction), which (to me) requires an interface to make the projectile collision (and other) system easier.
Both entities and environment items can be damageable (ie.
Although interfaces would solve this, I would also wind up duplicating the common code that inheritance helps with.
At the same time, that would enable some entities to take damage differently than others (ie.
As noted in the script comments, I understand that since the Entity class is what implements the IDamageable interface, it is what is returned.
Enemys are basically Entity with pathfinding and simple attacks, but also a more customized death.
Obviously this issue is much deeper than a damage system, but it was the best example I could think of that illustrated this problem.
Entitys all have health (and some other common attributes), as well as a shared but extendable (through inheritance) death mechanic.
I want to implement a damage system that works across both living items (Entity) and environment items (Environment).
While the inheritance appears necessary to copy the similar code between all items from a base class, it does lead to some issues where only the parent class method is called (defined in collision example).
Player is obviously way more complicated than a regular Entity, but also has a more customized death.
But in that case I would have to implement the method separately each time, even if there was duplicate code.
Should the interface be applied to just Entity and Environment, or to each subclass?
How do I properly handle the relationship between taking damage and dying, if one is an interface and the other an overridable base class method?