You have the ability to jump between draw calls and break on Shader switches.
It prooved very efficient when working on a complex code even though it requires a bit of setup.
I have been working mostly with HLSL Compute Shaders for which I have developed a proof-of-concept library available here:
It also shows you error messages communicated by OpenGL back to the application itself.
I have added a trivial example of executable Unit Test on a GLSL ray tracer Compute Shader which you can also find in the Shaderator project's sources under link above.
You can't even do printf debugging, because there's no form of console output.
While it doesn't seem to be possible to actually step through an OpenGL shader, it is possible to get the compilation results.
You could signal that a part of the code was reached by, for example, changing the color of a vertex or using a different texture.
Compilation of GLSL compute shader to C++ looks easier than HLSL.
(This question is specifically about how to debug shader code akin to how one would debug "normal" code, not about debugging things like state changes.)
If your code compiles properly, then you have little choice but to try out a different way of communicating the program's state to you.
It demonstrates on a Compute Shader from DirectX SDK Samples, how to enable C++ like HLSL debugging and how to setup Unit Tests.
Can I look at the execution of the shader on a specific vertex/primitive/fragment?
The Debugger itself is super handy not only for GLSL code, but for OpenGL itself as well.
I'm sure people have come up with better solutions.
When writing non-trivial shaders (just as when writing any other piece of non-trivial code), people make mistakes.
It is a debugger used to be known as "GLSL Devil".
The solution that worked for me is compilation of shader code to C++ - as mentioned by Nobody.
What I usually do is render the data I want to look at as colour, but that is a very rudimentary and amateurish solution.
[citation needed] However, I can't just debug it like any other code - you can't just attach gdb or the Visual Studio debugger after all.
EDIT: For WebGL, I am looking at this project, but I've only just found it... can't vouch for it.
The following is taken from the Android Cardboard Sample.
Which is awkward, but seems to be the only way for now.