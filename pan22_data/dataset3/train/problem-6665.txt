Currently one of my games engines written for a shooter seems to work correctly.
I currently want to generate projectile pools to manage the syncing of short lived projectiles without limiting the projectiles count.
Moreover, adding a heat time before firing, for example the gatling gun that rotates before firing, allows to hide latency between client and server in a networked game allowing them to synchronize.
So here I wonder if generating a system dedicated to projectiles would be a better idea.
But in the future I'll have weapons generating very large amounts of much faster projectiles.
To address things like scatter guns and gatling guns, usually you do not create projectiles.
Then you check intersections with the ray to detect collisions and spawn a hit effects at collision locations.
Physics and collisions are managed by a physics engine where I can register any type of objects (server and client side).
Projectiles are not visible so you just add some fx on top of this to give the illusion of firing.
It has the benefit of being less sensitive to update rate.
Currently projectiles are sparse, travel quite slowly and are synced over network they are generated as entities.