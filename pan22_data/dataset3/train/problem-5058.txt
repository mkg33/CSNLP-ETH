If you want it to match those, change all 3 instances of mp3 to [mM][pP]3
It turns out that the problem is, in a directory with ≥ one MP3 file,
This script performs a test on the folder of every single .mp3 file, repeating itself for each match on the same file.
(i.e., if there is one file, echo the name of the first one ($1)) will give you what you want.
Depending on how many mp3 files you have, this could take a long time (you'd need a pretty huge library).
The awk command removes any duplicate Folder names.
But you’ve got the shell counting the files, and you’re asking find to do the printing
I'm sure someone has a better way of doing it, but this bash command will work on Linux.
(those with no *.mp3 files) is that you’re saying -le 1 rather than -eq 1.
The result is the same, but it'll only check each folder once, which could save a lot of time.
that wildcards that match no files should simply vanish from the command line:
-type d -exec sh -c 'set -- "$0"/*.mp3; [ $# -le 1 ]' {} \; -print
So, I don't want directories with only one file, I want directories with only one mp3 - regardless of subdirectories or other files.
For instance, it checks Music/ArtistA/AlbumB 3 times.
At first glance, the reason why your first command is reporting the empty folders
I also do not want empty directories, or directories which contain more than one mp3.
Why not just let the shell print the filename that it sees?
This looks like it will report directories with one MP3 file or fewer.
I don't want to compile a program on either OS, however.
Another note is that files are case sensitive on Linux, so this will totally ignore any .MP3 or .Mp3files.
directory_name/*.mp3 gets you a list of the MP3 file names,
but, in a directory with none, it remains, literally, as directory_name/*.mp3.
I have a Music folder and the contents look like this: