My problem is that if daylight savings time occurs between GetUTCDate() and @utcDateTime, the @localDateTime ends up being an hour off.
You could write a T-SQL function which does something like this, but then you'd have to implement the date-change logic yourself, and I'd call that decidedly not easy.
For earlier versions a CLR solution is probably easiest.
SQL Server version 2016 will solve this issue once and for all.
Or for a specific DST rule (like US only), a T-SQL function can be relatively simple.
I currently use the following to get a local datetime from a UTC datetime:
A (complex) T-SQL function could use this data to determine the exact offset for all dates during the current DST rule.
Is there an easy way to convert from utc to local time for a date that is not the current date?
However, I think a generic T-SQL solution might be possible.
It will automatically handle the day light saving times.
Unfortunately, there is nothing built-in that can handle this type of conversion, save for CLR-based solutions.
The best way to convert a non-current UTC date into local time is to use the CLR.
For one of the many examples, check out Harsh Chawla's blog post on the topic.
The code itself is easy; the difficult part is usually convincing people that the CLR isn't pure evil or scary...