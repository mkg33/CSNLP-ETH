No, because in your application you could split it into forename and surname still, on the space.
Codd originally appears to have meant that no value is itself a set.
Representing an IP address as "10.0.0.1" vs ARRAY[10,0,0,1] vs 167772161 does not matter for 1NF analysis since all three refer to the same atomic value.
Now let's say you change your table to two columns, full_name and telephone_number, with a primary key on full_name.
In particular, the representation of a value cannot determine its atomicity.
Atomic key is that kind of Primary key which cannot decomposed.which means that this key is not divided further,like Student_ID,Employee_ID.
But you should not have sets (unordered lists) or objects which require application logic to break down.
A value is atomic for purposes of first normal form if and only if:
Now let's make our table id, full_name and telephone_number, primary key on id (which is an integer).
Let's say that you have a table with three columns, forename, surname, and telephone_number.
You declare a compound primary key on (forename, surname).
That is atomic, because the integer cannot be meaningfully decomposed.
Over time and struggling with this issue in operational environments I would propose an intermediate definition of atomicity, one stricter than Codd and without the rabbit hole that Date discusses:
a timestamp is atomic because extracting the year is a special database operation).
In other words, if the database can break out sub-values, that is ok.
This is a useful starting point but "atomic" has no ontological meaning when it comes to databases (something C. J.
Codd tried to formalize the definition as something that could not be further decomposed outside of special database operations (i.e.
These problems generate, more or less, the same data anomalies.
That primary key is not atomic because it is actually composed of two columns.