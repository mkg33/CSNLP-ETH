Finally, rotate the map according to some algorithm to imply random start location to the user.
Then, I generate a graph of the areas so that I can use search algorithms to generate paths through the map.
Start with the shortest path and incrementally block some random edges within your path, and search again.
And it will return a path of cost 5, or the shortest path, whichever has the greater cost.
First, I generate areas using a BSP algorithm, where I randomly divide the map into areas.
I want to force the player to travel through a minimum number of areas before reaching the end, let's say 5.
If no path is available anymore, choose a different edge.
Say that I randomly choose two areas(start and end for example).
So, my question is:  What is an algorithm that I can use to find a path that has a specific cost or cost range?
It is easy to find the shortest path between two areas, but I would like to find a path with a specific number of steps(or path cost).
These area might be next to each other, they might be on the opposite sides of the map.
Try this on for size: Always choose a specific corner of the generated map as the origin, then perform a Dijkstra's path-finding and randomly select a destination from those areas which meet the minimum distance criteria.
I would suggest to incrementally make your shortest path worse.