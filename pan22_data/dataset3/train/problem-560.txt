The overhead for the file contains a lot of common information for every path for that documentation file.
I am looking for a way to improve this database design as it grows and more documentations are added.
I am concerned with performance when searching and uploading data.
It is very long but doesnt need to be indexed or searched.
Splitting it up, it allows me to search for specific areas and endpoints of the documentation and display it, and only display what is selected instead of everything, every time.
I am displaying documentation using Swagger, but the documentations are long so I made a side menu and split up the data in the database.
I am not sure the best way to store this, and currently, it is separated by version of the same documentation but there is a lot of redundancy since a lot of data overlaps from the previous versions.
There are different versions of the documentation so some of the information overlaps.
There is a lot of redundancy right now, and wondering if it can be better.