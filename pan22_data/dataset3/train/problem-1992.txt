Is there a way I can maintain this at a central location?
It fails when you have your code organized in DrawableGameComponents (which I have).
Now while this does work in tutorials where you have all your drawing in the Game.Draw like this:
Members (variables, functions, also constructor), which are common for all components will be in this DGCBase.
Now, technically speaking I could add the Camera as a service in the game, retrieve it in the constructor of my DrawableGameComponents, add it as a field within the Component and then edit the spriteBatch.Begin() within the Draw of each component like it is shown above.
If you care about constructor redundancy, you can create some base class DGCBase, which will inherit from DrawableGameComponent and every component will inherit it.
But as you might already have guessed this is a bad idea because it's basically redundant.
Maybe you can create some functions like BeginDraw and EndDraw (which are part of Game class) and call them in each component's Draw function (at the beginning and end).
But I think that this is not a lot of code to "copy".
And special functions will be in specific components.
So this means for this particular question that you need a Class which knows the Camera transformation and does have a datastructure (the simplest is a array, followed by list or tree) with all Renderables.
Maybe after some time you will want to change it's parameters.
You have components and for each Component-Type you have a Class which does something with the components.
There seems to be the logic to dispatch the Draw and Update methods of all components in the base class Game.