If you need the functionality they offer, then go for it.
So I would go with the easiest version, the responsibility over the lifetime of its attributes has the Entity.
Bugs will come in both version, the difference is the visibility, a good read on it is here.
There is also the legitimate opinion that everything has to be smart-pointer-ed and we don't care about life time management.
It basically comes down to a Fail-fast system vs. a Fail-safe system.
Shared resource management only where it really has to be for instance for Audio-resources, Render-resources etc, but that is the exception.
They will make sure all resources that they need are available as long as they need it.
If some of those resources are shared like Textures, then it makes sense to use smart-pointers for those special cases.
There is nothing special in an ECS regarding memory management and object ownership.
Personally I'm an advocate of the most restricted version, clear object ownership and an explicit lifetime management for objects and memory in C++.
Despite the names, in my experience the first one produces more robust code due to facing errors early and thus solving them is easier and less time consuming when it comes to debugging.
I don't consider performance implications of smart pointers a valid argument in the discussion whether to use them or not.
Each of both paradigms comes with its own set of problems, I will focus on the first one.
This goes for a health attribute as well as for a mesh or sprite or sound.