In previous years, the homework were something like "write a linked list, but do not use the classes in the STL".
What is an interesting exercise where destructors are really needed?
And, of course, it's not a bad approach to the problem.
This way you can teach a couple of useful patterns on the way.
I could easily think of a solution using STL features, that does not require any destructor.
I am teaching destructors in C++ and would like to give the students an interesting homework exercise that requires them to build a class with destructor.
The problem is, for every other exercise that I could think of (e.g, tree, graph, etc.)
I'm not a native of C++, but it seems to me that a Conway's Game of Life simulator, with cells as immutable objects, would be a great way to show the need for a destructor.
One final advantage is that you will also be introducing your students to an important and interesting other algorithm in its own right.
It's easy to give a RAII assignment, just any C style handle that can be released in the end (Like a File handle, windows handle, etc).
Without one, your program would quickly run out of memory.
This, of course, always leads to incorrect behaviors, since the modification of one cell will be used in the calculation of the next cell.
If they are more advanced, you can try and teach about shared pointer implementation and have them attempt that (which could get tricky if you want to go into thread safety, etc.
There are 2 good examples of patterns where the destuctor is a key.
I do not like this - I tell my students that they can use whatever feature of the language that they want, even if we did not learn it in class yet.
All you'd have to do to demonstrate why such an approach is reasonable is to first try the naive approach of modifying the active gameboard to figure out the next turn.