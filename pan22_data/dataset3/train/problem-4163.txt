If, on the other hand, you feel the need to reduce or segment load screens / times or need to use the least amount of memory possible, design a system to allow you to load things at different times.
However, you'll be loading things that may not be required at all, which incurs unnecessary load time and memory footprint.
The trade off basically comes down to efficiency and simplicity.
If you load things as needed, you can potentially yield a better experience, because the user will only be forced to wait for as many assets to load as are actually required, and these loading times may be stretched out over several short periods.
So I would say that if you aren't in a situation that you need to be conservative about memory or long load times that you load everything up front and you won't ever need to worry about it.
Not sure what you mean by loading screens, but I'll try to answer for the general case of loading any asset / data.
You can handle dependencies (for example, a 3d model might depend on textures) explicitly in this case and avoid the complication altogether.
Additionally, you can keep your memory footprint to a bare minimum.
Some or all of this may not be relevant, depending largely on your context.
Just be aware that the latter can come with some obnoxious complications.
Loading all assets up front is very simple because you never have to worry about whether something is loaded or not.