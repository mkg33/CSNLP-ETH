When man in the middle attack is executed in https:// website the warning is only indication of something wrong to average user.
There is nothing special about sending credentials comparing to sending e.g.
Using secure channel indicates programmer intention to secure the transfer.
Otherwise someone could impersonate your bank (for example) by using a self-signed certificate with relative impunity.
The "Trust" in SSL is provided by having a trusted third party (companies like VeriSign and Thawte Consulting) sign the certificate, indicating that they have verified that it is owned by who it says it is (in theory by visiting the IT administrator in person or another method that creates direct trust, although evidence shows that they're actually rather lax about it - all it takes to get a signed SSL cert is often an 800 number and a bit of acting skill).
This is also incorrect, as password fields are special html tags for example.
So, if you connect to a web server that provides an SSL certificate, but it is not signed by a trusted third party, in theory this could mean that you are communicating with an imposter that is pretending to be a server belonging to a different organization.
On top of that the labels like "username" and "password" also betray a lot of their sensitiviy.
Therefore it's very important part of HTTPS security.
I can't comment, so I'll post this information that complements the correct information of user40350.
Most browsers will show a warning like you're about to submit data over an unsecured connection when you first try that, but you can turn it off so it never shows again, and I bet that is exactly what you have done...
One of the original design purposes of the SSL infrastructure was to provide authentication of web servers.
It would be perfectly feasible for browsers to take this kind of information into consideration.
In this case, using self-signed certificate warning is very right thing to do.
The good question is why the partially unsafe encryption is not possible example over HTTP.
Basically, if you go to www.bank.com, SSL allows the webserver that responds to prove that it does, in fact, belong to your bank.
A distinction must be made between a trusted (signed by an authority you trust) and untrusted certificate.
Sending credentials from page to page is basically doing HTTP POST.
People might click on an https link and not even think that someone could be sitting in the middle monitoring the connection.
This stops an imposter from manipulating DNS or using another method to have a malicious server respond.
I personally believe that this system is broken, and that communicating with a server offering no encryption is much more dangerous than communicating with a server offering SSL with a self-signed certificate.
there are three reasons browsers don't act like this is the case:
Search terms via POST.If any post to unsecure page would trigger warning, users would be bombarded by pointless warnings.
There are plenty of people that feel that this system is broken.
Here's the logic behind why your browser will give you such an alarming warning when an SSL cert is invalid:
An in-your-face warning is preferable to a subtle one in this case because the potential risk is relatively high.
In practice, a self-signed certificate generally just means that the organization that runs the server chose not to pay for a signed certificate (they can be quite expensive, depending on the features you want), or lacked the technical expertise to configure one (some small-business solutions offer a one-click mechanism for a self-signed cert, but getting a trusted cert requires more technical steps).
If the indication that the certificate is untrusted is subtle (say a red instead of green icon, etc), then people could be easily fooled, removing the benefits of SSL.