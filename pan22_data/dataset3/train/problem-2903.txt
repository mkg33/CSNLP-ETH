The awesome progress and cooperation that is to be had when everyone can contribute to a project directly can really help developers to learn more about each other, making subsequent projects easier and easier.
If you use SVN or even Dreamweaver's SourceSafe (locking system), you're pretty safe from screwups as long as your web developers know what they're doing.
Worse case, you can always revert VM back to previous backup.
The point is, you cannot have the best of both worlds, but you can have both worlds :) I'm on the side against shared dev servers but I'm going to mentions both below.
If there is concerns about loss of data, you can always run a virtual machine on top of the dev server, do snapshots of the machine and have the developers update code on that VM.
Zones give you operating system level virtualisation.
In a similar situation we took the route of local development but we have an independent stack of our application running just for devs and ops (we call it integration) to deploy and run test against.
Your solution may be "Multiple Shared Dev Servers to meet the hardware specs of the platforms you're trying to be compatible with."
The easiest way to setup a shared dev server is to create an application user, maybe with the name of the project as the username.
Running a local server is a real nightmare for those who are not that much into sysadmin.
That being said - unless (to read: even if) you're Microsoft or Adobe, you will never test "enough" types of systems...
If the hardware is dissimilar, results may (to read: WILL) vary.
At my company we have both shared dev servers and personal local servers.
Because from a hardware perspective, you want to make sure that your live server is going to behave EXACTLY like the Dev server you just tested all your stuff on.
Using a virtual machine does solve the problem of the different OS, but still requires them to be able to manage a server, which is not their specialty.
You did say your devs mostly use Macs and that just makes things worse.
So, i'd say that is a project-by-project consideration.
While I have to spend days to get started and maybe hours on each new project, this has saved lots of time that I would otherwise have to help people with installing and configuring packages.
This user should own all the files related to the project.
It will be helpful to have a convention when committing code using the shared account, such as to include your initials in the commit message, so that you can know which commits belong to which devs.
FOR SOFTWARE DEVELOPMENT: The Teamwork ethic I just preached about is still applicable.
Why not both - develop on their workstation AND test on the shared dev server?
FOR WEB DEVELOPMENT: The dev server should be a PERFECT REFLECTION of the live server the application will reside on in LIVE PRODUCTION.
Still not sure why you need root access, but I'd that's the requirement, zones will give you a solution.
The devs have root access so if needed they can do investigation and troubleshooting but they know the system is transient so at anytime it can be blown away (and I do that as a method of testing my deployment scripts).
Give each dev a zone that they have root access to.
That being said, there are cases where you do need a shared dev server.
Then add the public keys of your devs to /home/<application>/.ssh/authorized_keys and your devs can simply login as that user to do things.
If everyone is sharing a single development server, they are still getting the teamwork and comraderie benefit out of it, but of course with software you do have to consider what platform(s) you mean for it to work on.
It lets me create provisioning code for a Virtualbox virtual machine, and my devs can be freed from maintenance tasks.