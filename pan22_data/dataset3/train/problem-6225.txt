They have plugins for Apache and MySQL to track accesses, processes, and volume.
Try to find the exact times when the system was busy and check out both system and user crontabs and webserver access logs.
How to tune a Linux server, running Apache, PHP and MySQL would fill at least 4 large books - and there is no magic solution.
This will be very useful as you start making changes, tweaks, and tuning the applications, as you'll have better feedback on what's working.
Munin, or something similar, will help give you some current baselines for what your system looks like.
It would have been helpful if you'd provided the apache config (less the comments).
System metrics are good for telling you how the performance of a system is constrained - NOT what the performance actually is.
InnoDB has buffer set up with innodb_buffer_pool_size and MyISAM uses key_buffer.
It will collectl over a couple of hundred performance metrics every 10 seconds at <0.1% of the cpu.
Then, you can start digging into the more specific places, and improve the MySQL performance, and the Apache performance, and anything else running on the box.
The details you've provided from your system are very contextual - assuming that you're webserver is setup correctly, they suggest that the CPU usage is mostly down to mysql - but if the webserver config is wrong then the opposite may be the case.
You need a longer-term picture of fine-grained data that you can drill down into to see what's really happening.
It will also take a snapshot of process data every minute since that's a heavier weight operation.
Looking at brief and/or incomplete pictures of what the system is doing ain't going to get  you there.
The only thing you have to do after dropping it in is add an entry for the host to the config and make sure the plugins you want are enabled.
Once you've sorted out the database, the other things to check are that you are compressing all html, javascript and css (mod_gzip) and PHP generated HTML (output buffering).
The best thing about Munin is that you get a lot of information for almost no work.
Prioritize the URLs with the highest totals for optimization.
Try setting the threshold to 0 and write a parser to strip the parameters out of the queries to identify which ones really are slow.
Propably your table are growing with time and you're losing on the mysql buffers.
As one might guess from some of my previous posts I run collectl everywhere.
However in my experience, most of the performance problems on LAMP stacks are poorly written database queries.
Do make sure you've got an opcode cache running (like APC).
And do make sure you're serving all your static content with sensible caching info.
It's a very simple system monitoring app that collects data and presents it as graphs.
What does the box look like during those time periods?
Download/install the rpm from sourcefore and '/etc/init.d/collectl start' and you're done.
You can then play back the collected data in a variety of formats or even plot it with a web-based tool called colplot, which is part of the collectl-utils package.
Start recording %D in your apache logs, and analyse the results to find out how your system really is performing.
Installation and setup is a 5 minute job if you do it manually, and a 30 second job if you are using Debian/Ubuntu.
Try to find out if your tables are of type MyISAM or InnoDB and tweak buffer settings accordingly.
You have discarded this as a possible contribution to what you perceive as a performance issue - I'd recommend you go back and have a very long look at this.
As the tables grow the same queries that were previously fast work slower and slower.