TOTAL: 25 MB vs. 106 MB - and that's just on a single table!
Typically, an INT with 2+ billion rows should be sufficient for the vast majority of tables - and compared to a GUID as the clustering key, you can save yourself hundreds of megabytes of storage on disk and in server memory.
This can be anything, really - an INT, a GUID, a string - pick what makes most sense for your scenario.
Yes, I know - there's newsequentialid() in SQL Server 2005 and up - but even that is not truly and fully sequential and thus also suffers from the same problems as the GUID - just a bit less prominently so.
2) the clustering key (the column or columns that define the "clustered index" on the table) - this is a physical storage-related thing, and here, a small, stable, ever-increasing data type is your best pick - INT or BIGINT as your default option.
I agree with Maess - if you have distinct entities, each of those ought to have their own ID columns.
Quick calculation - using INT vs. GUID as Primary and Clustering Key:
1) the primary key is a logical construct - one of the candidate keys that uniquely and reliably identifies every row in your table.
But I have a strong objections against using GUID's for your primary keys - or more specifically - for your SQL Server's clustering keys.
What I'd strongly recommend not to do is use the GUID column as the clustering key, which SQL Server does by default, unless you specifically tell it not to.
I've personally seen massive performance gains when breaking up the previous GUID-based Primary / Clustered Key into two separate key - the primary (logical) key on the GUID, and the clustering (ordering) key on a separate INT IDENTITY(1,1) column.
By default, the primary key on a SQL Server table is also used as the clustering key - but that doesn't need to be that way!
As Kimberly Tripp - the Queen of Indexing - and others have stated a great many times - a GUID as the clustering key isn't optimal, since due to its randomness, it will lead to massive page and index fragmentation and to generally bad performance.
GUIDs may seem to be a natural choice for your primary key - and if you really must, you could probably argue to use it for the PRIMARY KEY of the table.
Some more food for thought - excellent stuff by Kimberly Tripp - read it, read it again, digest it!
Then there's another issue to consider: the clustering key on a table will be added to each and every entry on each and every non-clustered index on your table as well - thus you really want to make sure it's as small as possible.