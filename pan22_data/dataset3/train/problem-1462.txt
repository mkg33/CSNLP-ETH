The not so obvious ones are packing added by the compiler to the object.
Not sure what m_buildingQualityDecimals is used for or why it is useful.
What you should do is ask the class to serialize itself to the stream.
Problem 2: Floats are not represented the same on all platforms.
The stream will flush itself automatically when it needs to and thus forcing a flush is only going to make it less efficient.
What you should do is ask the object to serialize itself to the stream.
If you are worried about the exactness of floating point then you should retain the data as a string or integer (depending on the situation).
The only difference between the two is that std::endl also flushes the stream.
Geter methods break encapsulation and expose the internal types of the object.
Assuming all the above is handled and does not change.
This makes this code impossibly brittle to change.
Humans are notoriously bad at making this decision; the code is actually very good at.
So in most cases normal variables are a preferred and if you must dynamically create an object then you should be using a smart pointer so that the ownership semantics are specified.
Is a bit more complex that what you have implemented.
So just because you serialize the memory occupied by an object does not always mean you get all the data that belongs to an object.
So it can optimally serialize itself to the stream.
That way at least you avoid the issues with packing introduced by the compiler.
You have serialized the content of the memory that is occupied by an object of type Building.
Again you are providing geter methods to access the member and retrieve values that you then use to perform an action.
The problem is that they do not show ownership semantics (the owner of a pointer is responsible for calling delete on it).
Problem 1: Integers are not represented the same on all platforms.
Using pointers is very C like and its not done much in modern C++ (unless you are implementing a container class or smart pointer or trying to do some tricky low level optimization).
Changing the compiler or even just the compiler flags can change both the packing (and thus alignment) and the size of the object.
This is usually not the case (think of a string, most of the data is at the other end of a pointer).
Which is not quite the same as binary serialization of an object.
There is even a standard idiom for this in C++ and it is called the output operator.