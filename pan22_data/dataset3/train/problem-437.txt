Promises from a vendor that they will help customize for free are useless.
For example, it takes about 20 SNMP requests to get information about a single thread.
I used a product by Castle Rock called SNMPc - its not the most polished of tools, but it does everything that you could want and wont break the bank.
Promises from a vendor that they will sell you expensive customization services are useless - you can't trust that they will do so competently.
Failure to have well-synchronized clocks is a common problem.
You pay for front end collation and trigger on events to make SNMP useful.
It can be a bit of a chore getting it to work the first time though.
Usually issues like this are ignored, as long as pretty graphs are produced.
We had tried Nagios about a year ago & ran into configuration issues.
SNMP-based, open source, integrates with everything from Cacti to RRDTool.
Understanding the difference between trending and error alerting is important.
But nothing is so important as this - no matter what monitoring/trending/alerting solution you buy, it will have a significant cost to set up and customize for your environment.
There is no solution available that makes the setup/maintenance cost significantly lower.
A good monitoring system I prefer is a one that is web-based, no-agent needed, and SNMP-based one.
Its basically an SNMP statistics collation tool, that can baseline and warn if baselines are deviated from.
You'll need to spend time configuring and building custom reporting scripts, but to be honest that's the case for the commercial tools as well.
Failure to save disk performance stats in a reasonable manner is a common oversight.
It can easily be a full-time job for the care and feeding of a monitoring system in a larger shop.
The fact that a serious business should spend the money on a GPS clock of their own is often missed.
Basically you need to make sure that a person will respond to alerts, that a person is accountable for alerts they acknowledge, and that an alert will be re-sent via another pathway or to another person if it is not acknowledged.
On a system with a million threads that needs polling once per minute, that's 20 million packets per minute for monitoring!
Extensibility of SNMP is quite easy too (at least on *nix)
On the other hand, the developers need to be involved in a discussion about what aspects of their software to monitor, so a convenient method of exposing this can be designed.
A common failure is to keep purchasing new monitoring systems, leave them in a default setup, and allow it to be useless.
We've recently begun evaluating Zenoss with various Nagios plugins.
Anything that relies on SNMP to monitor servers is a failure.
I also recently ran across an infoworld article detailing some open source monitoring tools that are quite valuable.
I am actually not so in it to monitoring system but is always interested, so thanks for bring this up and I will be checking closely.
I previously used one from ManageEngine (http://www.manageengine.com/products/opmanager/index.html), and quite like it.
Of all the monitoring systems I have used, SNMP kept supplying what I was asked for, and within the budget I was given.
If people are receiving bogus alerts that prevent them from treating pages seriously, the monitoring system needs to receive attention.
Nagios used to be a smaller, lower-end system, but I'd say that the most recent versions have truly been "enterprise class".
Polling remote devices can be done by using a collection agent - same sort of thing as the console, but without all the reporting wizardry - that then pushes the stats at the central console periodically.
You can do it with open source software, but I wanted a modicum of commercial support.
Regardless of how the data is retrieved, many common problems require sub-minute or even sub-second polling to understand.
Price tag can run to US$millions for licensing and implementation consulting, which is a requirement.
Reporting errors in syslog is important, as is having a mechanism to identify new types of errors even if it is not timely.
Often monitoring tools meant to monitor switches/routers will get per-CPU statistics via SNMP for a server, and report the data prominently.
I realize a million threads is a lot and not everyone needs per-minute polling, but it's also not unreasonable and many people need more.
(there's no legitimate reason why I can't pull this data down in a structured way in one system call, and I shouldn't have to deal with conversion of the data to decimal in the kernel, and from decimal in my application, along with other silly overhead).
For example, if a user complains about sub-second freezes (or, if a customer complains that their transactions that normally take 10ms occasionally take 200ms), sub-second polling of all process/thread statistics is useful.
Many people don't want to hear that per-CPU statistics are not what they want and that per-thread statistics are.
The fact that improper NTP configuration can mean you don't know how synchronized two clocks are is a common problem.
SNMP is free - there are 3 levels; all to do with security.
They may be under pressure to add features and not consider reliability or alerting of problems.
It doesn't save all the data that iostat does, which can make understanding a storage bottleneck guesswork.
Because there are so many counters and statistics that you can pull, it can also take a while working out which ones are right for you - but once this is done, its very straight forward.
Luckily the Linux sar can sample data at 1-second intervals with no problem.
If you have critical custom in-house applications and your developers refuse to add instrumentation, logging, and other assistance for monitoring to their application, you have a problem.
Beyond that - My experience is limited to SNMP, MOM, and Spotlight (by Quest) which was awesome and a bit too far beyond our budgetary range for all but the most critical of Oracle Databases.
For companies involved in NASDAQ trading, I point to the regulations, write up an explanation for our customers about what time accuracy to expect (they frequently ask), and when asking for approval of this explanation, describe what setup we need to obey the regulations, obey our promises to our customers, and troubleshoot problems with vendors that rely on time synchronization.
There are fundamental issues with SNMP making it impossible to properly monitor a server.
No matter where you are in the spectrum, monitoring software will require an investment in your time.
We had also debated about "The dude" but wanted a *nix based server.
I've told development managers that the data they're looking at is useless, that we're only doing it to satisfy a mandate to produce pretty graphs, and they were OK with that, and continued to ask questions about the graph.
It can be given thresholds for growth and decline warnings and works well with any SNMP capable device.
At the high end you got HP OpenView, IBM Tivoli, CA Unicenter and many others.
I've seen this ignored because it allows for the purchase of extra memory - quite beneficial in a financial environment where a busy day could result in 3x normal memory usage and where management refuses to size for those peaks.
Sadly, few kernels provide a reasonable mechanism to do this.
Traverse (was NetVigil) is a commercial tool that is bigger than "old Nagios" and on a par if not slightly better than current Nagios.
Enabling SNMP in *nix is simple, as it is within Windows.
The fact that NTP is always required is missed on many people.
Basically, negligent developers who don't care about the operational aspects of their software.
There is a product for Microsoft Servers called MOM 'Microsoft Operations Manager' where the 5 server workgroup version is (or at least was) free... but extending it to keep an eye on enterprise systems such as Exchange and SQL could cost a lot in licenses and connectors.
Data can be polled from the devices (normal) and on critical systems, you can get the individual system to send a trap event notifying the trap manager that something went wrong, and they need to know now, and not wait for the next poll period.