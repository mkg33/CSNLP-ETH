There are also other use-cases that can be optimized with the new types like parsing or formatting.
Unfortunatelly we cannot use this type here becuase
After that, they are expected to make their way into the .NET Framework.
But if you think you will like it then, you can leave your future vote anyway ;-P
So, we finally can use the new [ReadOnly]Span<T> and [ReadOnly]Memory<T> types.
and we need something that we can use for IEnumerable<T> to enumerate paths.
This can be use just like a Span<T> so we can put it inside IEnumerable<T> and rewrite the method for enumerating paths like this:
The components necessary for the changes I describe here are not released yet and the new features are still in beta but they are very interesing and worth trying.
String slicing might be in some scenarios a very expensive operation so it's good to know that there is a new feature that can significant improve its performance, when necessary.
One of the APIs that makes it so useful is the Slice method that is like a Substring for string but without copying anything.
It concatenates the results of EnumerateFiles and EnumerateDirectories and returns them as ReadOnlyMemory<char>.
I will write it in a couple of weeks or months when the new System.Memory package is official.
With it, we can create any relative path we want without copying strings:
In order to get the relative path, we neither use the Replace nor the Substring methods but instead the Slice:
but the most import point against it in our use-case is that
This review if from the future so you don't see it right now, it isn't there yet ;-)