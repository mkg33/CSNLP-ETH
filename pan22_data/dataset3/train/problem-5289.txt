An alternative implementation without the break statement could be based on the previous suggestion.
There is no penalty in any way for long identifier names.
If you want to apply the extract method refactoring to this last for loop you get the variable var as a parameter to the new method.
But even there you should use more problem oriented names to support your readers, especially in nested loops like this:
This means that you either have to choose another character which is not so obviously connected to the purpose of the variable.
the running index of loops is usually held in a single letter named variable like i in
You should introduce constants with meaningful names:
You are using an legacy pattern to ensure the existence of the  the course in the map to the list of its prerequests.
The problem with that is that it confuses your IDEs automated refactoring feature.
This principle states that a method (or class) should either do simple/primitive calculations or (exclusive) call other methods (on other objects).
And/or you have to "reuse" variable names in different contexts.
Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.
This will be the first node and who doesn't have any prerequisite.
You should do this with the the for loop above too:
You may have found that or have been told to use it.
Using them leads to code that is both, hard to read and hard to maintain/refactor.
There is nothing wrong with procedural approaches in general, but Java is an object oriented (OO) programming language and if you want to become a good Java programmer then you should start solving problems in an OO way.
You might find them being obvious today, while you're actively dealing with the problem, but You might have to "relearn" them if you worked on something else for a while.
I have used topological sorting to solve this problem.
So, for every node I am calculating in-degree and picking the lowest node whose in-degree is zero.
Finding good names is the hardest part in programming, so always take your time to think about the names of your identifiers.
In all you methods you define all variables right at the top of the method.
On the other hand in Java the length of identifier names names is virtually unlimited.
After that I am decrementing the child node in-degree and then repeating the same process until i am out of nodes.
Your code is a procedural approach to the problem.
As usual there are some exceptions for this suggestion.
If you don't care about OOP you should look for a different programming language that better supports procedural or functional approaches.
https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfAbsent-K-java.util.function.Function-
If you'd move the declaration of variable var right before the loop you could include this line in the selection and the new method would not have this extra parameter.
This are literal values with a special meaning like here:
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]
There are a total of n courses you have to take, labeled from 0 to n - 1.
Both makes your code hard to read and understand for other persons.
break (as well as continue) are javas substitute for goto.
:  Your variable var is only used in the last for loop in findTotalCourseInOrder().
But keep in mind that you should not use underscores in your own identifier names (except constants).
You should not use break outside of a switch block.
There may be multiple correct orders, you just need to return one of them.
So don't be stingy with letters when choosing names.
If it is impossible to finish all courses, return an empty array.
In that modification the value returned is the result of the for loop.
Since the number of characters is quite limited in most languages you will soon run out of names.
Your class name violates the Java naming conventions.
The last line in your method findTotalCourseInOrder() is the call to findOrderInSeries() which let me assume that you already know how to extract a bunch of lines to a separate method.
(keep in mind that you are  that other person yourself if you look at your code in a few month!)
You have variable names like map, k (as for key) and v (as for value).
But you should always look at the API of the class or interface you use if there is a better solution.
Choose you names from the problem domain, not from the technical solution.