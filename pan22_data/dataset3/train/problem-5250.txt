These days we have z-buffers so the need for convex leaf nodes isn't really that important, in some ways its better to render front-to-back also to take advantage of early-z optimisations on hardware.
This article says that binary space partitioning divides the map into convex polygons.
BSTs need a criterium to propagate the search through itself.
It is absolutely imposible to create a concave polygon (or polyhedron) by dividing space in halves.
By having a BSP with only convex geometry we guarantee that each leaf node will not have any ordering issues with the polygons contained in them, the BSP traversal algorithm itself can then produce a depth-sorted node list for you.
Before GPUs were popular we rendered without using Z-Buffers and instead used polygon sorting to make sure things were drawn back-to-front correctly.
Well, BSP is an application of a Binary Search Tree (BST)
Why should non-convex polygons be partitioned into convex polygons?
Put simply, the criterium used in BSP is in which side of a partition a point is.
I dare you to try, you will see that it cannot be done