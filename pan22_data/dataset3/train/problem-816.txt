If you wanted to be able to take the sine of a number, you would have to be able to write a function that approximates the sine of a number while only using the operations mentioned above.
Using different compilers, or the same compiler with different settings, or even different versions of the same compiler, can all break determinism.
Have the clients send the configuration to your server, let it perform the simulation (or retrieve a cached one) and send back the results, which are then interpreted by the client and processed into graphics.
Writing software to model such a system consistently, on any computer hardware and software the user might have, is close to impossible - even if you have a budget big enough the test the application on every likely combination of hardware and software.
I'm not sure if this is the type of answer you're looking for, but an alternative might be to run the calculations on a central server.
If you are going to try to roll your own stuff, a few things that can help:
If you make the physics itself behave in a stable manner, a computer model of it can also produce stable results, at least in the sense that rounding errors will be irrelevant.
I work for a company which makes a certain well known real-time strategy game, and I can tell you that floating point determinism is possible.
The tradeoff is that you instead will have to deal with some math.
But if you want to deal with more complicated computations (possibly trigonometric functions for example), then you will have to write such functions yourself.
If the objects in your game don't look like bricks, then hide that fact with some "non-physical" graphics - for example literally hide the instant of collision behind some smoke or flames, or a cartoon-text-bubble "Ouch" or whatever.
The best way to fix this is to attack the problem at its source: make the physics of your game as deterministic as it needs to be to get reproducible results.
You can force a deterministic behavior if you know precisely how the computations will be performed.
It is easy to construct simple mathematical systems (using only addition and multiplication) where the result after N steps depends on the N'th decimal place of the starting conditions.
The alternative is to try to make it deterministic by tweaking the computer software to model something which is not what the physics specified.
The problem is that you have introduced several more layers of complexity into the system, compared with explicitly changing the physics.
As a specific example, suppose your game involves collisions of the rigid bodies.
Even if you ignore friction, the exact modelling of collisions between arbitrary-shaped objects which may be spinning as they move is in practice impossible.
The player has to discover the game physics by playing the game.
If you need crossplay between platforms or game versions then I think you'll need to go fixed point - the only possible crossplay which I'm aware of with floating point, is between PC and XBox1, but that's pretty crazy.
For example, if the only operations you deal with are multiplication, division, addition and subtraction, then it would be sufficient to represent all numbers as just a rational number.
Here's a video of a real device whose behaviour is intentionally unpredictable, except in a statistical sense:
Or multiple ones, but then at least you have the option to make sure they have the same hard- and software configuration.
A physical system can be completely deterministic, but impossible to model for a useful time period because its behaviour is extremely sensitive to the initial conditions, and an infinitesimally small change in the initial conditions will produce completely different behaviours.
To do this, a simple Rational class would do just fine.
But if you change the situation so that the only objects are non-rotating rectangular bricks, life gets very much simpler.
This is all doable, and in my opinion circumvents much of the hairy details in other answers.
It doesn't matter if it is not "totally realistic" so long as it is self consistent, and similar enough to common-sense experience to be plausible.
Of course, this shuts off any plans you might have to run the client in offline mode, and depending on how computationally intensive the simulations are you might need a very powerful server.
You'll need to either find a physics engine which is fully deterministic, or take an open source engine and make it deterministic, or roll your own engine.
Off the top of my head, I have a feeling that Unity of all things added a deterministic physics engine, but I'm not sure if it's just deterministic on the same machine or deterministic across all machines.
A real-time simulation might be hard but not impossible (think of live video streams - they work, but with a slight delay).