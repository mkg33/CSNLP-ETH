Again, this is a function so we're not limited to a single query to return the desired result.
Then I added an additional WHERE clause that limited the results to only December or June.
So, if the contract expires on 6/1/2016, after that date, the contract again comes up for expiration on 6/1/2017.
Each contract expires on a certain date, and then each contract has an expiration type that determines what happens after that primary expiration date.
I am working on a function for our database that contains contract data.
If it expires on 12/5/2014, it comes up for expiration again on 6/1/2015.
The query above returns 12/1/2016, which is correct.
However, I have one expiration type that says after the initial expiration, the contract again expires the next June 1 or December 1.
So, if the contract initially expires on 10/1/2015, the contract comes up for expiration again on 12/1/2015.
My query that handles this expiration type is as follows:
I guess stepping away from the problem last night allowed me to think about it differently this morning.
I used trunc to get me the first day of whatever month was passed.