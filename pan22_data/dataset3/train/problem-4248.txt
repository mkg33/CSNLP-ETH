I'm not sure how useful these different stack traces are.
However, it will give you more information about what object you were trying to access, which makes debugging easier.
Doing so allows deallocated objects to be kept around as 'zombies' for debugging purposes.
Accessing a zombie will still result in a EXC_BAD_ACCESS.
If that doesn't help, the next step is to have Xcode analyze your project.
However, keep in mind that your code is crashing; don't be quick to convince yourself that you are right & the analysis tool is wrong.
The first thing to do is try to narrow down why EXC_BAD_ACCESS errors are occurring.
You can check for this in XCode by enabling zombie objects.
We haven't been able to reproduce this problem, so we aren't sure what we can do about them other than do a new release with new builds of the asset bundles and hope that they work.
A common cause is attempting to access a deallocated object, also known as a dangling pointer error.
For reference, here are some of the places where it has crashed.
These are warnings about things that may need attention.
Note: sometimes the warnings will not be applicable to your particular situation.
There's nothing specific to our game in the stack trace.
Turned out this was a Unity bug that they have fixed in the latest Unity update.
We recently released a game on iOS and Android, and a bunch of crash reports have started coming in on iOS through Crashlytics that appear to be due to problems with shaders in asset bundles and other asset bundle problems (such as loading models, textures, basically anything and everything in an asset bundle).
One approach is to filter through the issues & their linked code looking for things that seem most relevant to the problem at hand.
Is there anything we can do to try to resolve this problem?
If time / resources permit it might be better to go through them and address/correct as many as possible.