When I was looking how to implement fog under OpenGL ES 2.0, I have found link to OpenGL ES 2.0 backward compatible project implementing functionality, which is not in OpenGL ES 2.0, For example fog, per vertex, per fragment(pixel) shading.
The same is generally true of performance -- performance tradeoffs with respect to accuracy and quality over instruction count or pipelining tend to be rooted in application-specific requirements.
At least thats my experience with my iPhone 3GS, which features the same gpu as the iPhone 4 but has less pixels to do deliver data for.
Shaders of any complexity aren't generally the kind of thing you can download and drop in to your project like interchangeable cogs.
This also means that fullscreen effects, especially on devices with a high resolution display tend to be slow.
Since they are all designed to work with GPUImage, they all share the same structure, so if you adapt the same structure in your application/game you should be able to quickly import a number of different effects.
You can also take a look on these great tutorials by lighthouse3D
Take a look at GPUImage (https://github.com/BradLarson/GPUImage), its probably the most complete collection of shaders I have found on the web so far.
As a result there really isn't much in the way of the kind of repositories you are thinking of.
Not much, but at least a couple of basic shaders to get started with can also be found between my open sorce engines files:
On current mobile hardware, you should do as much as possible within the vertex shader and the trick for great looking and fast games is to write many very specialized shaders doing always just exactly what is needed to make something look the way it is meant to.
The GPU Gems books offer a good collection of cookbook-style descriptions of techniques with both game and shaded code examples that you may want to take a look at, though.
the .vsh files contain the vertex shaders and the .fsh files the fragment shaders, but I guess thats selfexplaining...
Typically the more interesting effects require a fair bit of coupling to the CPU-side rendering subsystem in order to achieve their results.
This is most probably already much better with tegra 2 and even better with apples A5 chip, but for now, this means that you should not try to port shaders for desktop gpus to mobile phones and expect a great performance :P
I have been implementing per fragment lighting too, modifying this example created by ClockworkCoders (not OpenGL ES 2.0).