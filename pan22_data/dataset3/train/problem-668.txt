Creating an encoding for the name a la C++ only slows down reading and causes devs to mentally skip it anyways.
Bottom line, your name should denote exactly what it is referring to.
should provide highlighting that makes the difference between class variables and parameters distinct.
I have found most Java coding standards I have encountered seem to prefer (in the constructor) the use of
If you have access to a copy of "Clean Code" it has a chapter called "Meaningful Names" that I agree with.
Personally I use the most natural names for member variables.
I commonly use different names in situations like this
To avoid ambiguity between class data and parameter's passed into a method I usually use one of the following naming conventions for data members: m_parent and m_children (prefix m indicates member), parent_ and children_, myParent and myChildren.
First of all, the names of the input parameters are what will show up in javadocs, and therefore should not have any prefix or silly names that will make the javadocs cryptic.
Second, if the input parameter names clearly define what the things are, then why name the global variables something else that will make the rest of the code less meaningful or more difficult to maintain?
My take is that what you have should be the preferred way of doing things.
I like distinct names for all identifiers (overlapping names lead to easier mistakes).
Can't get that wrong as each identifier is unique.
If the two variables represent the same thing and have no other meaningful name, then the this keyword is the way to go.
Third, the scope of the input parameters is so limited, that it seems to me that you would rarely find this to be error-prone, especially when simply initializing class data.
Personally I dislike this (but always stick to the coding standards) as it it feels more error prone.
If you're worried about typing the extra characters for this you can consider the coding style used in C++.
I would start with your first instinct of giving them different names, but only if the different names make sense.
For things that are going to happen less often (like parameters in constructors) I shorten them or add p_ depending on context and which is the most appropriate.
I also think that distinct identifiers make it easier to spot (for humans) trivial mistakes.
This is because these are the ones you are going to use the most often (thus I dislike the m_ prefix).