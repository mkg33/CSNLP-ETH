(The default name/location of the PID file can vary between different operating systems.)
I choose not to duplicate (or try to complete with) Martin Prikryl's better multi-solution answer, which doesn't involve changing sshd_config file nor reloading the service.
Note that this might not stop any currently-running sftp sessions (and modifying the binary file on the disk might also not do that), so make sure that's handled before you move onto your sensitive can't-have-sftp-running process.
Note that disabling sftp on a system-wide scale is probably unideal, as sftp then becomes completely unavailable for all other possible tasks (both using the current design, and the future design).
(Make sure it's the parent: SIGHUPping another sshd service may kill a connection.)
SIGHUPping the parent will cause sshd to reload the configuration file (because that is how sshd was designed).
You could change the sshd_config file, but not reload the service.
However, for the sake of education/familiarity, I will share another option.
The easy way to identify which process is the parent may be to use a PID file.
The better design (retaining long-term flexibility) is probably to control the "write" permissions of certain data (as noted by the first solution of Martin Prikryl's better multi-solution answer).