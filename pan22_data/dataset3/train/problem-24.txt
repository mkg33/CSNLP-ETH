Example: When new data is entered in a table1, all data from table1 is sent to staging table table2 with status NEW, where one of the above Windows processes is assigned to each row.
Reference: https://www.andersrodland.com/working-with-odbc-connections-in-powershell/
Afterwards, you will be able to kill those hung processes by using Stop-Process cmdlet.
Sometimes, a Windows process would be assigned to a particular row but no data is moved between databases.
We have a Windows service which spawns a number of the process which we can see via Task Manager, this process moves data from one Database to another database.
As if now we have an alert system where we get a mail if a row is in NEW status in table2 for more than 30 minutes.
All windows process have same name like below,we differentiate with PID
This code snippet could be used as a starting point:
Once it's killed a new process will be spawned and records will be moved between database.
By creating an ODBC data source referencing the database, you will be able to identify hung processes from a Windows PowerShell script automatically.
So when data is successfully moved to different database the status is Table2 for a particular row is set to DONE.
For detailed requirements, please check the following page: https://docs.microsoft.com/en-us/powershell/scripting/install/windows-powershell-system-requirements?view=powershell-3.0
I believe you can use Windows PowerShell to create a scheduled task that discovers hung processes and kills them.
When we receive the mail, we check the PID and kill it via task manager.
I would like to know if there is any Tool to identify if any process is found stopped or hung, We come to know the process is hung only when we check the Database and find many rows assigned to a process id ,normal it would process in seconds
For example, in order to kill a process whose PID is 12345, issue:
I have checked Resource Monitor, but since there are a lot of processes it takes the lot to time to identify which process is hung.
You will need to install Windows Management Framework 3.0 or newer in order to run PowerShell scripts.