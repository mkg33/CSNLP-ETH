I wanted to add my $0.02, as I implemented a prototype bullet-time mode that worked in multiplayer games for Heroes Over Europe.
Specifically, when bullet-time mode was triggered, a sphere was created around the target airplane.
Nearby players could see planes and bullets dodging one another in slow motion, but were otherwise unaffected.
Airplanes, bullets, missiles and other effects each used an individual dt that was worked out by calling the appropriate function.
Imagine one player flips to slow motion, what would the other players see?
Those who are close are slowed down but it would be obvious that somebody is using the power up (I would suggest highlighting the player somehow who is using it so that opposing players fully understand what is happening and why).
There is only one view of the physical state of the world and therefore only one reference point.
I know this is an old question but I had a hard time not mentioning the issue with most of the answers dealing with relativity
So at some point you'd need to "skip" 2 seconds of game time, or spend a bit of time running faster than normal, or something else that would probably make the bullet time kind of a waste.
Many people have used "Player A's reference vs Player B's" in your answers but sadly neither of those things really exist.
(Similarly, when the effect was to end early, a packet would declare the future time at which it was to end.)
I didn't want to slow time down globally in multiplayer to replicate the feature (as the game was to support 16 simultaneous players!
Perhaps you should arrange the equipment necessary to shoot the player at the PC who triggered bullet-time into space at near light-speed velocities.
This makes it so that the player moves at full speed while those closest to him feel slowed down.
I think the best solution is similar to one already given which is to have a braid like effect where your speed is changed in a bubble around the player.
Since the same time passed for everyone in reality, you'd have to "gain back" those two seconds in-game somehow.
This was synchronised across machines by sending a packet which defined a future start time for the bubble; this allowed the effect to stay in sync in spite of latency.
But unfortunately everyone playing the game will be playing the game in the same real-time.
This would solve all of your problems but may generate higher ping/latency.
Yes you have players, maybe even many of them, and yes they can control and interact with their world and have their own perspective of the game, but perspective is not a point of reference in time: it's just an X Y Z space projected into the X Y plane.
The rate also changed as a function of how long the sphere had existed, and how long the sphere had left before it "evaporated".
The reason for with is how relativity works; some of you here have mentioned it and obviously understand relativity, but the issue is that your models are set up incorrectly.
In single-player, a button press at the right moment would slow down time, and zoom in on your intended target.
Without even looking at the problem of time dilation, imagine that you're the player who just spent 4 seconds in bullet time, whereas everyone else in the game spent 2 seconds in real time.
To have one player view a simulation run at one speed and another view the same simulation at another speed and not have a desync just isn't possible.
Implemented with the effects as described in the question, bullet time in multiplayer is not possible.
You'd want them to see the bullet time player moving normally but having lightning reflexes, right?
To make the effect work, several game systems had to be adapted to this "functional" definition of time.
Any effort to have multiple simulations or have the server run ahead of the clients just doesn't make sense.
The rate of passage of time was always functionally defined: given a sphere's definition, the current time and a position, it was possible to determine how fast time was flowing.
Another player could attempt to kill you (or kill steal!)
There are work arounds which would result in players having a similar advantage (one of being able to move faster etc) by for example slowing everyone ELSE down and letting you move normally (then in a replay you could speed them to normal and you'd be reacting fast) but I don't think that's really what you want.
Most of the work in getting the prototype working was spent here.
The rate of passage of time changed depending the distance to the sphere's centre; time degraded linearly from its surface to a minimum value somewhere near the centre.
The result worked reasonably well: a player targeted by bullet-time would noticeably slow down, and have a (small) chance to manoeuvre their way out of their aggressor's cross-hairs and away from a hail of slow-motion bullets.
Also it would be fairly annoying to have the game slow down all the time when anyone pushed that button.
That being said, the player would not slow down and the bubble would always be positioned and moved with him at the centre.
in this state, but their plane (and their bullets) would be affected when entering the bubble, giving you time to escape.
(Single player still kept the feature, as "Ace Kill".)
Plus, there's the whole bit about having to send what you do at at 2 seconds in your time back in time 1 second to everyone else.
Therefore the only way of doing it would be to slow the whole game down, getting rid of any advantage it brings as everyone would be in bullet time.
Unfortunately, while it worked, we never had time to complete and polish the feature for multiplayer, so it was dropped.
There is only a single point of reference of time and that is the server (or host).
He gets his power up advantage and people far from that area don't feel effect.
What players see on their screen are different graphical views of the same physical simulation.
The effect as described in the post just can't be done without either forcing the single reference point or letting thinks become desynced and telling players that their actions didn't really happen after the fact.
Note that the triggering player was also slowed, but wasn't strictly disadvantaged by it: they had a zoomed-in view of their target and could affect one-shot kills on their prey.