This is up to you, but a jump in the font size is ugly in my opinion.
Or as the code is easy to understand, you can just say why you're using a magic variable.
\text{font_size} = \text{width} * (\frac{\sqrt{\text{length}}}{\text{length}}) ^ {1.6}\\
I know there are libraries like PGU, I do this to improve in programming.
However, I am looking for advice to improve this function that looks wobbly:
I came to this result, it's close enough to what I want.
I wouldn't use a doc-string as the implementation details aren't needed by the end user.
I assume that length is the width of the text in pixels, this could be renamed to text_length to make it clear it isn't referring to the button itself.
That way we know the maximum is \$\text{height} * 0.9\$ rather than \$\text{height}\$, and makes the font_size not jump.
In order to practice my programming skills, I am trying to implement a Button class, to use in pygame.
And if you want to keep your description I'd use comments.
One improvement I would suggest is to add a docstring which explains what the three arguments are and what the function returns (so that people can tell what it does without having to see the example picture).
I spent a bit of time creating a function to find a good font size for the text inside the button, depending on the length of the text and the dimensions of the button.
If we look at the affect of not using min and using min:
\text{font_size} = \frac{\text{width}}{\text{length}^{0.8}}
Also, if the button has no text then length will be zero and so the first line will throw a ZeroDivisionError, so you might want to catch that and return some default value.
After this we're left with your if, personally I think using min would be better here, min(font_size, height * 0.9).