a problem arose over time as more and more Windows system services started to run as Network Service.
The Windows operating system provides a feature called "virtual accounts" that allows IIS to create a unique identity for each of its application pools.
Again, does this expose our servers to any particular security risks as opposed to adding a new domain user?
2-Allow NTFS permission for this Application folder only allowing more security for Web app (more local secure)
Could someone advise on best practice for setting up the Application Pool Identity for the web service under the following scenario
3-I disagree with Ryan: user account = computer\machine account = group is just SID authenticated and authorized => Domain member computers are also Kerberos principals in the AD, which means that domain controllers have an associated account password hash they can use to authenticate the computer when it comes online.
If ApplicationPoolIdentity is used \$, is added as the SQL user, does this expose our servers to any particular security risks as opposed to adding a new domain user and assigning this user as the application pool identity and giving the user permission on the SQL database?
This password is associated with the computer account object
1-Limits user capability to local only not network or domain so any process run by this user is not allowed to run on any network resource as it is not Domain\username.
Because IIS worker processes run third-party code by default (Classic ASP, ASP.NET, PHP code), it was time to isolate IIS worker processes from other Windows system services and run IIS worker processes under unique identities.
Same scenario but instead using the NetworkService built-in user as the application pool identity.
This is because services running as Network Service can tamper with other services that run under the same identity.