and the : just after their preceding character — with no intervening whitespace — as if they were English punctuation:
Next, reformat the ternary expression tree as suggested by @seand:
I don't think your example is abuse at all, but I think it would be easier to follow with a few minor changes...
Therefore, first up, I'd modify (this.getAllNamesAsDelimitedString().contains(incomingName) to this.containsName(incomingName)
Additionally, (this.getAllNamesAsDelimitedString().contains(incomingName) violates law of demeter (it has two dots), and exposes what I'm assuming is an underlying collection of entities as a string, for no good reason.
I think it's important to note that nested ternary operators can be formatted to look good:
I'd apply the same refactoring to the next ternary, by introducing a hasOperations method:
But in this case, I would probably write it like this:
Additionally, these types of calls (getAllNamesAsDelimitedString().contains(incomingName) and (CollectionsUtils.isEmptyCollection(this.getEntityOperationMap()) typically end up getting used many times, which leads to DRY.
I completely agree with user @seand — formatting makes all the difference in the world.
This isn't the most readable option in your case, because you have longer method calls, but I think it's better when the conditions are kept short and meaningful.
Generally speaking, I see two points in your code where you're inferring meaning based on the underlying data structures, which - if they were to change - would also need to change.