You can improve performance/correctness by modifying dirs; from the documentation (emphasis mine):
You don't necessarily have to get the full list of them before you clean things if you use a generator, like so:
With regards to naming, I'll add one additional comment - instead of giving a name to a variable you never use, just name it _
This is fine if you keep your current approach, but I think I have a better option in my next section.
This is actually really weird when you realize that os.walk already traverses all subdirectories; by doing it again in hasFiles you're really just confusing things.
That's a little verbose, so I'll split it up into two functions.
If you don't want to issue as many shutil.rmtree commands, you could make it a bit more clever, and only report the highest-level empty directory.
For example, you could do this at the end of find_empty_directories to not report until you find a non-empty, and then do the children that are empty.
Once you shutil.rmtree a directory, you should take it out of the list so that os.walk doesn't bother continuing to recurse.
I support all comments in xander27's answer, especially RE indentation vs #end.
Your hasFile implementation could be much simpler; what you really want is any
You may notice that I've used defaultdict to make it a bit easier to find out if something is known to be empty.
Otherwise, I'm taking advantage of the bottom-up approach to avoid having to calculate something repeatedly on the way down.
We already have all of the information to determine whether or not this is true, and we can do so like this:
When you look even closer at folderCleanup and hasFile, you realize that they're basically the same function - one checks if there are any files in the directory, while the other checks if there are any folders in the directory and if so recurses (effectively, not literally).
Ultimately, a directory is empty if two things are true: