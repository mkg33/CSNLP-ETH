have something manage the Physics, that iterates over all the objects that implement a physics interface.
I'm studying a book of artificial intelligence applied to games.
Add your algorithms as functions to that base class so you can easily call them from any derived classes in whatever order makes sense for that class.
Unfortunately (but obviously) it does not explains how to design the code (no book do that i think).
this AIManager could hold a list of all the Objects that need to be updated.
Since you're using java, you could use an interface to declare something to have an AI, and use this interface to iterate over your objects (which could then be completely different Classes) and have interactions managed by this AI manager.
In other words, how the relations between my Player class (the object to move in the window) and the Physics class (algorithms of the book) must be implemented?
I could know the algorithm that makes the player jump, but i'm very confused about where to place it!
I'm using Java (swing + awt + a game loop) to try these algorithms.
You're going to have a class for the player and what you want to do is have that class inherit from a base class for objects in your game that need physics applied to them.
it's fine to have an AIManager class, that has an update() method itself which gets called in the main update loop.
your calculations should go into the update method.
When you say you have a game loop I imagine you have a top level class with a main method that loops over your update and draw functions, something like the following (but yours will be far more detailed):
It shows several algorithms for each argument (movements, path finding.. ecc).
You're using Java so I'm going to assume off the bat that you're playing to Java's strong points and writing your game as Object Oriented as you possibly can.
My Player implements update(float delta) and draw(Graphics g) methods, but i think that within update method i don't have to make calculations, but they should be delegated to another class.
In all likeliness you're going to want to override the update function of the base class to take things like user input and player states into consideration.