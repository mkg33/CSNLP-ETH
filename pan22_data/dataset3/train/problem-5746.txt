We know that the end of string marker is '\0', so we can just check for that.
So the if is the positive case and the else is the negative case.
I don't like the single statement form of control structures.
I always use the block form as being more robust against editing mistakes and a little easier to read.
Rather than use two different things that return the same value, I picked the one that worked in both cases.
Just a little exercise to make me more affluent with strings and error handling, any improvements welcome!
There is no point in a continue when there is no statement to skip.
We don't convert to and from a floating point type.
In this situation, we don't need an else then, as we return in the if.
Not a critical mistake, since you used it consistently.
We probably don't even need the explicit cast to int.
This suggests that there is trouble allocating memory, but this code doesn't allocate memory.
It's true that '\0' is 0, but it is more readable to write it out in my opinion.
It would look kind of odd to repeatedly do str[0] and act as if the values would be different.
Don't forget to change other uses when you fix it.
You only used the length as part of the condition check in the loop.
I changed str[0] to *str because I knew that I was going to be saying *str in the for loop anyway.
We can just check for the end of the string directly.
Now we don't have to declare intNumber outside the loop.
I find it easier to use positive if conditions with else statements.