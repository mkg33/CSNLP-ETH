But just adding e-moves to a model does not guarantee that non-recursive languages will be accepted.
If time(n) for a class of automata is bounded by a total function, the languages accepted are recursive.
For example, allowing a machine to tack on extra input tape whenever it wants, like an unrestricted one-tape turing machine, obviously increases auxiliary space without bound, and does, in fact, lead to defining non-recursive languages.
This is a fundamental fact of recursion and complexity theory.
There is probably a theorem to the effect that any "local" modification (suitably defined) to a model with a total time() function does not guarantee non-recursive behavior, that is, any modification which simply changes what automata in the model can do on a specific move, like make certain kinds of alterations in the auxiliary store.
So I don't think the notion of e-transitions will, by itself, lead to a model that accepts non-recursive languages.
For example, a finite state automaton model (no or uniformly-bounded auxiliary storage and inability to use unbounded amounts of input tape) with e-moves still accepts only regular languages.
You'd have to look at whether the modification globally increases time and/or space without bound.
To add power to a model that makes some languages it defines non-recursive, the added power would have to interfere with the time function to make it partial, that is, undefined for some inputs.
For example, if a machine purports to solve the halting problem by simulating the universal turing machine, then it would have to compute indefinitely long without consuming any input when simulating a non-halting computation, so its time() would be a partial function, undefined for some inputs.
So if there are no e-input moves, time(n) <= n, which is certainly computable, and the languages accepted are recursive.