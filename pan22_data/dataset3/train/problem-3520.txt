Every file and directory in the mounted target is owned by nradmin.
I made that using windows-style ACLs, but I know nothing about NFS ACLs
SELinux gives you some fine-grained controls over who does what and where.
Consider the administrative user to be admin, and that our special directory is to be /tmp/special.
However using SELinux labels one get achieve what you ask for.
Anything that isn't a link gets moved to the (uploader) owner's folder.
The user admin can delete any file (albeit with warnings from rm).
Hmm... how about chrooting to /special_folders_root/special_folder/./ to avoid problems with root-owned chrooted directories?
If number of users is "limited" and "known" - having specific contexts/labels associated with each one of them is not a big issue, then it is a matter of writing a bit of policy to code-in your requirements.
The -p ud+rwx makes every directory to be with permissions "rwx" for the directory owner.
Users (from windows) may alter or remove the files in any of these subdirs, but can not remove the subdirs.
I named my power admin user nradmin and here is the example:
That may be a showstopper for this solution, but as your question only mentioned files and not directories I felt it was worth offering.
The full scope of this problem is unclear as we do not know what's the usecase.
A simple C binary which first makes chdir() & chroot() to the /uploads directory, and then only calls unlink() or rmdir() should be secure.
Network MFUs putting the scanned documents inside specific subdirs (MFU01 --> /share/001/, MFU15--> /share/015/ etc).
NB If a user creates a directory in /tmp/special, the administrative user cannot remove it.
But this requires lots of coding like recursive delete of directories, a command-line option like -f to ignore non-existing files, etc.
A chroot() can be escaped by a process ran by root but only if you give this process the freedom to execute whatever it wants.
In $share, everything is a link to the original files, and owner/admin ACLs are in place.
Since nradmin is the owner of all directories and it has full owner permissions in them, it can successfully delete any file in them, even recursively.
See vsftpd's documentation (for example) for explanation about extraneous dot in the path.
Keep original uploaded files in a separate directory, per user.
The alternative approach would be that you code a limited chroot() implementation of /bin/rm and execute it as root.
Any user can create/edit/delete their own files in /tmp/special.