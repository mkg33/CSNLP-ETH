Putting the reinventing-the-wheel tag on your question would let people know that you are deliberately reimplementing rather than accidentally.
Each of the += operations you're doing on it is actually creating new temporary copies of the old string in the process.
Perhaps this is simply a programming exercise, but normally you'd just use that class.
Functionally both the for and the while do the same thing.
As a rough rule of thumb, I'd almost always add a blank line after any closing } (i.e.
I changed element to datum, as I would expect an element to be a Node rather than a Node value.
While I realize this is "good OO practice", in this particular case, I think it just leads to more verbose code.
I'd find this easier to follow with more vertical whitespace.
The for is arguably more readable and uses fewer lines.
It's shorter and doesn't imply that you are using two different variables.
I would consider just making the member methods public and allowing the LinkedList class to just access them directly.
Java has its own LinkedList class that implements the List interface.
not an } else { but anytime the block of code ends) that is followed by more code.
You seem to be writing out this.head whenever you assign to it.
You only have to do so when you have two variables with the same name that you disambiguate with the this..
Since the head always stays in the same place and only the tail changes, an array holds all the information you need (although you have to maintain size yourself) and is lower overhead than a linked list.
This is also true of an ArrayList which also maintains the size for you.
Also, since your Node class is internal to the LinkedList class, I don't really see a need for having the Node class members be private and having setters/getters for them if the only code able to access them is the LinkedList class anyway.
In addition to everything @mdfst13 said in his/her review, consider this:
Finally, I'd probably add another constructor to the Node class that would assign the next value to null for me:
Then you don't have to play around with extra math.
The fix is to use a StringBuilder to build the string out and prevent all the temporary copies being made: