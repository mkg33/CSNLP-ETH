I don't really agree with this handling of an empty tree:
Also, making the numbers correspond to the number of nodes in the tree can be a useful clue too.
This is fine when the underlying implementation of the received List supports efficient random access, like in an ArrayList.
Also, item is not a great name for the value of the node.
So that when something fails, I get a simple clue immediately about the kind of failure.
And since you never change it, the field can be final.
But you can at least divide your test cases into 2 groups: confirm complete vs confirm non-complete.
Either way, NoSuchElementException is not appropriate here.
I think it would make sense to consider an empty tree complete.
That's partly true, and numbering as opposed to descriptive naming can be acceptable sometimes.
Empty lists have legitimate use cases, that's why empty lists, sets, maps exist in the language.
If your method is called with a LinkedList, the multiple .get calls will be inefficient.
I get it that you probably think that each test case is just another simple example, so numbering is fine.
data is a common choice, or value could be good too.
A workaround for that case can be using a local ArrayList for populating the tree, something like this:
NoSuchElementException is used when you try to get an element that doesn't make sense, for example the maximum value or an empty collection.
A note about performance when creating the tree: you are using the random access method .get on a List.
Since you seem to create tree nodes typically with no children, it would be good to add a convenience constructor:
This method, called by the constructor, will throw an exception for an empty list.