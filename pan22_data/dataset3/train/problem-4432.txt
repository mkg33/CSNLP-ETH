The C++ convention for printing an object is to override std::ostream& operator<<(std::ostream&, const Person&) and the convention for reading an object for a stream is to override std::istream& operator>>(std::istream&, Person& ).
Instead of looping over the training set one time, and then checking N different things... loop over the set N times, checking one different thing each.
setPositive and setNegative confused me for a while, as they take a vector<Person> as input but don't actually use it as input.
If you're not modifying your input, you should take it by reference to const.
Instead of putting them all up top, just define them inline.
This makes all the functions that access it decidedly non-functional.
You always have these positive/negative counts together.
You're incurring lots and lots of copies completely unnecessarily.
setPositive and setNegative do basically the same thing, so it makes sense to factor that out.
This is a very C-style list of variable declarations.
Since we never care about each Count individually, let's make a vector of them:
If you don't need to make a copy of something, take a reference to it.
Now, if you want to add a new attribute, you need to add one line of code.
So as a first go, we can drop the need for setToZero() by simply declaring all the pos/neg variables in the outer loop:
They're both filters, so let's write them as such:
We can even add a function that takes a flag to do the increment: