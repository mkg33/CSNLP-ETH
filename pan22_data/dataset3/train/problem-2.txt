I also apologize for the lack of a 'decent' title.
Then, I have the second problem, which I cannot really think of a good solution for:
 if(input->IsKeyDown(Key::PlayerLeft) { player.MoveLeft(); }
(I heard signals and slots was good for this kind of work, but it's apparently very slow and I cannot see how it'd fit).
I'm talking about after the fact you've registered that the 'A' key has been pressed, for example, and how to do it from there.
However, the problem with this is I cannot now type a name, for example, without having to bind every single key.
I now know that the A key has been pressed or that playerLeft is true.
std::map< unsigned char, Key> keyMap; //Key stores the keycode, and whether it's been pressed.
Not only are you coupling the key 'A' to 'player moving left', for example, but it checks every key, 30-60 times a second.
I thought some kind of event system could work, but I do not know how to go with it.
I then tried another system which just looked for keys it wanted.
Note: I have to poll, rather than do callbacks because of API limitations (SFML).
Then, I declare a load of const unsigned char called 'Quit' or 'PlayerLeft'.
I'd prefer the player to handle its own movement when it gets updated.
This couples the input greatly to the entities, and I find it rather messy.
I've seen an array of the whole keyboard, something like:
input->BindKey(Keys::PlayerLeft, KeyCode::A);  //so now you can check if PlayerLeft, rather than if A.
 bool keyboard[256];  //And each input loop check the state of every key on the keyboard
I think I have two questions here; how to register the input I'm receiving, and what to do with it.