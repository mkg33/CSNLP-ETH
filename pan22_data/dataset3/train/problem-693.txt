But in practice some solutions may not work as well on IPv4 due to shortage of IP addresses.
In terms of bandwidth consumption, the overhead is not very significant, because it affects only packets in one direction, and that tends to be the direction with the smallest bandwidth usage.
The other answers already go into more depth with this approach.
Anycast assumes that the network topology isn't going to change for the duration of the session, and if it does change it isn't likely that another endpoint will suddenly be nearer than the one that negotiated the session.
As soon as the connection has been established, the server will open another subflow using a unicast IP address.
This does introduce additional overhead, the client will experience increased latency once it happens.
For example the MPTCP approach does require each server to have a public IP address in order to work well.
If the client supports MPTCP, there is another solution, which could be used.
The most obvious data structure for tracking the connections would be a distributed hash table.
If a packet gets routed to the wrong POP, the CDN can tunnel the packet to the right POP for further processing.
This is one of those many challenges, which can be approached in many different ways.
The tracking could be done at connection level or by tracking which is the preferred POP to be serving each individual client IP address.
That means the server would instead have to send the unicast IP address as an option over the initial subflow and let the client initiate the extra subflow.
In principle all of the above approaches would be the same for IPv4 and IPv6.
If such a subflow is successfully established, then the connection can survive change of routing of the anycast address by simply using the unicast address for the remaining lifetime of the connection.
(Stateless) HTTP runs on top of TCP, and CDN's can use anycast.
As long as routing doesn't change mid-connection, it will be fine.
What if the syn and the ack go to different servers?
Please answer for both IPv4 and IPv6, if there's any difference.
It works better than you expect, especially for TCP sessions that are usually pretty short-lived such as those generated by HTTP clients.
This increased latency will persist for the lifetime of the connection.
Additionally establishing the new subflow cannot be initiated by the server, if the client is behind a NAT, which is often the case with IPv4.
The application protocol should handle this sort of disconnect/reconnect activity.
But it is likely better for the user experience than a broken connection.
The simplest approach is to ignore it and hope for the best.
I don't know which of the above approaches have been used by CDNs.
A large load balancing setup might have too many servers to assign a public IP address to each.
If the ACK stream ends up going somewhere other than the endpoint it originally negotiated for, the connection will hang for that one asset.
CDNs work very well on Anycast since their whole business model is short-lived TCP sessions with significantly unidirectional network transfer out of their network.
I think I've heard Google has some solution to this, but I'm not sure.
TCP, being stateful, should require subsequent packets to reach the same server.
Another approach is to track where connections are routed to.
But when routing does change, it will break all those connections affected by the routing change.