For any game, you should look at what's important to you.
For our space RTS, we actually had multiple representations for our ships:
In this case, an artist used the following process:
Objects check if they're inside the camera's view frustum (the box that defines the camera's transformation of the world to the screen) and if they are, they're added to a list of objects to render.
There's also no silver bullet: what works for a game like Just Cause 2 doesn't work at all for a game like Fable 3.
There is also tons of detail being added using just the diffuse texture.
If you're playing in a large open world, it makes no sense to load everything into memory at once.
There are tons of tricks developers use to get the maximum out of their art assets.
The basic idea is: why render something that is drawn behind something else?
When you turn a corner in an FPS game, the next section is loaded while the old one is thrown away.
If you're on PC, you don't have to care about memory that much.
Most gaming rigs these days will have at least 2 GB of memory and 1 GB of video memory.
It's better to load it into memory once and render it at different positions.
However, the intricacies can become quite complicated.
This is a topic of research that is increasingly becoming more important.
Finally, the mother of all memory savings: chunking.
Others have touched upon this, but it's very true.
The most common approach is to label certain objects as "occluders".
When you look at the texture model, it looks amazing detailed with probably like a million triangles.
A very simple approach to occlusion culling could be: "don't render anything that isn't in the camera's view frustum".
Keep in mind that any optimization you make for memory will usually have a price for processing.
Here's a great article on that: http://blog.wolfire.com/2009/11/Fast-object-instancing
But the truth is, it only has the polygons shown on the right!
However, this affects the level design greatly and basically ensures corridors everywhere.
If you compress your textures to PNG for example, your files will be smaller than BMP images, but they'll take longer to load.
So a solution could be to divide your level into chunks.
If you're going to render the same tree model hundreds of times, it makes no sense to load it into memory a hundred times.
Especially on platforms like the Xbox 360 and the PS3, where memory is worth its weight in gold.