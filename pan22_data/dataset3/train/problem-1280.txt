The same cannot be said for C#, which at present, is only supported natively on windows, and only recently has the support extended to Linux/Mac.
When you call CreateRenderer(), the factory will return a reference to the renderer most appropriate to the platform, which will be hard coded according to the platform it was compiled for.
Secondly, define a static factory method, which has the pre-processor directives in the body of the method.
It is simply not possible on a machine code level, as differing CPU's have different instruction sets, and may have differing endianness.
The only way to avoid that, would be to code for the Java Virtual Machine, which allows true platform agnostic code.
You will find support and information sorely lacking.
Console manufacturers (with the notable exception of Microsoft, with the XBox360) do not write compilers to support C#, as the vast majority of the games industry codes in C/C++.
Your second choice is somewhat better, but still requires development.
Functionally, for all practical purposes pre-processor directives work the same way as C++.
An executable compiled for one platform will not work on another(best case), or crash it out completely (worst case).
My advice would be to develop and inheritance tree of base type IRenderer, which defines the common API of any possible renderer object.
There is no way to write native code which will work on all platforms.
They define how the code will be compiled, therefore if you have a bunch of platforms with pre-processor guards, then you will have to compile for each platform whether you code it in C# or C++.
If true platform abstraction is a real concern to you, I would recommend moving away from C# altogether, and coding with C/C++, with the very compelling reason being, a C/C++ compiler exists for all platforms, past and present.