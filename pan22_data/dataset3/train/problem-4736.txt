And you can limit how many tiles get updated per frame.
But the way we had set the game up denied us the use of those features :/
I know I could use NavMesh and all that built-in awesomeness.
Do a floodfill from the player to fill the entire map with how far the player is from each tile and which way he is.
What tricks can I use to reduce the number of calls?
You probably run the pathfinding algorithm every frame.
It should only happen once, when the enemy spawns.
If your area is destroyable, then you will need to do it every time an obstacle is destroyed.
So my game is a pure 2D top-down shooter built with Unity3D, with enemies constantly spawning and pathing to the player.
The top-down shooter has narrow passages making it somewhat maze-like, and for now I can have anywhere from 1 to 20 enemies in-game at any point in time.
Instead of pathing from each new enemy to the player as they spawn of the player moves significantly.
As another point you may need to double check your heuristic that you gave the package.
Currently it performs terribly thanks to the pathfinding algorithm being called too many times.
I use a 2D pathfinding package which I assume to be sufficiently optimized.
I'm doing a post-mortem on my game project, and this problem kept bugging me as my team couldn't solve it throughout.
The floodfill Will only need to update the neighbours of the tiles whose value changed after the player moved.