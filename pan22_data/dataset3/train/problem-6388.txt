They're cranking to just barely get out the door in time.
Those things aren't usually available on PCs; you need to use other ways of accomplishing those things and maybe that changes how you have to abstract the platform differences.
a Wii U, you know exactly how a Wii U behaves, because all Wii Us are identical.
Now imagine you have hundreds of these types of functions that need porting, thousands if the engine is massive enough.
It takes a lot of testing to uncover these bugs, and fixing them also takes time.
If you've never used your engine to make a PC version, you also need to code your hardware abstraction accordingly.
Just creating 1:1 mappings between keyboard keys and controller inputs is not always a good idea - if even possible - so sometimes it takes longer to figure out a good solution.
This is not true for PCs; you have many different graphics cards and CPUs, and sometimes something won't work on some of them.
Generally the consoles have done better for boxed games this last generation, though it has started to shift- the new consoles might turn that around.
- not a whole lot of stuff goes on in the background.
Some games want to support multiple DirectX versions and OpenGL for Linux/Mac, and all of that takes time to write if it hasn't been done before.
This means you sometimes need to perform additional optimizations, especially for players on lower end systems
Overall, these kind of things add up into a large amount of time.
Well, that means you'll have to write that shader.
When you're playing on a console, this alone puts certain limitations on what you can do, since all the user has is a gamepad.
On a PC, some graphics cards support more advanced features, and maybe you want to use a better shader for those.
Every minute difference takes time to account for.
It has almost nothing to do with being hard in many cases.
On a PC, you have the OS running, you have a plethora of background programs, and this all means you won't get as large a share as you were hoping for.
If you can release on a few consoles or the PC by a deadline, do that first, then wrap up the ports.
Console SDKs may have a lot of convenient features that don't map over easily to a PC - for example, it might provide access to hardware timers or a good sound API.
With a console, you have a fixed target, so you write shaders, etc.
There are a number of reasons why a PC port can take a while.
Porting to a new platform is rarely easy for large AAA titles.
On consoles, the game doesn't have to compete with an OS for resources, etc.
It can easily take a month or two of coding to add in these different implementations for the new platforms.
Also, in some case, console makers give benefits to exclusive releases, so the publisher gets a discount or some such if they release on a particular console first and other platforms later.
Creating a nanosecond timer for Xbox 360 (I've never developed in XNA) is going to need a different implementation than the same nanosecond timer in Linux, Mac, or Windows.
On top of this, you can't always use the same libraries on Xbox 360 as you can on Windows, Playstation 3, or some other platform.
This means you potentially have to use a whole new library to do the same thing you did on the Xbox 360 version.
(I apologize if I seem to be repeating myself somewhere; this is sort of written on the fly.)