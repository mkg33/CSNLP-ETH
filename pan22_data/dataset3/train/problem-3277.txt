However, the greatest of all differences is (to my eye) what they suggest to you.
algorithms differ just in a few technicalities when serving to the same purpose so that the typical case is different for different ranges of the input.
Even trying to determine what it means for two algorithms to be the same is an interesting and difficult problem.
In my view (and this is purely speculative), the main difference is about what they suggest to you.
It is a tough problem to give even a coherent definition of "Algorithm A is similar to Algorithm B".
For example, is the main idea in both algorithms that you can project the data into a much lower dimensional space, preserve norms with the Johnson-Lindenstrauss lemma, and then do a brute-force search?
Often, however, two algorithms do look much the same so that you would regard them to be the same ... until someone arrives making a key distinction and suddenly, they are completely different!
Then your algorithm is similar to other algorithms that do this, no matter what problem you are solving.
There are some small number of heavy-duty algorithmic techniques that can be used to solve a wide variety of problems, and I would think that these techniques form the centroids of many sets of "similar" algorithms.
While from a technical point of view there are a number of features that are closely observed to decide upon the similarity of algorithms, in the end, it is also a matter of personal taste.
Algorithms have different capabilities and therefore their own strengths and weaknesses.
Often when one says in a paper that "the algorithm $A$ of Theorem $2$ is similar to the algorithm $B$ in Theorem $1$", the algorithm $A$ is actually solving a different problem than that of $B$, but has some minor modifications to handle the new problem.
I do definitely agree with the idea that making an assessment on the overall similarity between algorithms is mainly a subjective value judgement.
For one, I don't think that "they must be solving the same problem" is a necessary condition.
http://research.microsoft.com/~gurevich/Opera/192.pdf
But joking aside, in the theory community, I would say that what problem algorithm A is solving is rather tangental to whether it is "similar" to algorithm B, which might be solving a completely different problem.
Very interesting question, and very nice paper Ryan!
A is similar to B if it "works" because of the same main theoretical idea.
Along the lines of Jeff's answer, two algorithms are similar if the author of one of them expects that the author of the other one might be reviewing her paper.
More often than not, it means "I don't want to write out Algorithm B in detail, because all the interesting details are nearly identical to those in Algorithm A, and I don't want to go over the 10-page limit, and anyway the submission deadline is in three hours."
If two algorithms look like being the same but might be extended in different ways to cope with different cases then I would conclude that they are different.
I will try to provide a description of the importance of both sides of the same coin while referring to the particular points of your question: