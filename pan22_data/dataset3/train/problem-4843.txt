But, failing that, you could provide a set of directions for end users to follow.
The improper way to handle this is to tell them to just ignore the warning every time they visit the website.
They can, for example, send the victim pages that look just like yours and the actual credit card accepting website, capturing anything that looks like credit card data.
However, if you're in a more contained environment (which sounds like is the case), you may be able to distribute the keys using private resources.
The easy way is to pay a certificate authority that is widely trusted by today's popular web browsers.
Your users have no real way of knowing this, short of you telling them by some out-of-band method of a property of your certificate that shows that the certificate is yours.
This would let me intercept the data, decrypt it, do whatever I want with it, re-encrypt it with my fake self signed certificate, then send it off to the user.
They would no doubt accept any certificate that appears whether it is the genuine self signed you created or a self signed created by a malicious attacker.
(Instead of working against the web browser's security-related functionality, you're using the web browser's security-related functionality in an effective way, which is the way that it was designed to work.)
A self signed certificate will still encrypt the communication between the client (browser) and your server.
Getting people to trust the certificate is the key challenge.
The proper way is to get your certificate to be trusted by their browsers, and then their connections will work just fine without any scary security warnings.
Honestly if the site is just for chatting and ordering tickets (but not paying for them), there is no need for SSL.
From a technological point of view, who signs the certificate is not all that important as long as the signer is trusted.
If you use a self signed certificate and I was a bad guy who had control of a computer between your server and a person accessing the site I could make my own self signed certificate, with the exact same information as your certificate.
However, if you can get people to trust the signature of the certificate, then it functions just as well.
There are certificate authorities that will sign your certificate for a short period (which should be fine for a prom coming very soon) for free if you can prove you own the domain.
Your concern should be whether the server that your friends connect to is your server, which is fine; or another server inserted by an attacker, which is definitely not fine.
That might be feasible, largely depending on the abilities of the end users.
You may even be able to use some sort of automated means, so end users don't need to go through any work.
Certificates are not for "do you trust this website or not", they are for "as any computer in the chain between me and the user viewing the website modified or viewed what was posted".
Self signed certificates are only secure when you have a secure way to distribute them before the user visits the site that does not rely on the certificate itself.
The big problem with most self-signed certificates is that the web browser doesn't trust the certificates.
There's a slim chance that someone can hijack the connection (especially if they use public WiFi) using software like sslstrip in order to replace pages you send to their browser with whatever the attacker wants.
You could let everyone know the thumbprint of the certificate, but it is extremely unlikely that your users will want or know how to check this.
Besides that, as you've noted, the imposing-looking warning browsers like Chrome display for self-signed certificates can scare users.