Such schemes cause more troubles than they do good: they are difficult to follow for the graders, students ask why someone got 8 points instead of 9 points, and there is too much room for subjective interpretation.
Notice that this is not a programming course, but an algorithms course.
Therefore, I try to simplify my scheme every year.
In general, I suggest that you try to avoid to have different grades for the same (sub-)task - this ensures at least consistency of the grades.
What I'm doing is: I give points for each relevant idea / concept in the program.
while instead of for), they can still decide whether the loop is doing as intended and give the points.
Thus, currently I tend to focus on rather short assignments, each taking at most 2-3 hours to accomplish for a skillful student.
if you have to loop through a data structure and you have to do something with the content, I would give point for the loop construction and points for the content.
Grading coding assignments should consist of the following parts
In the past I tried to develop a fine-grained scheme for my courses, but now I think it was a mistake.
you have to use a "for"-loop), you should note this.
The graders can now check whether the loop is correct and if the inner content is correct and give points for this.
Sometimes I extend it to 0-5 if I want to ask some additional questions that had to be answered within their submission and/or want to give an additional point for coding style.
On top of that, the manual review of the code determines whether the student used the correct approach and whether the submission matches expectation.
As an educator I strive to provide the best explanations as I can and I try to give them examples of good code and show the difference between good and bad practices.
There are many tools that can help you streamline this process.
Since the nature of your question implies sharing personal experience rather than providing some guidelines grounded on hard evidence, I'll take the liberty to share mine.
Still, it would be possible to get some points for the content.
Then I grade each of them on the scale 0-3 and give the same weight for each assignment (this is of course simplification as they aren't equal, but it works reasonably well).
The problem becomes more difficult the larger the assignments are and the more variations you are having in the solutions.
If the tests are written properly, I would imagine that anyone who passes the automated tests, plagiarism checks, and code quality checks should qualify for at least a B (or the equivalent in your course).
However, as a grader, I only have to rank students according to their performance, and my practice shows that regardless of the scheme the same students tend to go up or down.
You could still try to decompose the overall problem and give points for parts of the solution.
For a simple test about python lists this could look like this:
I recommend checking AutoGradr.com (disclaimer: I'm one of the authors)
After years of teaching, I realised a simple thing: we must separate educational goals from the grading process.
Any ideas/suggestion about how to structure the grading?
I'm trying to improve the grading process and I need to write some guidelines for the graders.