I've seen some solutions, especially for C++ games, where a GameState class and a GameStateManager class are used to regulate states of the game through the use of a stack of GameState objects.
iOS 9 actually introduces a GameplayKit framework that includes State objects.
This link shows you the implementation of their GKState class.
The thing to remember is that SpriteKit is all about drawing and physics simulation.
What I don't understand is what these GameStates objects would be in SpriteKit.
SpriteKit tends to confuse the logic and rendering of objects, but nothing outside of physics or rendering is inherent to the framework.
It inherits from NSObject, but not from any SpriteKit node class, or any SpriteKit class at all.
States, however, are purely logical, do not need positions or velocities or physics, and can therefore be purely separate from SpriteKit, SKNodes, and SKScenes.
Nodes are great for anything in a scene that needs a position, or a physics body, or somehow organizes rendered or physics objects.
I've created a SpriteKit Mac OS X app and I am using a simple finite state machine to manage the game states.