From my point of view setInterval will not be efficient.
It does implement the loop method described above.
To solve it right you need to make sure the game time and the game framerate are not dependent (you don't want all you game elements to move slowly if the framerate is low and faster if it's high).
You need to have three methods in your game: main (that we will try to run 60 times per seconds), update (that will update elements positions) and draw (that will display all the elements) and a variable to store the current time.
This way, if the ball has a speed of 1.6 it will always move 96 pixel per seconds even if the framerate too is slow or too high.
Implementing the bounce logic within your Ball class is up to you.
Then in your update method multiply every translations operations by the elapsedTime variable passed has argument (x = x + speed * elapsedTime).
Initialize your currentTime variable to now then start your main method.
Try to write your game step by step and do not hesitate to change and move your code so it always looks simple.
This way you make sure the game run at (almost) exactly 60 fps all the time and that you elements moves at the right speed even if the framerate changes for some reason.
I suggest you give a look to this project (a nice javascript pong game but without canevas).