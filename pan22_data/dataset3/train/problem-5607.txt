First some minor issues with naming, then a rewrite:
This is an improvement over the code you presented because it separates special cases from traversal.
With these special cases out of the way we now search for the insertion position, namely what you store in prev.
Take that with a grain of salt, though, I'm not usually writing a lot of python.
    # advance if next node is smaller than node to be inserted
    while current_node.next is not None and current_node.next.data < data:
This simplification allows us to eliminate a variable at the cost of a somewhat more difficult to understand loop condition.
This can be simplified by inverting the logic on your traversal.
The way this works is by advancing current_node only if the next node also has a smaller data than the insertion.
node_j and node_i are completely different things, yet their names suggest they are both "moving pointers".
After we found the insertion position, the insertion itself becomes a matter of setting the properties in the correct order to avoid dropping the tail of the list.
prev could be previous, there is no need to skimp on characters.
Overall this tradeoff is worth it, because we reduce the complexity of the loop body.
The use of while..else is pretty cool, but confused me at first.