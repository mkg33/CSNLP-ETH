There are 2 ways: You can either use a load of sines and cosines, based on x, y and time.
In GLSL you can use gl_FragCoord to get the onscreen coordinate of the pixel.
Finally, if you want to have a bit of blur there are a variety of ways to achieve this.
But I don't have any idea on how to do the blur-like below-surface water movement effect.
Now, to have cool water refraction, you have to perturb the uv coordinate slightly.
I'm wondering how I would go about creating a 2D water shader that is seen in this video http://www.youtube.com/watch?v=phChFfi4GOs
Finally you draw the water on top and pass the background texture into the water shader.
For refraction, you need to render the background to an offscreen buffer.
I'm not so much concerned about the waves, other articles cover that, but how can I get the..diffraction, I believe it's called, and various blurriness and how the object looks like it's moving even though it isn't (like real water).
Just sample a grid of pixels around the lookup point and get the average.
The water effect that limbo uses is pretty awesome.
Or you could have bumpy normal maps and scroll them differently, summing them up, normalising and using xy of the normal vector to perturb the background sample position.
You will have to divide by the background texture size to get the uv for the texture lookup.