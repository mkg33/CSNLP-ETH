Getting a sample up and running is a few hours of your time for each product, and considering that whatever you use this for will likely be used for a long time, the time is well worth it.
Starting with puppet 2.6, manifests can be written in ruby too.
Both Puppet and Chef can do what you want just fine.
Plus, if you start setting it up and realize its a huge pain, you'll already have the knowledge before committing to it.
- Chef recipes are written in ruby, puppet has a DSL.
So do not consider me an expert on what either of these after all.
Your best is going to be to start doing what you're trying to do and decide which tool you like the best.
I also found this blog post useful, make sure you read the comments too.
Chef and Puppet are fairly similar, and both projects are equally high-quality.
Full disclosure, we do not use either of these, although we evaluated them internally while trying to decide on a configuration management system.
If there are people on your project who already have experience with Puppet, then I suggest you just use Puppet.
The link you posted to bitfield consulting's comparison has some good comments about this you should read if you haven't already.
Keep in mind, too, that all the features in the world won't make up for a difficult interface, plus, it may expose problems that are specific to your infrastructure--i.e., what happens if config files are updated in a different order than expected?
I think the big questions you have to have to ask is:
If you have access to people who already have Puppet experience, just use Puppet.
So that's my advice; Chef and Puppet are not all that difficult to get one server and one or two clients setup, and will give you first hand experience on both.
I think your not knowing the right questions to ask might stem from you not having too much experience working with either of them, once you start using them you'll start seeing the differences between them.
With Opscode/Chef, they offer a hosted solution that you can set up 5 nodes for free to get started.
The above is definitely a good guideline, I also like to ask these general questions whenever I am considering a new third party dependency.
Try to find people who have been using either Chef or Puppet for more than a couple of months and ask them about their experiences.
Whether a DSL is good or a bad choice is one of the biggest differences between chef and puppet.
But you can answer these questions very easily yourself: set them up!
Not only can you get a feel for how they handle platform specific things (i.e., Debian based and apt, RPM based and yum), but it will definitely help you get a feel for the applications.
I'd suggest coming with some real life problems you will solve with chef or puppet, then start trying to solve them and see what you like/dislike about them.
At the Open Source Bridge in 2009, they had a panel of the authors and representatives of chef, puppet, bcfg2, cfengine, and automateit which you can watch on bliptv which has 1.75 hours of discussion about configuration management utilities.
These are good indicators of the overall success of the project and can somewhat predict the life span.
Puppet has its own language which is easy to get started with.
- If you don't know ruby, getting started with chef can be harder or require a larger investment of time since you need to learn a new language.
Opscode/Chef talks about the difference between it and puppet in their FAQ as well.