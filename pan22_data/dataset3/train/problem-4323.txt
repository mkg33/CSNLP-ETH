However, I cannot think of an instance for which this is true, and, as far as I know, set must always follow the complete syntax as outlined above.
To answer your specific question of how AppleScript might have changed since 2009, I won't try and guess the myriad ways it could have evolved since then (and I couldn't find language documentation from 2009 or before), but I can highlight the current formulation as it pertains to your code snippet.
(Note: The AppleScript Language Guide states that the latter half of the declaration, i.e.
So, put simply, set is always used to take the value of one thing and assign it to another, just like all the other lines of your code snippet do.
Namely, where your script is throwing the error, with the syntax error in set folder "Documents" of home.
As you'd expect, this causes the directory of the active Finder window to switch from the Home directory to the Documents directory.
The way the set command is defined in (the current version of) AppleScript is:
The set command is instructing the AppleScript to use the value of the expression folder "Document" of home (which evaluates to a location reference on the hard drive) and assign it to the target property of the front Finder window (which controls which directory is shown in the window).
So the resulting script has a pleasing symmetry in the way the two windows are created and manipulated:
where variablePattern is the name of a variable or list of variables, and expression evaluates to the value(s) that will be assigned to the variable(s).
However, one can assign the folder object to something else, such as a variable or the value of an existing property, like the target property of a Finder window:
Perhaps this is one of the ways the language has changed...?)
Hopefully, I've addressed your query directly and provided an explanation that makes sense.
I chose to do this like in exactly the same way the script did so with the Home folder:
Forgive me if any of what I've written sounds patronising: I tried to avoid assuming what you do and don't know about AppleScript, despite evidence that you're clearly no novice (2.5K reputation on Super User).
Moreover, the folder object isn't typically one that can be assigned values itself.
So I think the most likely solution is one hinted at by @wch1zpink in his answer, which is to open a new Finder window at the location of the Documents folder.
On the other hand, if any of what I've written is ambiguous or poorly explained, let me know, and I'll happily clarify or re-word as appropriate.
This seems like an unlikely desired outcome, as applying all of these actions to a single Finder window means that the preceding lines are somewhat superfluous: there would be no need to open the Home folder and set its properties (toolbar visible, sidebar width, current view and bounds), only then to change directory and set all of these properties to new values.
From this, it's easier to see that the first block of set statements are for one Finder window; and the second block are for another.
we have only half a declaration: the command starts by providing an object (a folder, in this case) that is looking to take on a new value, but then doesn't go on to state what that new value ought to be.
The open command, obviously, opens a new Finder window at the specified location, but also makes that new Finder window the front Finder window.