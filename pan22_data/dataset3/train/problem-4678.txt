But the comments currently listed with it also indicate (correctly IMO) that the grading is very gentle on the kinds of things that tools can help us with.
But also, Eclipse error highlighting and correction actually teaches the student over time not to make the mistakes that are the least important of all.
Learning to catch these mistakes from error messages is almost as important as not making the mistakes in the first place.
It also finds and maybe corrects lexical (spelling) errors.
If you want them to really learn to get the syntax right the first time, use a key punch and 24 hour turnaround.
for a job, as a classroom assignment...) but I think this would be a good way to introduce the concept.
At the time, the main program "editor" was a key punch machine that punched 80 column cards.
If your kids write enough code, they'll pick up the syntax.
Sometimes you are on a bus and need to capture an idea and all you have available is a pencil and paper.
The system is so efficient that it finds and highlights my syntax errors as I make them.
When done, you started another twenty four hour cycle.
If there was any error in your program (or elsewhere in the deck), what you got was a failure report and went back to the keypunch to correct it.
It's a lesson in how to read an error message as an added bonus.
Trace enough code with = vs == and you'll figure out what's going on.
It's the same way experienced coders pick up new languages.
[1] The term assembler (or assembly) language comes from this physical construction of a card deck.
I hear tales of how marvelous code review is, but I've never had to participate on it in any sort of official setting (i.e.
When I first started with Python I would forget to indent or forget colons at the end of loops.
Semantic and intent mistakes are what we need to focus on, and what the teaching (and grading) should focus on, not the kinds of things that tools like eclipse can (a) find/correct  and (b) teach us incrementally.
Twenty four hours later, you picked up the results at a window.
One is that "getting the syntax right the first time" was much more critical then than now.
This sounds a little like the sort of tests that used to be used in job interviews, and are thought to be of little value now...
After forgetting a semicolon for the 20th time, you start to remember.
When everything thinks they're done, have them switch papers yet again, getting a third set of eyes on things (one coder, two reviewers).
I think that you could achieve your intended goal more easily simply by waiting.
The answer here from Peter notes that in some extremely important tests, students will need to write out code by hand.
People naturally learn from their mistakes and I think that the wrong equals or no semicolon at the end of a line will stop fairly quickly.
That is, have the students take the assignment they've completed, print it out, hand it to someone else, then have the students review the code they now have in front of them.
In a small shop, that person might be the operator and the computer might even be visible somewhere behind the operator - through a window, as computers were noisy and had to be enclosed.
But you don't need perfect syntax to capture the idea.
As for written assessments, I think that it is next to useless to have a written syntax quiz to catch typographical errors and simple mistakes like these.
Focus on the higher level concepts and let the tools correct errors of the formal language as well as help the students see what they should have written.
As you can imagine, getting the syntax correct the first time was extremely important.
You assembled [1] a deck with your program and certain control cards, possibly even including a copy of the Fortran Compiler into a deck and you submitted your deck at a window to another person.
After reading the answers here I'm left thinking...
You run the risk here of unduly penalising or discouraging students who have dyslexia or other issues which cause them to do badly with this type of trivial test.
It completes statement blocks and indents as I go.
Seems like an objective test early in the year over syntax is a really good way to run off rookies.
Made the same mistake a few times and got used to the syntax.
It's often hard to spot mistakes in one's own code, so having to look for errors in someone else's tends to be easier, as well as letting people see alternative approaches to problems ("What's this syntax here, return i>0?list[i]:null?
Each reviewer would write their name on it as having reviewed it as well.