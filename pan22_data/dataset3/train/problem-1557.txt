Note that this also lets you encapsulate your data- those integer fields can be private to the Rate implementations.
I tend to limit the use of static  to create extension methods and create Singleton properties and variables.
The whole point of all these subclasses is to take advantage of polymorphism.
No, this class should have a more meaningful name i.e BillingInformation as this class contains billing information.
(The two parts of a "dual rate" would just be summed before being passed in, and either flatRate or hourlyRate could be 0)
Your classes aren't just bags to hold data for anyone to read, they provide useful behaviour.
When creating an abstract class, there should be a similarity between the deriving classes that could serve as methods, class variables.
That's a core part of OO design, and one that's easy to apply here (as Dmitry's answer shows)
Now, you may implement a Bill() method inside Person:
I think the above should be your default starting point.
You can then carry around those variables however is most convenient for you.
Instead, create Calculate() methods inside your RateStyle (I renamed this to Rate) subclasses:
Most of the improvements have been indicated by other reviewers and there is no need to repeat what they have said but in addition
From the requirements you've described, there's a very simple solution that doesn't need any real design work at all:
Then that's a pretty good sign that you should instead have a Calculation method on IThing, with a different implementation for ThingTypeA and ThingTypeB.
Example of this, Rate and Calculate() should have been marked as abstract.
Structs can also contain constructors, constants, fields, methods, properties, indexers, operators, events, and nested types, although if several such members are required, you should consider making your type a class instead.
For example maybe you'd put the rates together into some property-bag class:
The first thing to do is decide whether or not you want an object-oriented design for this problem.
So you should never build more or earlier than you're driven to by your requirements.
Even though, all those classes are inheriting from RateStyle the subclasses/ derived classes behave entirely different from it.
Building a design means making decisions, and every decision is a potential wrong decision, which becomes technical debt.
But to distill out the key point from that, if you're going to use an OO solution, you want to use polymorphism.
Instead of writing if statements, we should seek to create methods instead.
I'm not sure why you marked the Calculator class has static, this should have been an instance method.
So that the implementation of calculate will be derived class specific.
But there are some reasons you may immediately want a heavier design than this.
Likewise whether CalculateFee was a public method somewhere or a private method, or even in-lined in another method, is really just a choice about how to organize things to read most clearly, rather than about design.
A struct  type is a value type that is typically used to encapsulate small groups of related variables.
I won't write out a full OO version because Dmitry Nogin's answer already demonstrates this really well.
Hence, the Calculator class will be redundant in this case.