While it's fairly obvious what you are doing in this case, this is a habit that can cause all types of problems in longer scripts and can be hard to figure out when debugging or re-visiting the code in a couple months.
Also make sure you declare Option Explicit (although I can't tell if it is declared or not here - this appears to be a snippet from a longer piece of code).
This is implicitly doing 2 things that are non-obvious - it takes an XmlNode object, calls its default method (.Value), and then casts it to an undefined numeric type to perform division on it.
Just because VBScript treats everything as a Variant doesn't mean you shouldn't keep track of how you are using them.
Obviously trapping errors would be better than the sample below because you can give more meaningful error messages - i.e., invalid NodeID.
Speaking of debugging, I would also add error handling or trapping of some sort.
I prefer an explicit Array call syntax for one, but that's a matter of taste more than anything:
Since VBScript isn't a strongly typed language, I would do a recommend doing more to make sure that you are making it clear what underlying types you are working on.
You apparently used one character Hungarian notation for your object - why not extend this to other types?
Next is to make sure that when you are performing casts, you are doing them explicitly.
I would also use (shudder) some sort of variable notation to let you keep track variable types.
Finally, you can simplify this quite a bit by just indexing into the array directly: