I don't know how to incorporate this into my ER diagram so that I can avoid data redundancy.
(Note I use the James Martin crows foot notation which is a little more compact than what you have used but should be pretty simple to understand.
I am trying to create a database for a small book library.
Most subject matter experts were neither computer experts nor database experts.
One with a Set_ID column and a Set column; and another table with a Set_ID column and a Book_ID column.
Since this is my very first post here, please leave a comment if anything needs to be changed ( if it doesn't fit this site's question format ) or if you need further info.
PS:  Congratulations on using the ER model as an analysis tool,  and not diving into database design prematurely.
Apologies for not drawing the diagram, I'm not familiar with them :)
Before I continue I will provide my version of the ER diagram below ( I made it in Paint, using the following resource for notation ):
They might have some kind of model of the publishing industry that would provide answers to this and other questions you have regarding how the field of publishing really works.
This is not a professional project, just an exercise of my own.
This is my first time to try this ( I am self-taught ) and I am encountering a problem.
I would say that an Edition is an entity that is related to a Book.
I would try to find some kind of on line subject matter expert, like the Library of Congress.
You then have a one-to-many relationship between Books and Editions.
I think if you look at your model and you consider the requirements that it doesn't handle (i.e.
An example would be Lord of the Rings trilogy, or Programming Windows, 5th edition, or Encyclopaedia of chess openings, volume D.
It depends what information you want to store about the edition.
Now I see one problem with above design, Let say with new editions if publisher changed, then PublisherId clumns can be better moved to Editions tables to provide such flexibility in future, same with writerId or incase of multiple writerId, you can choose to add one more table to save writerId with editionsId.
   could add another table with an Edition column and a Book_ID
The only slightly distinct feature is the use of an upper case "I" to indicate that a relationship is part of the identifier of the entity)
My biggest problem is to solve the fact that book can have the same title but have several editions or be a part of a set.
and a many-to-one relationship between Editions and Publishers  (many editions are published by one publisher).
With sets, you could have another couple of tables.
your questions) then you will find that you need to expand your model somewhat.
When I was building actual databases, back in the day, I always had access to one or more "subject matter experts",  people who had become familiar with the data through constant use.