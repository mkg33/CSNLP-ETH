It gives them a strong basis and practice with finding errors in the code they're most aware of: their own.
Looking back, I can understand why we didn't cover debugging and it was because there was so much material to teach that there just was not any time to cover it.
I agree that debugging is a necessary skill for programming but I don't think it should be a requirement.
Here's a tip for those programmers - if your code seems much simpler, there is a good chance you left out something important.
a common practice for a programmer to write piece by piece.
In the engineering world, being able to read, understand, debug and add on to existing code is MUCH more valuable skill than writing code from scratch.
I think the teacher should drill debugging into the
Once you are done typing your class, instead of creating another class, why not set a few break points, and run the app.
However, it is also a fact of life in CS that if you work for anything but a start-up or SaaS company you are almost certainly going to be doing more maintaining of legacy code than actually creating of new stuff.
However, I do not emphasize either of these activities heavily; the ability to conceive of algorithms is still of the utmost importance, and I don't want to halt students' growth along this more important axis.
But these are always to call attention to the importance of good coding practice.
We were only quickly shown that if we get an error, set a break point, see where it breaks and you know
So, yes, by all means, give students limited, carefully targeted debugging exercises.
are stepping through the methods and making sure you are getting the correct output.
So, I would vote for putting the emphasis on students learning to read, understand and then debug or augment existing code.
By showing the students how to look through the code of others and find the issues in it, you are giving them practical experience for what will more than likely end up being the majority of their career.
I also give out small bits of badly-formatted code, with poor variable names, indentation, etc.
Think about it; if they already know their thought process and procedure as to what needs to be done, then they can try as many times as is needed to get that code working perfectly.
But don't switch completely over to this activity.
I would suggest having students both write new and debug others' code, starting with writing their own and after a semester shifting gears to maintenance/debugging of faulty code.
Too often, programmers will opt to rewrite a block of code from scratch rather than (or being intimidated by) spending the time to understand the existing code.
When teaching a lecture, as an example, if you declare all your class properties before typing out the methods, this is a habit
I would say that it is helpful to have them write their own code in the beginning to better understand the processes that go into writing for an application.
This workflow will teach the students that the debugger is not only for errors but it is
I give students targeted debugging exercises to make them aware of common traps that they can fall into while coding, and I believe that this is beneficial to them.
Certain errors come up all of the time, and pointing them out can be a real time-saver for students when they code their own labs.
This leads to re-introducing bugs that have already been fixed before - not in the code itself, but in the understanding of ALL of the requirements of the code.
Finding bugs is important, but it is only one skill that a budding developer needs.
During my 4 years of school debugging was never taught to us.
As a student, struggling to learn all the new concepts provided, I appreciated the fact that I did not have to learn another concept, especially one that required one to understand
studentâ€™s heads by making it a part of their own routine.
And switching entirely into debugging might (perversely) not help them learn the most important skill of debugging, which is to test with extreme regularity as you work, since you are providing them with fully implemented (bad) code.