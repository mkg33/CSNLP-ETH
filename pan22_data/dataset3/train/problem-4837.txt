In answer to your question about how I avoid the problem you describe (looking elsewhere in the code and then returning to the point where I was working)...
Do you just get used to remembering to set a mark, split the window to look around or use some other pattern?
What I've found to work well is using goto-last-change.el, which pops you back to the location where you last made an edit.
I also use forward and reverse i-search to locate a particular point of interest in the code.
I'm in the process of accustoming myself to emacs and this is one of the most common curse-provoking situations: I scroll around to view another part of my code without remembering to add my line to the mark ring and then it's painful to try to relocate the line of code I was working on.
I find that's a fairly efficient way to navigate code when I know what I'm looking for.
make scrolling move the point exactly x lines where x is the screen height)
Mostly, though, I just use two frames, one being my current working frame and the other is my reference frame, used for jumping around the same or other files.
Alternatively is there any way (without interfering with the mark ring) to alter the scrolling behaviour so that scrolling up then scrolling down (or vice versa) returns the point to its original position?
As such, while I'm asking for a technical solution, I'd also be interested to hear how seasoned users avoid this problem.
Typically, I will split the screen when I need to briefly look elsewhere.
If I'm only scrolling a few lines from where I'm currently at, I can use this to scroll the window without moving point:
Then I can return to the original screen with C-x o, unsplit with C-x 1 and I'm back to normal.
After issuing scroll-up or scroll-down in emacs, is there a quick way to return the point to its previous position (assuming I didn't remember to add it to the mark ring)?
If I'm moving off to a completely different section of a file (or to a different file altogether), I sometimes use breadcrumb though there are lots of other packages that do similar things.
If I need to visually see two areas of code at the same time, I will split the frame horizontally into two windows and then discard the second window when I'm done.