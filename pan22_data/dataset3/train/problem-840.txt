On the other hand, not once does self.head use list.append, list.pop, or list.insert and this raises a question: does it need to be a list at all?
It is better made a tuple, which is a fixed-length construct and immediately communicates to the reader that we won't be modifying the length of self.head.
The only pain with namedtuple is that we can't explicitly do assignments, which can be solved by making a new object:
Still, tuples can carry a multitude of different meanings.
Another good thing about namedtuple is that we can still do unpacking.
Instead of relying on indexing, we can directly unpack item into its respective xy-coordinates.
Even the name update seems to be untruthful as it makes a delayed update.
There are two places where the coordinates of the food are updated with random integers, generated via a special formula.
This might mean appending, erasing, or inserting into the list.
You can also use Point as a replacement for Food.position, which isn't being used.
I commend the usage of tuples in Food.spawn() for this very reason.
Lists are so prevalent in Python, that they can hold a multitude of meanings.
This answer is a bit long-winded, but take it as a complement.
What's more, they are variable-length constructs, which communicates something else: you might be changing the length of the object in the future.
This can greatly reduce ambiguity and improve readability.
I suggest updating the position immediately when update() is called.
Currently, Food updates its position only when spawn() is called and if state is false.
For fun, you can try to prove that the two snippets are equivalent.
Here's what the wall_collision function currently looks like (lines 137-141):
Note that Food.state and Food.spawn(self) are redundant now and can be removed.
Logically, this section should come first, but I saved it for the last.
I completely agree with most of the points made by others.
That should be three cheers (less lines of code, yes?
I intentionally added the extraneous parentheses to group comparisons.
It took a while for me to figure out what the following line meant:
I think this is especially useful when used together with Cordes's suggestion in his answer, in his Separate game logic from screen rendering details section.
Then you can conveniently do self.position = get_random_point() without having to painfully, repetitively type out the above.
self.body uses a list appropriately, since it will be appended to and popped from in various places.
We can do better by using collections.namedtuple and creating a record-type Point for the purpose of representing xy-coordinates.
Based on the DRY principle, I suggest refactoring the generation of random points to a single function get_random_point().
This is made possible by Python's comparison "chaining" along with De Morgan's Laws.