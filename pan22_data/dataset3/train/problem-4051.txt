With that said, our vextex shader will be doing passthrough, so we can use the properties in the fragment shader:
Notice also that - with this shader code - OpenGL will also interpolate the values of the other attributes.
Sure, it can be standard texture coordinates, but it does not need to be.
Figure out what do you need to do on Ogre3D to get alpha blending working properly for the transparency effect.
Aside from that, you are probably better off using an array to store your vertex, and use it as a circular buffer (once you get to the end, you start overwriting at the start).
Here the step function will give me hard edges for the colors.
What's worse, it sounds like you're appending this allocated memory to a structure you already have.
Now, how does the shader knows the positions to place those colors?
Since I am only familiar with GLSL I will be using that...
You can manage to do the effect you want via shaders.
Lastly, it also sounds as though you're possibly "rendering" things that aren't on screen, when this is unnecessary.
Without code I'm not sure there's anything else I could suggest.
Note: I say quad, but there is no difference if you are using triangle primitives.
Yes, I have extra zeroes after the comma, for readability.
That way the fragment shader knows how much time has passed since the Quad was created, and use that for setting alpha.
I will assume we pass four such properties (based on the example image) and they dictate the intensity of the colors of the bands.
That is what we will be using that on the fragment shader to place the colors.
Secondly, it sounds as though you're trying to solve your problem with more Polygons when you don't need them.
What can happen is that as these accumulate you may be rewriting the structure as you append to it.
As, as I said, you can animate the quads fading away.
Be sure you're only rendering those that are on screen.
Using Triangles or Quads primitive type (but not strips or fans).
The other attributes (prop1, prop2, prop3, prop4) are going to tell the intensity of the colors.
The code I wrote for that uses a vec4 to specify the color of each band and use scalar product.
If these things exist as a way to see the history of how your vehicle traveled, you can simply care about the ones that are in view.
If you're using a C# List, a C++ Vector, or many other datastructures, you could instead be requesting it allocate a contiguous block of size equal to double your current size, which will slowly cause it to fragment your memory and allocated giant chunks.
First off all, whatever changes from quad to quad (for example the speed of the vehicle) you need to pass it as an attribute.
NOTE: I am unfamiliar with Ogre3d but I do greatly enjoy optimizing things.
For instance, if you wrote a shader that took those properties and simply colored the original polygon in sections according to the data you want, you could easy save yourself the quin-tupling of quads you're experiencing.
I would imagine that part of the issue is that you're going to be continually Allocating memory.
Definitely look into how you're allocating your memory for this, and really consider how badly you need these to be truly a single mesh rather than simply adjacent to one another.
((step(0.75, vpos) - step(1.00, vpos)) will be 1 when vpos is in the range from 0.75 to 1.00, and it will be 0 otherwise.
Thus, if we pass pos=0 on one side of the quad and pos=1 on the other, we get a gradient.
This means that if you set the old values on the bottom of the quad and the new ones on the top you get a nice gradient.
Well, you need to pass an additional attribute for that.
You can add another attribute for the time when the quad was created, and pass the current time as a uniform to the shaders (Note: you do not need passthrough uniforms, you can use them directly in the fragment shader).