When you know the fundamental concepts, learning any particular language is pretty easy.
The purpose of CS is not to teach you any particular language, but to teach fundamental concepts.
They asked me to explain the importance of SICP, and this is what I sent them:"
Every language has it's own ways of modelling reality, and devs using (even worse: knowing) only one language get very strongly tied to it's idioms and quirks.
This book alone is enough of a reason to justify Scheme as a major contender for an introduction to computer science class.
Some are quite competent already, and some are brand new.
So, in that sense, Scheme is one of the most "real world" languages out there.
And when you move on, later, to imperative programming, you no longer have any kids with no experience.
Scheme is well-suited to teach fundamental concepts for a few reasons:
By utilizing a functional language in your first course, you get to have a classroom full of kids who have a much more similar footing.
user2892 mentioned the book SICP (Structure and Interpretation of Computer Programs).
There are some great answers here already, but I have one thing that was not said yet directly:
Scheme is not that widely used in the industry, but that is not the point.
I strongly believe that knowing multiple languages is crucial for proper programmer development.
You can teach the entirety of Scheme in a single lesson.
This book is a must-read for anyone truly into computer science.
You can probably teach the entirety of Scheme in 10 minutes.
Forcing students to learn a second language before proceeding further
Personally, I didn't understand ECMAScript until I learned Scheme and Self.
Oh, and BTW: the world's most widely-deployed programming language is essentially Scheme with syntax.
Offering Scheme as the first language should force students to learn something more practical (no offense) quickly, giving them grasp of 2 significantly different approaches, and more or less untie their abstract thinking from any specific language.
Teaching Scheme will get your students halfway there.
For example the SICP book teaches object oriented programming by having the student implement an object system from scratch in Scheme.
(And an object system inspired by NewtonScript, Act-1, and Self.)
One of the practical difficulties of teaching an introductory course is that the students come in at vastly different levels.
There's one more reason I'd like to add to those here, less high-minded, but also a genuine consideration.
Now in industry you might prefer a language which already have a solid built-in object system (like Python), but for teaching it gives a much deeper understanding to implement one yourself.
You can consider scheme more of a "blank slate" than Python.
It is rare for kids to come in with any experience outside of imperative labguages, though.
It's a simple trick to keep your cohorts more on-level without wasting the time of the advanced students.
Every second you spend explaining a programming language is a second you are not teaching programming, software development, software engineering, software design, or computer science.
Brian Harvey: "In 2011, to celebrate the 150th anniversary of MIT, the Boston Globe made a list of the most important innovations developed there.
Anybody with a solid CS background would be able to learn Python in a few hours of self-study.
Python is significantly more complex than Scheme, so, you will spend significantly more time explaining Python and not teaching CS.