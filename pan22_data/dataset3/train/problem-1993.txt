better way to rename with PowerShell (preserve order) :
In order to control the quality, use the -crf option.
Note: Pattern globbing does not work under Windows (and may never due to lack of support for globbing in libavfilter under Windows.)
Globbing can be enabled by specifying -pattern_type glob option:
It'll also check around this index, with a default range of 5 (that's why it'll complain about no index in the range 0–4).
For sake of clarity, I am on Mac OSX 10.8, ffmpeg version 1.2.1, zsh 4.3.11
And if I try to use one of the most used format (%d) in the internet.. ffmpeg does not find the files:
So, if your doing this under Windows, you'll have to rename the files so that they're numbered sequentially and without gaps.
If I don't specify anything it ask me to replace the files:
Without any further options, ffmpeg's image2 demuxer will look for a sequence starting with 0.
You can rename them with a simple Powershell command line:
I have some images and I'd like to make an animated gif with ffmpeg.
To fix that, change the pixel format to YUV 4:2:0:
The resulting video may not be playable on all players, notably anything non-FFmpeg-based.
Per the documentation, you have to set the start number if you want to start at an arbitrary index, like 837.
Since PNG files use the RGB color space to represent pixels, the conversion to H.264 would end up being YUV 4:4:4 (non-subsampled).
The shell will expand it to all files in the current directory before ffmpeg sees it, so the command would expand to ffmpeg -i file1 file2 … filen.
So.. here is the question, how to use the -i command line option with ffmpg?
Since all input files in ffmpeg need the -i option, it'll take file2 … filen as output files instead and overwrite them.
Your player would show only black frames, or possibly crash.
I'm trying to unserstand the -i command line option of ffmpeg but I am crashing against some problems.