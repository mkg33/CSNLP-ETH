If you are actively designing, developing, or testing your application, you can use the Developer edition which does not have a 4GB limit.
Basically this means splitting the data from a single table into multiple smaller ones.
Per-server licensing necessitates the purchase of CALs for each user of the database.
Use the same primary key on all tables to link the rows.
Vertical Partitioning: Split the schema of the table so that some of the columns go into one table, some into another.
If you have no money & your a struggling small business, then MS feels your pain, they love you & they want you to stick with sql server.
Which licensing option is best for you is highly dependent on how your application is being used.
For example, a customer's name and address go into one table, his photo into another, and his billing information into another.
I realise that this is an old question, but why did nobody suggest an upgrade to SQL 2008 express?
A license is inexpensive, and students can get it free through Dreamspark.
If you are in education or part of a charity, you can take advantage of steep discounts that way.
PostgreSQL has a .NET connector (you never said it's written in) so it might be easier to move to that then MySQL.
Usually you want to partition it up so that data that is referenced less often doesn't have to be loaded.
If the above options don't apply to you, it would be useful to know how many users will be using your application, so that you can decide between per-processor or per-server licensing.
It would be helpful to know a bit more about your situation.
Horizontal Partitioning: Have multiple tables with identical schemas, with rows split between them.
*I think if you keep the license after 2 years, you owe microsoft $100.
This information isn't queried unless the user performs explicitly asks for old records.
This is usually done for performance reasons, but it might save your bacon here.
For example, all customers whose zip code is < 50000 go into table A, the rest go into table B. Alternately, you could use this same sort of scheme to "archive" old data for situations where the age of the data is significant (such as a forum).
database, with the location keyed based on the age of the information.
If your not eligible then sharding if your only option & it will be painful.
Check if you are eligible for Microsoft's bizspark program, which means you can get a free* web edition version of SQL Server, as well as a web edition of windows server.
All entries older than a month get sent to a secondary (tertiary, etc.)
If money is such a concern, you should really focus on converting your application to use a free database like MySQL or PostgreSQL.