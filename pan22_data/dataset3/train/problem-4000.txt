This is almost the same, but instead of a singleton, every time that i create a object I could create a new scheduled selector as such:
Although I'd suggest to actually use none of them, but use the standard update method of cocos2d.
Scheduling one update method for each layer could be useful, especially if they are logically separate.
You certainly don't want your timers be called in random order.
Now I don't know what is better(or if there is a very big difference in performance).
I am building a simple tower defense game, and I have to take a decision between two(or more, feel free to suggest other ways) to do the game cycle.
There is a third option: have a small number of scheduled updates for tasks that can be independent.
Second option: Each object could create its own selector @ init.
I could achieve this by having a singelton Game class that has a mutable array of objects and then on the Scene(or that singelton) I could have a setup with:
One useful example of this is using one scheduled method for the main game logic and another to update the score display.
This will give you the best available performance and consistent behavior.
I could have a global scheduled selector that calls update for every sprite/object/logic thing that I need to calculate.