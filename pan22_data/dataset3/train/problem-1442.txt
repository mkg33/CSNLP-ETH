You do not need to use VIEWs, you can embed you queries into the above statement as subqueries.
I would also be interested in any suggestions for improving the table structure.
SQL Fiddle (I used INT datatype for time_stamp column in the SQL Fiddle, but it shouldn't matter, as the principle is the same for timestamp datatype)
Each row can be uniquely identified by either its id or the combination of its name_id, time_stamp and event.
There can be two rows with the same name_id and time_stamp if one of them has an event of 'add', 'init', 'update', 'disconnect' or 'remove' and the other one has an event of 'stopped'.
If the time_stamps are the same, return the row from (2).
For each name_id, of the rows with an event not equal to 'stopped', find the one that has the largest time_stamp less than or equal to t0.
I have used the views just to demonstrate the technique
I have a MySQL InnoDB table with the following columns:
For each name_id, of the rows with an event equal to 'stopped', find the one that has the largest time_stamp less than t0.
To simplify the select statements, lets create views from your selects as follows:
I believe the following queries work for (1) and (2), but I'm not sure how to do the last step to conditionally select from them:
Basically, you have three criteria, therefore you need three SELECT statements.
For each name_id, return the row from (1) or (2) that has the largest time_stamp.
Now, the select statement will be as easy as this one: