Note that I also removed the Type parameter, as we're replacing it with inherited classes.
There is one more refactoring that should probably happen though.
Although, I might have just called it ShowMessageBox and been done with it myself.
With this method of creating new types of coloring schemes, you don't even have to open up the Bootstrap file.
What does this do for us other than clutter the code?
To make it worse, the "comment" in the region doesn't match the method.
In order to add any new styles to your code, you potentially have to make changes to three places in your code.
Here, for example, you've wrapped a single method inside of a region.
I don't feel that's the case here, but I do feel it's worth mentioning.
For example, I think this is a wonderful use of a Region.
The "If style == alert then set background color" logic gets repeated in each and every one of these overrides.
Unfortunately, you have some instances where it's not so good.
It's easy to just keep shoving things inside of them when you should really be extracting logic and creating new classes.
You didn't want to muck around with a namespace conflict, which is okay.
You could extend this indefinitely and easily by inheriting from your Bootstrap class and overriding Customize.
If you should decide to add a third style, you only need to update the logic in the base class.
Minimally, you have to add it to your enum and your switch.
Which simplifies your child class implementations down to two dead simple lines of code.
One says it's a MessageBox while the name of the method is Popup.
These all belong to the same logical group of methods, but now you're not being consistent with how you're using them.
I suppose this is part of the reason so many people hate them.
Are you using regions to logically group concepts, or overloads??
Particularly because these all do a very similar thing.
You just create a new child class and over ride Customize.
It makes sense to group all of the different WriteLine overloads together.
I think that used correctly, they're a great thing.
Popup is a noun, but you're taking an action here.
Second, change it so that only the default case gets executed here.
There's a really nasty switch statement in your Designer.
It could be simplified by extracting this logic into a protected method of your base class.
A little OOP can go about making this much easier to deal with.
First, you would need to change the signature of Customize in the base class so that we can over ride the method.
Now we can go about implementing child classes like so.
I've seen much worse and I might even venture to say that you've used them rather well, all in all.
Which in and of itself wouldn't be such a terrible use of regions.