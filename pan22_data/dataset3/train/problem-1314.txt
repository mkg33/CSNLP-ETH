Single-source Multiple-sink Planar DAG Reachability (SMPD) algorithm.
Mix Barrington, Tanmoy Chakraborty, Samir Datta, Sambuddha Roy: Planar and Grid Graph Reachability Problems.
My typical example of a log-space algorithm to give to programmer friends is the following puzzle:
Also, a new logspace algorithm for planarity testing and embedding runs in modestly polynomial time (modulo undirected reachability, of course)
I guess Single-source Single-sink Planar DAG (SSPD) reachability has logspace algorithm with a modest running time ($O(n^2)$?).
Start both at the start of the linked list and perform the following iterative procedure:
The Deutsch-Schorr-Waite algorithm is an $O(n)$ graph marking algorithm, variants of which form the heart of many garbage collector implementations.
If there is a loop, the two-step pointer cannot pass the one-step pointer without a collision, and this occurs before the one-step pointer finishes the loop (which is under $n$ steps).
The problem is to mark the nodes of a graph reachable from a root node.
The naive recursive traversal needs linear space to hold the stack of visited nodes, but the DSW algorithm encodes that stack by a cunning link reversal trick -- when it follows an edge, it changes the edge it followed to reverse the source and target, so that it can encode the stack in the graph itself.
IIUC, I think this satisfies your $NC^1$ requirement because additional processors don't help you traverse the graph if if it happens to be organized as a linked list.
running time (modulo undirected reachability) viz.
Ref: Samir Datta, Gautam Prakriya: Planarity Testing Revisited CoRR abs/1101.2637: (2011)
The solution is a log-space algorithm, using two $O(\log n)$-sized pointers to linked list nodes.
This answer is more of a toy problem than a real research problem.
(This is, in fact, a big PITA for practical garbage collection algorithms!)
Finally, here is a simple toy problem which has a logspace algo with a modest