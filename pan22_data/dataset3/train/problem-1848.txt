See man 5 ssh_config for an in depth explanation and list of config options you can use in ~/.ssh/.ssh_config.
In case of SSH it is likely that this will be the standard port 22.
On my router, Port 22 is NATed to this proxy machine.
Often in a private IP Range like 10/8, 192.168/16 or 172.16/12.
One is used as a http proxy to target web sites located on the others (that's working fine now thanks to ServerFault).
You can either specify one (or more) SSH tunnels directly from the command line like this:
You could use a VPN to connect to the remote network first, and then directly connect via SSH.
Since a command line can easily get very long an tedious to type, it is way better to stuff all this, with as many SSH options you want, and as many port tunnelings you like into your ~/.ssh/.ssh_config file.
I would go with first option and secure the other machines to only allow ssh from the first machine.
This will reduce your typing to ssh connectionNickname and always have all the forwardings and options set automatically.
yourusername@proxy.example.com is trivial I guess.
hostnameOrIPofMachineBehindNAT is the LAN IP or LAN DNS of the non-proxy machine you want to reach behind NAT.
You can then connect to your other machine like this from another local shell:
Especially if password/keyboard interactive authentication is allowed.
Also, if you create public/private key pairs for each host in the chain, and use ssh-agent, you can avoid typing passwords.
The -t flag forces the allocation of a pseudo-tty, which I think is necessary, but you can test connecting without it to make sure.
Other people made good suggestions, but I think that the simplest and most flexible answer was already contained in your question when you gave a sample command.
Of course, you can add other options as needed to either ssh command, or write a shell wrapper (script, alias, function) to handle any variables.
Could I use the proxy machine to 'filter' the incoming ssh request and to route them to the correct machine ?
Another suggestion might be to connect to your proxy machine and have it explicitly build tunnels to each and every machine you want to directly reach behind your NAT.
I heavily recommend you expose as few as possible machines to the internet via port mapping!
(in the same way it's possible to do so for web sites using a mix of mod_proxy and namevirtualhost in Apache)
This may or may not be possible, may or may not be what you want to achieve in the first place, but it will work.
Where localport ist the port number you need to connect on your localhost that will be forwarded to the machine behind NAT, SSH tunneled through your proxy.
I would like to be able to access the other machines, within internet, with something like:
That is, if we have a source host, an intermediate host, and a destination host; and since ssh can execute commands on a remote host for us, you can run this command from the source host:
remoteMachinePort is the port number of the service you want to connect to on the remote machine behind NAT.