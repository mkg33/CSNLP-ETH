This approach is/was used by strategy games mostly due to the large amount of units.
A quick note about determinism, floating point implementations can differ from processor to processor, so they are deterministic as long all devices you target have the same floating point implementation, if you can't be sure of it you'll need a physics library which uses fixed point math.
Downside is that the controls of the players are delayed by the lag and that it requires a fixed time step that is the same for every player.
The synchronized network approach means that at the start all data is the same for all clients, and the whole game is calculated on each client in the same time steps.
Just the controls the players push are transferred.
Upside of this is that this approach only needs a few kbit's  to work properly, no matter how complex the game is.
If all game logic is deterministic then all games will keep in complete synchronization.
A fixed time step also means that if one player lags all players will notice that lag.
In most games the physics are not synchronized as it either requires a lot bandwidth or a completely synchronized network code.