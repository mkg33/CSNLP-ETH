I am trying to come up with a list of potential issues we may face and I don't know as much about SSIS as I do about SQL Server being that I am a DBA here.
And while it's not something I would ever recommend, it does have some advantages from a process and skillset point-of-view.
I have template packages that already have my dev/prod/qa connections/directories, which makes things much more manageable.
Some folks here at my current job have made the decision that all data transformations that go into our database must be done via SSIS.
This way when someone looks at my ETL processes, they can easily tell the flow and find the objects in question, but I can still have the "modularity" of a package with the T-SQL Components.
that are used to transform data will no longer be used.
This also makes replicating my process a lot easier.
Using TSQL is, perhaps, a more difficult skill, but for someone who can do both, it's massively more productive to build and test using TSQL than SSIS data flows.
However if you want a happy medium, you can also have SSIS use the procedures/views as script tasks for organization and visualization/flow purposes.
I like David's answer, and I'd use that to present an argument "against" SSIS.
The transformations they currently perform will be done via SSIS only.
One of the issues I see is attempting to look at performance issues in SSIS vs sql objects.
Performing transformations in SSIS data flows is just slower than using TSQL.
We are using Microsoft SQL Server 2016 SP2 and SSIS 2016.
The main reason you would try this is to have a consistent drag-and-drop process for building, and importantly, changing ETL processes.
This means that any old code such as views, stored procedures, functions, etc.
if there's a new table, I just copy/paste (to a degree) and tweak the process to the new components.