The process can allocate memory from that area which then tells the operating system that it needs to back areas of that address space with physical memory so that it can be read from and written to, but the program has (in theory) as much memory as it wants.
And the application operates the same and is unaware of the difference.
It means application developers can devote their time to the requirements of the application without having to deal with the messy details of the hardware on which it is running.
A program can query how much physical RAM is free, so that they can limit themselves in low memory situations, but they are not artificially limited by the operating system unless it runs out of physical RAM and swap space in which case the program will simply get an error when attempting to allocate memory.
For the most part only system utilities need this information.
On a system with only 1GB of RAM this means that when physical memory is full the operating system then starts pushing data out to the swap file or partition.
In fact, most applications are in blissful ignorance of RAM details, how many cores the CPU has, the size and number of physical drives, whether the computer is connected to a network or the Internet, and much more.
This is done without the involvement of the actual process whose memory is being paged out.
The OS doesn't "tell" the program anything about free memory.
For a 32-bit process what it knows as "the memory" is the entire 4GB of addressable memory, for 64-bit the space is much larger.
Instead of directly accessing RAM, applications access only a virtual address space that is independent of RAM size.
Most applications have as little need for this as the average driver needs to know about ignition timing or fuel mixtures.
For applications that need this information, hardware details can be requested from the OS but few do.
The OS provides to applications a standard virtualized environment that is independent of the hardware.
One of the great things about running on a modern OS is that applications have no need to know how much RAM is in the system or how much is available.
If the process tries to access the paged out memory then the operating system halts the process, pulls the data back in from disk and resumes the process.
It means a properly written application designed for Windows 95 with 4 MB RAM can run on a modern Windows 10 system with many GB of RAM.
Every program operates in its own virtual memory area where it has access to (What it sees as) the entire potential memory address space allowable.
This means a great deal of work for OS designers and developers but many millions of users reap the benefits.
Parts of the applications code and data will be in RAM, the pagefile, or in the original files.
RAM is just a performance optimization (with current technology a necessary one) and an implementation detail.
Of course the modern system will perform better and provide many more capabilities to the user but the application knows nothing of that.
This can change according to the needs of the application and resource availability.
These details are managed by the OS and is invisible to the application which couldn't find out even if it wanted to.