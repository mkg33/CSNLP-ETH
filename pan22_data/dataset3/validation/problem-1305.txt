The mission-critical applications that a company may run on a desktop, e.g.
Aside from the ability to address more memory x86_64 also have more registers allowing the compiler to generate more efficient code.
Prior to Vista, there haven't been many successful 64 bit versions of Windows I believe as where I work my new machine has 4 GB of RAM but I'm still using 32-bit Windows XP Pro as it is a known stable O/S relative to XP64 or Vista.
I think you may want to also look back on when there was the shift from 16-bit to 32-bit for some more details on why the shift may be a big deal for some folks.
With a 32-bit machine you only have 4,294,967,295 bytes of memory to address.
All those pointers that used to need 4 bytes, now they need 8.
Nothing is free: although 64-bit applications can access more memory than 32-bit applications, the downside is that they need more memory.
The performance improvement will usually be fairly small though.
On x64 this is mitigated by the other architectural improvements like more registers, but on PowerPC if your application can't use >4G it's likely to run faster on "ppc" than "ppc64".
Changing the size of an address can have some big ramifications and repercussions.
The term 32-bit and 64-bit refers to the way a computer processor (also called a CPU), handles information.
The x86_64 architecture is backwards compatible with x86.
It's also possible to run unmodified 32-bit software from a 64-bit OS.
If you think about a CPU with a 16K L1 cache, a 32-bit application can work with 4096 pointers before it misses and goes to the L2 cache but a 64-bit application has to reach for the L2 cache after just 2048 pointers.
small accounting packages, may not run on a 64-bit operating system and thus there is the need to keep a legacy machine around, virtual or real.
This extra footprint hurts performance at every level of the memory hierarchy: bigger executables take longer to load from disk, bigger working sets cause more paging and bigger objects mean fewer fit in the processor caches.
When I write some DLLs for my applications, I generally compile in Win32 which isn't the 64 bit version of things.
For example, the default requirement in Emacs is 60% more memory when it's built for a 64-bit architecture.
Even on Intel there are workloads that run faster on x86, and few run more than a 5% faster on x64 than x86.
64-bit versions of Windows handles large amounts of random access memory (RAM) more effectively than 32-bit systems.
It's possible to run unmodified 32-bit operating systems.
Another point to this in regards to Microsoft Windows is that for many years there has been the Win32 API which is intended for 32-bit operating systems and isn't optimized for 64 bit compiling.
With a 64-bit machine you have 1.84467441 Ã— 10^19 bytes of memory.
That will require all the usual 32-bit libraries though.