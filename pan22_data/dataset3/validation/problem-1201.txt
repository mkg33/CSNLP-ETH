I see s1[0] mixed in with *s, and *(s1 + 1) in place of the simpler s1[1].
Other possible interpretations include abc and ab-c, so explain why you've chosen abbc for this input.
Later on you have *s2 = *s1 so it's a good idea to use that style in the function signature as well.
You can also make use of the value of increment expressions, like this:
More importantly, what happens when we reach this maximum length?
I've completely re-written, observing the above changes:
If we also return the start of the output, we can use the function more naturally:
Your program produces abbc, but I don't know if that's expected.
At least add a comment to document your assumptions.
Although the placement of * (int * a or int* a or int *a), I would stick to one and only one throughout a codebase.
The provided interface expand(s1,s2) doesn't allow us to tell the function how much space is available to write into s2, so that's probably out of scope for the exercise, but consider implementing expand(s1,s2,max_len) as a further exercise (and a good one, that will be useful in your future C coding).
Note that I've used puts() as a simpler alternative to sprintf("%s\n", ).
We don't use any of the definitions of this header, so it can safely be omitted.
We probably need to add some code to stop producing output when it's reached.