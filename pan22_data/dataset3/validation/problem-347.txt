I've been trying to understand the way this algorithm works, but I can't get a consistent result.
I am a bit confused because it does not exactly correspond to what is written in Algorithm 3, but it is not so rare that pseudo-code algorithm make no actual sense, and would yield wrong results if written directly in any programming language.
And now 'b' is left hanging because 'b' and 'd' are visited and the algorithm says the connection must be to a node not visited in G and the polytree shows b-->d.
The question is about the second phase, using a back-and-forward heuristic:
This is what seems right to explain the figure, and works to build a polytree.
(a) Original cyclic network, (b) Forward Heuristic provides a tree solution, (c) Back-and-forward Heuristic provides a poly-tree solution
Here's my interpretation of the algorithm, not sure it is completely right but that could help you:
Right now I'm having trouble applying the back-and-forward algorithm to the vertex b. I'll describe my thought process:
It has two phases: the first one coverts a table of events into a graph, and the second where the graph is tranformed into a polytree.