Here's what Google has to say about choosing OpenGL version:
(I removed a point about compatibility as I linked to it above)
In other hand, If you need lots of special, and sometimes expensive, effects, only available through shaders, then you must go for OpenGL ES 2.0.
The guy there treated only OpenGL ES 1.x for 80% of the book, and then at the end only listed the differences in version 2 and said something like "if OpenGL ES 1 does what you need, there's no need to switch to version 2, as it's only gonna over complicate your code.
I've seen a lot of online tutorials and blogs that simply say "ditch version 1.x, use version 2, that's the way to go".
*Fixed Function Pipeline - a set of functions used to create and manage transformations, lighting and material.
Even on Android's documentation it sais to "use version 2 as it may prove faster than 1.x".
If a device supports both OpenGL ES 1.x and 2.x, it is very unlikely that there's any actual ES 1.x hardware.
Available on OpenGL ES 1.x and on desktop OpenGL 1.0 through 3.1 (today).
OpengGL ES version 2 goes a long way into changing the development paradigm that was established with OpenGL ES 1.x.
Now, I've also read a book on OpenGL ES (which was rather good, but I'm not gonna mention here because I don't want to give the impression that I'm trying to make hidden publicity).
So while I agree that ES 2+ is the future, there's nothing wrong about still using ES 1.1 if it fits your needs.
Actually, the right question is: Which OpenGL ES best fits for my application needs ?
Should I always use Open GL ES version 1.x if I don't need version 2 only stuff?
This way, developing using OpenGL ES 2.0 put a lot of pressure about developing good shaders, alongside application's 3D graphic engine.
In the long term, I'd recommend using ES 2.x though.
When checking the facts you will see that all phones in today's market support OpenGL ES 1.1, and about 90 % support OpenGL ES 2.
In a nutshell, to have the same visual effect, you have double work.
You have shaders which you can chain together to apply varios effects/transforms to your elements, the projection and transformation matrices work completly different etc.
Which means that your ES 1.x code generates ES 2.x calls, shaders included - and the shaders most likely do stuff you don't actually need.
If your application just needs nice 3D graphics, without fancy and expensive effects, then OpenGL 1.1 is just enough for you.
OpenGL ES 2 introduces the programmable pipeline on mobile devices discarding the old fixed-pipeline approach; probably for this reason you find it more difficult to use, but just a change of mindset and some hours passed on coding will make you change your idea about this.
These days you get OpenGL ES 2 capable devices from the low end market up to the high end, and the OpenGL ES 3 will come soon, adopting OpenGL ES 1.x is just an old and deprecated approach for the market of today.
If you don't want or need the added complexity of OpenGL ES 2, stick with GL 1.1.
Yes, also this is a common scenario for both desktop and mobile users, with OpenGL the fixed pipeline approach is just deprecated and when using old code on modern devices you are just guessing, because any GPU maker that wants to stick with a modern OpenGL approach is not forced to support old functions and the old approach for the pipeline.
Version 2 was changed a lot to facillitate newer, fancier stuff, but if you don't need it, version 1.x is fine".
I'd sure like to do that, because I find coding in version 1.x A LOT simpler than version 2 but I'm afraid that my apps might get obsolete faster for using an older version.
One drawback often omitted on the use of OpenGL ES 2.0 / 3.0 is that the lack of FFP (see below) requires the programmer to rewrite some fixed functions on shaders, as well some plain code for management.
On the other hand, if what you're doing doesn't require a lot of performance, using ES 1.x may let you write your applications faster.