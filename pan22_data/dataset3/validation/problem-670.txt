Whether this is a good solution for your colleague is hard to tell,
keep the performance hit acceptable while reducing node count (the nodes
with them for a number of years and think this technology has the potential
The example I have in mind is a server that tests my code every time I push a modification.
"backplane" (ethernet works normally), although other options like RoCE can
It requires an Infiniband infrastructure to work on the
The downside is that if you need this memory for a long time, buying VM time is an expensive way to do it.
were there for the RAM, not the CPU cycles), which is a plus compared to
sometimes be made available, depending upon specifics.
If you are memory bandwidth bound on the local host, they'll give you larger
case, is it advantageous to the workload to have larger memory than can be
virtualization and python machine learning libraries.
Another option is to temporarily deploy the application in an environment where ram can be scaled up or down easily.
The idea with such a solution is that it is limited to specific use cases.
You can set up your system in this smaller size, and then when you want to go full noise, stop it, change the instance size, and run the software.
Of course this can be scaled to any number of servers if you have them available.
number of transparent interfaces to allow zero code change integration, and
APIs for kernel bypass with more direct CPU access (i.e., avoiding kernel
https://www.ec2instances.info/  will help you pick a suitable size.
memory, but you'll be throttled by the already existing bottleneck.
not work for Kove, and have no financial incentive, but I have collaborated
to substantially impact the way certain computing is done.
applications tend to fair worse, but we have used the C APIs and managed to
However if you want to speed up the use of your computer, it is possible to externalize some of your applications to a remote server.
A simple alternative would be to run the application on the remote PC, possibly under a dedicated user account, and simply control it via RDP, VNC or whatever is convenient.
This will mostly depend what you are working on and what application you use.
There is a commercial solution for this, via a company called Kove
In terms of performance, it depends on your application.
IE a small instance like a C5.large has 4GB ram and 2 cores, and costs $2.04 USD a day for linux, or $4.26 USD a day for a windows install.
EBS disk space is an extra cost and scales linearly with GB allocated.
I'd look at an Amazon AWS instance, which can be changed in size with one reboot.
However accountants seem to sometimes prefer operational costs like rental, to capital costs like upgrades.
are CPU bound, then the impact could be minimal (which can be surprising).
Then divide the data in 1/2 and write the program to automatically know which server to go to.
If you are running programs that requires a lot of processing time for a small data output, you could make them run on a server different from your computer to save time and ressources while you work on something else.
However your VM costs nothing when its not running, other than disk storage costs.
As others have said it's technically possible but not worth it.
You could run 2 different mysql servers on 2 different machines.