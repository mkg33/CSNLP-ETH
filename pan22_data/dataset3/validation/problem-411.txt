The map is 5000x5000 tiles and I plan to expand it even more.
A two-dimensional JSON array with integer values for all tiles would have quite a lot of overhead, but abusing an image to transfer binary information would also add some wrapping information you don't need.
I would like to know which idea is better in terms of performance.
Case 2: I store every 50x50 region in a seperate bitmap files, and then load that image dynamically using canvas and read it's pixels to generate map.
I have few possible approaches to store and load a big map like this.
Depending on how your maps are designed, another stock algorithm might have better results, or you could even try to create your own when you think you can create something more appropriate.
This data could be compressed with an algorithm like DEFLATE (which is the same compression algorithm used by PNG) to reduce the size.
1000x1000) and preload them all at the beginning of game and also read pixel by pixel when needed.
It is split into 50x50 regions and camera doesn't move with player, the map just switches to next one when player reaches border of the screen.
Case 1: I store every 50x50 region in a seperate JSON file, and just load them dynamically with XHR when player reaches border of the screen (native not jquery, since it is much faster)
My main concerns are the memory leak of XHR, and also which is faster: XHR loading and parsing JSON or loading and reading image pixel by pixel.
To reduce the amount of data which needs to be sent over the network, you could use XHR, but return a single BLOB or arrayBuffer with the binary map data.
I need performance, it comes first before code readability etc.