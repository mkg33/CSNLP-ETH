                spawnYPosition = Random.Range(-3.36f, 2.98f);
So it looks like you want to change this line, which makes up a new vector with whatever value we have in spawnYPosition locally:
So, inside the body of RPC_SpawnColumn, if you want the value of spawnYPosition which you passed as the y coordinate of the position argument, you can get it by reading position.y.
        // Instantiate(prefab, position, Quaternion.identity);
Edit: I need to send spawnYPosition  from method two to method one and spawn it with same position of spawnYPosition  in the second method.
You're saying "I will accept as input a Vector3 value, and I will call that value position inside the body of this method" - this position variable is called an argument to the function, and you can use it like other variables inside its body.
        Debug.Log("THIS IS SPAWNYPOSITION" + spawnYPosition);
Now, when you call the function (remotely) like this:
        if (collision.GetComponent<ColumnsMultiplayer>() != null)
to this line, which uses the position that was sent to us via the RPC call (including spawnYPosition in the y component):
I am loosing a lot of time to get it done but I still can not find solution.
        Instantiate(prefab, new Vector2(9, spawnYPosition), Quaternion.identity);
                photonView.RPC("RPC_SpawnColumn", RpcTarget.Others,new Vector3(9, spawnYPosition));  // this is
You're saying "Call the function, and pass it the value (9, spawnYPosition, 0) to use as the position argument"
It looks like you might need a refresher on function arguments.
I want to spawn obstacle exactly on the same position as on the server is spawned so I made rpc Method and tried to pass random variable of float , but when i run the game obstacles are spawned on the diffrent position.
    private void OnTriggerEnter2D(Collider2D collision)