Here's a handwavy algorithm under some strong assumptions.
Since the TM is deterministic and the function computed is bijective, the result is also a TM, and computes the inverse.
But the class of algorithms that can be inverted in this way is severely limited, as the other answers already suggest.
All is not lost if you are interested in invertible programming.
With these assumptions, we can look at the input DTM, and invert all transitions (halting states become start states, reading becomes writing and vica versa, we read from the end, left is right, etc).
There have been papers on automatically converting algorithms for bijective functions into algorithms for the inverse function; my own first conference paper was one such.
Note that this won't work for factoring, because multiplication is not bijective.
An example of this approach (using Haskell) is explained in this paper
An alternative to finding the inverse for a given function, is to construct your function from the composition of invertible functions, in which case finding the inverse is trivial.
As many on this page have already pointed out the solution in general could be intractable.
As it so happens I have used Biarrow's to help me write only one direction of a compression algorithm and get the other (decompression) for free (free might be the wrong word, they are awkward to use, because of the lack of language support).
Over a completely unstructured domain, the best you can do is brute force search, which takes time linear in the size of the domain.
This ties nicely in with the comments about representation.
If you want to invert arbitrary functions efficiently, you will have cryptographic barriers to overcome (in addition to factoring).
However, if the domain you're talking about is n-bit strings, that's exponential in n.
As @arnab pointed out in the comments, one-way permutations are a cryptographic primitive.
Multiplication of primes is, if we disregard order, but a TM that multiplies numbers does not compute "only" the bijective function we want, it computes "too much", hence my second assumption (yes, it is rather strong).
(Note that, if there were an efficient fully general function inverter, then inverting the integer multiplication function would give you an efficient factoring algorithm.)