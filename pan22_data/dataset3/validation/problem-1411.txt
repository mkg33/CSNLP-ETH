The faster you get aligned to business needs the faster you get jumped on when there is a glitch because you are already on the biggest problems to business first.
What one's job entails will often have an "and other duties as requested" which is a bit of a catch-all in terms of what one is supposed to do.
How do you take satisfaction in a job well-done when no one knows or really cares what you are doing?
In the past IT was the hammer that drove the nails.
In my large organization, you'd swear that the policy-makers are doing everything to keep people from achieving anything.
1) Get aligned to business by setting up structure of the priority of systems.
If you need recognition and approval, you are in the wrong line of work.
Effective people in our business (system administration and support) are not noticed by their organizations, because the systems work and problems are handled calmly, quietly, and quickly.
I have worked at places where I would almost swear no one cared at all about what I was doing and this did lead to a little burnout from a few different ways.
Where do the misinterpretation problems fit into your "organizational issues" vs. computers and servers?
I somewhat answered this in another answer recently but this is a good topic.
We need to evolve our thinking and update our policies and procedures to accept these new changes or we'll always be stuck in the same old rut.
This is a fact of life because although we are nerdy people, we are people.
Further, the problem is just as prevalent in high-tech companies as in "normal" companies.
Another is being limited in one's box where if I go fix a bug I have to undo my work or I put in a new feature that wasn't approved and have to undo my work which can be really demoralizing as one could just think that, "If I undo what I did, why not just do nothing?"
Do you know about or care about the jobs of a telephone service tech, the auto mechanic, the accountant, the plumber, the cashier, or the bank teller?
If it is repeated often then it may lose significance.
In the end, the only thing you can change is yourself.
It is common for "organizational issues" (such as politics, organizational inertia, and selective hearing -- think Dilbert) to cause more IT problems than computers and servers do?
Be understanding of the other people in the organization, and ignore when they do not reciprocate.
Don't expect them to understand your world and tailor themselves to it.
3) Publish SLAs to ensure that users have clear expectations on how long it takes a particular type of problem to be fixed
That means from the top on down building a culture to handle things in a professional manner and have some conflict resolution procedures in place.
Another way to view this is the "Thank you" that one gets at the end and can go, "Yeah, I helped make that awesome experience," which generally perks up my mood most of the time.
"everything dropped" until the biggest problems to business get fixed.
We understand our parts (for most part) and know how to do it well (again, for most part).
Without meaning to be offensive, can I point out that the problems of the organization (organizational issues) should be the problems of IT while "IT problems" (computers and servers) are not necessarily organizational problems.
But when you need something, you need it now, and you don't care about their issues.
They don't have to know what I did, just that it is done with a positive result.
The satisifaction I take in a job well-done comes from the glow that the person using what I created or fixed allows them to do.
Any organization with more than one person will have "organizational issues", and almost always those will cause more headaches than the technical issues.
2) Get a helpdesk set up which is clearly able to triage issues coming in and then classify them
Again, this is not about computers specifically, it is about people generally.
To prevent these requires having good communications, process and personalities among the people so that things can flow well, IMO.
which led me to that situation of doing nothing and still getting paid.
One of the key issues between IT and "the Others" (sue me, I'm a Lost fan) is that in the Dharmaville we call IT, we know what we're doing.
4) Ensure there is root cause tracking so that every problem is solved instead of seeing the same symptoms reappear
It's pretty hard to say without understanding of what the specific "organizational issues" are.
Recognize that they are just trying to get through the day, and recognize that almost certainly whatever problem brought them to you interferes with that goal.
By this I mean if there is a specification that is open to interpretation and a developer and a tester have different understandings and someone has to come in and be the judge or referee to get things back on track kind of thing.
They are willing to pay me for not doing anything useful, and I've chosen to play with it.
One part is that some people would give me thanks for what I knew was a crappy job but they didn't think it was so bad.
Indeed, how do you stay focused if it doesn't seem to matter if you do anything or not?
Classic examples here can include learning things as one troubleshoots an issue and has to learn about some system or codebase as this is where the problem is found and one should be able to handle it.
Every System A critical problem falls into Group X and group X problems have an SLA whereby a plan to the solution will be out within 4 hours and a workaround will be deployed with X hours.
We came out, provided dumb terminals and as long as the mainframe and network were up nobody really questioned anything.
Nothing gets done without IT involvement now and when people fail to realize that you can't plan to put in a massive product and not even know if 1) It really will help anything 2) If it even works with what we have and if it doesn't what do we need to do to get there.
IBM and Microsoft are just as bureaucratic and silo'ed as GM and Bank of America.
Likewise, is it common for one's employers to not really know what said person's job entails, or even care, until such time as they have a computer glitch, and want everything dropped to have it fixed now?
System A before System B, critical issues before medium issues.