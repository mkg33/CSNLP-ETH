The xml file is then "templateized" as an erb template.
Ansible,Chef,Puppet and Salt all operate on very similar principles.
The end goal is to be able to write a policy for every type of server, and let the configuration management put the server in alignment with the policy.
No one way is "best" as each has its own pros and cons.
You can then run chef on a schedule, so that if the variable ever changes.
The tasks you are describing can be solved in multiple ways.
Another example of managing a logging config file inside chef.
This way you can write your code once, but use it in multiple datacenters and environments.
The advantage of not using appcmd.exe directly, but abstracting it away to a resource, is that a resource can easily take variables as parameters.
The industry as a whole has been evolving from scripts, to configuration management to immutable systems.
We use Chef and the IIS cookbook to abstract the appcmd.exe command idempotent resources.
The config management puts the file into the desired state.
As an example, to manage the web.config of an IIS web server, you issue appcmd.exe commands.
If the resource runs, it triggers a restart of the IIS service.