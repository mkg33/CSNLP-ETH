The inline keyword has been a keyword in C since C99.
I thought macro one is good because it's execute one time and inject the value everytime what we pass it's fast as compare to other , so better to go with macro
The function is exactly what you need and what you should be doing.
In general, your compiler will make better overall inlining decisions and other such low-level tricks than you will.
(Sometimes just making sure the compiler sees the definition (not just the declaration) of the function will make a difference.)
If your compiler is not compliant with C99 (preferably C11), it is time to get a new compiler.
If you profile your application and you find out that that function is responsible for a measurable chunk of your runtime, then investigate what you could do to make it better.
Your macro will potentially evaluate thing[++i] twice, incrementing i twice - and the "caller" of your macro has no idea that this could ever happen.
You can transform your function to a macro with a do { /* ... */ } while (0) trick.
Inline functions are a much better option than macros.
The function approach is much better than the macro.