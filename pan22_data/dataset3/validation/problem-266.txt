We've been using it for about six months and are happy with its cost/benefits.
Personally I find them all a little clumsy and would prefer to manage the configuration files by hand (less effort).
http://www.ducea.com/2008/01/16/10-nagios-web-frontends/
in each new class you must define an escalationid attribute with "Naming Attribute" set and not writed to the output a dedicated configuration file
of your own, you'll need to give up those procedures.
We use monarch, but I don't like it all that much.
you can "extend" the application to support it directly from the web gui
"front-end" for Nagios; instead, think of it as a monitoring system that
You can add new hosts, new services, via the web, and acknowledge the outage.
then define any attribute related to the escalation and that must be written to the configuration file, for example:
generated programmatically, so if you're used to, say, storing your
You still won't be able to add Nagios scripts via the web, however.
It's a web based GUI, and handles things like scaling up the Nagios service via clustering.
For the same reason as you, we had to implement a front-end.
The retail product NagiosXI is reasonably priced and hides all of the underlying text config files.
creating two new classes "hostescalation" and "serviceescalation"
It also records a historical view of services, should you wish to know things like how much CPU a server regularly needs.
Nagios configs in source control, or generating them using some script
I haven't tried anything else either, but you can start here...
The Nagios config is stored in a DB and the Nagios config files are