If you want to target the iPhone/Pad/Touch take a look at wax.
Lua's C implementation is specifically designed to run on embedded devices.
Just as a side note @Sean Edwards: I've been involved in shipping five titles targeting Nintendo DS, Wii, Sony PSP, and Xbox360, all of which used the same engine and were scripted in Lua.
(Lua was a grey area when we released Marooned, but itâ€™s since been officially blessed for iOS development.)
It does depend a bit how much of your game logic is embedded in scripts.
Its free to use until you plan to ship to the App Store or Android Marketplace.
See http://code.google.com/p/android-scripting/ for the recommended way of doing scripting on Android.
Scripting logic is highly unlikely to be your bottleneck (you will actually profile with Shark or Instruments, right?).
Yes, LUA is fast as far as scripting languages go - your still looking at a slowdown compared to native languages of about 30 to 50 times, so it really depends how much is happening in LUA.
I worked on the iPhone version of Marooned, which used a lot of Lua for game logic.
Lua still doesn't fit very well on the Android platform, since it requires C. Of course, you could use the NDK, but that is no silver bullet.
In general LUA is used as high level glue but a lot of the grunt work happens through C(++).
I would have thought it was fine for at least light tasks.
I did a lot of performance tuning, and basically Lua was 0%.
You can actually write your entire game in Lua and avoid Java/ObjectiveC/C/C++ altogether.