It seems the latter would only work well for a game with very few state changes of this sort.
If I later find I need more special cases than this - and only it - I re-factor into something better.
During this sequence, the player shouldn't be allowed to move pieces.
He starts teaching about the State Design Pattern, and then goes on to implement a State Machine, and successively extends it further and further.
I usually design the gameplay as a sequence of actions and consequences, any game state just come naturally without a need to define it separately.
You can use it either for game entities or for a menu system like above.
First off, I'm not referring to scene management; I'm defining game state loosely as any sort of state in a game which has implications about whether or not user input should be enabled, or if certain actors should be temporarily disabled, etc.
I'm just curious if there's a more elegant way to keep track of game states/transitions.
I start by handling this sort of thing the simplest way possible.
I can think of a lot of straightforward ways of handling this using finite state machines, but I can also see them quickly getting out of hand.
http://www.ai-junkie.com/architecture/state_driven/tut_state1.html is a lovely tutorial to game state management!
Generally speaking I never need to go any further than this when it comes to special-case substates, so I don't think there is a risk of it 'quickly getting out of hand'.
After I make a move to take another player's piece, a short battle sequence plays.
I try not to use state machine and booleans for this purpose, because both are not scalable.
Then I'll add the checks against that boolean flag in the relevant places.
For example in your case with disabling player input:
So how would you track this sort of state transition?
As a concrete example, let's say it's a game of the classic Battlechess.
you have some user input handler and some ingame visual indication that input is disabled, you should make them a one object or component, so to disable input you just disable the whole object, no need to synchronize them in some state machine or react to some boolean indicator.
Will give you a solid understanding of how the whole concept works and how to apply it to new types of problems!