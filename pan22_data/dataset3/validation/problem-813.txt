The crontab is never actually touched - only the json file is edited and used for communicating user settings to the system.
"(...) need to know how the user can set specific times to run those scrips via the website."
I made a system using cron, python, php, js and html that does exactly this and more.
Here's some more or less ready-made solutions and links to forum posts that might be useful:
In case of network loss, a ds3132 hardware clock takes over and ensures proper time keeping without ntp.
Python then makes decisions regarding GPIO toggling and other stuff.
When the user has picked a schedule using the timepickers and clicks "save settings", these on/off times are sent to the server where php writes them to a json file.
The user logs in - via https/TLS, of course ;) - and is presented with some javascript time range pickers, sensor graphs, GPIO toggle buttons and a log viewer that fetches historical data from a sqlite db (it's nice to know how many minutes your lights have been on during the last month, for instance).
Perhaps if I'd known about the links below, I wouldn't have gone to this much trouble hehe.
The json file is then read back by a python script that gets called by cron every minute and checks whether or not the current time and sensor values are within the given ranges (it also turns on an arduino that logs sensor data but that's irrelevant here).
There are probably many ways to do it but I can tell you how I'm doing it.