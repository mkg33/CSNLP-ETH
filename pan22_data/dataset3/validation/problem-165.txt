Mutability is often the secret trap that kids fall into, because x = x + 1 is not a sensible algebraic statement.
We don't follow the approach of starting with Hello, world.
I would be concerned that there isn't any material on planning.
For several programming languages (those that were not designed for pedagogy/teaching), starting with a teaching language or environment, and segueing later to the more arcane/abstract coding syntax, might be the easier path, and leave less students out in the cold (or typing magic incantations with near zero understanding).
Those steps could be learned in the first few days of class before a single static void main(String[] args) is ever seen.
So we use an IDE that is more appropriate for the new learner.
Once the students start having fun you can move onto the formal topics.
This is because, if mutability is not explicitly taught, folks just kind of drift between all of the contradictory ideas about = that start to float around in their minds, fuzzing from one idea to another, without any fully concrete sense of what it really is.
Otherwise you risk having everyone that has not already learned that programming is fun from their come computers not seeing the point of learning programming.
Others may chime in by saying they think objects should be introduced late.
So I learned a little bit about each topic in some random order as my overall understanding increased.
If it is not specifically discussed, beginning programmers will take what they know about equality and apply it in an ad-hoc manner to code.
I learned to program by looking at simple program that did things, working out a bit about how they work, and changing them.
Think about segues, motivating examples, and lab assignments, and a sensible order should emerge on its own.
If you don't call attention to the idea of = as an operation, very different from the declaritive $=$ that kids know from math, they may never dig back out if that hole.
Being that the language for AP CS A is Java, we plan our sequencing accordingly.
In our post-AP CS course we can introduce IntelliJ or Eclipse, once the students can comfortably grasp the idea of multiple classes and project directories.
I always try to minimize hand waving as much as possible in the early parts of a CS course to help students build their confidence in navigating code.
Pure ordering should be dictated by how you intend to interconnect the ideas.
This is where the algorithm is figured out, and psuedocode is written.
Nowhere in your write-up is a discussion of mutability, with all of the cognitive traps that it brings.
We utilize BlueJ to begin demystifying Java from the very first day of class.
Questions of what to include, however, are not so simple.
But note that the previous steps require no knowledge of syntax at all.
This step could further elaborate on the details of the Process step, of course.
Sometimes they get it right, sometimes they get it wrong, and there may be little consistency, even with the same student from one moment to another.
The curriculum you've shown us looks like a pretty reasonable objects-last approach to beginning Java.
Remember where they are coming from and that your goal isn't to turn them into CS researchers or software engineers in a single year.
It's also a great place to introduce common patterns in solutions, like the Input, Process, Output pattern so common in beginner programs.
Consider that the best way to teach Java might not be to teach Java (at first).
Personally, I am a fan of the course order in Rick Mercer's CS1 Textbook.
Here's the full outline of Rick Mercer's CS1 text (aimed at college freshmen):
For instance, I use arrays as a motivating example for for loops, so it makes sense to introduce arrays to my students before for statements.
In a course that has the goal of building a strong foundation for students, teaching the process of specifying and planning a solution before implementing it will pay huge dividends.
I do agree with you that arrays are pretty fundamental, though, particularly when utilizing an objects-last approach, as they are the only tool prior to objects that allow you to deal with variable amounts of data.
Of course, Mercer has more specific steps which really show the value.
Therefore maybe start with LOGO and the class having some fun with a Turtle moving about the floor, then loops etc can be introduced along with "if" assuming the Turtle has some sensors on it.
Our decision to introduce objects early was inspired by Dr. Kolling's book's sequencing and the fact that Java is the language taught in AP CS.
There is one additional red flag (for me) that you may want to mention to the instructor.
This notion has been discussed already fairly extensively on this site (such as  my write-up here, or this question here.)
and user input because I think it (main, System.out.println, and Scanner) produces too much of a cognitive load at once .
Your major curricular goals now become central considerations.
Should we leave AP and teach Python or Javascript, I would wait until later in the course to introduce OOP.
While Eclipse is commonly used in industry and higher academia, an introductory course isn't industry or higher academia.
We teach AP CS assuming that our students come to us with no prior computing background.
Thanks to BlueJ, we don't have to discuss main or making tester/runner classes to run our code.
At this point it's September and my students can navigate an entire Java class and the hand waving of public static void main(String[] args) is gone.
Expose them to the content in an order that appropriately challenges them, while avoiding the statement "You can ignore that for now" as much as possible.