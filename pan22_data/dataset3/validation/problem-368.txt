No one outside of Domain (Game) would have access to the Monster class.
You can write some network-specific reflection attributes to attach to class fields that the network layer uses to generate and decode update or event packets.
I'd like to learn more about the different options.
As it looks now, the Messaging layer sits between both layers (game and network) and "knows" both of them (it contains Converter objects that know how to translate between data objects of both layers back and forth).
Academic purity is really, really far down on the list priorities worth caring about out in the real world, especially in cases where none of the theoretical down-sides are actually coming up in practice (what exactly would said coupling prevent or make harder to maintain than the contortions it imposes do?
It's pretty easy to just add a WriteNetworkUpdate method that writes out all the data you need to replicate and a corresponding read method.
Is there a good design for passing objects between layers?
We do this in C++ via a custom reflection system and most other big engines I'm familiar with do something similar.
The second layer would contain the contract between the the objects you want map.
A good looking document after some minutes of googling for an introduction is this.
One way to implement this is to go the route of the data driven design/data driven game engine.
A more advanced way to handle things is to use reflection (especially easy in C#).
I'm looking for a way to be able to convert "game" data into "network" data, such that no strong coupling between these layers will exist.
Game related data is passed to the messaging layer (this could be anything that is game specific), where they are to be converted to network specific messages (which are then serialized to byte arrays).
I am building a software system (game engine with networking support ) that is made up of (roughly) these layers:
A implementation of the network serilisation/deserilisation with this approach seems easy.
Your Networking project would then send/receive IMonsterData types.
I have done two things in the past, the first using converters like you mentioned (AutoMapper), the second is to have another layer which both projects have a reference to.
This isn't much different than your saving/loading code (it might even be the same set of methods for simpler games).
In a data driven engine you don't have hard coded classes which represent your states of the objects, you basically do have only a list/hashtable with names of the variables, and types and the data for the variable itself, maybe with metainformation too (for serilization).