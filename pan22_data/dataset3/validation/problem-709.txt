The answer might be in the question: if a player may get frustrated by too many critical hits in a row, well, directly reduce the odds of this happening.
These are the prior and posterior probabilities respectively.
This gives you two places to tune your arbitrary rules: how long is the countdown and how much reduction is accumulated at each critical.
When the player makes a critical hit you are giving him a small reward to entice further play.
A combination of those two controls lets you clearly avoid the unspoken problem of "what if the boss gets a critical, then normal, then second critical?"
After all the player is a hero and should be favored by the gods themselves to achieve greatness :)
This can still generate back-to-back critical failures, but it guarantees that there will be success (and critical successes) within some reasonable span.
So in your case, let's make A,B,C the events of getting a critical hit with attacks A,B, and C resp.
Of course your tree wouldn't look just like this, but it's the best I could do in 5 minutes.
We notice that at point (B -> P) there is a 25% chance of getting another critical hit given that you got one the last turn.
Then P and NP will be the events of getting another or not.
(Note that in the limit of putting infinitely many copies of the deck together and shuffling them, this becomes exactly the roll-a-die approach.
If the RNG draws a 4th critical in a row, you may for instance wish to re-roll it.
One warning sign of a skewed design is the need to apply more and more special rules.
Bayesian Inference deals with situation quite a bit.
You start with a probability distribution for an event occurring, then once it does, you update this probability to a new one.
Because of this shift of focus you have to decide what your game is about before wantonly applying old standards like criticals and fumbles.
When you run out of your deck, just reshuffle and start dealing again.
Thus my suggestion would be to just keep the crits for the player and not use them for the enemies at all.
In the tree, the branches represent the probability of taking that branch, and the nodes are the event.
You may wish to completely rethink what "critical hits" do in your system and why you're using them.
Sort of like how a gambling addict will stay at the poker table for 'just a little longer' after winning a hand.
I think this is a case where trying to be too smart will lead to a spiral of tweaks and adjustments to the random number generator that will make it very complex.
When the enemy gets hit by a critical it might not be increasing the game experience at all but rather just feel unfair, especially if that was what made them lose the fight.
Any kind of random bonus takes away from direct, tactical player skill and adds to strategic planning (RPG item load-out, prioritizing stats on gear, etc...).
Then rather than rolling a (metaphorical) d10 and handling the result, instead shuffle a stack of ten (virtual) result cards and deal them out, one by one, whenever you need to generate such a result.
One fairly common approach you can use that should give the results you're after: rather than rolling a die every time, instead pick a card : suppose you have a 1/10 chance of 'critical failure', a 4/10 chance of failure, a 4/10 chance of success, and a 1/10 chance of 'critical success'.
If you want things to be not so obvious (and don't mind introducing a small chance of successive extreme results), you can always 'double up' your deck; build a stack of twenty cards which contains two copies of each result and shuffle that instead.
My suggestion is that if you want randomness to take any part in your game then glory in it, let it be random.
I think there are already some nice answers given above but would suggest a different approach.
But if you really want to add more arbitrary rules you can simply start a countdown when the first critical happens and during that countdown any more criticals are reduced to 50% and then 25% and so on.
It's often most useful to view this in tree form (grabbed this off the internet).