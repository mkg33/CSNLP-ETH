If your data file goes up to 20 GB every quarter, then think about this: after you've shrunk it to 5 GB, you've freed up an extra 15 GB on the drive.
Now you have plenty of room in your data file to accommodate growth until the next time you archive data.
Not only are you potentially fragmenting all of your existing data to try and squeeze it into more space (and the impact can vary depending on exactly how you are shrinking), but every time the file has to grow, all transactional activity on that database must stop and wait for that operation to complete.
This is particularly bad with the default settings where files are set to grow by a measly 1MB at a time or - even worse - 10% at a time.
Are you going to lease it out to someone temporarily, then kick them off the drive when your database starts to grow again?
Shrinking just to grow again is extremely disruptive.
The size of the data file itself has no bearing whatsoever on the size of the backup file, since a backup only backs up used pages, not free space (unless, for some reason, you are "backing up" the MDF file rather than taking actual SQL Server backups).