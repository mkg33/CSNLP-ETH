You only recognize one operator in the string to be evaluated, the last one that was typed.
You'll be saying "only add more numbers if there is less than 16 numbers on my screen".
This yields what is called an abstract syntax tree (the ast variable from the last example).
For example, have a variable-declaring section, then a functions section, then the code execution section.
(I put 16 because I tested your code and 16 is the max quantity until your div starts to expand)
You only use the first two numbers of this in your calculation - firstNumber and secondNumber, and you don't follow the usual orders of operation (PEMDAS - or BIDMAS in the UK)
A simple way to do this might be to call contents.split once for each of possible operator, merging the sublists generated each time.
There should only be one element in ast if the expression was well formed.
The solution to this is to parse the tokens we generated in the last step into something which we can evaluate with the right order of operations.
You reference document.getElementById(numberScreen) quite a few times.
A more sophisticated (and efficient) way to do this would be to use something like Dikjstra's shunting yard algorithm.
This has the advantage of giving information about each token, parsing the numbers at this point rather than later and having far better complexity - \$O(n)\$ instead of \$O(nk)\$ where \$k\$ is the number of operators, and \$n\$ is the length of the string.
Since your calculator is intended for ordinary people, the % means exactly what it should.
This breaks up the contents string into tokens, much like contents.split except that it will split on more all the different operators, and can also tag each token to say whether it's an operator or a number.
To solve "There's no limit to amount of numbers in the display", If you change your javascript to:
The left and right hand sides are themselves expressions to evaluate, which we should do before performing the operation.
The easiest way to do this is to go through each operator, starting with the highest precedence so that the correct order of operations is maintained:
Putting this all together, our new final solution, that handles multiple operations and evaluates in the correct order, is:
As one example, clearScreen() and resetOperating() could be next to each other, and evaluate() could be toward the bottom.
You could also group your functions with similar functions, to make them easier to find.
Only programmers think of % being the modulus (or remainder, depending on the language) operator.
The problem with this is that it doesn't give any information on what sort of thing each token is and it isn't very easily extensible.
This pattern of lexing to tokens, parsing tokens to an abstract syntax tree and evaluating or transforming this tree is prevalent in computer science.
We need something more sophisticated than contents.split(operand) here.
This object has three fields: lhs, rhs and operator, which correspond to the left hand side, right hand side and the operator of the operation we should perform.
While grouping your functions, you can check to make sure no functions are called before they are declared -- it won't make the code run better, but it will increase readability.
Why not assign it a shorter variable name at the top of your JavaScript file, like you did with numBtns and operators?
You could group your code into sections, to make it easier to find things.
The sections can be differentiated with comment lines, like:
Fundamentally, your problems lie in the way you are evaluating your input string.
With this function you don't need to mention numberScreen anywhere else in the code, which is good since the calculator code should talk about numbers and operators, not about manipulating HTML.