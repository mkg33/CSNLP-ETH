You can also put in your entire code inside that callback instead of putting it out in the global scope.
Do the same for your interval delay of 7000, as well as the string you use to remove all your classes.
One problem is that you're creating that array each time you call animatemodels.
With that out of the way, what remains in your code is the interval.
I think it's better you stick to making it mean about adding/removing rather than animating.
I'm pretty sure you have some CSS animations going on here, since your code says animate, but it doesn't include animation code.
Assuming they're always from 1 to n, you can use a loop.
Also, the code is simply adding/removing classes, no animations.
You can also dynamically generate your classnames.
Now with regards to code length, don't write very cryptic code because of code length.
I prefer a range function to generate an array and iterate over it using map
You can simply inline animatemodels into setInterval.
Write your code verbosely for your sake and for other developers' sake.
To make them more efficient, and assuming .panzoom elements don't get added/removed during the lifetime of the page, best you cache them outside animatemodels.
Minifiers like Uglify and Closure Compiler have a feature called dead-code removal.
Anyways, making this shorter, jQuery's jQuery(document).ready() can be shortened to $(fn).
For production, run it through a minifier before deploy.
It traces through the code, checks for code that's never reached (your mileage may vary, depending on config), and removes it.