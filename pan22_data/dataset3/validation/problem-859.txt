You can remove the users from the docker group and create sudos for the docker start and docker stop.
Keep all sort of restrictions and checks in the ansible script.
monitoring and logging) then the clients should agree (as part of a software license) not to make unauthorized modifications to them.
If you provide tools to operate the containers you supply (e.g.
Depending on your situation, you may also have the option to provide your app as Software As A Service (SaaS) running in a cloud infrastructure.
If your client requires your containers be run on their infrastructure, and refuses to abide by modification restrictions, then you probably don't want to try to support their use of your software.
Docker doesn't provide any means to preclude user access to the container, however as the image developer you could follow a few strategy
If your client is ready to invest money then you should go with Docker enterprise edition.
Containers are not like binaries that can be obfuscated; they are runtime environments.
Your question alludes to a third-party support issue: clients modifying software they run in their own environments.
In Docker EE you have one tool that is UCP(Universal Control Plane) UCP.
By UCP you can create roles and access rights and restrict the user to change/modify containers.
In short, you cannot prevent your customers from modifying containers they run in their own infrastructure.
Of course they can always export the container and repackage it but those are extreme measures...
If you want to test UCP than DDC(Docker Data Center) having one month trial license which will help you to elaborate the things as per your requirements.
The code you distribute inside the container, however, can be obfuscated.
This applies to all types of third-party software, not just containers.