I would like to use the Raspberry Pi in a commercial product, but I would like to prevent reverse-engineering of the software on the device.
Another option might be a form of Steganography, which allows you to identify who decrypted your code and started distributing it.
My first step would be to have a spare CPU and try reflashing this secure boot memory for a few hours or days.
If you mod the pi a little, I believe that ARM also has a CPUID so their are a number of levels of security you can go for.
I believe it requires 12 volts to reflash the 4,8,16,32 or 64K of internal flash or EEPROM which the pi itself doesn't have.
The software in question would be written in Ruby.
In case the SD gets corrupted I want the end user to be able to write a new one, which includes a custom raspbian, and the code to mount the SPI flash and run the executable.
One of the solutions is to use the MAC address of the RaspberryPi which is almost unique for a given Pi.
The obvious downside is that clients are tied into your service provision, are at the mercy of your servers and their internet connection.
Is it possible to encrypt a portion of the SD card without prompting the user for a key to decrypt it?
It's like encrypting movies, a DVD has to include all of the information required to decrypt the movie so that it can be displayed to the viewer, so all movie copy protection mechanisms are ultimately doomed.
Another option is storing an encryption key in your RTC.
From their, you can setup the Trustzone with your code so all the good stuff cannot be seen.
The problem is, if someone has access to multiple copies of your application data, it would be obvious that it differs, making it easier to identify the hidden message.
Code obfuscation is definitely possible, but less secure in my mind.
The problem is that as with DVD encryption it is doomed to failure and if there is enough of a differential between 3, 4 and 5 then eventually someone will do it.
Eventually, all of the bits become fixed so nobody else can modify your code and depending on the actual product, you can periodically ask for a 2-factor identification (like banks) so the product spits out a code & the reactivation code is sent to the E-mail address.
Now we have established that there is no way to completely protect yourself, the questions become
Most RTC chips have some storage and they could be preprogrammed with the key which allows to unlock and mount the executable from SD or from SPI flash.
I believe that all of the CPUs used in the range of Raspberry Pi support a secure boot of their own.
Why not add  an SPI based flash to your carrier board and store your code on it?
Unfortunately many people object to SaaS for exactly these reasons.
The only really secure option is to provide a critical part of your software as a service, rather than include it in your application.
For instance if the value of the service and cost to customers are both high, but the cost of reverse engineering your code is much lower than the cost of developing it themselves, then people may attempt it.
I assume that the end-user has physical access to the SD card and is smart enough to gain root access to the Pi.
This keeps all of your proprietary, confidential data and algorithms within a domain that you control completely, and removes any possibility of a client extracting either.
Practically, if the code and keys are on an SD card machine, they will be able to de-compile it, they will be able to discover the keys and they will be able to extract the sensitive data.
On the plus side, they are always up to date with bug fixes.
I mean, you could also offer an SMS to a specific number.
If these produce a significant economic imperative to protect your algorithm/data then you should look into doing it.
For people who blindly copy the SD card to a new one, it won't work for them on another Pi.
Conceptually, your application would collect up all of the data required to run your algorithm, package it up as a request to a server (controlled by you) in the cloud, your service would then calculate your results and pass it back to the client, which would display it.
For instance, if you have 100 different float values as part of your data, and a 1bit error in the LSB of each of those values wouldn't cause a problem with your application, encode a unique (to each customer) identifier into those bits.
The option you suggest, obfuscating the code, messes with the economics above - it tries to significantly increase the cost to them (5 above) without increasing the cost to you (6) very much.
I also understand that both forms of static RAM are only stable for a given number of rewrites.
Or is there a better way to make sure the code is only accessible on the desired device?
Encryption would be the best solution, but I can't think of a way to decrypt without asking the user for the key.
The best you can do is change the economics of reverse engineering your product.
This would be a huge step to take though, and could have a huge cost 6 above, but is the only way I can see to keep your algorithm and data completely secure.
Other who are smart enough to break this may be smart enough to remake the software, their are not numerous and I don't think they will hurt your sales.
Verify this address inside your code and provide the compiled version.
This will put away the large majority of people stealing your software.