However I don't know if this is perfectly normal or not, or if there's another way of maintaining security.
No administration of disk space, no need to provide HA/DR, grow to hundreds/thousands of DBs etc.
-- all the usual suspects, in other words, and the number of databases on the server played no discernible part, a conclusion affirmed by the highly-paid specialist consultants we consulted regularly.
Think how will you monitor and manage file allocation, disk space used and database growth across hundreds of DBs.
I suspect performance may have suffered ever-so-slightly if each client had a separate user/pass -- but only slightly.)
As you grow into hundreds of tenants you'll realize that the logistics of administering 100s of DBs are far from trivial.
The bottom line is that you should focus your concerns on your application, on your infrastructure, and not on the number of databases you happen to have.
(Caveat: Contrary to the apparent gains in isolation by using separate databases, all data was accessed through a trio of tightly coupled applications that all used the same database user/pass!
Scenario like yours though are a perfect candidate for SQL Azure databases.
Think what will be your High-Availability/Disaster-Recoverability scenario in a near future with 1000 tenant?
As I left, there were over 4,500 databases running in one MariaDB cluster, nearly 7,000 in another (ironically smaller) cluster, and 4 "shards" (completely separate, independent web and database servers, even in a wholly separate data center) each hosting 200-500 databases in a single MySQL server.
I recommend you read Multi-Tenant Data Architecture, a white-paper that discusses the options you have, and pros and cons.
You are now at separate DBs stage, which offers the best separation (isolation between tenants), but is the most difficult to manage.
), performance-related concerns boiled down to concurrent accesses, query complexity/time, index performance, etc.
From my experiences working closely with the sys admins (technically I was a programmer with the company, but in reality I was the best DBA they had, and the only person they had who knew how to set up a firewall!
"sure, let me set up 500 publishers, it will be fun"!
Think what if in 6 months your dev team comes to you and say "I know how give this awesome feature to our product, we'll use Transactional Replication!
I am thinking it might be unfeasible to have one database per client in this instance (to store sensitive records and audit history).
However, we're developing a new system that will have 50-100 clients, maybe more.
The long and the short is that the success of that company proves that such an architecture is indeed feasible.
At my previous job, we hosted not just one database per client -- in most instances, it was more than that!
All those other factors will be more than enough to keep you busy resolving performance problems and bottlenecks.
Additionally you need to consider that multiple (hundreds) DBs have measurable impact on performance and cost:
Separated DBs come with some advantages though due to isolation, the main advantage being independent backup/restore.
For one of our systems, we have sensitive client data and store each client's data in a separate database.
Think backup-restore (location of backed up files, jobs, schedules etc).
Is not impossible to manage hundreds of DBs, but if you plan to, you better polish up your PowerShell skills and stop using the UI management tools right now.