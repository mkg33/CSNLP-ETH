The structure you pick should depend on how your actual data is structured.
But that's pretty easy,  and now there's all sorts of other ways you could slice this data.
Anyway, you should not worry about joins and performance at this stage.
I think you'll find then the performance works itself out.
and then one table for each day... for ex: monday with structure:
Not to dismiss your question, but I would focus more on a solid design that captures the information in the simplest way and without putting undo constraints on your application.
So you may want to add validity period to your schedule table.
Will you always need all the fields from all related tables, or just a certain weekday?
I. I can use all fields in the same table, for example:
Which structure of these 3 structures you think is better in performance?
You could even create 7 VIEWS (S,M,T,W,T,F,S) that return only events on each day of the week, if that's so important.
You are obviously familiar with data normalization and joining tables.
Example of one problem: what if a shop has two time slots in one day?
If you have proper indexes they can work very well.
How many fields do you need to return with your queries?
You will have to cache all this information anyway.
I want to design a db schema concerning a schedule.
Your schema number III looks better but how will you handle something like "Shop A will change its schedule (eg close on Mondays instead of Sundays) during next Christmas period"?
or I can use more tables one for schedule with structure:
To figure out a day's schedule, you then have to do some work on those DATETIME fields to figure out whether they were on Mon, Tue, etc.
If you use the first option, is it likely you will need the row to be inserted all at once or will you be updating later?
First, you should understand that JOINs don't necessarily hurt performance.
or I can use one table for schedule with structure:
and then only one table for weekdays with structure: