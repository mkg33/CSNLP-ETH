                       (maximumBy (comparing spanLength) [maxWin, curWin])
I wonder if there are ways to make this cleaner without changing back into a worse complexity class.
import           Data.Ord                       ( comparing )
import           Data.Foldable                  ( maximumBy )
          -- If current element is duplicated, move window start to
I'd be happy about any kind of feedback - thank you in advance already!
  -- Recurse over each position and try to expand as far as possible from there.
The resulting code literally looks like this though: imperative code squeezed into Haskell.
  // for each element, stores the position where he have last encountered it
-- |Return a maximum-length substring without repeating characters.
  // invariant: window_left points to start of current unique window
After I had it working in C++, I naturally wanted to optimise my Haskell version in the same way.
-- |Return a maximum-length substring without repeating characters.
import qualified Data.HashMap.Strict           as M
  takeWhileUnique (x : xs) seen = if x `S.member` seen
          -- Otherwise expand window and check if we have a new max.
          -- the right of the last encountered version and continue.
      // current character is already in the window
  -- Slide a window over the string and try to expand it if possible.
It goes over each position of the string, tries to extend a substring until a repeated character is encountered and maintains the maximum while doing so.
The problem I'm looking at is the "Longest Substring Without Repeating Characters" problem from LeetCode (https://leetcode.com/problems/longest-substring-without-repeating-characters/).
solution xs = spanExtract (solution' xs M.empty (0, 0) (0, 0)) xs
  -- Take elements from the list until the first duplicated element is encountered.
  // invariant: saved_left points to start of longest unique window
        recurse     = solution' xs (M.insert x curRight seen)
    else x : takeWhileUnique xs (x `S.insert` seen)
-- This is the more sophisticated O(n) implementation.
I started learning Haskell a while ago and now I am in this dangerous state where I can produce code that does things but which probably makes experienced developers hit their heads against the wall :) So I thought I'd try posting it here and get some feedback.
 * Return a maximum-length substring without repeating characters.
          then recurse (lastSeenIdx + 1, curRight + 1) maxWin
Lots of ugly index manipulation which makes it super easy to introduce bugs.
  solution' (x : xs) seen curWin@(curLeft, curRight) maxWin =
    let lastSeenIdx = fromMaybe (-1) (M.lookup x seen)
    in  solution' (tail xs) (maximumBy (comparing length) [longest, uniqueStr])
import qualified Data.HashSet                  as S
Next I switched back to imperative programming for a while and implemented (with a bit of inspiration from the official solution) this nicely optimised O(n) sliding window algorithm.
      // current character is not in the window yet
  // invariant: i points right of current unique window