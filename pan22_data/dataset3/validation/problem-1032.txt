It was the wrong decision and hamstrung the performance of our tools for quite some time before we were able to transition to GUIDs.
Ofcourse you can also opt to use the external identifier as your idental identifier, at the cost of higher memory-usage and slower performance.
But if you have a small project the overhead of GUIDs isn't likely to be problematic either, so I'd just say you should use those for the best future scalability.
Every project I've ever worked on that used named-references had trouble with them, so I would absolutely recommend against them.
It is easier to think about it when you make a distinction between external identifiers and internal identifiers.
An asset has a unique external identifier that is referenced in configuration files, makefiles, documentation, etc.
The effort it takes to build tool support around GUIDs is less, in the long run, that it will take to cope with named-references.
For the internal identifier, you can choose to use either memory locations (pointers), increasing integers or GUID's.
GUIDs do have disadvantages, but they are all solvable with a little effort.
I would strongly advocate the use of IDs, and GUIDs especially.
Plus it is human-readble, much more so than a GUID.
If you have a small project, just by yourself or maybe a handful of others you can get away with using IDs (giving each person a dedicated "block" of IDs, for example, can easily avoid the clashing problem for some time).
So you might want to use a path-based scheme such as 'resources/textures/walls/concrete.png'.
Typically the resourcemanager that loads your resources can be used for this.
This identifiers tells you a lot: that it is a resource, that it is a texture, that it belongs to the texturegroup 'walls' and even where it can be found on the disk.
Once an asset has been loaded into your application the assets might get an efficient internal identifier for internal referencing.
To get an internal identifier from your external identifier you will most likely need a central mapping/repository in your application.
On Guild Wars 2, we used named-references to content for several years early in development.
Finally, about the point of missing references: as resources are typically lazy-loaded at runtime, you should have some kind of test-suite or integrity check for your application anyway, so I don't think it will matter much what kind of identifier scheme you will use.
For the external identifier, I would use a consistent naming scheme, following the convention over configuration paradigm.