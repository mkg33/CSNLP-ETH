STL is a good fit for some problems, using it for those problems should be fine.
I personally don't recommend it, except perhaps for EASTL as mentioned above.
1) Dynamic memory allocation often wastes a lot of runtime in games when STL is used.
The question should be: Is there something inherently wrong with using STL in games?
The biggest issue to watch out for when using STL in game development is memory allocation.
In military simulation STL is used all over the place.
STL's default allocators don't seem to fit well into preferred allocation strategies for game development.
Add to this that if your codebase is non-STL, you may not have anyone familiar enough with STL or template concepts to implement the custom allocators correctly.
Back when I worked in professional game development, STL was too immature and bloated.
Now I work in military simulation, which has even tougher performance requirements (like the framerate can never go below some FPS).
2) Use of STL encourages an array-of-structs approach to game architecture, whereas a struct-of-arrays approach is much more cache friendly.
Read some books and look at the implementation code in the STL you are using.
Just make sure you know how to use the STL, and use it in your game.
I'd say no, STL is most of the time a better implementation than what a user would come up with on their own.
Some of the people who tell you not to use STL use the argument that it's not always the perfect or even the best solution to the problem.
I've seen it and heard it, and one of the culprits seems to be compile times for template libraries.
It's a mistake to assume it's useless, yet it's also a mistake to assume that it is appropriate to use in every situation.
I have two main problems with STL (technically "The C++ Standard Library", as STL is no longer the name) in games.
I hold iteration count to be of the highest importance, so I just stay away from the STL, and any other development technique that slows down iterations (like architecting for the sake of it, or script languages that need to be compiled).
As with most questions the answer is never "yea or nay", black or white.
Of course custom allocators can be used, but this makes the whole idea less appealing if you're considering whether to add STL to a non-STL codebase.
Costly iterations lead to huge development teams of people trying to get stuff done with very little actually happening.