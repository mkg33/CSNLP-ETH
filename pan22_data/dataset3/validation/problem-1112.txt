These are obviously several generalizations and not comprehensive:
One huge difference i think, is to understand and design some classes for functionality, and other for drawing, this helps and makes your program cleaner.
Using software is great, helpful, useful, but not fun.
I made a few games with XNA (C#), now im doing a mid-size game as you say, a strategy-simulation game, been working on it for almost 2 months now, and im do it alone with no help, so i must keep my code simple.
However, the game programmers have the same problems when they leave their game programming domain.
For a solid general purpose software developer, what specifically is different about game development, either fundamentally or just differences in degree?
Anytime you take your skills to a different type of application domain you are going to find that the transition isn't as smooth as you may have hoped because there's always differences.
As for object interactions and laying out your architecture, you can still properly decouple systems.
I still find DirectX, UDK, XNA, Unity more fun to code.
You can constantly test your game, you implement different physics, which results in different behavior.
I've done toy games like Tic-tac-toe, Tetris, and a brute-force sudoku solver (with UI) and I'm now embarking on a mid-sized project (mid-sized for being a single developer and not having done many games) and one thing I've found with this particular project is that separation of concerns is a lot harder since everything affects state, and every object can interact with every other object in a myriad of ways.
I think you have an answer there, there are a lots of interactions.
That is the nature of the game though (pun intended), it combines all of these systems into a single, cohesive unit, and there's nothing wrong with that.
Of course, if you are doing a game you need to have more resources, like images (2d or 3d) and music (or sounds).
Once you build a few applications then it'll be like anything else, you'll learn what you like and not use what you don't.
From my experience, game programming is actually a lot more fun compared to software development.
I don't think game programming is any different than other application domains from the standpoint of it being harder to pick the right separation of concerns.
More varied backgrounds (artists, programmers, producers, with each there is even more variation).
The game I'm working on is turn-based and the graphics are going to be fairly simple (web-based, mostly through DOM manipulation) so real time and 3d work aren't really applicable to me, but I'd still be interested in answers regarding those if they're interesting.
So there are differences, i think its harder, but its very funny.
With that said, I think game programming seems harder for many people because it requires you to work with parts of the computer that most programmers never have to deal with at their real job (low-level graphics and sounds) and more applied math than many people are comfortable with and not because of separation of concerns.
In software development you have certain business rules to abide by, it gets little boring.
Your gameplay objects and behavior, will clearly have dependencies on each other and on these systems.
PS: I use the latest tools for software development, HTML5, Asp.Net, C#, etc.
Maybe its just me, but I find game development much more intriguing and exciting than traditional software development, regardless of the tools use.
While there's always difficulties determining the right choice for separation of concerns, I think the difficulty with separation of concerns you are experiencing is simply moving to a new problem domain.
What worked in your database application has many patterns/idioms that don't work so well in your embedded app, which has many patterns/idioms that don't work so well in that real-time system which also has many patterns/idioms that don't work in game programming.
It might seem so because the scale of it all is larger than you're accustomed to.
Feel free to retag this, I'm not really sure what tags are applicable.
I'm primarily a game developer and not a traditional software developer, but I think there are several key differences.
So far I've managed to keep the code reasonably clean for my satisfaction but I find that keeping clean code in non-trivial games is a lot harder than it is for my day job.