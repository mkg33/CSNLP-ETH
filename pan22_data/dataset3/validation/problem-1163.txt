Long term that not so obvious match might make remembering to update permissions whenever things changed difficult.
The Linux mount command allows specifying a credentials file for username and password thus making them easier to update and more secure than command line script or fstab (i.e.
If that is acceptable security...why not just have an open share without any user or password?
Sharenames remove all the host file server path considerations.
Kerberos logon servers in *NIX Realms can be linked to Windows AD Domains.
more of a remember to clean up credentials mistaken added under wrong account).
On the other hand its probably overkill for most home network situations.
It would just be a different DFS system private to the target PC to incorporate mounted network shares using stored credentials passed by SMB and logon services rather than hard coded in script and sent as clear text UNC.
Kerberos logon servers in *NIX Realms can be linked to Windows AD Domains.
Long term the best simple thing is probably to permanently map a local drive letter to the network share.
I am pretty sure Windows command shells and DFS can do the same thing (been a while).
Sharenames remove all the host file server path considerations.
The credentials storage answer by Matt is the most elegant for a modern Windows PC.
But if its legacy Windows or Linux you might need to go slightly wider.
You must provide them using net use, runas /netonly, or when asked by Windows.
On the other hand its probably overkill for most home network situations.
(If you have some programming skills, you can store the SMB password as a "domain credential" using CredWrite(), which is equivalent to checking the "Remember password" box in Windows.)
Although not stated the credentials storage used should be for the service account.
And its also an area where MS might change how security passes credentials yet again and break things.
Honestly there are more secure ways to logon to shares than UNC URI.
You can add the credentials in Control Panel/Users/Windows Credential Manager so that the credentials are cached.
A non-domain PC should not really care about DFS to which it does not subscribe or directly participate.
I think the user name and password has to be passed to the server for authentication first before any file access can be done, so the code handling the SMB connection has to be able to parse and extra the user name and password from the URL.
That is both to ensure availability to the service and so that any other users you do not want accessing that share cannot (e.g.
The simplest immediate solution would be giving the service credentials direct access to logon to the share (e.g.
I am pretty sure Windows command shells and DFS can do the same thing (been a while).
Protect the mapped drive with permissions only for service (and appropriate admins etc) plus sharename might be hidden with leading &.
Remember to set the correct permissions to the password file so normal users can't read it.
Also consider if that nondomain PC will remain a non-domain PC long term.
It would just be a different DFS system private to the target PC to incorporate mounted network shares using stored credentials passed by SMB and logon services rather than hard coded in script and sent as clear text UNC.
You would add the device name (server.domain.local) with the domain username/password, then you should be able to access the share without providing the credentials again.
Note that it is bad practice to store passwords in clear text in configuration files, so even if your program can handle password in URL, you should consider the mounted share method.
Linux requires network shares to be mounted first ...usually as a directory in the root file system in manner very much like DFS.
Though if you are using DFS for any good reason other than hobbyist self-challenge its probably best.
UNC and URI are themselves a clear text communication protocol.
You'll have to check if that code supports this format or not.
Probably what you want to do for any serious long term project involving more than a few people.
A non-domain PC should not really care about DFS to which it does not subscribe or directly participate.
Protect the mapped drive with permissions only for service (and appropriate admins etc) plus sharename might be hidden with leading &.
If it doesn't, you can mount that SMB share through SAMBA and direct your program to use that "local" path.
Long term that not so obvious match might make remembering to update permissions whenever things changed difficult.
Though if you are using DFS for any good reason other than hobbyist self-challenge its probably best.
And its also an area where MS might change how security passes credentials yet again and break things.
The simplest immediate solution would be giving the service credentials direct access to logon to the share (e.g.
UNC and URI are themselves a clear text communication protocol.
Honestly there are more secure ways to logon to shares than UNC URI.
On Windows, you cannot put credentials in UNC paths.
You can put the mount into fstab and use a SAMBA password file to supply the user credentials.
Note that putting passwords into URIs is deprecated, and you should not rely on it being supported anywhere.
The Linux mount command allows specifying a credentials file for username and password thus making them easier to update and more secure than command line script or fstab (i.e.
Long term the best simple thing is probably to permanently map a local drive letter to the network share.
Linux requires network shares to be mounted first ...usually as a directory in the root file system in manner very much like DFS.
If that is acceptable security...why not just have an open share without any user or password?
Also consider if that nondomain PC will remain a non-domain PC long term.
Probably what you want to do for any serious long term project involving more than a few people.