★ That last idea could be implemented with a generator function.
Sometimes, it is preferable to rely on the boolean overload of an object.
★ I don't quite understand why you write each page to a file.
For this, the if __name__ == '__main__' trick is used:
We could build such a generator function that yields a beautiful soup object for each page, and takes care of fetching the next one.
★ First of all, congrats to your Java-ridden mind for not forcing classes into Python where they aren't needed.
★ Do not compare to None via the == operator – this is for general comparison.
★ Your allstars variable should not only be named something like all_stars (notice the separation of words via an underscore), but also not be a global variable.
To test for identity, use the is operator: if stars is None.
This is useful when handling binary data, but a HTML page is text.
That library has a horrible interface and is more or less broken by design.
★ You import but do not use OrderedDict and operator.
Instead of hardcoding the encoding utf-8 (which isn't even the default encoding for HTML), we could use a better library like requests.
A Python generator function is similar to a simple iterator.
★ You declare a few variables like room, url, and pages up front.
I suspect this was intended as a debugging help, but it doesn't add any value to a user of that script.
Instead of cluttering the current working directory, make this behavior optional.
★ It is customary to write your code in a way that allows it to be used as either a module, or a script.
For example, arrays are considered falsey if they are empty.
That's a beautiful excuse for writing code, and the final product is quite nice as well.
You might notice that the .read() method returns raw bytes, rather than using the charset from the Content-Type header to automatically decode the content.
Consider passing it in as a parameter to add_stars, or wrapping this dictionary in an object where add_stars would be a method.