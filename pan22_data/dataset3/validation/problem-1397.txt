Anyway, all of the above is subjective, and if you're dead set on storing these dreams in files, by all means do so.
Does this sound like the appropriate answer to your question?
and from the description you seem to be weighing the use of a database against hardcoding these dreams.
And somewhere in there you seem to have a notion that a database won't be able to handle a large amount of data - which, I mean, isn't that sort of the point of a database?
So if you think a database somehow can't handle some magnitude of data, you must not have much experience in the corporate world.
Databases are designed to store far, far, FAR more information than you would find in any typical code base.
Let me tell you, databases handle ungodly amounts of data and they retrieve it faster than you would think possible.
And then the userdreams table is what ties the two together; each night you insert one row into this table per user, which has their userid and the id of the dream the user has (or more likely, when an user logs in you check if they haven't logged in since the previous day, and if not then assign them a dream and pretend as if the dream had been given to them overnight - but that's an answer to a different question).
Just make sure you know your reasons, and that they are true, measured reasons.
It is also difficult to discern exactly the question here - I think you're not even sure exactly what you are asking.
To guess that a database is slower is simply unfounded (or I'd like to know where you got that idea).
The dreams table is added to by the designers, and you can make a nice designer-friendly form that lets them write dreams and submit them into this table.
It shouldn't be arduous if you use a reasonable database API for it.
Most online games, and indeed most sites, use a database these days.
What makes you think that a system can cope with it in hardcoded form, but not when it's stored in a database?
So go read about relational databases, know what a primary key and a foreign key are, and then look at this simple schema that I think is basically what you need:
So the users table is where user details are stored - username, hashed password, etc.
As I said, it's difficult to tell exactly what needs answering.
So I guess my biggest recommendation to you, is for you to make sure you understand their strengths; the concepts of a primary key and a foreign key are especially important.
From reading your question and comments, I get the sense that you don't quite understand relational databases.