I've got some basic rendering done that mimics the spritebatch functionality of xna (draw sprite, rotation, color).
Drawing to a texture and then using it to draw a quad on screen has several problems:
float virtualX = pointer.getX() / resolutionX; This way if the pointer got moved by 50% of the screen it will always end up being 0.5.
As you're developing a 2D game you're probably using an ortho projection so this shouldn't be a problem as you only need to scale its height (or top/bottom parameters, depends how you calculate the matrix) with glViewport() taking care of horizontal scaling.
Q1)Would this be an okay method to scale up/down the drawing?
I'm currently developing a sprite based 2D game for android using opengles 2.0.
But all of this works for a fixed projection matrix, but android has a lot of screen sizes.
Convert your input to a virtual unit system and have your game accept it, e.g.
Would it be okay to get the position, and then scale the position to size of the texture used for rendering, and the perform calculations on it?
I currently get the position of a touch and use it raw.
I found the above through some searching, not sure if it's the best one, are there any alternatives?
The only proper way to solve it is to modify your projection matrix.
Q2)How do you handle inputs for different resolutions?