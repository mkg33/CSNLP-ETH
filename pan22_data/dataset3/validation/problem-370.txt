Having them in the same script as a dict doesn't really sit too well with me.
                         (self.position_vertical - i.position_vertical) ** 2) < self.distance_panic:
        self.turn_speed = self.turn_speed_panic  # Set turn speed to panic mode
        self.direction_end_of_turn = math.remainder(self.direction_to_point(cat.position_horizontal,
And I'd say take a look at whether all of your boolean fields are necessary.
                                     cat.position_vertical) + math.pi, 2 * math.pi) + random.uniform(
        self.edit_parameters_after_doing_turn()  # General stuff after turn of all Animals
You can pass that cat value to self.do_turn_near_cat as self.do_turn_near_cat(self, cat), because that method should require a Cat to begin with, and thus remove the need for that boolean field in Mouse.
I highly suggest storing those in a class instead, maybe something like AnimalProperties?
That would be the smallest step from where you're at now.
        # Set turn time to panic mode (shorter, makes for nice zig-zag runs sometimes)
I'll comment on two specific things I noticed while briefly reviewing (I hope I don't come across as harsh where I'm just stating observations):
Also, avoid writing confusing things like if self.is_near_cat is not False, because I immediately thought "sooo, if it's True?"
    # Executes a turn when the mouse is near a cat
            self.do_turn_relaxed()  # Else, stay relaxed and move slowly and randomly
        self.acceleration = self.acceleration_max  # Set acceleration to maximum
My suggestion would be to either take full advantage of named parameters (shoutout to **kwargs), or configure the Cat and Mouse properties externally.
        self.speed_end_of_turn = self.speed_panic  # Set speed to panic mode
        elif self.in_buffer():  # Only think about buffer zone when far away from cats
            if math.sqrt((self.position_horizontal - i.position_horizontal) ** 2 +
                                    -self.turn_angle_tolerance_cat, self.turn_angle_tolerance_cat)
There are many details like this, so try to look at all your functions, what they require, and model those appropriately, and take a closer look at the necessity of all your class fields.
        if near_cat:  # Fleeing from cats is first priority
dict is not very type-safe; it requires you to access common properties by strings.
Returns ID of cat if cat is near, otherwise returns false [ID or bool]
For example, in Mouse, self.is_near_cat is only used to hold the result from self.near_cat(), which either seems to either return False (should be None) if not near a Cat or a Cat if it's near one.
        # Set direction away from cat (with some tolerance)