Once your Maze object has copied the maze definition into a private instance variable, it's free to do whatever it wants with the array, including modifying it with temporary roadblocks.
Since you have to find all paths, an exhaustive search is necessary, so I don't think you need to use any fancier algorithms.
I've renamed search() to pathsFrom() to clarify the meaning of its parameters.
It should just be returned from the pathsFrom() method.
I've also renamed exist() to isInBounds() for clarity.
Your recursive search is fine, as long as the paths through the maze are short enough not to overflow the stack.
The count of the number of paths is not part of the state of the maze, so it should not be an instance variable or a class variable.
I agree with @rolfl that static variables should be avoided, and that modifying the input matrix is naughty.
However, I recommend a different remedy: make a Maze object.
(By the way, class names should be UpperCaseLikeThis in Java.)
â€¦ except that the version using finally restores the state of the matrix even if an exception is thrown.
In the implementation of pathsFrom() above, I've used a slick language trick to sneak in a statement before returning.
(Recursion generally results in depth-first search behaviour.)