You need to surround it in quotes and escape the double quotes inside.
Also, while you can invoke Powershell from cmd using powershell -c <command>, that wouldn't really help here because you'd have to escape the string using cmd's silly syntax anyhow.
Single and double quotes otherwise work as you're using them, with the ' delimiting the start of a string and the " appearing just as literal characters inside it.
I recommend using Powershell instead; it uses rules much more similar to those of bash on other *nix shells (though not identical, notably because it uses ` (backtick) as the escape character instead of backslash).
Another option is just to use the Windows Subsystem for Linux (WSL), which lets you run Linux programs (including the default Ubuntu versions of bash and curl) directly on Windows, no VM or rebooting needed.
The problem is your -d argument with double quotes as the argument.
I had to specify the path because I don't have a curl.exe in my Windows PATH.
Personally, I'd stick them in a file, then use -d @filename for clarity.
Note that you do have to provide the path to a curl executable, or at least specify curl.exe; curl by itself is a Powershell alias for the Invoke-WebRequest cmdlet, which can do most of what the cURL program can do but has very different argument syntax.
However, I could just escape the space in "Program Files":
The leading & is required because the path to the program is a quoted string.
Command Prompt's character escaping rules are both archaic and awful.
Full details about this can be found at https://msdn.microsoft.com/en-us/commandline/wsl/about, but the short version is try running bash (or bash.exe) from any Command Prompt or Powershell window, and it will install the Linux subsystem or at least tell you how.