I mean you could go with: implode(',',array_map(function(){return '?
Like all speed tests, the only relevant information for your project(s) is performance in your exact environment.
I don't have any formal benchmark results to post.
';},$arr)); but it seems less elegant and is less efficient.
In my few simple tests on 3v4l.org, I found that the rtrim(str_repeat(sizeof())) method is slightly faster than Xiaoy's implode(array_fill(),sizeof()) method and my substr(str_repeat(sizeof()) method.
When you are writing for loops, always cache the count() by setting it to a variable in the first expression.
My above methods directly generate a string (no temporary array) then merely trims the last character (comma) off the end.
When you want to loop through all elements in an array, you can use foreach() to avoid counting the array size as well as declaring and incrementing a "counter".
Always do your own benchmarks, but be careful not to waste time micro-optimizing.
This will ensure that you aren't calling count() on every iteration.
As an aside, I would like to suggest some micro-optimizations that I use as a matter habit...
Xiaoy312's suggestion is one of the common methods used to generate comma-separated placeholder strings.
All, in my opinion, are equally elegant and in all reasonable cases the performance will seem equal to the end user.
'?,';}),','); is surprisingly efficient but like array_map() it is less compact/elegant than other fill/repeat methods.
All three mentioned methods will use 3 functions and no conditionals.
valued elements, then joins them into a string using commas as glue.
rtrim(array_reduce($arr,function($carry){return $carry.
When you are assigning array keys starting from 0, you can let php index the array for you.
When the result of pre-incrementing and post-incrementing is the same, I use pre-incrementing as the default because I read that it is ever-so-slightly faster.