finding out which item was clicked) it's the only way to get the data your code needs.
If there is one div to many in your real DOM, then your code breaks down.
I would advise to refactor to a react-only solution, making the following changes:
But the code is very dependent on the structure of your form in the real DOM.
It may work, and it is efficient: react is only triggered after submit is clicked.
that a DOM node is not the same as a DOM element).
Is it considered best practice while handling event, to access event.target, which is the original DOM, and do something with it, rather than dealing with React virtual DOM?
It is generally considered best practice to not change DOM directly, but let react handle have monopoly on DOM changes -> You're good here, you do not change DOM, you only read from it.
The big advantage is that all your code and all your logic lives inside the react structure and lifecycle.
And to debug, one also needs to understand the tricky real DOM traversal methods (e.g.
Please let me know if there are more improvements can be made.
As an introduction, I would like to have my inputs validated with the built-in validation HTML5 attributes, e.g.