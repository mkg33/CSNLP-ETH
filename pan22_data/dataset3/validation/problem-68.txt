If you want to wait for the user to press a key before ending the program, it's generally better to build that into your own code:
I am not a fan of underscore at the ends of identifiers:
Print might read better as Printer, ObjectPrinter or WhateverPrinter.
Under the circumstances, a using directive seems highly suspect.
If you had put it on the front I would have been a lot more complainey about it.
The name of a typical class should also be a noun, not a verb.
If you're talking about spacing and such, here are changes I would make.
No reason to involve objects in a program like this at all.
Just sticking the print statement in main would suffice.
Would really stink to get a nasty error message from the compiler because you happened to define a function called copy (which might conflict with std::copy).
Don't indent the public: specifier in the class -- leave it flush with the curly braces that mark the class definition.
I'd also add a parameter (with a default value) so it would be easy to use a stream other than std::cout when/if necessary:
Given how little the program does, the Print class accomplishes nothing useful or positive at all.
If it's going to be a class at all, it should probably be a functor.
Note that these are entirely subjective and people are probably going to disagree with me.
In addition to what Billy said, I find Obj.print_() to look strange in C++ code.
Frankly, even using the functor strikes me as silly in this case though -- you're taking something simple (print out a string) and making it much more complex without getting anything in return.
The one thing that is not C++ like for me is this:
For that matter this class has no private members so I would just change class to struct and remove the access specifier entirely.
I've seen the _ suffix (or a m_ prefix) to denote members quite a bit but I've never found it useful to attach this sort of decoration to a name.
I prefer seeing class names that are nouns and method names that are verbs.
Using system("pause"); is also quite non-portable.
While there are times/places that it's useful, this doesn't seem (to me) to be one of them.
This tightly couples the print method to a particular output method.
A verb signals that what you have is a single action, which is not a good candidate for a normal class.
It would be better to allow the user of your object to define what the output method is:
Which means you need to define an output operator for you object:
I would remove using namespace std; and explicitly qualify those members which are in std.
The reason for this is the implicit private region in the class.
If you're talking about "design", it seems overengineered to me.