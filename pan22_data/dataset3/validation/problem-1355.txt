Then for my thought, I would go for writing specific level in its own class but inherits from the base level class.
While you are building this game, always take note of all code duplication and other code smells you might encounter.
Anyway, please be warned that if one of your team or yourself have already finished creating several level-specific classes, and right after that something is changed in a base class.
This also goes for the script files, which can even be pre-parsed to further tamper-proof them.
Those virtual function usually be provided for the following cases
Also, I'm not sure what your reasons are from being averse to loading files, but are you aware that it is possible to embed files in your .exe's and .dll's?
It might make sense for some code to be part of the base class, or perhaps some levels subclass each other or really start reading in files for level data.
The level itself should not be a type of platformer-level, or angry bird-like level.
Definitely make subclasses that inherit from the base level class.
They all have libraries that make it easy to embed them in your c++ project and have access to the objects therein.
We added these kind of functions to cover differentiation that might happens.
It may effect all its child to be updated and corrected!
Depending on how different the levels are from each other, it might make sense to do like most game studio's do and have the levels run scripts.
I assume that the level is not too complicate, but very straight forwards enough to let this to flexibly happens.
(I think that the approach to load a level from external file usually needs only 1 main class file and handle everything inside, so it's trading off.)
Since level-loading and basic level operations don't have real performance constraints, scripting language performance is not an issue.
Last thing is that be sure to put common / core things into a base class that allow flexible use for inherited classes.
This gives you full flexibility over what happens in each level without the code becoming exceedingly complex.
That's it, the other things in a level can be easily done through normal approach.
Surely each level would have something different from others such as events, new enemies, background images, available weapons / items to use, etc, in order to tackle this we should allow for specific class to override the normal (or empty) behavior of the base class through virtual function.
A powerful scripting language like Lua, Ruby or Python can significantly increase your versatility when building a level.