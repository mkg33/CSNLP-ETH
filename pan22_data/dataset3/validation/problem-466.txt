Overall, this project has potential and I hope you keep improving it.
On the user's end of things, it has nothing to do with jQuery (sure, you can use jQuery to set up your event listener, but you could do that with any custom event) and the places where it does rely on jQuery internally are fairly trivial and easily replaced with vanilla JS; for example:
Right away, something jumps out at me about the overall architecture.
Try to extract some things out into named functions, keeping them under around 25 lines each.
Also, the way the data in traj is presented could probably be improved.
Internal identifiers are not quite as important, but don't skimp on the user-facing stuff.
As a proof-of-concept, I've removed the jQuery dependencies.
The English language has a large vocabulary; find a nice descriptive word and use it.
Ideally someone reading your code should be able to look at an entire function in approximately 80 columns by 25 lines without scrolling, so he can easily comprehend what that function does and move on to the next.
Looking forward to a followup question and unicorn 2.0!
If the user wanted to compare it to a string, it would automatically convert to "SE,NW", but if the user wants it as an array, they don't have to do an awkward traj.split("->").
Konjin already addressed some of this, but I think the most important thing is to have the public API named sensibly.
You have written this as a jQuery plugin, but it hardly relies on jQuery at all.
I'd rather type six more characters than look at half a word and wonder what it means.
It's hard to follow what's going on here, because you have very few named functions, and your functions, object literals, conditionals, loops and so on keep nesting deeper and deeper.
I might have gone for an array containing abbreviations like ["SE", "NW"].
With this revision, your usage example still works exactly as before, but since this is now a native custom event, you can also do this:
I think this would be nicer as a self-sufficient library, not just because you won't be forcing other dependencies on your users, but because it will (hopefully) encourage you to think of it as a first-class library which should promote a cleaner code base.