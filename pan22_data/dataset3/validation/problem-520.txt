There are some employees who connects to this live server from their dynamic IP's.
If you are serious about securing SSH you should be looking at key logins only, with some requirements that the keys are password protected, and possibly even expiring them on a scheduled basis.
I haven't used this method personally, but there are some good looking examples on the site.
So, it is not always possible for me to change in the iptables rule in live server whenever the dynamic IP of the employee changes.
Don't forget about securing the rest of the server and the code you run on it.
Also, this is a web server - your default config of SSH is probably far more secure than other aspects of the system you are deliberately exposing to the internet, even if a compromise would be more serious.
You might want to consider port knocking http://en.wikipedia.org/wiki/Port_knocking and http://www.zeroflux.org/projects/knock to allow the opening of specific dynamic IPs for a limited time and revoking them later.
Some firewall's support using DNS entries, so services like http://www.no-ip.com/services/managed_dns/free_dynamic_dns.html can be used to restrict access.
If you are willing to loosen some policies, you could in theory find out your staff ISP subnets and limit access to those, which may reduce exposure significantly, although I think this would be an unusual approach.
connection is slow in compared to our employee's private internet connection, moreover it
I want to protect SSH access to our live web server from all IP's except our office static IP.
Specifics are CentOS/RedHat, but it goes over a lot of options common to all distros.
I tried to put them in office VPN and allowed only SSH access from office IP but the office
If you just want to use iptables, you could probably have something scripted to check the DNS names ( I don't think iptables supports using DNS entries to grant access. )
I don't know how to require both keys, and passwords, so my method would be to require keys to access the server.
Use logwatch or similar to keep an eye on what is going on.
But Kyle has a good answer in requiring key based auth.
If a small number, you could just pay for them to have static IPs and you keep your security policy intact and config simple.
In addition to the other suggestions, you might also consider running sshd on a non-standard port number.
This won't slow down a targeted attack very long, but it will sidestep some of the automated brute force attacks that scan the Internet for hosts running sshd on port 22.
An excellent guide to securing a Linux server can be found here.