How could I create a rule-based system that I could use ?
Action: "Mix A and B" is selected by Action "Look at" and Object A and Object B (3 arguments).
For example, Action: "Look at A" is selected by Action "Look at" and Object A (double dispatch).
Instead, your design could enable you to bind (or attach) action handlers to potential targets, delegating the behavior out to a callback.
In that case, you probably don't want the action to know every object on which it can be performed.
What design patterns could I use to create something scalable and that will allow me to add, remove and modify rules without having to regenerate the project ?
I want to make objects in a side project interatible with each other.
You might consider exposing services or state using a Service Locator pattern.
One my friend has used his own Prolog-like language in games with success.
Is the "Activate" action for a light switch the same as the "Activate" action for a coffee maker, but with different behavior?
Now, when the player hits the key bound to the "Activate" action, the target object should be queried to see if it has an ActionBinding for the "Activate" action.
In practice, you would probably want a second "can execute" callback in addition to the default "execute" callback.
For example, do you want one unique/global "Activate" action, or do you want discrete activation actions for different types of objects?
This is simplified a bit, but the idea is that the behavior is injected via a callback, and the callback could return a value indicating success.
If your host program is in C++, here some links to bind C++ and Prolog:
Otherwise, walk up the object tree until you find an object which will accept the action.
You can use Prolog (as a logic, declarative scripting language) as it provides model of rule-based deduction process.
Read Item 31 of Scott Meyers's book "More Effective C++" and "Modern C++ design" by Andrei Alexandrescu, Chapter 11, for different double dispatcher implementations in C++.
Callback for interacting can be selected via multiple dispatch (multimethods).
For this, I want to be able to create rules so "Collisions" (Interactions) can be recognised by testing the rules.
If so, the "can execute" callback should be checked (if one exists), and on successful evaluation, the "execute" callback should be invoked.
The rules should be able to reference what object does the player is trying use, in what state the object is, with which object does he try to interact with (could be nothing) and the state of this object.
Let's say I have a light switch, and I want it to support the Activate action.
Your callbacks could easily query the target object or game state as necessary.
You might not want a rigid set of actions supported by each object, either.
If you want to be able to bind actions to input gestures (e.g.
Or are they completely different actions with identical names?
Maybe the rules will need to consider the state of the game as well.
the object is part of a larger composite object which might be the "true" action target.
Action bindings could be bound to object types (metadata) or to actual object instances (or both).
keystrokes), then you'll probably want to go with the first option.
That last step is only necessary if your objects are grouped in a hierarchy, i.e.