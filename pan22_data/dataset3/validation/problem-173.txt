If only one input is wrong, then we can reconstruct that input with simple arithemetic: Subtract all the numbers that we do have from the total, and there's the missing number.
Say, the first two bits in a sector as presented by the RAID 5 volume.
Now, if we lose one of the bits - any one of the three, even the XOR - we can reconstruct it from the data we do have, as long as we know which bit is wrong - or missing.
To extend this to RAID 5, imagine that we have a way to know if any of the transactions - or the batch total, for that matter - was entered wrongly (or is unreadable).
The way parity lets this happen is similar to the concept of a "batch total" in accounting data.
Another way to put it is that the XOR of any number of bits will be 1 if the number of "1" bits in the input is odd, and will be 0 if the number of "1" bits in the input is even.
On drive C, which is the "parity volume" for these particular bits, we store a bit that is the "exclusive OR" of the other two bits.
It's set up so that, although corrected errors happen routinely, errors that are both uncorrectable and undetected are very, very rare.
In the middle we have uncorrectable but detected errors, and we also have the case where the drive just fails and won't read anything (or the drive is missing completely).
The program computes the sum of the transactions and compares this to the batch total that I computed separately.
If I have a bunch of transactions to enter into a system, I may well compute a total for the batch before passing it to data entry.
This is something of a misnomer as parity data is actually distributed among the drives, but it's still the case that you have one more drive than the number you would expect to need for your intended capacity.
We store one of those bits on drive A, and the other on drive B.
We can reconstruct the missing or bad data from the data we have, simply by computing the XOR - the parity - of the bits that the drive tells us are still readable and good.
These "middle" cases are far more common than uncorrectable+undectable errors, and these are the cases RAID 5 protects against.
Fortunately for us, it's very difficult for a bad sector on a hard drive  to be "read" without any error indication.
Call it n for the number of drives that you would need without redundancy, so n+1 is the number your raid 5 array will take.
The RAID 5 concept is that any n drives out of the set will always contain enough data to reconstruct a failed drive's contents.
The "exclusive OR" function is simply the sum of the bits, with carry ignored.
The data entry program requires that the computed batch total be entered, and then all of the transactions.
The value of this "XOR" function is what's stored in the "parity volume".
And I will state again: the error correction and checking within hard drives is very good about this.
To understand further how the parity volume works, let's think about just one  pair of bits in your "end user" data.