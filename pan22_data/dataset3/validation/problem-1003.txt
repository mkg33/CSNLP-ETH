Or you could use referencing, but I tend to stay away from those for legibility reasons.
Classes are good, but only if they follow proper OOP principles, otherwise they just add overhead and hinder development.
Another issue I am having is all of this repetition.
From this point forward, pretend you have never heard of the word.
These are much slower than their counterparts, for obvious reasons.
You could more easily accomplish this with normal functions, not to mention the amount of processing you would save due to the code reuse this would open up.
I'm not going to say to remove it, just pointing it out.
Also, echo is unnecessary, die() automagically prints the output of whatever parameters it receives.
This is somewhat related to SOLID, what Peter Kiss mentioned in his answer.
There's a lot of code, and a lot of the same issues.
This smells like a global, which are EXTREMELY BAD.
Of course there are other methods, such as using session variables, cookies, post and get.
You use the proper way later in your code, but not consistently.
I skimmed some of the rest, but nothing else really caught my eye.
This code looks like it is generating errors that are probably preventing it from even working.
Below is how you could rewrite this with the numerical switch, but I still think it would be better to use a string.
You should also try to avoid die() as it is a very inelegant way of escaping a sequence.
The only exception I can think of, off the top of my head, is when you have persistent classes and need to include those class files before calling the session to maintain persistence.
Typically this is seen a lot when an error occurs and the proper way would be to log that error then redirect the user to an error page that informs the user that an error has occurred.
They do not always need to be passed integers, you can pass it strings as well, and I believe this would be much easier to follow if it did use strings.
Otherwise you will get NULL pointers and perhaps silent warnings about the array index being out of bounds or something.
If you are starting sessions, then you should almost always have the session_start() call as the first function to avoid headers being sent to the page prematurely.
In the future, I would suggest splitting up large posts, there is just entirely too much here.
If your PHP version is >= 5.2 you can use filter_input() on your POST data to filter and sanitize it.
Its only when you are redefining indices or adding to a preexisting array that you need to define each element separately.
You create the same objects in a couple of these cases, only the methods change.
The way you are currently assigning your associative indices to your arrays is very tedious and inefficient.
With a numerical switch it would be easier, but you would lose legibility; With a string value you would need to do some fancy work with arrays or REGEX.
The biggest thing I see is that there is no need for these classes, at least not as they are.
How are you accessing the $group_array outside of its scope?
In this context perhaps it is ok as it is "creating" a JSON document, but in other cases this may not be the case.
If you need to access a variable inside a function, then it should be passed in as a parameter and then returned to be added on to it.
I believe you are recreating a boolean with your $_SESSION[ 'logged_in' ] variable.
Additionally, when creating a new object, you should do so using the proper syntax, new object();, note the parenthesis.
Here, and later, you are violating the DRY Principle.
For instance, you have a filter() method in each of the classes I looked at.
Before using a session variable it is usually advisable to ensure that variable has been set by using the isset() function on it.
Unless you had a lot of indices you wished to add or redefine, then it would be better to create a new array and merge the two after you are done.
This may not be as noticeable when only importing a few files, but it is still good practice not to use them as you should always know if you have already included a file.
In no context could I ever see globals being necessary or good.
The biggest problem I have here is your switch statement.
It stands to reason that there are only two possible states for this variable, TRUE or FALSE.
The situation will determine which method you use.
The SOLID Principles are similar and very useful to remember when learning OOP.
As the name implies, you code should not repeat, but be reused for maximum efficiency.
If you had posted just a few (no more than four) classes, then not as many people would be intimidated by this post and would be more likely to help.
Maybe in production code where you are debugging this would be fine, but in live code, these should be removed.
Either way, the TRUE/FALSE pair are better and do not require any sort of type conversion, meaning you can do something like this.