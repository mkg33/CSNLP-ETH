Incidentally, smallpt actually uses a 2x2 subpixel grid and places a tent filter at each subpixel, then averages together the results of the four subpixels.
My guess is this results in a somewhat sharper image than if a single tent filter per pixel were used (because of the narrower support), but probably also more visible aliasing.
The theoretical ideal antialiasing filter for discretely sampled data is a sinc filter, because it perfectly removes all frequencies higher than the Nyquist frequency, while leaving alone all the lower ones.
Different scenes/images may favor one choice or another, and it's also partly an aesthetic judgement.
The tent filter (triangle filter) certainly resembles the central peak of the sinc filter more closely than does the box filter:
Also, different filters may be more or less computationally expensive.
I'm not sure if this was intentional, or just happened to be the way it worked out.
Mitchell-Netravali) could capture the shape of the sinc even more precisely, including its first two negative lobes.
So it's a game of trying to trade off the different artifacts against each other and against performance.
So the overall effect is, curiously, that of the sum of four tents, which ends up looking like a pyramid with a flat top:
The reality of filter selection is a bit more subtle than "approximate sinc as well as possible", since there are different kinds of artifacts that can be generated by "non-ideal" antialiasing filters, such as aliasing, overblurring, and ringing.
As for why smallpt uses a tent filter in particular, I would guess for a combination of performance (it's a quick filter to evaluate) and brevityâ€”it can be done in a couple lines of code, while a bicubic filter would take a bunch more code.
So, to some extent, we can expect antialiasing filters that more closely resemble the sinc filter to produce better-quality images.