int is smaller, faster, easy to remember, keeps a chronological sequence.
Just a thought and I hope I am remembering correctly.
Tables contain BOTH an auto-increment primary key integer id column AND a guid column.
If I remember correctly, the UID of the NIC is used as part of the GUID algorithm.
I actually think it has a purpose other than serving as primary key of a simple table.
The guid can be used as needed to globally uniquely identify the row and id can be used for queries, sorting and human identification of the row.
mrdenny correctly pointed out that even if newsequentialid() is being used, restarting the instances causes new values to begin with the "holes" left behind in prior processing.
Another thing that affects "sequential" GUIDs is the network card.
I am also not sure how multiple NICs might affect the assignment of values using the algorithm.
If a NIC is replaced, there is no guarantee that the UID will be a higher value to maintain the sequential aspect of things.
But bind a column to GUID so that every row also has a unique column
Use int/Bigint for Primary Key as it is easy to maintain and use as foreign key relations.
If you are running a shop and uses order_id to publicly identify a purchase, then anybody can find out your monthly number of sales by simple arithmetic.
From what I've seen, int has no flaws except by the number limit, which in many cases are irrelevant.
Using auto increment IDs might leak information about your business activity.
(Any example of a real application using Guid for something?)
I've being reading around reasons to use or not Guid and int.
And as for Guid, the only advantage I found is that it is unique.
In which case a Guid would be better than and int and why?