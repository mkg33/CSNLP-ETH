"Censoring" implies that all appearances of the word should be replaced.
Here is the same code, preserving your 1-based indexing convention and other censorship bugs:
We can save a few lines using a conditional expression.
In any case, it would be better practice to return its output, so that the caller can choose to print() it instead (or do something else with it).
The censor() function prints its progress as a triangle of text, as censored_text lengthens one character at a time.
Your detect_word_start(text, word) function is basically text.index(word), with some differences:
Therefore, building strings using += concatenation is not optimal:
However, your censor() function only replaces the first occurrence, since count is never reset to 0.
Did you accidentally indent the print() statement one level too far?
Counting loops are usually better written using enumerate().
(I know, it looks worse, but there's a reason that you'll see…)
There is a very simple solution, using str.replace() and the * operation on a string:
A way to avoid that performance problem would be to construct the result using ''.join(…) along with a generator expression: