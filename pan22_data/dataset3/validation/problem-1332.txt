Simply put, if you want to learn and want to run more than one line you write it into a .py file.
You will be able to develop code better, edit individual commands without worrying about spelling mistakes, and reuse code snippets you find useful if you write them into a small file.
I'd think that would be good enough for your purposes.
At the three dots make sure to hit "tab" key before you enter next command.
So when you hit enter after writing your second line of code, interpreter lets you enter third line of code... like in Fibonacci example below (from the tutorial):
Perhaps you've started doing so in the year and a half since you posted the question.)
The semicolon signals the end of a command and the backslash signals that we are continuing on the next line.
I just typed the following at my shell prompt, and it worked just fine:
For example, type python at command line to get into Python interpreter, then
(I'd suggest, even though it doesn't answer your question, that if you're writing code that's complex enough for this to matter, you should be writing scripts.
It's true that you'll get a new prompt after each line, which means that if two of your lines of code produce output, that output will be separated by prompts.
I guess that's what you're concerned about, though the example in your question doesn't suggested that:
If that's a problem, you can enclose your multiple statements in a (properly indented!)
You can continue writing as many commands that way.
The way to type more than one line of code in the interactive Python interpreter is, well, to type more than one line of code in the interactive Python interpreter.
The trailing backslash method is good when you quickly want to run a series of commands, but it doesn't help when you are learning.