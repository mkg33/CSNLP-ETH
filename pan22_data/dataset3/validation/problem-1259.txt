It can get a little low level, but it goes over how this kind of process can be achieved.
Leave the buffer there for when future you wants to do something cool.
Here are the slides for Christian Gyrlin's GDC presentation on Naughty Dog's engine architecture.
In general, if I'm at or above my target frame rate, I don't worry about squeezing out even more performance.
Well you need these metrics (Not comprehensive, hopefully a good start)
While there's no good way to do exactly what you want (specifically, timed processing in unity), there are plenty of ways to split your tasks into chunks, assuming the right data architecture.
For further knowledge, I suggest reading up on the fiber architecture.
If this is a feature you require, There is a unite talk on how it will work.
As DMGregory mentioned, Unity has plans to implement a proper Job System in the near future.
To do what you've described, you'd have to build your own task system that doesn't immediately conflict with Unity's own process.
This (general) approach is used in several AAA engines, but isn't very compatible with the way current Unity (2017) works.
There are several great GDC talks on it, though they are currently locked behind the vault.
Doing so is generally ineffective as the extra overhead negates the benefits of extra time.
Rather than intentionally calling tasks to use up leftover time, I recommend filling up that time with background processes /  coroutines.
That's all well and good, but what if you still want to build it?
Coroutines are wonderful for dispatching tasks that don't need to be done same frame and are easy enough to split / pause.
Once you have these, it's pretty easy to grab something applicable using a job queue or query.
While not exactly the same context, I explain how to use them to split a task across multiple frames here