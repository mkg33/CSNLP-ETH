This seems to work for me, and suits my workflow pretty well, as I tend to make my animations as gif/mng files and then extract the frames to individual pngs.
All I know is that textures are bound to the graphics device when they are loaded, then during the game loop, the textures get rendered in batches.
With modern hardware that is capable of drawing millions of polygons to the screen a hundred times a second, does it even matter for my 2d games which just deal with a few dozen 50x100px rectangles?
The implementation details of loading a texture into graphics memory and displaying it in XNA seems pretty abstracted.
So it's not clear to me whether my choice affects performance.
I suspect that there are some very good reasons most 2d game developers seem to be using them, I just don't understand why.
I have seen many examples of how to render sprites from a spritesheet but I havent grasped why it is the most common way of dealing with sprites in 2d games.
Is there a noticeable performance advantage to rendering from a single sheet rather than from individual textures?
I have started out with 2d sprite rendering in the few demo applications I've made by dealing with each animation frame for any given sprite type as its own texture - and this collection of textures is stored in a dictionary.