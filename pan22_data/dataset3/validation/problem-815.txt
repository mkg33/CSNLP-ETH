In short, they consume negligible resources on their own.
Even something as simple as reducing something like the quality of a path following script when the object is off-screen can result in big savings in the long run.
Of course, that's of very limited usefulness since there are plenty of times when you'll want an off-screen object to affect the game.
The question should be how much resources does a game object consume, and to that end I think this is a pretty solid answer: http://answers.unity3d.com/questions/280455/how-much-memory-a-gameobject-consume.html
This is an important bit of optimising a game, because even if your objects are not inside the frustrum at a given frame (i.e.
Also keep in mind that a GameObject takes up a small amount of memory, and so do it's components.
visible), some draw calls (shaders) are still launched for them, therefore decreasing performance.
Anything that is in a program consumes resources; You don't think programs run on simply hopes and dreams, do you?
A lot of answers are mainly considering the graphics aspect of your question.
I think you should also know about Frustrum Culling, or hiden surface removal: http://en.wikipedia.org/wiki/Hidden_surface_determination
At the end of the day, what you actually make those game objects 'do', is what is going to cause any sort of overhead- and how much resources that requires is very much on a case by case basis.
The simplest way to minimize the effect of off-screen components is a system based on the OnBecameVisible and OnBecameInvisible callbacks.
It's not as uncommon as some answers implied for your components to be making more expensive operations than drawing does, but you can minimize how many resources they use.
The fact is they will take up various resources, and how expensive they are compared to drawing the object isn't fixed.
The components may also be doing things that are taking up a fair bit of memory.
But why would you want a bunch of game objects just sitting in your game doing nothing?
But you can expand on a pattern of this sort for a fine-grained system capable of minimizing the effect of your most expensive calculations.