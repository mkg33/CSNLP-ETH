Adding a constructor which takes an IEnumerable<AgentCommission> to the BetCommission class would be a good idea.
The first thing to change would be the query for commissionForCurrentKey to include the condition x.Level != 0 if Level can be negative too, or x.Level > 0 if it can't be negative (which I assume now).
I would like to encourage you to always use braces {} for single statement if's to make the code less error prone.
I don't like the public parameterless constructor of AgentCommission.
By changing this second .Where() to just compare like (x.SportId == bpKey.Key.SportId) && (x.LeagueId == bpKey.Key.LeagueId) it is more readable too.
By extracting the creation of the AgentCommission's to a separate method your code will benefit regarding readability and maintainability.
Also having public setters can do some harm and should be avoided if the same values can be set by the constructor.
In this way any item having a Level == 0 would be eleminated, hence at least the first iteration in the foreach (var pos in commissionsForCurrentKey) loop wouldn't be senseless.
Variables should be placed as near as their usage, so key could be just placed above the call to AddOrUpdate().