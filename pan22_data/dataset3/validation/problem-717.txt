And don't print anything when you don't have anything to say.
Entering a password on each use of the script would be annoying.
And on a related note, use auxiliary functions with a clearly-defined task.
Don't require the user to press a key to exit the program.
Since you know that the ciphertext is Python code, start the ciphertext wih a Python comment line.
The good news is that as far as I can tell, the cryptography is correct (password-based key derivation function, random salt).
Avoid very long lines (80 columns maximum is a good idea), and break up long chains like Fernet(base64.urlsafe_b64encode(kdf.derive(getpass.getpass("Password to use: ").encode()))).encrypt(script.encode())) into manageable pieces.
The first thing one sees is 62 lines and not a single blank line.
Using gpg to decrypt the script once and for all would be more flexible (you can use keys instead of a password), more convenient, and more secure (less risk of implementation errors).
punctuation is important your message is incomprehensible language is not just a bunch of words thrown together
You're reporting a “wrong password” error for a certain class of errors.
The bad news is that your code is hard to read, and so it's hard to make sure that it's correct.
Rather than hope that the wrong key will result in a particular kind of parse error, start the ciphertext with a known value and check that known value.
And when there's an error, exit with a nonzero status.
And once again, error messages go on standard error, and the script must exit with a nonzero status on error.
Because the code is hard to read, don't expect a complete review.
It's not clear to me what you're trying to do with InvalidToken.
Standard output is for program output and standard error is for useful messages.
Print error messages to standard error, not standard output.