The basics of it are that you need to have a looping script in the background that watches for specific windows and moves them when they appear.
Inconsistencies like that were one of the many reasons I switched to Macs.
There is a library for working with multiple monitors.
I had this same problem at work on a windows XP system.
Some are making system calls so that the dialog boxes will always pop up on the "main" or "primary" monitor.
If you want more details, I can provide a general skeleton with some examples of options.
It has been my experience that it varies depending on the application.
You can also use built in functions to specify exact coordinates if you desire.
The inconsistency is beyond frustrating and having used multi-monitor XP systems for the better part of a decade now, I can say I haven't come across a way to unify them.
This card supports AMD's HydraVision which includes a Desktop Manager.
To support multiple monitor in a program - you need to call EnumDisplayMonitors and supply a callback function for each monitor.
See http://msdn.microsoft.com/en-us/library/dd162610%28VS.85%29.aspx for details
You run it at system startup, and it will move any subsequently opened dialog to whatever monitor the parent program is running on.
You can use the libray to specify a monitor and center a window on it automatically based on certain criteria (ie window title or process name).
One of the options available is to 'Preserve Application Position and Size', and there is also an option for 'Enable Dialog Repositioning' which you can set to 'Show on preferred display X' or 'Show on application's display'.
Still others will follow the app and open on its monitor.
there is a VBS script found here called "PositionDialogs".
The workaround that I found was using a scripting language called AutoIt.
Others will open where ever they were last dismissed from.