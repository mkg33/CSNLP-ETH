I'm wondering whether you could simplify the matter by focusing on how the player fights:
You have a range of weapons and whenever the player uses a weapon the variable for that weapon iterates up.
I still think your second strategy concerning multiple enemies in conjunction is important I'll give the following example.
Before I would try solving the problem, I would first create a mock setup (with random enemies) and log the data (enemy health over time, other stats, etc...) Then, I would see if there is a pattern that matches up with enemies the player perceived as "tough" and try to replicate that.
Your unit causes damage to the player in form of resources (e.g.
needs to use medikit for healing, kills some of his units [costs for replacing them], ..).
So, track what kind of costs you had to producing the unit and to finally cause the damage (=time) and track which kind of damage you did and what a 1:1 replacement costs.
This is a good concept that is not in enough games.
Ways to improve this could be to rank the various heuristics the damage an enemy does is ranked higher than enemy lifetime.
The best way to implement this would be to use both of your strategies.
More heuristic ideas for you assuming some type of shooter 1st person, 3rd person or top down.
User movement while fighting an enemy (measure if they are working harder/dodging more against this enemy type).
I would measuring the success of an enemy against the player by a costs vs. damage relation.
Then you can calculate the efficiency for each ressource:
Which in the end means that he can not produce some or any new units.
Replacement costs can vary with time, as your player maybe improves some building and is able to produce units faster for less money.
Defeating the player means driving some or all of the resources of the player down to zero.
As in, one that the player tries to stay away from, rush to for a quick kill to get it out of the way, focuses fire on, one that elicits the most response from the player.
Other heuristics could be ammo user fires at said enemy (hard to track).
Cycle out other enemy types next round and measure again.
If you have a large "tank" enemy with low DPS and a sniper enemy that hides behind with high DPS the two of them could be a big problem where separately they were weak.
Think of it as elements and then element resistances for the creatures.
So you should recalculate the efficiency during the game regularly based on current courses.
Whenever the game generates a new wave it looks for the top x variables and sends creatures with attributes that make them good against the player's favourite weapons.
You have some costs for "producing" the enemy unit (e.g.
-The player uses flame weapons a lot so when the game generates it's next wave it sends a swarm of creatures with flame proof skin.-
So even a harvester working near to the player can cause damage to him, as it is harvesting his resources, which in the end isn't available to the player anymore.
Suggested Improvements for Strat 2 I would suggest something like swapping out one enemy per level (evolution cycle) and keeping them in reserve, measuring that wave and determining if it did better or worse without that enemy.
If you have a range of weapons, that effectively provide different ways of fighting, then you can have set classification variables that iterate on use.
Concerning your first strategy I wouldn't be too worried about a player exploiting it because if they let an enemy damage them then they still took damage so they can't do that exploit forever.
I'd imagine that a successful enemy would be one that the player would react to more.
destroyed harvesters, as the player gains less resources of some type for a given period.