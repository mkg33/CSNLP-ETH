But in many game positions there is a choice: you can reduce the larger of the two integers either to the point where it is (nearly) the smaller integer times the golden ratio, or the smaller integer divided by the golden ratio.
One of the simplest and most basic combinatorial games is nim: one has a constant number of piles of beans, and in a single move you can remove any number of beans from one pile, either winning or losing (depending on your choice of rules) if you take the last bean.
For some of these, a winning strategy for the game can be computed in constant time.
Each game position can be described by a pair of integers (i.e., constant space, in your model of computation), moves in the game involve reducing one of these two integers to a smaller value, and the winning strategy involves moving to a position where the ratio between these two integers is as close to the golden ratio as possible.
Another interesting example from combinatorial game theory is Wythoff's game.
the ^ operator in programming languages like C/C++/Java/etc.)
But they also raise questions about what exactly your model of computation is.
There are many examples of games studied in combinatorial game theory where the state of a game can be described by a constant number of integer values.
Only one of these two choices will be a winning move.
The authors present a method to design such algorithms.
The optimal strategy can be computed in constant time if you allow bitwise Boolean xor operations (i.e.
A flowchart for this problem is given in Berlecamp, Conway, and Guy, Winning Ways, but it depends on a finite set of counterexamples to a general characterization of the winning moves, and it's not known what that set is (or even whether it is empty).
Maybe it's an example of non-uniform constant time, where the algorithm is constant time if it is given access to a constant amount of extra "hint" information that depends on $n$ (an approximation to the golden ratio accurate to $\log n$ bits) but not constant time using only arithmetic operations (no square roots) and fixed integer constants values?
The paper Constant-Time Approximation Algorithms via Local Improvements by Nguyen and Onak gives a lot of examples of random constant time approximation schemes: Maximum Matching (the running time depends only on the maximum degree of the graph), Set cover, etc.
Here's one where it is known that there exists a constant time exact deterministic algorithm (in a possibly-unrealistic extended model of computation that allows you to test primality of a number in constant time) but it's not known what that algorithm is: given a starting move in the game of Sylver coinage, determine whether it is a winning or losing move.
So the optimal strategy can be defined in terms of a constant number of arithmetic operations, but these operations involve an irrational number, the golden ratio.