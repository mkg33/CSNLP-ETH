One thing that I would change about your function (in addition to Jonathan's recommendation of using a string to store the forbidden characters), is the argument type of removeForbiddenChar to string& instead of string*.
C comes with a helpful function size_t strcspn(const char *string, const char *delimiters) that you can implement this on top of.
It simply change a character of the string to a blank when the respective character is the forbidden character.
I used this function to remove a string that has any of the following character: \, /, :, ?, ", <, >, |.
One further, minor cosmetic change I'd recommend is renaming the function to removeForbiddenChars (plural) as that is more descriptive of what it does.
Or, here's yet another way you could do it by using all stuff from the STL:
The ASCII version is pretty fast; it uses a bit vector to test for the delimiter characters.
I simply exploit the case syntax here, but this, somehow nags me.
It is generally considered good practice in C++ to use references over pointers where possible (see for example this entry in the C++ faq-lite).
Anybody else got a better suggestion of a better implementation in this case?
However, I have a feeling against this use of switch statement.
Similar to strcspn is strpbrk, but instead of returning offsets, it returns a pointer to the next match and NULL if no more matches.