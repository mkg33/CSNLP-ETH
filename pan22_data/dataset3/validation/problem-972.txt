But in the courses for which you want to use it, that doesn't seem likely.
This would be difficult to detect in general, and the analysis might report quadratic rather than linear if the code is a bit obfuscated.
Imagine a linear algorithm implemented as two nested loops.
The outer loop depends on the "n" that you are interested in, say the length of an array.
I use cyclotomic complexity as a measure of program quality and there are auto checkers for that.
The problem is that determining the complexity automatically would require a semantic analysis of the code deeper than that done by compilers.
For example the inner loop may have a fixed (or bounded) number of iterations where the bound isn't obvious at that place in the program.
I'll accept a bit of risk here, but claim that this isn't possible in general unless the student writes very naive code.
I could probably come up with a recursive example as well (usual consulting rates apply).
The inner loop does not, but in some non obvious way.
Some types of complexity can be statically analyzed of course.
It might even be equivalent to the halting problem.
I think that might be possible in principle, but I doubt that such an analysis could be executed in a reasonable time.
A similar sort of (looking) program with an inner loop somewhat independent of the outer loop might result in a cubic run time algorithm but with only two loops.