I will try to sum up these concerns and have a look at WHY these concerns occur and WHEN they are valid or invalid.
After all this may be not a problem if you intentionally use a structure that deviates from the semantic to improve performance.
You will have drawbacks if you use objects in a way that they are not made for.
If all countries in the world are equally likely, you'll have a miss about 75% of the time.
But you have to know that any deviation from the real structure goes with drawbacks.
After that you can think about mapping it to a datastructure that may have drawbacks but the algorithms will work under certain metrics.
If search performance is an issue, use a SortedSet to allow a quick binary search or a constant time HashSet.
One person may sit on the table, two or three will certainly break it.
Even a good string search is going to have to search through about half the string to do the contains.
Call it \$\Omega(m\log n)\$ character comparisons.
Not that surprising: I would go for the "Set of Countries".
BUT: This does not release you from the responsibility to provide the "correct" datastructure representation of the semantic as other algorithms maybe want to work on it.
But if you think the perfmormance can be better with another datastructure you should map the correct representation to the datastructure that provides more performance WITHOUT touching the model that represents reality best as you do not want other algorithms to take the burden of the drawbacks.
Semantically a table is not meant for that because both and a chair may have properties that are not that obvious but the algorithms want to work on it.
You get redundancy, vulnerability, inextensibility, unmaintainability and all the stuff that code quality decreases.
A simple data structure that allows searching in O(log n) time:
Nearly everybody has some concerns about using String as the favorite datastructure in this use case.
As some answers pointed out the "vulnerability" of this approach.
One person may sit on the table for an hour but not for a whole day.
I wouldn't use a String because it is harder to set it up so that it works properly.
Beside ANY performance subjects I do not want to adress: The String will technically do the job for ONE use case.
Either should return in a tiny fraction of a second.
The end-of-string delimiters are an important part of the data and cannot be discarded like that.
These drawbacks may be jusified to the goal you want to achieve.
Technically using a String would do the job for some situations and maybe these are the only situations the use case describes.
If we talk about datastructures that support speed then we are on a technical level.
Countries fit this definition pretty well: related but distinct.
It is a distorted model of the reality and this is expected to be acceptable for a small area but error prone for other areas.
Unless you are doing hundreds of thousands of these in a program run, you probably won't even notice any difference.
You may have the idea to omit the chair in your model because you can also sit on the desk AND you have al lot of space left to put other things there.
However, I would say that neither implementation is recommended.
Moreover, option 2 has a chance of being faster: if the first few characters fail to match, it can skip to the next item.
I'd use either a List or a Set because they will more reliably return correct results.
But you have to expect drawbacks in OTHER use cases as the datastructure representation does not match reality as use cases came from reality.
If we talk about a disjunct set of countries we face the semantic level.
You don't have a String of countries; you have a Set of countries on which you want to check membership.
My view on this is: There is a lot of confusion about adressing the correct level of abstraction.
The reason for this vulnerability is exactly the datastructure that does not match the semantic.
The semantic of your String is not "a set of countries".
All that said, performance is unlikely to be a big issue.
Many documentation documents also give countries as an example of list usage.
To reinforce my point, note there was a bug in my original post which required an edit to fix.
Even a good string search will have to check almost all of them if there isn't a match, so \$\Omega(nm)\$ characters in the worst case.
Therefore, lists are a more robust data structure for this application.
I would go with a Set, as it better describes the data.
Lastly, as others have mentioned, .contains() matches the pattern in strings, but the elements in lists.
A more complicated data structure that can perform lookups in constant time.
You should always provide a sufficient correct model of the part of the reality the use case needs.
Considering options 3 and 4 are not any harder to write than options 1 and 2, you might as well choose the better-performing options.
Because the semantic is not modeled into an equivalent datastructure.
Assuming there are \$n\$ countries with an average length of \$m\$, then your string will be about \$nm\$ characters long.
Although I'm not a Java programmer specifically, I can tell you that the documentation for almost all major languages defines a list as someone like this:
Of course, maybe the others will work at first, since you might not have any input countries that match incorrectly.
Meanwhile, a binary search on a balanced tree is \$\Omega(\log n)\$ comparisons and each string comparison will tend to require less than \$m\$ character comparisons.
The "language mechanical/technical" and the "semantic".