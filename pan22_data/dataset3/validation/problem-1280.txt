For something that has a small number of predefined values like days of the week, yes, the struct disgusts me.
It would be nice if there were something "between" a struct and an enum, which would be recognized as having an integer type as its underlying representation (like enum does) but could also control what operators should be available and how they should work.
What is it about their auto-generation that precludes enums from being used?
I do not think that enums receive any special handling at the IL level, they are handled just like primitive types are.
The struct version makes sense for things with large numbers of values that may have a few predefined ones (see Color in the Framework as a good example).
Enum would allow both with casting, and neither without casting; a sensible type should allow the first without casting, but not the second.
Normally it would disgust me, but you appear to have a valid reason to use it, which stems from the pre-existing disgusting situation that you have to cope with these data objects that use ints.
The only thing I would ask is, why can these data objects not use enums?
One could, for example, specify that it should be possible to add an integer to a day, but not add two days together.