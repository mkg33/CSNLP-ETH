He moves to 4 units of distance based in the path he already found and then search the path again?
Right now I have a pathfind algorithm A* so I'm already using it to move the player around.
or does he make half of the path until he search for a new path?
You're right in that recalculating every frame is probably not all that necessary or optimal.
This might also turn to be an "accidental" optimization.
Finally i remembered the days I use to level design for half life and I recall of having map nodes to define pre defined paths which the monsters would use as guides to turn around.
I imagine making that for 5 or more enemies may make the game slow?
Decouple the pathfinding update from the other updates, and tweak the frequency to your liking.
I have an enemy 5 units of distance from the player.
They have a huge number of monsters running around in 3d (my game is 2d by the way).
They find the path to the player but if the player change the position they have to find a new path all the time?
It might be a good idea to run this calculations in a secondary thread.
There is no single answer, the exact frequency probably changes from game to game.
I believe this can be optimized by detecting an area where the players are and make several paths to "surround" this area.
If your map is dynamic, however, Dijkstra is not an option.
By accident I was playing Killing floor and I notice how their A.I.
Another thing I notice is that most of the monsters might never recalculate the path since they die before getting to the player.
Precalculate it for every node in every map and store them as game data.
I'd recommend recalculating things every so often, or once the main character has deviated a certain distance from the previous known destination.
Find the point that is just often enough to not look unresponsive.
Also I believe they might be using the same path (from previous monsters) to get to the players.
But i don't believe this would be a good solution.
When loading a level, load every shortest path for each of its nodes, and you won't need to calculate anything at runtime.
This will probably make their reactions a bit slower, but that often looks more natural.
So it looks like the monsters walk to a point and after they reach that point they just rush to the player.
or there's something I can do to avoid so many calculations?
These were only used when the characters went to a certain distance around the node.
If your map is static (or mostly static), you might want to consider using Dijkstra's algorithm, instead of A*.
Once the calculations are ended, update each enemie's path.