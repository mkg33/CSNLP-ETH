When you write more advanced C code, try to avoid the need to allocate more memory.
These sort of issues create exploitable security vulnerabilities.
This means that you keep allocating more and more memory, while you can just make a copy of the whole string and use strtok to modify the copy you just made, keeping the original string untouched.
Then replace the tokens you want to replace with the \0 character, walking through the string just once and returning pointers to each start of a substring.
Below code is undefined behavior is the first character of user input is the null character.
And decide if "\0" is a string that you want to return or not...
For an array of pointers I would have expected to see use of calloc().
it can not find a bigger block) it does not release aux but returns NULL.
Nice attempt, but it can be improved by not using realloc() in the first place... That method will slow down this function considerably...
So, you basically rewrote the strtok function in ANSI C. The difference is that you allocate memory for each substring while TOK modifies the original string by adding \0 characters in the place of delimiters.
You allocate memory that can take a single pointer for aux, then start accessing off the end of it with aux[len-1].
You know the amount of memory required is just the length of the string so make a copy of it.
Try re-running using something like Clang's address sanitizer (for example, with cc split.c -fsanitize=undefined,address -o split).