in temporal logic, or as an automaton), and we want to automatically generate a system (i.e.
It features a review of recent work that provides both flavors of robustness by Ittai Abraham, Lorenzo Alvisi, and Joe
Full Abstraction for PCF, by Samson Abramsky, Radha Jagadeesan, and Pasquale Malacaria
The Partially Observable Stochastic Game (POSG) framework is often used to discuss to multi-agent settings; under the right reward function criteria it becomes a DEC-POMDP.
Game theory and fault tolerance offer two different flavors of robustness to distributed systems â€“ the former is robust against participants attempting to maximize their own utilities, whereas the latter offers
On Full Abstraction for PCF: I, II, and III, by J.M.E.
Another famous example of using game theory is in CS is synthesis: in synthesis we get a specification over inputs I and outputs O (e.g.
Ittai, Lorenzo, and Joe discuss how game theory-style strategic behavior can be accounted for in fault-tolerant distributed protocols.
Often, these concepts are easy to define, but prohibitively difficult to compute directly from the definitions.
Noam Nisan, Yoav Shoham, Tim Roughgarden, and many others have some fascinating papers on the subject of mechanism design from a theory point of view; Vince Conitzer has applied AI techniques to the problem to develop automated mechanism design.
There is a very active field of algorithmic game theory which focuses on the development of efficient algorithms (or complexity results) for, e.g., Nash equilibria, Shapley values, and other such standard game theoretic concepts.
It is easier for me to think of applications of computer science (techniques) to game theory, than the other way around.
You can start reading about this in Moshe Vardi's survey.
A very important tool from game theory that is used in this context is Borel-determinancy, especially when we work over infinite computations.
As it turns out, synthesis can be formulated as a game between the environment and the system, where a winning strategy for the system corresponds to a transducer.
which both appeared in Information and Computation, Volume 163, Issue 2, 15 December 2000.
This column takes a look at attempts to combine the two.
a finite-state transducer), that guarantees that for every input sequence of the environment, the computation induced by the transducer satisfies the specification.
Game theory played a significant role in solutions to the "full abstraction problem" in programming language semantics.
In particular, the first fully-abstract semantics for Plotkin's PCF were given using games as models.
Quoted from "Idit Keidar", the editor at that time:
This work extends at least as far as mechanism design, where we attempt to manipulate the rules of auctions in order to guarantee agent behavior (e.g., we would like them to report truthful bids) or overall results (e.g., we would like to guarantee maximal revenue.)
They make a compelling case for bringing a game-theoretic perspective
On the more applied side in artificial intelligence, it's difficult to think of multi-agent systems without thinking of them as games.
The article in Distributed Computing Column 42 attempts to bring a game-theoretic perspective to distributed computing problems.