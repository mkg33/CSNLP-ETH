On the other hand, Payment is as a fully valid candidate for a class.
Python has a built-in datetime module which might be (and probably is) a better fit here.
However, he has not said a lot about the actual classes themselves.
    def __init__(self, amount): #<- amount is not used anywhere
Classes should generally be used to hold variables and methods that would naturally belong together.
        self.id = 'paymentid2' #<- all these values may only be set afterwards, why?
As Pickachu said, this function would greatly benefit from documentation, and more expressive variable names (What type of object should p be?
without losing any functionality, clearity or whatever.
            print(k, l.spotTotal[k] - l.spotTaken[k])
displayBoard does not hold any data, and has a single function.
However your code ignores the only input value one might pass to its constructor.
If you intend to show that generateId(self) is not supposed to be used outside of the class, prepend it with _.
Pikachu the Purple Wizard's answer covers quite a lot of essential style hints and best practices such as using enums.
Another thing sou should change are those nested functions sometimes found in methods or in the constructor of some classes.
That does not really hide the function from users outside of your class, but it is generally accepted as a convention that this function is only for internal use only and might be changed/removed/... without further notice.
                print(k, l.spotTotal[k] - l.spotTaken[k])
While reworking your code, also think about whether a string is really a good fit for storing time.
Especially displayBoard caught me attention immediately.
Unlike Java, Python allows for functions which are not part of a class.