Maybe I would let the public IList<string> CharacterSpecifiers { get { return _characterSpecifiers; } } stay with a backing field but would  return either as a ReadOnlyCollection<string> like so
So a softcast using as and a null check is doing the same but involves less casting like so
This saves you one horizontal identation level which makes your code more readable like so
The same is true for the constructors of Group and Literal.
This prevents that items of the IList could be changed.
It doesn't matter if it is only used inside one project like RubberDuck or if it is used by other projects or developers.
While we are speaking about properties, you should stick to one style.
If you are using C# 6 then you could get rid of the private set; all together which would make it nicer.
or at least would return a new List<string> like so
Instead of adding a private backing field for your properties you could simply have a private set; which would read nicer like so
I don't know how often the Regexes are used but you should consider to use the overloaded constructor Regex(string, RegexOptions) so you could use the Compiled enum for the RegexOptions to have the regex compiled which will be faster if called often.
A public method should validate its method parameters.
here Matcher.Match() would throw an ArgumentNullException which I would throw as well if specifier would be null but if you throw it at your own validation you wouldn't expose that you use a Regex.
A bigger issue will come in RegularExpression.Parse(string) because here you are exposing internal details of your implementation.
if expression.Length == 0 you should return early following with the check expression.Length == 1 and returning early as well.
Right now you have single lined properties like above and also multi lined properties like
I have replaced the expression.ToCharArray()[0] with just expression[0] as well.
The is operator just tries to cast the object to the desired type and returns true if it can be casted.
If the passed in specifier == null the stacktrace would contain that you have called a method named TryParseAsAtom() and that the exception had been thrown by calling the Regex.Match() method.
I avoid the is operator if I later on cast the object.
We also could remove small code duplication if we preset some of the properties outside of the switch like so