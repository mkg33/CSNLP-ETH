A model should be judged in terms of its utility in understanding those aspects of reality that we care about.
The Turing machine is a formalism that is useful for understanding programs.
The Turing machine formalism allows us to model important real-world concerns such as time- and space-complexity.
I reject the argument that says that finite-state automata are a better model of reality purely because real-world computers have only a finite number of internal states.
Turing machines are not very useful when trying to study the complexity of computing finite functions (say, functions whose domain consists of inputs of length at most 10 million).
It is much less natural to try to study these notions using finite-state automata.
A formalism is useful or not, based on what people want to use the formalism to model and understand.
Circuit complexity is much better at describing the complexity of finite functions ... but Turing machines in turn have been very useful in understanding circuit complexity.
Finite automata have also been useful in understanding circuit complexity; all of these models have their place in the mathematical arsenal.
The study of finite-state automata crucially deals with inputs coming from the infinite set of strings, whereas real-world computers deal with inputs of only some fixed maximal length (unless you believe that we live in an infinite universe, either in terms of space or time).
Programs are worth understanding; most actual computation is performed by programs, rather than by special-purpose machines.
Or (alternatively) in terms of its utility in understanding a mathematical universe that people find sufficiently compelling, even if that mathematical universe has no obvious physical manifestation.
Turing machines, finite-state machines, and circuits (and other models besides) all have proved their utility.