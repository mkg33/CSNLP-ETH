In the former, clients often trust each other, and instead employ anti-cheat techniques to ensure that all clients are using the same version of the game.
it is another client, or is buggy, or has been compromised), and do so in a way that does not take too much processing power away from the game?
Most professional video games use either a peer-to-peer architecture or a client-server architecture.
While this may work for long-term actions (such as match verdicts), it doesn't work as well for the frame-by-frame actions of action games and can also be too slow for turn-based games, to say nothing of the computing power it requires of the clients or of any dedicated servers.
I know that the blockchain algorithm (as infamously used by Bitcoin and other cryptocurrencies) does provide this as long as at least half of the computing power is owned by trusted machines.
My question is: how might I write a game network architecture such that the server is not necessarily trusted either (e.g.
In a client-server architecture, the company-owned server manages the game, and each client only needs to trust the server without trusting any other client.