If you're budget limited, though, you will get a lot more bang for your buck by moving to Linux -- that will allow use of all available cores, memory, etc.
The porting effort is probably less than the licensing of the high-end Windows version you'd need.
The approach is the same as optimising software, only you're optimising systems.
A PC based on an Intel Core i7 860 should be fast enough... 4 physical cores plus 4 hyperthreaded so the OS sees 8 cores in all.
The current Mac Pro can run Mac OS X, Windows or Linux and can be bought with two Quad-core Nehalem processors which have Hyper-Threading, giving you a total of 16 virtual cores.
One possible solution is to get a lot of really cheap and slow PCs and link them all together to make a super-parallel virtual multicore PC.
If you're just number crunching then a graphics card is not necessarily required (could you set up and maintain the system using a remote shell?
I recently built a PC based on this CPU and I am now able to transcode videos (mpeg2 to mp4) at more than twice the speed compared to my old Q6600 Quad Core based PC.
There are many parameters the affect the performance of a PC.
So, you need to analyse what your software is doing and which components will have the most impact on the performance of the system.
Hardware and software must work together to get the best performance.
For example, if you're doing lots of real time graphics work then a really good video card or two is recommended.
I'm assuming, since you're very performance oriented, that you're already using a fully compiled language (not .NET, for example), at least for the performance critical portions of your application.