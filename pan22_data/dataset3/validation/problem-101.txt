Debug and code and sketch out code and google and rethink your design and then tremble in awe at the finished product.
Unfortunately true anecdote: I was writing a program to solve a simple problem.
Make sure, for example, that the package you're using to create the GUI doesn't interfere with whatever things you might be using to get user input, or make it into commands for the computer, or show output, or whatever.
But if you don't have experience, I feel you can get a lot of mileage of just trying to do the simplest thing possible to see what'll happen and googling your questions as you go.
With your shell, maybe you think, okay, I need a GUI, and I need a way for user input to 'act' as commands, and those commands to produce some sort of output.
Free-Software / Open-Source projects are a good source of code for you to read.
Well, if we drill down, we might end up coming up with something like this:
The nice thing about this approach is that it forces you to think about potential obstacles you might run into and can help make it easier for you to form precise google queries.
Another strategy you can try is to try planning ahead: specifically, figure out what precisely you want to do, then decompose that plan into smaller and smaller subproblems.
For example tell you which routines you will need.
Often, in school, the problems are defined for you, but in the real world, they often aren't.
When you by chance hit on a better solution, rewrite.
Quite a lot of code might be written, and most of it will break, but that's how you learn - you gain an experience of what methods work and what methods don't and fill out your figurative toolbox.
Well, what exactly does this shell need to be able to do?
Practice something like test-first development, but at first with auto automation.
Let's say as a minimum prototype, I want to be able to:
Here you should be of course check your requirements to make sure the "chunks" of your program can handle everything that needs to be done.
I learned what things that entailed, and I checked whether the method could do what I needed it to do.
If I had absolutely no idea what I was doing but just moved forward instead, I would probably...
It's helpful to have a sort of zen mindset, where you let go of your attachment to your code).
At some point, you'll run into an obstacle you didn't anticipate and realize you need to pivot and adjust or even entirely re-write your code to accommodate.
Figure out your parameters and what exactly a solution needs to be like to be a solution.
Once you do this enough times, you start to develop a sort of gut sense for what sorts of obstacles you might end up.
Gain experience with simpler programs: start with writing ls, what happens when you try to write cd?
Notice that if we had kept drilling down, we'd end up learning about the fork and exec thing here as well.
There are many Free-Software / Open-Source projects that you could work on.
Follow your googlings and your goals and your requirements (those things are important) and your broken-down sections of the problem.
And I wanted to do this and that, and oh, maybe I'll add that - and the code got super unwieldy, with more and more bugs that I needed to work out - and finally I thought about it and realized that most all the code in there was unnecessary for my purposes.
Make sure it can handle all the things it needs to handle (check the requirements for this).
fork (create a new process), exec replace process with external program from file-system, pipe create inter-process pipe, dup copy file descriptor, close close file descriptor, wait wait for a process.
When I first wanted to write a GUI, I googled "python GUI".
(Having to rewrite code can seem painful at first, but it's basically something everybody needs to get used to.