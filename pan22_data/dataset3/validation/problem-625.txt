That seems to make sense - this PCB listens on the specified port.
If we look at the callback prototype for receiving packets:
The first confusing thing is that they both seem to define a protocol.
This is defined by the local IP address and a port.
For lwip, to set up a tcp connection, one creates a "Protocol Control Block" (PCB).
So then how are different URI schemes handled by the IP stack?
As an example, here is the function signature for binding a PCB in lwip (in C code):
I've been looking through the documentation and code, but I'm confused by how ports and URI schemes are handled by the tcp/ip stack.
I am working with the lwip tcp/ip stack on an embedded device, and I'm trying to understand how it all works.
If the intial handshake is done over HTTP: port 80, then how are further communications done over WS: port X?
I think I must be missing something fundamental then.
How does this work if I want to change protocols - for example upgrade an HTTP connection into a Websocket connection?
I cannot find where it is even passed as an argument into callbacks for handling IP traffic.
Therefore, I would assume the PCB is agnostic to the URI scheme.
I also don't see the URI scheme being passed to the callback function for receiving packets.
This binds the PCB to an IP address and port number.
I also have source code for an implementation of an HTTP server using lwip.