Yes, I know you should use sudo to execute root commands - this is just an extra safety net in case you decide to play it risky one day.
$ ^echo rm^rm (replace echo rm with just rm, thus you don't have to retype *.php and throw in a space at the wrong time)
I was once installing a Gentoo system from within another live Linux distro and accidentally ran a rather destructive command (can't recall what it was ATM - some variant of rm) in the wrong shell, causing a bunch of stuff on the live system to be deleted, rather than stuff from within the chroot.
$ ^ls^echo rm (this replaces ls in the previous command with echo rm, keeping the rest of the command line the same)
It logs you out automatically after 10 minutes, reducing the chance that you'll flip to a root terminal you've accidentally left open and type something stupid.
One that works well is using different background colors on your shell for prod/staging/test servers.
You could use the substitution operator, like this:
I make sure the hostname of the system I'm on is in the bash (or other shell) prompt.
If I'm chrooted, I make sure that makes it in there somehow, too.