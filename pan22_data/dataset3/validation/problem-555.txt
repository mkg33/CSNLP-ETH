Because you can't just drop (update+draw) if  the device is too slow : if the time between two updates (dt) becomes too long, the physic engine might miss a collision.
A pinball might be the type of game where you want to have one timer driving update, and another driving the draw, so you can adjust the rate of each independently, to work on a wide range of devices.
First if you make a pinball game, you'll most likely need more bounding-CIRCLE-collision-detection than the bounding BOX one :-)
If you want to create a good pinball, the way to go is either to use a 3D collision detection, or self-tailored system with every collidable object having a method with distance and velocities parameters, returning changed velocities.
Given the complexity of the physic involved in a full fledged pinball, i would suggest to look on an existing 2D physic engine.
Box2D has quite a reputation in javascript, there might be others but i didn't encounter any good (and free) one.
Rq1 : You certainly use (as i do) the classical split in your game between update and draw.
And you use a timer (setInterval/setTimeout) and/or RequestAnimationFrame to call update, then draw, in a regular fashion.
Pinballs have very rich sets of physics, not only holes or walls, but also reacting elements (hitting back) or uneven surface where the ball slows down and then gets it's speed back.