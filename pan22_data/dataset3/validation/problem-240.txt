If you ever set up an HTTP server, you'll likely understand that part of that configuration is specifying what to do with the requested resources.
Sure, there's some "standards" like # in a URL is something that the web client will recognize, and will not send that to the server.
e.g., you could say that everything sent to / will load files from the local hard drive's /srv/httpdocs/ area, except for /cgi-bin/ which will run a program located in /cgi-bin/, and anything under /scripts/ and ending with .pl will be run by the PERL interpreter.
http://paypal.com/gibberish%40PhishingSite.example.com/gibberish would convert the %40 into ASCII 64 which is the @, causing the username of paypal.com/gibberish to be used to log into PhishingSite.example.com which would simply accept the login, and ask people for their PayPal password.
MS KB 8344389, out of security concerns (including a notable amount of abuse that has occurred, e.g.
for splitting up parameters within the list of parameters.
The HTTP 1.1 client tends to split the URL into 3 parts:
Instead, the web client will treat the text after the # as anchor text to jump to.
The specific details vary based on the web server's configuration, so there isn't a universal standard that will tell the web client whether it can be guaranteed to receive a copy of a static page, or the output of a program that gets run.
starting a list of parameters, and using the & (or many a semi-colon?)
Some older URLs allowed for something like ftp://username@password:example.com/somedir/file although newer web browsers have tended to remove such support, e.g.
However, that is simply common behavior exhibited by many web servers.
For Unix-based servers, this is often handled by one or more text files that are often called "configuration" files.
People would see paypal.com at the start of the URL and trust it.
Details on how to specify this will vary based on what web server software you use.
With so much available documentation, website administrators usually don't need to struggle too terribly much to find relevant details for the software packages they want to use.)
So, if you look for documentation about a web server like Apache, you're likely to be able to find information about setting up Drupal.
All the web client can expect is that if the web client asks for a resource, the web server will respond to it.
There's no part of HTTP that forces web servers to honor that.
Really, the web server can handle that however the web server wants to, and the web client isn't likely to require any special support for that.
On the other hand, if you look up information for something like Drupal, you'll likely find a section of documentation about how to configure Apache to use Drupal.
(There tends to be plenty of tutorials for popular web servers and CGI packages, so if a website administrator doesn't know how to do this, that person generally starts reading examples/documentation/tutorials.