better organize them, and avoid repetition (but without making that global!
Bloom-filter is a data structure to which we can insert elements, and check if it already contains a given element.
When adding an element, we compute its mapped value for all of the n hash functions, and set the corresponding bits to one, in the bit vector.
(If, on the other hand, it returns false, then the element was definitely not inserted previously.)
The peculiarity is, that if a contains query returns true, then it might still be possible, that in fact, this element was not inserted to the filter.
The quality of the hash-functions used for testing is out of scope of this review.
While any remark/suggestion is always welcome, I'm mostly interested in the following aspects:
(I know there are much better ones, but for now I focused on the data-structure itself.)
Similarly, when querying if an element was added, we compute the value for all the hash functions and return true, if all the corresponding bits are true, and false otherwise (i.e., if the corresponding bit for at least one function is zero).
The implementation consists of a bit-vector of length n (originally all bits are 0), and of k hash functions, which map any input value into the range of ([0...n), i.e.