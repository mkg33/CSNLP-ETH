When it comes to C++, I have tried and used the googletest framework, http://code.google.com/p/googletest/.
Most of my colleagues would be happy with a unit test framework that supports auto registering test (in a declarative manner ) and has some sort of a CHECK_EQUALS(a,b) macro.
Back when I was working in C++ (disclaimer: this was about 2005), I used a slightly modified version of TUT (Template Unit Test Framework).
I'll second the TUT (Template Unit Test) framework; it's super lightweight and extremely flexible, not to mention really easy to setup and use out of the box (a single header include, a little bit of main/setup code, and 24 lines of test code later you have a unit test).
For personal projects, i use the Boost unit test library (on Desktop platform).
With Java, there are so many good libraries... Not the case of C++.
(The ability to do this sort of thing means that it can be made to fit into your TDD/CI process, rather than forcing you to fit into its.)
It's simple to set up, easy to use and works great.
Here is one very simple modification I made, that makes it even eaiser/cleaner to write tests:
Here is an example test (from the command-stack from my editor):
For C++ users, there is a chain tool from Kitware that is very interesting:
Google test's api is a bit more modern than Boost.Test, but Boost Test has done an amazing job of adding new features and ditching the crufty CppUnit paradigm.
It has all of the best features of the recent unit test frameworks, while keeping it all in a minimal, stream lined interface.
(In the above code, cs and od are per-module fixtures, and TestCommand is a mock object.)
In particular, its support for test suites and fixtures is a bit awkward.
I liked it because it was so lightweight, which made it easy to modify, and meant there was very little "glue" required when writing tests.
The other change I made was to its output format, so that test failures would appear correctly in Visual Studios's error list (when run as part of a build), clickable to go to the file and line of the failed test.
I like to use the advanced features, but if you're a minimalist you'll never see the difference between the three.
It's quite well done but you can tell that it's not as modern as either Boost.Test or Google Test.
I've combined it with binfmtc (run C++ programs as scripts) for rapid prototyping/TDD/learning templates to great success, including embedded software development.
I'm not a professional game developer, but I am a professional embedded developer.
Due to it being able to output to XML, it also dovetailed in nicely with Jenkins (CI) and Sonar on successive projects of mine.