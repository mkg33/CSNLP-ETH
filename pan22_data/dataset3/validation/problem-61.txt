But the interfaces still need information about which network they're connected to.
10.0.0.0/28); otherwise the packet is sent over a router.
Such a configuration isn't uncommon for servers, the hardware you rent may have a single network interface card, but you will have several IP addresses configured.
I have a computer with three interfaces: eth0 (wired Ethernet), wlan0 (wifi), and vboxnet0 (virtualbox).
So if a device is connected to multiple networks, it needs an address on each of those networks so it can be reached by devices on that network.
In this case a computer may have the same IP address in both networks.
By assigning an IP and network mask to each interface we put this information in one place, simplifying the design.
There's no need for extra code to keep the list of IPs consistent with the list of networks that interfaces are connected to.
The device could just have a list of all the IPs that it owns in a single table.
Another case is VLANs, you might have actually, connected to a single network card, several different virtual LANs, with different IP addresses.
That said, it isn't really necessary for the addresses to be assigned specifically to particular network interfaces.
But if the eth0 interface has 192.168.1.3, wlan0 has 10.1.2.3, and vboxnet0 has 172.0.0.1, then the default routing table will probably say "send it out eth0".
Can't just send them Everywhere, such behavior would flood all the networks in short order.
It might be enough to have one IP in the standard case, but as highlighted by other answers, there are many cases where it's not.
An IP address is split up into two components, the network number and the host number, based on an assigned prefix length (which was originally expressed as a network mask, and this is still often how it's implemented internally in network stacks).
And you could even for some reasons have an interface with multiple IPs, for instance because you want to run several web servers on TCP port 80.
If they're in the same network, they send directly; otherwise, they send to a router whose job is to get the message closer to the destination.
We could have the case that a computer is connected to two private networks which cannot exchange data between each other.
(This can obviously get far more complicated with more complex routing rules).
And conversely, I may wish to run a service only on the interface that's open to the private network - so when a request comes in on a different interface, it's not handled at all.
Let's say I have just one address, 10.1.2.3, and wish to send a whole lot of packets to 192.168.1.2, reachable on one of those networks - where do I send them to?
Senders determine whether the receiver is on the same or a different network by comparing their own network number with the receiver's address.
However, normally an IP packet is sent "directly" to the destination when the IP address "matches" a certain network mask (e.g.
In the case of IPv6 (using "link-local" addresses) a computer can have the same (link-local) IP address in two different networks - and therefore two network cards can have the same IP address!
One mentions virtualbox, which is the case of virtual machines: you may be running on a single physical device several virtual ones.
In the case of IPv4 most OSs won't support this because the OSs use the network masks of the two networks to distinguish between them.
For routing to work properly, all the devices connected to a particular network must have addresses with the same network number.
It is nearly impossible to choose an IP address and two network masks in a way that one IP address matches both network masks but a lot of IP addresses only match one network mask.
One of the interfaces is connected to an internal network, one is connected to the internet, and the last one is connected to a network of virtual computers.
Other answers have already mentioned the case of a router.
The networks need to have different network masks...