In other words, these file download websites will never give you a leech-able direct link.
Server handles the file requests, using some WWW Rewrite (for apache servers, for example), so for example, you could be going to a page www.example.com/13-this-site-has-nice-page-name.html, but in reality you could be accessing some php file, with a parameter, such as: www.example.com/site_handler.php?UID=13
For a website with this level of competence, it is unlikely there will be leaked direct links.
So its not the ebst choice if you want to always know where a redirect is going, unless you're prepared to have to go through a few extra steps every time you visit a new website.
If you're using Firefox, you can use an addon called RequestPolicy which, among other things, will pause and ask you for permission whenever you are redirected onto a different domain.
To check where a link redirects you to you can use http://longurl.org/.
even if you access a pdf file, there might be a redirect in the server side itself.
This is pretty much the "true" URL as for those well-protected websites, you have to submit the complete URL for the server to authenticate your request.
It won't work if you want to find a redirect that doesn't go to a different domain, but I'm sure there's a different Firefox Addon for that which I don't know of =)
In this case, the script you're accessing to might be sent with one header (like pdf file), but in all actuality it's a php file.
Note that it will break a lot of sites that use a CDN (Content Distribution Network) since by default it blocks all cross-domain images, scripts, css, and redirects.
You may be directed to another URL afterwards, but it will normally be a one-time one.
In this particular URL, the parameters, which are protected by a digital signature, clearly list time and IP restrictions of the downloader.
in conclusion: you can never know how the server & the scripts are configured, so you can never know the real, actual adress, even if it seems like you know.
I'm not really sure, but if you are using CUrl, can you not just obtain the URL contents (get_file_contents(url) in PHP) and then check the MIME type?
It's never possible to figure out the actual link.
For file downloads with handlers, it might be a tad more trickier, as you can go to a page which is just a download handler, for example: www.example.com?file_downloader.php?param1=7683&param2=jld8ijn, etc...