It's not possible with Info-Zip which is the most common OSS implementation.
BusyBox's unzip can take stdin and extract all the files.
Info-Zip, as you can imagine, doesn't treat this as a valid argument.
The purpose is to version control MySQL Workbench files, where the file could be the xml file named as the workbench file, or the complete workbench file.
Here is my solution (thanks mostly to Jason R. Coombs solution)
If a change of format is viable to you then consider using tar(1) instead.
It rolls up the jobs of both tar and gzip.bzip2 into one.
As for reading from stdin, the unzip man page has this sentence:
I actually needed something a little more complex - extract a specific file if it exists.
I like to use curl because it is installed by default (the -L is needed for redirects which often occur):
Zip is not just a compression format, but also a container format.
Additionally you can often tell whether applications expect streamed input/output by specifying "-" for a filename.
I saved this as a file named "effpoptp" (not a simple name) in the "/bin" folder on my machine so testing it is like so:
Having said that, if your zip has a single file, you can use unzip -p to extract the files to stdout.
It is quite happy with streamed input/output and, in fact, expects it by default.
More importantly though, it's not recommended due to the constructs of ZIP archives.
However, bsdtar is not installed by default, and I could not get funzip to work.
The difficulty being, the input file stream may not be a zip file, and in which case, I needed it to continue through the pipe.
If you have more than one file, there's no way for you to tell where they start and stop.