Using scripts (e.g., data) to describe the behavioral effects of your items is a good idea in general, although it might be overkill depending on the size of your game and data set.
Part of an item's stats can include a reference to the behavior of the item when it is consumed or used.
And whether or not you already have a scripting mechanism built.
This can be represented in the item's structure as a delegate/function pointer/closure/et cetera based on language.
You can naturally have more (or fewer) parameters as needed.
onUseEffect is a (possibly-null) reference to a function that takes an Item and a Character, which at runtime will be the item being used and the character using the item, respectively.
So now, when using an item you look up it's Item object as you do now to get the stats of the item.
And if that Item has a non-null onUseEffect, you call that function:
You'd bind these actions when you create each item in the database:
It's also a useful building block towards allowing your item's behavior to be defined in scripts (the onUseEffect delegate simply becomes a call to the item's script), as you proposed in your question.
All of this allows you to define your item behavior in code without having to subclass Item for each new type or behavior.