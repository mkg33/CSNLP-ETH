AFAIK, it doesn't affect binaries verified via Shim, but it can affect Shim itself or binaries launched without the help of Shim.
The result should be a message reading Signature verification OK or Signature verification failed.
Note that some UEFIs fail to launch even properly-signed binaries.
If you've installed your own Machine Owner Key (MOK) using MokManager, you should have the file in .cer/.der form.
I believe this is a bug in the affected UEFIs, but I've not investigated it in detail.
First, be aware that there are at least three forms that Secure Boot public keys may take:
If you've got a key in .der or .cer form, you can convert it:
If you want to test whether the binary will work when booted with another key (such as the keys used to sign Ubuntu's or Fedora's version of GRUB), you'll have to obtain it.
If you've taken full control of Secure Boot on your system, you should also already have the keys you created.
For convenience, I've collected several with rEFInd; you can download them piecemeal here.
To verify a binary, you must have a key in .crt form.
This appears to be random; Binary A will launch OK, whereas Binary B, signed with the same key, fails.
Yes, but you must have your Secure Boot keys in hand.
Then, you can check that the binary is properly signed: