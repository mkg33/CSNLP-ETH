I don't use help files, and I'd tend to believe most end-users don't.
I very rarely read help files, but expect icons to be standard, and that any toolbar option has a tooltip to explain it's purpose.
With that said, if you find there is a feature in an application that people are having trouble with, rather than documenting how to do something, it's usually better to reconsider how that feature is implemented, and make it more user-obvious.
For complex applications offering many options, help is mandatory.
If you can't find out how to do something, most people will turn to Google before a help file.
The UI should be pretty easy to understand without a manual.
The answer depends rather on the application and its development.
It's impossible, for example, to use Visual Studio without referring to its help.
So the answer depends on you: An application whose screens are not self explanatory and doesn't have help is rather useless.
Tool-tips, less clicks to do things, more obvious names in menu bars, and other various concepts in User Experience Design should aim to make help files unnecessary.